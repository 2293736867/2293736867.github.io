<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://2293736867.github.io</id>
    <title>氷泠&apos;s blog</title>
    <updated>2021-06-16T15:27:16.269Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://2293736867.github.io"/>
    <link rel="self" href="https://2293736867.github.io/atom.xml"/>
    <subtitle>几百遍，重复了几百遍
重复的情绪重复的熬过想你的夜</subtitle>
    <logo>https://2293736867.github.io/images/avatar.png</logo>
    <icon>https://2293736867.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 氷泠&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[每日分享 第366期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-366-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-366-qi/">
        </link>
        <updated>2021-06-15T22:03:55.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>终于中了500万，兑奖的时候，笑醒了。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>波面澄霞，兰艇采香去。<br>
——高观国《祝英台近·荷花》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>每个人的心里，都有一个忘不记，却无法拥抱珍惜的人。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1623794775074.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>这是笔者做过的所有题中，能得到的最短的答案，没有之一：</p>
<pre><code class="language-java">public class Solution {
    public boolean stoneGame(int[] piles) {
        return true;
    }
}
</code></pre>
<p>当然这是经过数学分析的出来的。</p>
<p>可以将所有的石头分为两组，偶数组（第一组，下标为偶数）和奇数组（第二组，下标为奇数），分为两组以后，可以计算出每一组石子的数量，知道哪一组的石子数量更多，先手的人只需要取走数量更多的石子即可，因此先手的人总是可以赢得比赛。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第365期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-365-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-365-qi/">
        </link>
        <updated>2021-06-14T21:30:21.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>世上没有钱解决不了的事情，如果有，那就是你的钱不够。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>小园几许，收尽春光。<br>
——秦观《行香子·树绕村庄》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>人的痛苦会把自己折磨到多深呢？</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1623706244428.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>其实就是找到数组的最大值，直接上<code>O(n)</code>的算法，因为数据量本来就不大，直接0ms了：</p>
<pre><code class="language-java">public class Solution{
    public int peakIndexInMountainArray(int[] arr) {
        int max = arr[0];
        int index = 0;
        int n = arr.length;
        for(int i=1;i&lt;n;++i){
            if(arr[i] &gt; max){
                max = arr[i];
                index = i;
            }else{
                break;
            }
        }
        return index;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1623706291752.png" alt="" loading="lazy"></figure>
<p>（<s>并不是在凌晨5点做的，只是切了Windows没有同步时间</s>）</p>
<p>不扯了不扯了，来个正经的二分：</p>
<pre><code class="language-java">public class Solution {
    public int peakIndexInMountainArray(int[] arr) {
        int l = 0;
        int r = arr.length - 1;
        while (l &lt; r) {
            int m = (l + r) &gt;&gt; 1;
            if (arr[m] &gt; arr[l]) {
                l = m;
            } else {
                r = m;
            }
        }
        while (arr[l] &lt; arr[l-1]) {
            r = l;
            l = 0;
            while (l &lt; r) {
                int m = (l + r) &gt;&gt; 1;
                if (arr[m] &gt; arr[l]) {
                    l = m;
                } else {
                    r = m;
                }
            }
        }
        return l;
    }
}
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://2293736867.github.io/post-images/1623732782692.png" alt="" loading="lazy"></figure>
<p>要注意的事一次二分之后需要使用循环去继续二分，这样才能找到正确的答案，因为答案有可能是偏左边起点的，这样一次二分之后有可能只是找到部分最大值，比如：</p>
<pre><code class="language-bash">24,69,100,99,79,78,67,36,26,19
</code></pre>
<p>一次二分之后只能返回<code>l=4</code>，也是<code>79</code>的位置，此时需要继续对该位置进行二分：</p>
<ul>
<li><code>r = 4</code></li>
<li><code>l = 0</code></li>
</ul>
<p>直到<code>arr[l] &gt; arr[l-1]</code>为止。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第364期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-364-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-364-qi/">
        </link>
        <updated>2021-06-14T00:38:54.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>真希望有一天我的钱包，可以和我的脸皮一样厚。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>轻汗微微透碧纨，明朝端午浴芳兰。<br>
——苏轼《浣溪沙·端午》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>我和你，可以做朋友吗？</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1623631364220.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>其实昨天做每日一题的时候做过了这题，也是一样的二分：</p>
<pre><code class="language-java">public class Solution extends GuessGame{
    public int guessNumber(int n) {
        long left = 1;
        long right = n;
        while(left &lt; right){
            int m = (int)((left+right) &gt;&gt; 1);
            int result = guess(m);
            if(result == 0){
                return m;
            }
            if(result == -1){
                right = m;
            }else{
                left = m+1;
            }
        }
        return (int)left;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1623631527278.png" alt="" loading="lazy"></figure>
<h1 id="84亿密码">84亿密码</h1>
<p>最近公开了一个叫<code>RockYou2021</code>的密码集合，包含了84亿个密码，长度6-20之间，去掉了所有的非<code>ASCII</code>字符，在<code>Github</code>上就可以下载：</p>
<figure data-type="image" tabindex="3"><img src="https://2293736867.github.io/post-images/1623631658062.png" alt="" loading="lazy"></figure>
<h1 id="端午快乐">端午快乐</h1>
<p>祝各位读者端午快乐啊！</p>
<p><s>呜呜呜今年没有粽子吃了。。。</s></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第363期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-363-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-363-qi/">
        </link>
        <updated>2021-06-13T05:00:46.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>失败不可怕，可怕的是，你还相信这句话。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>荷尽已无擎雨盖，菊残犹有傲霜枝。<br>
——苏轼《赠刘景文》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>就算一次也好，我想在这颗星球上尽情奔跑。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1623560483431.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>二分：</p>
<pre><code class="language-java">public class Solution extends VersionControl {
    public int firstBadVersion(int n) {
        long left = 1;
        long right = n;
        while(left &lt; right){
            int m = (int)((left+right) &gt;&gt; 1);
            if(isBadVersion(m)){
                right = m;
            }else{
                left = m+1;
            }
        }
        return (int)left;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1623560506031.png" alt="" loading="lazy"></figure>
<h1 id="关于数十天没有更新">关于数十天没有更新</h1>
<p>其实并不是没有更新，每天都有更，只是<code>Gridea</code>连续多天都是同步失败，测试了一下发现是连接的问题：</p>
<figure data-type="image" tabindex="3"><img src="https://2293736867.github.io/post-images/1623560597286.png" alt="" loading="lazy"></figure>
<p>检查了一下用户名与域名都没有问题，于是就重新生成了一下<code>Token</code>，还是不行。</p>
<p>然后排除了一下<code>DNS</code>的问题，把本机的<code>hosts</code>文件清空，重新更新<code>DNS</code>缓存，还是不行，<code>tracepath</code>检测了一下不套代理是跳不到<code>2293736867.github.io</code>的，但是<code>Gridea</code>又没有相关的代理设置。</p>
<p>然后去<code>issue</code>看了一下，其实可以手动去数据文件夹下的<code>output</code>目录手动<code>git push</code>，然后就这样做了，感觉还挺好，因为：</p>
<ul>
<li>可以避免<code>Gridea GUI</code>偶尔（准确来说是很大程度上会）同步失败的问题</li>
<li>可以避免<code>Gridea GUI</code>同步（非常非常）慢的问题</li>
</ul>
<h1 id="关于疫情">关于疫情</h1>
<p>虽然明天就是端午节了，但是应该不回去了，因为疫情的问题，回去虽然携带48小时核酸证明，而且之前因为一些事情只打了第一针疫苗，第二针还没打。</p>
<p>最近广州和浙江又爆发了。</p>
<p>害。</p>
<p>这该死的疫情到底什么时候才能彻底结束。</p>
<p>距离2019年12月的爆发，已经1年半了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第362期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-362-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-362-qi/">
        </link>
        <updated>2021-06-12T04:14:25.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>别埋怨手机没怎么用就没电，你还是一样，没干啥就累了。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>等是有家归未得，杜鹃休向耳边啼。<br>
——佚名《杂诗》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>我们控制，我们收容，我们保护。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1623471435043.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>纯手打，自己推导的<code>dp</code>方程：</p>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1623471384828.png" alt="" loading="lazy"></figure>
<pre><code class="language-java">import java.util.*;

public class Solution {
    public String largestNumber(int[] cost, int target) {
        int [] costToNum = new int[5001];
        for (int i = 0; i &lt; cost.length; i++) {
            if(i+1 &gt; costToNum[cost[i]]) {
                costToNum[cost[i]] = i + 1;
            }
        }

        List&lt;Integer&gt; list = new ArrayList&lt;&gt;();
        cost = new int[5001];
        for (int i = 0; i &lt;= 5000; i++) {
            if(costToNum[i] != 0) {
                list.add(costToNum[i]);
                cost[costToNum[i]] = i;
            }
        }
        int [] nums = list.stream().sorted(Comparator.reverseOrder()).mapToInt(i-&gt;i).toArray();

        Node []dp = new Node[target+1];
        dp[0] = new Node(new StringBuilder(),0);
        for (int i = 1; i &lt;= target; i++) {
            dp[i] = new Node(new StringBuilder(),0);
            for (int j = 0; j &lt; nums.length; j++) {
                int index = i - cost[nums[j]];
                if(index &gt;= 0 &amp;&amp; dp[index].target + cost[nums[j]] == i){
                    StringBuilder temp = new StringBuilder(dp[index].builder);
                    temp.insert(0, nums[j]);
                    int len1 = temp.length();
                    int len2 = dp[i].builder.length();
                    if (len1 &gt; len2 || (len1 == len2 &amp;&amp; temp.compareTo(dp[i].builder) &gt; 0)) {
                        dp[i] = new Node(temp,i);
                    }
                }
            }
        }
        if(dp[target].builder.length() == 0){
            return &quot;0&quot;;
        }
        return dp[target].builder.toString();
    }

    private static class Node{
        StringBuilder builder;
        int target;
        public Node(StringBuilder builder,int target){
            this.builder = builder;
            this.target = target;
        }
    }
}
</code></pre>
<p>感觉不是特别难（<s>可能是因为经过前几天<code>dp</code>的洗脑</s>）。</p>
<p>说一下思路吧，要对数组进行预处理，相同价值的用更大的数去代替（比如取2的成本是3，取4的成本也是3，取8的成本还是3，那么就用最大的数8去代替），代码如下：</p>
<pre><code class="language-java">int [] costToNum = new int[5001];
for (int i = 0; i &lt; cost.length; i++) {
    if(i+1 &gt; costToNum[cost[i]]) {
        costToNum[cost[i]] = i + 1;
    }
}
</code></pre>
<p>比如原始的<code>cost[]</code>为<code>[4,3,2,5,6,7,2,5,5]</code>（样例1数据），那么<code>costToNum</code>为：</p>
<ul>
<li><code>costToNum[2] = 7</code>：表示在成本为2的数字中，最大可以取数字7</li>
<li><code>costToNum[3] = 2</code>：表示在成本为3的数字中，最大可以取数字2</li>
<li><code>costToNum[4] = 1</code>：表示在成本为4的数字中，最大可以取数字1</li>
<li><code>costToNum[5] = 9</code>：表示在成本为5的数字中，最大可以取数字9</li>
<li><code>costToNum[6] = 5</code>：表示在成本为6的数字中，最大可以取数字5</li>
<li><code>costToNum[7] = 6</code>：表示在成本为7的数字中，最大可以取数字6</li>
</ul>
<p>得到<code>costToNum[]</code>后，抽取出能取的数字，放进<code>nums[]</code>数组中，并对<code>nums[]</code>排序，同时重新开辟<code>cost[]</code>数组，记录每一个数字对应的成本。</p>
<p>比如把上面<code>costToNum[]</code>出现的所有数字（<code>7,2,1,9,5,6</code>）放进<code>nums[]</code>中，同时对<code>nums[]</code>排序（非升序），这样<code>nums[]</code>就是<code>9,7,6,5,2,1</code>，同时<code>cost[]</code>用于记录对应的成本：</p>
<ul>
<li><code>cost[9] = 5</code>：数字9的成本为5</li>
<li><code>cost[7] = 6</code>：数字7的成本为6</li>
<li><code>cost[6] = 7</code>：数字6的成本为7</li>
<li><code>cost[5] = 6</code>：数字5的成本为6</li>
<li><code>cost[2] = 3</code>：数字2的成本为3</li>
<li><code>cost[1] = 4</code>：数字1的成本为4</li>
</ul>
<p>然后就可以进行<code>dp</code>的处理了，首先定义<code>dp[i]</code>：</p>
<ul>
<li><code>dp[i]</code>表示当成本<strong>刚好</strong>为<code>i</code>的时候，能取到的最大字符串</li>
<li><code>dp[0] = &quot;&quot;</code>：<code>dp[0]</code>为空</li>
</ul>
<p>实际处理中，需要添加一个当前成本，也就是当字符串为<code>dp[i]</code>的时候，成本为<code>dp[i]</code>对应的成本（这里真心搞不懂为什么还需要一个变量去保存成本，因为明明成本就是<code>i</code>）。这里的处理是采用一个<code>Node</code>类：</p>
<pre><code class="language-java">private static class Node{
    StringBuilder builder;
    int target;
    public Node(StringBuilder builder,int target){
        this.builder = builder;
        this.target = target;
    }
}
</code></pre>
<p>转移方程：</p>
<ul>
<li><code>i</code>取值<code>[1,target]</code></li>
<li><code>j</code>取值<code>[0,nums.length)</code></li>
<li><code>index = i - cost[nums[j]]</code></li>
<li>满足<code>index &gt;= 0</code>且<code>dp[index].target + cost[nums[j]] == i</code>的情况下</li>
<li><code>dp[i].builder = max(dp[i].builder,dp[index].builder.append(0,nums[j]))</code></li>
</ul>
<p>代码如下：</p>
<pre><code class="language-java">Node []dp = new Node[target+1];
dp[0] = new Node(new StringBuilder(),0);
for (int i = 1; i &lt;= target; i++) {
    dp[i] = new Node(new StringBuilder(),0);
    for (int j = 0; j &lt; nums.length; j++) {
        int index = i - cost[nums[j]];
        if(index &gt;= 0 &amp;&amp; dp[index].target + cost[nums[j]] == i){
            StringBuilder temp = new StringBuilder(dp[index].builder);
            temp.insert(0, nums[j]);
            int len1 = temp.length();
            int len2 = dp[i].builder.length();
            if (len1 &gt; len2 || (len1 == len2 &amp;&amp; temp.compareTo(dp[i].builder) &gt; 0)) {
                dp[i] = new Node(temp,i);
            }
        }
    }
}
</code></pre>
<p>最终答案就是<code>dp[target].builder</code>，如果为空，返回<code>&quot;0&quot;</code>：</p>
<pre><code class="language-java">if(dp[target].builder.length() == 0){
    return &quot;0&quot;;
}
return dp[target].builder.toString();
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第361期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-361-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-361-qi/">
        </link>
        <updated>2021-06-09T16:47:13.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>困难像弹簧，你弱它就强，你强它更强。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>荷花送香气，竹露滴清响。<br>
——孟浩然《夏日南亭怀辛大》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>其实从头到尾，被挫骨扬灰，灰飞烟灭的，只有温情一人。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1623257950495.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>首先尝试了一下去做<code>零钱兑换I</code>，做是做出来了，用的是记忆化搜索，然后再做这题，发现还是不会。</p>
<p><s>太菜了太菜了。</s></p>
<pre><code class="language-java">public class Solution {
    public int change(int amount, int[] coins) {
        int []dp = new int[amount+1];
        dp[0] = 1;
        for(int coin:coins){
            for (int i=coin;i&lt;=amount;++i){
                dp[i] += dp[i-coin];
            }
        }
        return dp[amount];
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1623330831531.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第360期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-360-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-360-qi/">
        </link>
        <updated>2021-06-08T16:44:18.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>生命中必然要放弃某些人，不是你不在乎，是他们不在乎。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>从今若许闲乘月，拄杖无时夜叩门。<br>
——陆游《游山西村》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>生气归生气，又不是不爱你......</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1623257439961.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>自己做了一个暴力的，过了35个样例，剩下的超时，题解表示是一个变种的背包，三维<code>dp</code>（其实还有更详细的解答，不小心覆盖了昨天的每日分享，所以这里就补充一个简单的。。。）</p>
<pre><code class="language-java">public class Solution {
    private static final int MOD = 1000000007;

    public int profitableSchemes(int maxGroup, int minProfit, int[] group, int[] profit) {
        int len = group.length;
        int[][][] dp = new int[len + 1][maxGroup + 1][minProfit + 1];
        dp[0][0][0] = 1;

        for (int i = 1; i &lt;= len; i++) {
            int currentGroup = group[i - 1];
            int currentProfit = profit[i - 1];
            for (int j = 0; j &lt;= maxGroup; j++) {
                for (int k = 0; k &lt;= minProfit; ++k) {
                    dp[i][j][k] = dp[i - 1][j][k];
                    if (j &gt;= currentGroup) {
                        dp[i][j][k] = (dp[i][j][k] + dp[i - 1][j - currentGroup][Math.max(0, k - currentProfit)]) % MOD;
                    }
                }
            }
        }

        int sum = 0;
        for (int j = 0; j &lt;= maxGroup; j++) {
            sum = (sum + dp[len][j][minProfit]) % MOD;
        }
        return sum;
    }

}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第359期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-359-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-359-qi/">
        </link>
        <updated>2021-06-08T13:04:26.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>研究证明常年抽烟喝酒的人，患老年痴呆的概率较低，因为早死的概率较高。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>西风千里，送我今夜岳阳楼。<br>
——张孝祥《水调歌头·过岳阳楼作》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>在不同的遭遇里我发现你的瞬间，有种不可言说的温柔直觉。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1623157666637.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>先上一个自己做出来的：</p>
<pre><code class="language-java">import java.util.*;

public class Solution {
    public int lastStoneWeightII(int[] stones) {
        int n = stones.length;
        if (n == 1) {
            return stones[0];
        }

        Set&lt;Integer&gt; set = new HashSet&lt;&gt;();
        int min = Integer.MAX_VALUE;
        for (int i = 0; i &lt; n; ++i) {
            int stone = stones[i];
            if (set.isEmpty()) {
                set.add(stone);
                set.add(-stone);
            } else {
                Set&lt;Integer&gt; temp = new HashSet&lt;&gt;();
                if (i == n - 1) {
                    for (Integer num : set) {
                        int v = num - stone;
                        if (v &gt;= 0 &amp;&amp; min &gt; v) {
                            min = v;
                        }
                        v = num + stone;
                        if (v &gt;= 0 &amp;&amp; min &gt; v) {
                            min = v;
                        }
                    }
                } else {
                    for (Integer num : set) {
                        temp.add(num + stone);
                        temp.add(num - stone);
                    }
                }
                set = temp;
            }
        }
        return min;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1623157833297.png" alt="" loading="lazy"></figure>
<p>一开始是利用一个<code>HashSet</code>与一个<code>Node</code>类去标识长度和总和的，后面直接使用集合优化，然后再想更进一步使用数组优化时间就变长了。</p>
<p>核心思想是把石头看做一系列的数，然后每个数前面可以添加<code>+</code>或<code>-</code>，问题就转换为计算所有的数的和的最小值。</p>
<p>看了题解发现其实可以转化为01背包问题，不是特别懂就不扯了，放上一个朴素的二维<code>dp</code>：</p>
<pre><code class="language-java">import java.util.*;

public class Solution {
    public int lastStoneWeightII(int[] stones) {
        int n = stones.length;
        int sum = 0;
        for(int num:stones){
            sum += num;
        }
        int t = sum &gt;&gt; 1;
        int [][] f = new int [n+1][t+1];
        for (int i = 1; i &lt;= n; i++) {
            int stone = stones[i-1];
            for (int j = 0; j &lt;= t; j++) {
                f[i][j] = f[i-1][j] ;
                if(j &gt;= stone){
                    f[i][j] = Math.max(f[i][j],f[i-1][j-stone] + stone);
                }
            }
        }
        return Math.abs(sum - f[n][t] - f[n][t]);
    }
}
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://2293736867.github.io/post-images/1623159140331.png" alt="" loading="lazy"></figure>
<p>然后又试了一下一维的（果然要比二维快）：</p>
<pre><code class="language-java">class Solution {
    public int lastStoneWeightII(int[] ss) {
        int n = ss.length;
        int sum = 0;
        for (int i : ss) sum += i;
        int t = sum / 2;
        int[] f = new int[t + 1];
        for (int i = 1; i &lt;= n; i++) {
            int x = ss[i - 1];
            for (int j = t; j &gt;= x; j--) {
                f[j] = Math.max(f[j], f[j - x] + x);
            }
        }
        return Math.abs(sum - f[t] - f[t]);
    }
}
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://2293736867.github.io/post-images/1623159222708.png" alt="" loading="lazy"></figure>
<p>但是看一下第一名的魔鬼0ms：</p>
<pre><code class="language-java">class Solution {
    public int lastStoneWeightII(int[] stones) {
        int sum=0;
        for(int st:stones)
            sum+=st;
        for(int i=(sum&gt;&gt;1);;i--){
            if(helper(stones,0,0,i))
                return sum-2*i;
        }
    }
    
    boolean helper(int[] nums,int idx,int sum,int target){
        if(sum==target)
            return true;
        if(sum&gt;target)
            return false;
        if(idx==nums.length)
            return false;
        return helper(nums,idx+1,sum+nums[idx],target)
            ||helper(nums,idx+1,sum,target);
    }
}
</code></pre>
<p>这。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第358期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-358-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-358-qi/">
        </link>
        <updated>2021-06-07T02:30:26.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>如果你有什么事，一定要告诉我，反正我也解决不了。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>白鸟朱荷引画桡，垂杨影里见红桥，欲寻往事已魂消。<br>
——王士祯《浣溪沙·红桥》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>这个社会一直在淘汰有学历的人，但是不会淘汰有学习力的人。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1623033554364.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>直接暴力回溯：</p>
<pre><code class="language-java">public class Solution {
    private int ct;
    public int findTargetSumWays(int[] nums, int target) {
        int len = nums.length;
        dfs(nums,0,len,target,0);
        return ct;
    }

    private void dfs(int []nums,int index,int len,int target,int sum){
        if(index &lt; len) {
            dfs(nums,index+1,len,target,sum+nums[index]);
            dfs(nums,index+1,len,target,sum-nums[index]);
        }else if(sum == target){
            ++ct;
        }
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1623033592467.png" alt="" loading="lazy"></figure>
<p><s>时间效率非常的好。</s></p>
<p>使用动态规划优化一下（来自官方题解，本来是没想到的）：</p>
<pre><code class="language-java">public class Solution {
    public int findTargetSumWays(int[] nums, int target) {
        int sum = 0;
        for (int num : nums) {
            sum += num;
        }
        int diff = sum - target;
        if (diff &lt; 0 || (diff &amp; 1) == 1) {
            return 0;
        }
        int n = nums.length;
        int neg = diff &gt;&gt; 1;
        int[][] dp = new int[n + 1][neg + 1];
        dp[0][0] = 1;

        for (int i = 1; i &lt;= n; i++) {
            int num = nums[i - 1];
            for (int j = 0; j &lt;= neg; j++) {
                dp[i][j] = dp[i - 1][j];
                if (j &gt;= num) {
                    dp[i][j] += dp[i - 1][j - num];
                }
            }
        }

        return dp[n][neg];
    }
}
</code></pre>
<p>关键是计算<code>neg</code>，<code>neg = (sum-target)/2</code>：</p>
<ul>
<li>因为<code>nums</code>中所有数都是非负整数</li>
<li>因此<code>neg</code>也是非负整数</li>
<li>所以<code>sum-target</code>必须能整除2，也就是非负偶数</li>
</ul>
<p>用<code>diff</code>存储了<code>sum-target</code>的值，如果是负数或者正奇数直接返回<code>0</code>，否则进行动态规划的计算。</p>
<p><code>dp[i][j]</code>表示前<code>i</code>个数中选取元素，使得这些元素之和为<code>j</code>的方案数目，最终答案就是<code>dp[n][neg]</code>。</p>
<p>对于每个数组中的元素<code>num</code>（<code>nums[i-1]</code>，下标从1开始），在<code>[0,neg]</code>中遍历<code>j</code>，转移方程如下：</p>
<ul>
<li><code>j &lt; num</code>：<code>dp[i][j] = dp[i-1][j]</code></li>
<li><code>j &gt;= num</code>：<code>dp[i][j] = dp[i-1][j] + dp[i-1][j-num]</code></li>
</ul>
<p>优化版（来自某位大佬），一维<code>dp</code>，反向计算，从<code>[nums[i],bagSize]</code>反向遍历<code>j</code>：</p>
<pre><code class="language-java">public class Solution {
    public int findTargetSumWays(int[] nums, int target) {
        int sum = 0;
        for (int num : nums) {
            sum += num;
        }
        if (sum &lt; target || ((sum + target) &amp; 1) == 1) {
            return 0;
        }
        int bagSize = (sum+target) &gt;&gt; 1;
        int n = nums.length;
        int[] dp = new int[bagSize+1];
        dp[0] = 1;

        for (int i = 0; i &lt; n; i++) {
            int num = nums[i];
            for (int j = bagSize; j &gt;= num; --j) {
                dp[j] += dp[j-num];
            }
        }

        return dp[bagSize];
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第357期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-357-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-357-qi/">
        </link>
        <updated>2021-06-06T14:21:38.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>纵然人生坎坷，但我从不会向命运屈服！我通常都是直接屈膝Orz。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>山头明月来，本在天高处。<br>
——辛弃疾《生查子·独游西岩》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>讨厌酒的味道，却爱上醉的感觉。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1622989628335.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>试过贪心，试过<code>dp</code>，也试过<code>dp</code>加上堆，就是死活不能<code>AC</code>：</p>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1622990009270.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="https://2293736867.github.io/post-images/1622990012069.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="4"><img src="https://2293736867.github.io/post-images/1622990015020.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="5"><img src="https://2293736867.github.io/post-images/1622990018276.png" alt="" loading="lazy"></figure>
<p>看了题解才知道是01背包~~（回去得好好看一下01背包）~~，下面给出一个题解优化过的版本：</p>
<pre><code class="language-java">public class Solution {
    public int findMaxForm(String[] strs, int m, int n) {
        int total0 = 0;
        int total1 = 0;
        int len = strs.length;
        int []num0 = new int[len];
        int []num1 = new int[len];
        for (int i = 0; i &lt; len; i++) {
            for (char c:strs[i].toCharArray()){
                if(c=='0'){
                    ++num0[i];
                }else{
                    ++num1[i];
                }
            }
            total0 += num0[i];
            total1 += num1[i];
        }

        if(total0 &lt; m &amp;&amp; total1 &lt; n){
            return len;
        }
        int [][] dp = new int[m+1][n+1];
        dp[0][0] = 1;
        for (int i = 0; i &lt; len; i++) {
            int n0 = num0[i];
            int n1 = num1[i];
            for (int j = m; j &gt;= n0; --j) {
                for (int k = n; k &gt;= n1; --k) {
                    int temp = dp[j-n0][k-n1];
                    if(temp != 0){
                        if(j == n0 &amp;&amp; k == n1){
                            dp[j][k] = Math.max(dp[j][k],temp);
                        }else{
                            dp[j][k] = Math.max(dp[j][k],temp+1);
                        }
                    }
                }
            }
        }
        int max = 0;
        for (int j = m; j &gt; 0; --j) {
            for (int k = n; k &gt; 0; --k) {
                if(dp[j][k] &gt; max) {
                    max = dp[j][k];
                }
            }
        }
        return max;
    }
}
</code></pre>
<figure data-type="image" tabindex="6"><img src="https://2293736867.github.io/post-images/1622992117028.png" alt="" loading="lazy"></figure>
<h1 id="赛氪的算法比赛">赛氪的算法比赛</h1>
<p>今天和队友做了赛氪的一个比赛，</p>
<p>真的菜的一比。</p>
<p>才4题。</p>
<p><s>完犊子。</s></p>
]]></content>
    </entry>
</feed>