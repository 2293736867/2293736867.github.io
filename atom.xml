<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://2293736867.github.io</id>
    <title>氷泠&apos;s blog</title>
    <updated>2021-01-27T03:56:53.090Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://2293736867.github.io"/>
    <link rel="self" href="https://2293736867.github.io/atom.xml"/>
    <subtitle>我配不上你，
纵然很努力。</subtitle>
    <logo>https://2293736867.github.io/images/avatar.png</logo>
    <icon>https://2293736867.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 氷泠&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[Android+Java Web+MySQL实现登录注册]]></title>
        <id>https://2293736867.github.io/post/androidjava-webmysql-shi-xian-deng-lu-zhu-ce/</id>
        <link href="https://2293736867.github.io/post/androidjava-webmysql-shi-xian-deng-lu-zhu-ce/">
        </link>
        <updated>2021-01-27T03:43:17.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#1-%E5%89%8D%E8%A8%80%E6%A6%82%E8%BF%B0">1 前言&amp;概述</a></li>
<li><a href="#2-%E7%8E%AF%E5%A2%83">2 环境</a></li>
<li><a href="#3-%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87">3 环境准备</a>
<ul>
<li><a href="#31-ide%E5%87%86%E5%A4%87">3.1 <code>IDE</code>准备</a></li>
<li><a href="#32-mysql">3.2 <code>MySQL</code></a>
<ul>
<li><a href="#321-%E5%AE%89%E8%A3%85%E6%A6%82%E8%BF%B0">3.2.1 安装概述</a></li>
<li><a href="#322-%E5%AE%89%E8%A3%85%E5%BC%80%E5%A7%8B">3.2.2 安装开始</a>
<ul>
<li><a href="#3221-%E4%B8%8B%E8%BD%BD%E5%B9%B6%E5%AE%89%E8%A3%85">3.2.2.1 下载并安装</a></li>
<li><a href="#3222-%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1%E5%B9%B6%E6%9F%A5%E7%9C%8B%E5%88%9D%E5%A7%8B%E5%8C%96%E5%AF%86%E7%A0%81">3.2.2.2 启动服务并查看初始化密码</a></li>
<li><a href="#3223-%E5%88%9B%E5%BB%BA%E5%A4%96%E9%83%A8%E8%AE%BF%E9%97%AE%E7%94%A8%E6%88%B7">3.2.2.3 创建外部访问用户</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#33-tomcat">3.3 <code>Tomcat</code></a>
<ul>
<li><a href="#331-%E6%9C%AC%E5%9C%B0tomcat">3.3.1 本地<code>Tomcat</code></a></li>
<li><a href="#332-%E6%9C%8D%E5%8A%A1%E5%99%A8tomcat">3.3.2 服务器<code>Tomcat</code></a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#4-%E5%BB%BA%E5%BA%93%E5%BB%BA%E8%A1%A8">4 建库建表</a>
<ul>
<li><a href="#41-%E7%94%A8%E6%88%B7%E8%A1%A8">4.1 用户表</a></li>
<li><a href="#42-%E5%AF%BC%E5%85%A5">4.2 导入</a></li>
</ul>
</li>
<li><a href="#5-%E5%90%8E%E7%AB%AF%E9%83%A8%E5%88%86">5 后端部分</a>
<ul>
<li><a href="#51-%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E5%AF%BC%E5%BA%93">5.1 创建项目+导库</a></li>
<li><a href="#52-%E7%BB%93%E6%9E%84">5.2 结构</a></li>
<li><a href="#53-dbutils">5.3 <code>DBUtils</code></a></li>
<li><a href="#54-user">5.4 <code>User</code></a></li>
<li><a href="#55-dao">5.5 <code>Dao</code></a></li>
<li><a href="#56-%E5%93%8D%E5%BA%94%E4%BD%93">5.6 响应体</a></li>
<li><a href="#57-servlet">5.7 <code>Servlet</code></a></li>
<li><a href="#58-%E8%BF%90%E8%A1%8C">5.8 运行</a></li>
</ul>
</li>
<li><a href="#6-android%E7%AB%AF">6 <code>Android</code>端</a>
<ul>
<li><a href="#61-%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE">6.1 新建项目</a></li>
<li><a href="#62-%E4%BE%9D%E8%B5%96%E6%9D%83%E9%99%90">6.2 依赖/权限</a></li>
<li><a href="#63-%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84">6.3 项目结构</a></li>
<li><a href="#64-responsebody">6.4 <code>ResponseBody</code></a></li>
<li><a href="#65-networksettings">6.5 <code>NetworkSettings</code></a></li>
<li><a href="#66-networkthread">6.6 <code>NetworkThread</code></a></li>
<li><a href="#67-mainactivity">6.7 <code>MainActivity</code></a></li>
<li><a href="#68-%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6">6.8 资源文件</a></li>
</ul>
</li>
<li><a href="#7-%E6%B5%8B%E8%AF%95">7 测试</a>
<ul>
<li><a href="#71-%E6%9C%AC%E5%9C%B0%E6%B5%8B%E8%AF%95">7.1 本地测试</a></li>
<li><a href="#72-%E9%83%A8%E7%BD%B2%E6%B5%8B%E8%AF%95">7.2 部署测试</a></li>
</ul>
</li>
<li><a href="#8-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9">8 注意事项</a></li>
<li><a href="#9-%E6%BA%90%E7%A0%81">9 源码</a></li>
</ul>
</p>
<h1 id="1-前言概述">1 前言&amp;概述</h1>
<p>这篇文章是基于<a href="https://www.bingling.site/post/android-tong-guo-web-yu-hou-tai-shu-ju-ku-jiao-hu/">此处文章</a>的更新，更新了一些技术栈，更加贴近实际需要，以及修复了若干的错误。</p>
<p>这是一个前端<code>Android</code>+后端<code>Java/Kotlin</code>通过<code>Servelt</code>进行后台数据库（<code>MySQL</code>）交互的详细步骤以及源码实现，技术栈：</p>
<ul>
<li><code>Android</code>基础</li>
<li>原生<code>JDBC</code>+原生<code>Servlet</code></li>
<li><code>Tomcat</code>+<code>MySQL</code>（<code>Docker</code>）</li>
</ul>
<p>当然现在的很多<code>Java</code>后端开发都使用了<code>Spring Boot</code>而不是原生的<code>Servlet</code>，所以使用<code>Spring Boot</code>实现的可以笔者的<a href="https://blog.csdn.net/qq_27525611/article/details/112996966">另一篇文章</a>。</p>
<p>尽管基于<code>Spring Boot</code>实现非常的简便，但是使用原生的<code>Servlet</code>更能理解底层的原理。另外本篇文章是偏基础向的教程，很多步骤都会比较详细而且附上了图，好了废话不说，正文开始。</p>
<h1 id="2-环境">2 环境</h1>
<ul>
<li><code>Android Studio 4.1.2</code></li>
<li><code>IntelliJ IDEA 2020.3</code></li>
<li><code>MySQL 8.0.23</code></li>
<li><code>Tomcat 10.0</code></li>
<li><code>Docker 20.10.1</code></li>
<li>服务器<code>CentOS 8.1.1911</code></li>
</ul>
<h1 id="3-环境准备">3 环境准备</h1>
<h2 id="31-ide准备">3.1 <code>IDE</code>准备</h2>
<p>官网安装<code>Android Studio</code>+<code>IDEA</code>，这部分就省略了。</p>
<h2 id="32-mysql">3.2 <code>MySQL</code></h2>
<h3 id="321-安装概述">3.2.1 安装概述</h3>
<p>这里的<code>MySQL</code>若无特殊说明指的是<code>MySQL Community</code>。</p>
<p>首先，在<code>Windows</code>下，<code>MySQL</code>提供了<code>exe</code>安装包：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20210117151541790.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p><code>macOS</code>下提供了<code>dmg</code>安装包：</p>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20210117151638129.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>可以<a href="https://dev.mysql.com/downloads/mysql/">戳这里</a>下载。</p>
<p><code>Linux</code>下一般来说<code>MySQL</code>安装有如下方式：</p>
<ul>
<li>软件包安装（<code>apt/apt-get</code>、<code>yum</code>、<code>dnf</code>、<code>pacman</code>等）</li>
<li>下载压缩包安装</li>
<li>源码编译安装</li>
<li><code>Docker</code>安装</li>
</ul>
<p>其中相对省事的安装方式为<code>Docker</code>安装以及软件包安装，其次是压缩包方式安装，特别不建议源码安装（当然如果喜欢挑战的话可以参考笔者的一篇编译安装<a href="https://blog.csdn.net/qq_27525611/article/details/104622673">8.0.19</a>以及编译安装<a href="https://blog.csdn.net/qq_27525611/article/details/105902643">8.0.20</a>）。</p>
<h3 id="322-安装开始">3.2.2 安装开始</h3>
<p>这里笔者本地测试选择的是使用<code>Docker</code>安装，步骤可以查看<a href="https://blog.csdn.net/qq_27525611/article/details/109140988">这里</a>。</p>
<p>另外对于服务器，也可以使用<code>Docker</code>安装，如果使用软件包安装的话，这里以笔者的<code>CentOS8</code>为例，其他系统的参考如下：</p>
<ul>
<li><a href="https://blog.csdn.net/LaySwift/article/details/81036746">Fedroa</a></li>
<li><a href="https://www.cnblogs.com/levia/p/11396512.html">RedHat</a></li>
<li><a href="https://blog.csdn.net/wm609972715/article/details/83759266">Ubuntu</a></li>
</ul>
<h4 id="3221-下载并安装">3.2.2.1 下载并安装</h4>
<p>添加仓库：</p>
<pre><code class="language-bash">sudo yum install https://repo.mysql.com/mysql80-community-release-el8-1.noarch.rpm
</code></pre>
<p>禁用默认<code>MySQL</code>模块（<code>CentOS8</code>中会包含一个默认的<code>MySQL</code>模块，不禁用的话没办法使用上面添加的仓库安装）：</p>
<pre><code class="language-bash">sudo yum module disable mysql
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20210117155447859.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>安装：</p>
<pre><code class="language-bash">sudo yum install mysql-community-server
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/2021011715552837.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h4 id="3222-启动服务并查看初始化密码">3.2.2.2 启动服务并查看初始化密码</h4>
<p>启动服务：</p>
<pre><code class="language-bash">systemctl start mysqld
</code></pre>
<p>查看临时密码：</p>
<pre><code class="language-bash">sudo grep 'temporary password' /var/log/mysqld.log
</code></pre>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/20210117155859461.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>输入临时密码登录：</p>
<pre><code class="language-bash">mysql -u root -p
</code></pre>
<p>修改密码：</p>
<pre><code class="language-bash">alter user 'root'@'localhost' identified by 'PASSWORD'
</code></pre>
<h4 id="3223-创建外部访问用户">3.2.2.3 创建外部访问用户</h4>
<p>不建议在<code>Java</code>中直接访问<code>root</code>用户，一般是新建一个对应权限的用户并进行访问，这里就为了方便就省略了。</p>
<h2 id="33-tomcat">3.3 <code>Tomcat</code></h2>
<h3 id="331-本地tomcat">3.3.1 本地<code>Tomcat</code></h3>
<p><code>Tomcat</code>安装不难，直接从<a href="https://downloads.apache.org/tomcat/tomcat-10/v10.0.0/bin/apache-tomcat-10.0.0.tar.gz">官网</a>下载即可：</p>
<figure data-type="image" tabindex="6"><img src="https://img-blog.csdnimg.cn/20210117160750365.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>解压：</p>
<pre><code class="language-bash">tar -zxvf apache-tomcat-10.0.0.tar.gz
</code></pre>
<p>进入<code>bin</code>目录运行<code>startup.sh</code>：</p>
<pre><code class="language-bash">cd apache-tomcat-10.0.0/bin
./startup.sh
</code></pre>
<p>本地访问<code>localhost:8080</code>：</p>
<figure data-type="image" tabindex="7"><img src="https://img-blog.csdnimg.cn/20210117161016685.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>这样就算成功了。对于<code>Windows</code>的读者，可以<a href="https://downloads.apache.org/tomcat/tomcat-10/v10.0.0/bin/apache-tomcat-10.0.0-windows-x64.zip">戳这里下载</a>，解压步骤类似，解压后运行<code>startup.bat</code>即可访问<code>localhost:8080</code>。</p>
<h3 id="332-服务器tomcat">3.3.2 服务器<code>Tomcat</code></h3>
<p>服务器的话可以直接使用<code>wget</code>安装：</p>
<pre><code class="language-bash">wget https://downloads.apache.org/tomcat/tomcat-10/v10.0.0/bin/apache-tomcat-10.0.0.tar.gz
</code></pre>
<p>但是这样速度很慢，建议下载到本地再使用<code>scp</code>上传：</p>
<pre><code class="language-bash">scp apache-tomcat-10.0.0.tar.gz username@xxx.xxx.xxx.xxx:/
</code></pre>
<p>一样按照上面的方法解压后运行<code>startup.sh</code>，访问<code>公网IP:8080</code>即可观察是否成功。</p>
<h1 id="4-建库建表">4 建库建表</h1>
<h2 id="41-用户表">4.1 用户表</h2>
<p>这里使用到的<code>MySQL</code>脚本如下：</p>
<pre><code class="language-sql">CREATE DATABASE userinfo;
USE userinfo;
CREATE TABLE user
(
    id          INT     NOT NULL    PRIMARY KEY   AUTO_INCREMENT,
    name        CHAR(30)    NULL,
    password    CHAR(30)    NULL
)
</code></pre>
<h2 id="42-导入">4.2 导入</h2>
<pre><code class="language-bash">mysql -u root -p &lt; user.sql
</code></pre>
<h1 id="5-后端部分">5 后端部分</h1>
<p>因为是比较基础向的教程，所以先从创建项目开始吧。</p>
<h2 id="51-创建项目导库">5.1 创建项目+导库</h2>
<p>选择对应<code>Java Enterprise</code>，默认是选中了其中的<code>Web application</code>，构建工具默认<code>Maven</code>，测试工具<code>JUnit</code>，如果需要<code>Gradle</code>或<code>Kotlin</code>的话自行勾选即可：</p>
<figure data-type="image" tabindex="8"><img src="https://img-blog.csdnimg.cn/20210117144342434.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p><code>2020.3</code>版本的<code>IDEA</code>相比起以前，更加人性化的添加了选择库的功能，默认是选中了<code>Servlet</code>，需要其他库的话自行选择即可。</p>
<p>另外一个要注意的是<code>JavaEE</code>已经更名为<code>JakartaEE</code>，因此版本这里可以选择<code>JakartaEE</code>：</p>
<figure data-type="image" tabindex="9"><img src="https://img-blog.csdnimg.cn/20210118082114998.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>填上对应包名并选择位置：</p>
<figure data-type="image" tabindex="10"><img src="https://img-blog.csdnimg.cn/20210125173220709.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>创建完成后，这里笔者遇到了一个错误，找不到对应的<code>Servlet</code>包：</p>
<figure data-type="image" tabindex="11"><img src="https://img-blog.csdnimg.cn/2021011714531718.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>在设置中选择更新中心仓库即可：</p>
<figure data-type="image" tabindex="12"><img src="https://img-blog.csdnimg.cn/20210117145419694.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>创建后的目录如图所示：</p>
<figure data-type="image" tabindex="13"><img src="https://img-blog.csdnimg.cn/20210118082337224.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>接着添加依赖，用到的依赖包括：</p>
<ul>
<li><code>MySQL</code></li>
<li><code>Jackson</code></li>
<li><code>Lombok</code></li>
</ul>
<p>添加到<code>pom.xml</code>中即可（注意版本，MySQL不同版本可以查看<a href="https://mvnrepository.com/artifact/mysql/mysql-connector-java">这里</a>）：</p>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;mysql&lt;/groupId&gt;
    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
    &lt;version&gt;8.0.23&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
    &lt;artifactId&gt;lombok&lt;/artifactId&gt;
    &lt;version&gt;1.18.16&lt;/version&gt;
    &lt;scope&gt;provided&lt;/scope&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;
    &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;
    &lt;version&gt;2.12.1&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<p>这样第一步就完成了。</p>
<h2 id="52-结构">5.2 结构</h2>
<p>项目结构如下：</p>
<ul>
<li>持久层操作：<code>Dao</code></li>
<li>实体类：<code>User</code></li>
<li>响应体：<code>ResponseBody</code></li>
<li><code>Servlet</code>层：<code>SignIn</code>/<code>SignUp</code>/<code>Test</code></li>
<li>工具类：<code>DBUtils</code></li>
<li><s>启动类</s>：不需要，因为在<code>Web</code>服务器中运行</li>
</ul>
<p>先创建好文件以及目录：</p>
<figure data-type="image" tabindex="14"><img src="https://img-blog.csdnimg.cn/20210125173509880.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="53-dbutils">5.3 <code>DBUtils</code></h2>
<p>原生<code>JDBC</code>获取连接工具类：</p>
<pre><code class="language-java">package com.example.javawebdemo.utils;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class DBUtils {
    private static Connection connection = null;

    public static Connection getConnection() {
        try {
            Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);
            final String url = &quot;jdbc:mysql://127.0.0.1:3306/userinfo&quot;;
            final String username = &quot;root&quot;;
            final String password = &quot;123456&quot;;
            connection = DriverManager.getConnection(url, username, password);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
        return connection;
    }

    public static void closeConnection() {
        if (connection != null) {
            try {
                connection.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
}
</code></pre>
<p>重点在这四行：</p>
<pre><code class="language-java">Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);
String url = &quot;jdbc:mysql://127.0.0.1:3306/userinfo&quot;;
String username = &quot;root&quot;;
String password = &quot;123456&quot;;
</code></pre>
<p>根据个人需要修改，注意<code>MySQL8</code>注册驱动与旧版的区别，旧版的是：</p>
<pre><code class="language-java">Class.forName(&quot;com.mysql.jdbc.Driver&quot;);
</code></pre>
<h2 id="54-user">5.4 <code>User</code></h2>
<p>三字段+<code>@Getter</code>：</p>
<pre><code class="language-java">package com.example.javawebdemo.entity;

import lombok.Getter;

@Getter
public class User {
    private final String name;
    private final String password;

    public User(String name, String password) {
        this.name = name;
        this.password = password;
    }
}
</code></pre>
<h2 id="55-dao">5.5 <code>Dao</code></h2>
<p>数据库操作层：</p>
<pre><code class="language-java">package com.example.javawebdemo.dao;

import com.example.javawebdemo.entity.User;
import com.example.javawebdemo.utils.DBUtils;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class Dao {
    public boolean select(User user) {
        final Connection connection = DBUtils.getConnection();
        final String sql = &quot;select * from user where name = ? and password = ?&quot;;
        try {
            final PreparedStatement preparedStatement = connection.prepareStatement(sql);
            preparedStatement.setString(1, user.getName());
            preparedStatement.setString(2, user.getPassword());
            ResultSet resultSet = preparedStatement.executeQuery();
            return resultSet.next();
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        } finally {
            DBUtils.closeConnection();
        }
    }

    public boolean insert(User user) {
        final Connection connection = DBUtils.getConnection();
        final String sql = &quot;insert into user(name,password) values(?,?)&quot;;
        try {
            final PreparedStatement preparedStatement = connection.prepareStatement(sql);
            preparedStatement.setString(1, user.getName());
            preparedStatement.setString(2, user.getPassword());
            preparedStatement.executeUpdate();
            return preparedStatement.getUpdateCount() != 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        } finally {
            DBUtils.closeConnection();
        }
    }
}
</code></pre>
<p>两个操作：</p>
<ul>
<li>查询：存在该用户返回<code>true</code>，否则<code>false</code></li>
<li>插入：添加用户</li>
</ul>
<p><strong>注意插入操作中使用<code>executeUpdate()</code>进行插入，同时使用<code>getUpdateCount() != 0</code>判断插入的结果，而不能直接使用</strong></p>
<pre><code class="language-java">return preparedStatement.execute();
</code></pre>
<p>一般来说：</p>
<ul>
<li><code>select</code>：<code>executeQuery()</code>，<code>executeQuery()</code>返回<code>ResultSet</code>，表示结果集，保存了<code>select</code>语句的执行结果，配合<code>next()</code>使用</li>
<li><code>delete</code>/<code>insert</code>/<code>update</code>：使用<code>executeUpdate()</code>，<code>executeUpdate()</code>返回的是一个整数，表示受影响的行数，即<code>delete</code>/<code>insert</code>/<code>update</code>修改的行数，对于<code>drop</code>/<code>create</code>操作返回<code>0</code></li>
<li><code>create</code>/<code>drop</code>：使用<code>execute()</code>，<code>execute()</code>的返回值是这样的，如果第一个结果是<code>ResultSet</code>对象，则返回<code>true</code>，如果第一个结果是更新计数或者没有结果则返回<code>false</code></li>
</ul>
<p>所以在这个例子中</p>
<pre><code class="language-java">return preparedStatement.execute();
</code></pre>
<p>肯定返回<code>false</code>，不能直接判断是否插入成功。</p>
<h2 id="56-响应体">5.6 响应体</h2>
<p>添加一个响应体类方便设置返回码以及数据：</p>
<pre><code class="language-java">package com.example.javawebdemo.response;

import lombok.Getter;
import lombok.Setter;

@Setter
@Getter
public class ResponseBody{
    private Object data;
    private int code;
}
</code></pre>
<h2 id="57-servlet">5.7 <code>Servlet</code></h2>
<ul>
<li><code>SingIn</code>类用于处理登录，调用<code>JDBC</code>查看数据库是否有对应的用户</li>
<li><code>SignUp</code>类用于处理注册，把<code>User</code>添加到数据库中</li>
<li><code>Test</code>为测试<code>Servlet</code>，返回固定字符串</li>
</ul>
<p>先上<code>SignIn.java</code></p>
<pre><code class="language-java">package com.example.javawebdemo.servlet;

import com.example.javawebdemo.dao.Dao;
import com.example.javawebdemo.entity.User;
import com.example.javawebdemo.response.ResponseBody;
import com.fasterxml.jackson.databind.ObjectMapper;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import java.io.IOException;

@WebServlet(&quot;/sign/in&quot;)
public class SignIn extends HttpServlet {
    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        req.setCharacterEncoding(&quot;utf-8&quot;);
        resp.setCharacterEncoding(&quot;utf-8&quot;);
        resp.setContentType(&quot;application/json;charset=utf-8&quot;);

        String name = req.getParameter(&quot;name&quot;);
        String password = req.getParameter(&quot;password&quot;);

        Dao dao = new Dao();
        User user = new User(name,password);
        ObjectMapper mapper = new ObjectMapper();
        ResponseBody body = new ResponseBody();

        if (dao.select(user)) {
            body.setCode(200);
            body.setData(&quot;success&quot;);
        } else {
            body.setCode(404);
            body.setData(&quot;failed&quot;);
        }
        mapper.writeValue(resp.getWriter(), body);
    }
}
</code></pre>
<p>注意点：</p>
<ul>
<li><code>@WebServlet</code>：定义<code>Servlet</code>（不加这个注解也是可以的但是需要在<code>web.xml</code>中手工定义<code>Servlet</code>），默认的属性为<code>value</code>，表示<code>Servlet</code>路径</li>
<li>编码：<code>HttpServletRequest</code>/<code>HttpServletResponse</code>均设置<code>UTF8</code>（虽然在这个例子中并不是必要的因为没有中文字符）</li>
<li>获取参数：<code>request.getParameter</code>，从请求中获取参数，传入的参数是键值</li>
<li>写响应体：利用<code>Jackson</code>，将<code>response.getWriter</code>以及响应体传入，接着交给<code>mapper.writeValue</code>进行写响应体</li>
</ul>
<p>下面是<code>SignUp.java</code>，大部分代码类似：</p>
<pre><code class="language-java">package com.example.javawebdemo.servlet;

import com.example.javawebdemo.dao.Dao;
import com.example.javawebdemo.entity.User;
import com.example.javawebdemo.response.ResponseBody;
import com.fasterxml.jackson.databind.ObjectMapper;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import java.io.IOException;

@WebServlet(&quot;/sign/up&quot;)
public class SignUp extends HttpServlet {
    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        req.setCharacterEncoding(&quot;utf-8&quot;);
        resp.setCharacterEncoding(&quot;utf-8&quot;);
        resp.setContentType(&quot;application/json;charset=utf-8&quot;);

        String name = req.getParameter(&quot;name&quot;);
        String password = req.getParameter(&quot;password&quot;);
        Dao dao = new Dao();
        User user = new User(name,password);
        ResponseBody body = new ResponseBody();
        ObjectMapper mapper = new ObjectMapper();
        if (dao.insert(user)) {
            body.setCode(200);
            body.setData(&quot;success&quot;);
        } else {
            body.setCode(500);
            body.setData(&quot;failed&quot;);
        }
        mapper.writeValue(resp.getWriter(), body);
    }
}
</code></pre>
<p>测试<code>Servlet</code>：</p>
<pre><code class="language-java">package com.example.javawebdemo.servlet;

import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import java.io.IOException;

@WebServlet(&quot;/test&quot;)
public class Test extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        resp.getWriter().print(&quot;Hello, Java Web&quot;);
    }
}
</code></pre>
<h2 id="58-运行">5.8 运行</h2>
<p>需要借助<code>Tomcat</code>运行，选择运行配置中的<code>Tomcat Server</code>：</p>
<figure data-type="image" tabindex="15"><img src="https://img-blog.csdnimg.cn/20210119150129749.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>设置<code>Tomcat</code>根目录：</p>
<figure data-type="image" tabindex="16"><img src="https://img-blog.csdnimg.cn/2021011915024037.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>接着在<code>Deployment</code>选择<code>+</code>后，选择第二个带<code>exploded</code>的（当然第一个也不是不可以，不过第一个一般是发布到远程版本，是以<code>WAR</code>形式的，而第二个是直接将所有文件以当前目录形式复制到<code>webapps</code>下，并且在调试模式下支持热部署）：</p>
<figure data-type="image" tabindex="17"><img src="https://img-blog.csdnimg.cn/20210119150346979.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>另外可以把这个路径修改为一个比较简单的路径，方便操作：</p>
<figure data-type="image" tabindex="18"><img src="https://img-blog.csdnimg.cn/20210119150549373.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>调试（运行不能进行热部署）：</p>
<figure data-type="image" tabindex="19"><img src="https://img-blog.csdnimg.cn/20210119151417365.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>访问<code>localhost:8080/demo</code>（<code>IDEA</code>应该会自动打开）会出现如下页面：</p>
<figure data-type="image" tabindex="20"><img src="https://img-blog.csdnimg.cn/20210119151505998.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>访问路径下的<code>test</code>会出现：</p>
<figure data-type="image" tabindex="21"><img src="https://img-blog.csdnimg.cn/2021011915155217.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>这样后端就处理完成了，下面处理<code>Android</code>端。</p>
<h1 id="6-android端">6 <code>Android</code>端</h1>
<h2 id="61-新建项目">6.1 新建项目</h2>
<figure data-type="image" tabindex="22"><img src="https://img-blog.csdnimg.cn/20210119160857732.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="23"><img src="https://img-blog.csdnimg.cn/2021011916095936.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="62-依赖权限">6.2 依赖/权限</h2>
<p>依赖如下：</p>
<pre><code class="language-bash">implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.12.1'
</code></pre>
<p>在<code>build.gradle</code>中加上即可，另外，再加上：</p>
<pre><code class="language-bash">buildFeatures{
    viewBinding = true
}
</code></pre>
<figure data-type="image" tabindex="24"><img src="https://img-blog.csdnimg.cn/20210125200352874.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p><code>viewBinding</code>就是视图绑定功能，以前是通过<code>findViewById</code>获取对应的组件，后面就有了<a href="https://github.com/JakeWharton/butterknife">Butter Knife</a>，到现在<code>Butter Knife</code>过期了，推荐使用<code>view binding</code>。</p>
<figure data-type="image" tabindex="25"><img src="https://img-blog.csdnimg.cn/20210125201007899.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>另外在<code>AndroidManifest.xml</code>中加入网络权限：</p>
<pre><code class="language-xml">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;
&lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;
</code></pre>
<p>还需要添加<code>HTTP</code>的支持，因为这是一个示例<code>Demo</code>就不上<code>HTTPS</code>了，但是目前<code>Android</code>的版本默认不支持，因此需要在<code>&lt;application&gt;</code>添加：</p>
<pre><code class="language-xml">android:usesCleartextTraffic=&quot;true&quot;
</code></pre>
<figure data-type="image" tabindex="26"><img src="https://img-blog.csdnimg.cn/20210125202934109.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="63-项目结构">6.3 项目结构</h2>
<p>四个文件：</p>
<ul>
<li><code>MainActivity</code>：核心<code>Activity</code></li>
<li><code>NetworkSettings</code>：请求<code>URL</code>，常量</li>
<li><code>NetworkThread</code>：网络请求线程</li>
<li><code>ResponseBody</code>：请求体</li>
</ul>
<figure data-type="image" tabindex="27"><img src="https://img-blog.csdnimg.cn/20210125203105817.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="64-responsebody">6.4 <code>ResponseBody</code></h2>
<pre><code class="language-java">package com.example.androiddemo;

public class ResponseBody {
    private int code;
    private Object data;

    public int getCode() {
        return code;
    }

    public Object getData() {
        return data;
    }
}
</code></pre>
<p>响应体，一个返回码字段+一个数据字段。</p>
<h2 id="65-networksettings">6.5 <code>NetworkSettings</code></h2>
<pre><code class="language-java">package com.example.androiddemo;

public class NetworkSettings {
    private static final String HOST = &quot;192.168.43.35&quot;;
    private static final String PORT = &quot;8080&quot;;
    public static final String SIGN_IN = &quot;http://&quot;+ HOST +&quot;:&quot;+PORT + &quot;/demo/sign/in&quot;;
    public static final String SIGN_UP = &quot;http://&quot;+ HOST +&quot;:&quot;+PORT + &quot;/demo/sign/up&quot;;
}
</code></pre>
<p>请求<code>URL</code>常量，<code>HOST</code>请修改为自己的内网<code>IP</code>，<strong>注意不能使用<code>localhost</code>/<code>127.0.0.1</code></strong>。</p>
<p>可以使用<code>ip addr</code>/<code>ifconfig</code>/<code>ipconfig</code>等查看自己的内网<code>IP</code>：</p>
<figure data-type="image" tabindex="28"><img src="https://img-blog.csdnimg.cn/20210126092346825.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="66-networkthread">6.6 <code>NetworkThread</code></h2>
<pre><code class="language-java">package com.example.androiddemo;

import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.Callable;

public class NetworkThread implements Callable&lt;String&gt; {
    private final String name;
    private final String password;
    private final String url;

    public NetworkThread(String name, String password, String url) {
        this.name = name;
        this.password = password;
        this.url = url;
    }

    @Override
    public String call(){
        try {
        	//开启连接
            HttpURLConnection connection = (HttpURLConnection) new URL(url).openConnection();
            //拼接数据
            String data = &quot;name=&quot;+ URLEncoder.encode(name, StandardCharsets.UTF_8.toString())+&quot;&amp;password=&quot;+URLEncoder.encode(password,StandardCharsets.UTF_8.toString());
            //设置请求方法
            connection.setRequestMethod(&quot;POST&quot;);
            //允许输入输出
            connection.setDoInput(true);
            connection.setDoOutput(true);
            //写数据（也就是发送数据）
            connection.getOutputStream().write(data.getBytes(StandardCharsets.UTF_8));
            byte [] bytes = new byte[1024];
            //获取返回的数据
            int len = connection.getInputStream().read(bytes);
            return new String(bytes,0,len,StandardCharsets.UTF_8);
        } catch (IOException e) {
            e.printStackTrace();
            return &quot;&quot;;
        }
    }
}
</code></pre>
<p>发送网络请求的线程类，由于是异步操作的线程，实现了<code>Callable&lt;String&gt;</code>接口，表示返回的是<code>String</code>类型的数据，主线程可通过<code>get()</code>阻塞获取返回值。</p>
<h2 id="67-mainactivity">6.7 <code>MainActivity</code></h2>
<pre><code class="language-java">package com.example.androiddemo;

import android.os.Bundle;
import android.view.View;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;

import com.example.androiddemo.databinding.ActivityMainBinding;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.util.concurrent.FutureTask;

public class MainActivity extends AppCompatActivity {

    private ActivityMainBinding binding;
    private final ObjectMapper mapper = new ObjectMapper();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        binding = ActivityMainBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());
    }

    public void signIn(View view){
        String name = binding.editTextName.getText().toString();
        String password = binding.editTextPassword.getText().toString();
        FutureTask&lt;String&gt; signInTask = new FutureTask&lt;&gt;(new NetworkThread(name,password,NetworkSettings.SIGN_IN));
        Thread thread = new Thread(signInTask);
        thread.start();
        try{
        	//get获取线程返回值，通过ObjectMapper反序列化为ResponseBody
            ResponseBody body = mapper.readValue(signInTask.get(),ResponseBody.class);
            //根据返回码确定提示信息
            Toast.makeText(getApplicationContext(),body.getCode() == 200 ? &quot;登录成功&quot; : &quot;登录失败&quot;,Toast.LENGTH_SHORT).show();
        }catch (Exception e){
            e.printStackTrace();
        }
    }

    public void signUp(View view){
        String name = binding.editTextName.getText().toString();
        String password = binding.editTextPassword.getText().toString();
        FutureTask&lt;String&gt; signUpTask = new FutureTask&lt;&gt;(new NetworkThread(name,password,NetworkSettings.SIGN_UP));
        Thread thread = new Thread(signUpTask);
        thread.start();
        try{
            ResponseBody body = mapper.readValue(signUpTask.get(),ResponseBody.class);
            Toast.makeText(getApplicationContext(),body.getCode() == 200 ? &quot;注册成功&quot; : &quot;注册失败&quot;,Toast.LENGTH_SHORT).show();
        }catch (Exception e){
            e.printStackTrace();
        }
    }
}
</code></pre>
<p>说一下<code>viewBinding</code>，在<code>onCreate</code>中：</p>
<pre><code class="language-java">super.onCreate(savedInstanceState);
binding = ActivityMainBinding.inflate(getLayoutInflater());
setContentView(binding.getRoot());
</code></pre>
<p>通过<code>ActivityMainBinding</code>的静态方法获取<code>binding</code>，注意<code>ActivityMainBinding</code>这个类的类名不是固定的，比如<a href="https://developer.android.com/topic/libraries/view-binding">Android官方的文档</a>中就是：</p>
<figure data-type="image" tabindex="29"><img src="https://img-blog.csdnimg.cn/2021012609320157.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="68-资源文件">6.8 资源文件</h2>
<p>两个：</p>
<ul>
<li><code>activity_main.xml</code></li>
<li><code>strings.xml</code></li>
</ul>
<p>分别如下，不细说了：</p>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;
    xmlns:tools=&quot;http://schemas.android.com/tools&quot;
    android:layout_width=&quot;match_parent&quot;
    android:layout_height=&quot;match_parent&quot;
    tools:context=&quot;.MainActivity&quot;&gt;

    &lt;TextView
        android:id=&quot;@+id/textViewName&quot;
        android:layout_width=&quot;45dp&quot;
        android:layout_height=&quot;38dp&quot;
        android:layout_marginStart=&quot;24dp&quot;
        android:layout_marginTop=&quot;92dp&quot;
        android:text=&quot;@string/name&quot;
        app:layout_constraintLeft_toLeftOf=&quot;parent&quot;
        app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;

    &lt;EditText
        android:id=&quot;@+id/editTextName&quot;
        android:layout_width=&quot;300dp&quot;
        android:layout_height=&quot;40dp&quot;
        android:layout_marginStart=&quot;64dp&quot;
        android:layout_marginTop=&quot;84dp&quot;
        android:autofillHints=&quot;&quot;
        android:inputType=&quot;text&quot;
        app:layout_constraintLeft_toLeftOf=&quot;@id/textViewName&quot;
        app:layout_constraintTop_toTopOf=&quot;parent&quot;
        tools:ignore=&quot;LabelFor&quot; /&gt;

    &lt;TextView
        android:id=&quot;@+id/textViewPassword&quot;
        android:layout_width=&quot;45dp&quot;
        android:layout_height=&quot;36dp&quot;
        android:layout_marginStart=&quot;24dp&quot;
        android:layout_marginTop=&quot;72dp&quot;
        android:text=&quot;@string/password&quot;
        app:layout_constraintLeft_toLeftOf=&quot;parent&quot;
        app:layout_constraintTop_toTopOf=&quot;@id/textViewName&quot; /&gt;

    &lt;EditText
        android:id=&quot;@+id/editTextPassword&quot;
        android:layout_width=&quot;300dp&quot;
        android:layout_height=&quot;40dp&quot;
        android:layout_marginStart=&quot;64dp&quot;
        android:layout_marginTop=&quot;72dp&quot;
        android:autofillHints=&quot;&quot;
        android:inputType=&quot;textPassword&quot;
        app:layout_constraintLeft_toLeftOf=&quot;@id/textViewPassword&quot;
        app:layout_constraintTop_toTopOf=&quot;@id/editTextName&quot;
        tools:ignore=&quot;LabelFor&quot; /&gt;

    &lt;Button
        android:id=&quot;@+id/buttonSignUp&quot;
        android:layout_width=&quot;wrap_content&quot;
        android:layout_height=&quot;wrap_content&quot;
        android:layout_marginStart=&quot;56dp&quot;
        android:layout_marginTop=&quot;32dp&quot;
        android:onClick=&quot;signUp&quot;
        android:text=&quot;@string/signUp&quot;
        app:layout_constraintStart_toStartOf=&quot;parent&quot;
        app:layout_constraintTop_toBottomOf=&quot;@+id/textViewPassword&quot;
        tools:ignore=&quot;ButtonStyle&quot; /&gt;

    &lt;Button
        android:id=&quot;@+id/buttonSignIn&quot;
        android:layout_width=&quot;wrap_content&quot;
        android:layout_height=&quot;wrap_content&quot;
        android:layout_marginTop=&quot;36dp&quot;
        android:layout_marginEnd=&quot;52dp&quot;
        android:onClick=&quot;signIn&quot;
        android:text=&quot;@string/signIn&quot;
        app:layout_constraintEnd_toEndOf=&quot;parent&quot;
        app:layout_constraintTop_toBottomOf=&quot;@+id/editTextPassword&quot;
        tools:ignore=&quot;ButtonStyle&quot; /&gt;
&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;
</code></pre>
<pre><code class="language-xml">&lt;resources&gt;
    &lt;string name=&quot;app_name&quot;&gt;AndroidDemo&lt;/string&gt;
    &lt;string name=&quot;name&quot;&gt;用户名&lt;/string&gt;
    &lt;string name=&quot;password&quot;&gt;密码&lt;/string&gt;
    &lt;string name=&quot;signUp&quot;&gt;注册&lt;/string&gt;
    &lt;string name=&quot;signIn&quot;&gt;登录&lt;/string&gt;
&lt;/resources&gt;
</code></pre>
<h1 id="7-测试">7 测试</h1>
<h2 id="71-本地测试">7.1 本地测试</h2>
<p>首先运行<code>Java Web</code>端，应该会自动打开如下界面：</p>
<figure data-type="image" tabindex="30"><img src="https://img-blog.csdnimg.cn/20210126093855408.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>附加<code>test</code>后：</p>
<figure data-type="image" tabindex="31"><img src="https://img-blog.csdnimg.cn/20210126093910584.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>运行<code>Android</code>端，先输入一个不存在的用户名或密码，提示登录失败，再进行注册，然后登录成功：</p>
<figure data-type="image" tabindex="32"><img src="https://img-blog.csdnimg.cn/20210126094304508.gif" alt="在这里插入图片描述" loading="lazy"></figure>
<p>同时查看后端数据库如下：</p>
<figure data-type="image" tabindex="33"><img src="https://img-blog.csdnimg.cn/20210126094248855.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="72-部署测试">7.2 部署测试</h2>
<p><strong>首先确保本地数据库的用户名与密码与服务器的用户名与密码一致。同时存在对应的表以及库</strong></p>
<p>部署<code>Java Web</code>端之前先在<code>pom.xml</code>中加入一个<code>&lt;finalName&gt;</code>：</p>
<figure data-type="image" tabindex="34"><img src="https://img-blog.csdnimg.cn/2021012609450577.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>在右侧的工具栏先选择<code>clean</code>，再选择编译，最后选择打包：</p>
<figure data-type="image" tabindex="35"><img src="https://img-blog.csdnimg.cn/20210126103651188.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>之所以这样做是因为如果更新了文件，打包不会把文件更新再打包进去，因此需要先清除原来的字节码文件，再编译最后打包。</p>
<p>完成后会出现一个<code>demo.war</code>位于<code>target</code>下：</p>
<figure data-type="image" tabindex="36"><img src="https://img-blog.csdnimg.cn/20210126094641295.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p><code>scp</code>（或其他工具）上传到服务器，并移动到<code>Tomcat</code>的<code>webapps</code>（为了方便说明以下假设服务器的<code>IP</code>为<code>8.8.8.8</code>）：</p>
<pre><code class="language-bash">scp demo.war 8.8.8.8/xxx
# 通过ssh连接服务器后
cp demo.war /usr/local/tomcat/webapps
</code></pre>
<p>启动<code>Tomcat</code>：</p>
<pre><code class="language-bash">cd /usr/local/tomcat/bin
./startup.sh
</code></pre>
<p>启动后就可以看见在<code>webapps</code>下多了一个<code>demo</code>的文件夹：</p>
<figure data-type="image" tabindex="37"><img src="https://img-blog.csdnimg.cn/20210126095034620.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>访问<code>8.8.8.8/demo</code>看到本地测试的页面就可以了。接着修改<code>Android</code>端的<code>NetworkSettings</code>中的<code>HOST</code>为<code>8.8.8.8</code>，如果没问题的话就能正常访问了：</p>
<figure data-type="image" tabindex="38"><img src="https://img-blog.csdnimg.cn/20210126103518386.gif" alt="在这里插入图片描述" loading="lazy"></figure>
<p>服务器数据库：</p>
<figure data-type="image" tabindex="39"><img src="https://img-blog.csdnimg.cn/20210126103458178.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="8-注意事项">8 注意事项</h1>
<p>注意事项比较琐碎而且有点多，因此另开了一篇博客，<a href="https://blog.csdn.net/qq_27525611/article/details/112744223">戳这里</a>。</p>
<p>如果还有其他问题欢迎留言。</p>
<h1 id="9-源码">9 源码</h1>
<p>提供了<code>Java</code>+<code>Kotlin</code>两种语言实现：</p>
<ul>
<li><a href="https://github.com/2293736867/AndroidWebMysql">Github</a></li>
<li><a href="https://gitee.com/u6b7b5fc3/AndroidWebMysql">码云</a></li>
<li><a href="https://codechina.csdn.net/qq_27525611/AndroidWebMysql">CODE.CHINA</a></li>
</ul>
<p><strong>如果觉得文章好看，欢迎点赞。</strong></p>
<p><strong>同时欢迎关注微信公众号：氷泠之路。</strong></p>
<figure data-type="image" tabindex="40"><img src="https://img-blog.csdnimg.cn/20200806194605566.gif" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[后端Spring Boot+前端Android交互+MySQL增删查改（Java+Kotlin实现）]]></title>
        <id>https://2293736867.github.io/post/hou-duan-spring-bootqian-duan-android-jiao-hu-mysql-zeng-shan-cha-gai-javakotlin-shi-xian/</id>
        <link href="https://2293736867.github.io/post/hou-duan-spring-bootqian-duan-android-jiao-hu-mysql-zeng-shan-cha-gai-javakotlin-shi-xian/">
        </link>
        <updated>2021-01-27T03:42:46.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#1-%E5%89%8D%E8%A8%80%E6%A6%82%E8%BF%B0">1 前言&amp;概述</a></li>
<li><a href="#2-%E7%8E%AF%E5%A2%83">2 环境</a></li>
<li><a href="#3-%E5%90%8E%E7%AB%AF">3 后端</a>
<ul>
<li><a href="#31-%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE">3.1 新建项目</a></li>
<li><a href="#32-%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84">3.2 项目结构</a></li>
<li><a href="#33-%E5%AE%9E%E4%BD%93%E7%B1%BB">3.3 实体类</a></li>
<li><a href="#34-%E6%8C%81%E4%B9%85%E5%B1%82">3.4 持久层</a></li>
<li><a href="#35-%E4%B8%9A%E5%8A%A1%E5%B1%82">3.5 业务层</a></li>
<li><a href="#36-%E6%8E%A7%E5%88%B6%E5%B1%82">3.6 控制层</a></li>
<li><a href="#37-%E5%93%8D%E5%BA%94%E4%BD%93%E5%93%8D%E5%BA%94%E7%A0%81">3.7 响应体+响应码</a></li>
<li><a href="#38-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">3.8 配置文件</a></li>
<li><a href="#39-%E6%B5%8B%E8%AF%95">3.9 测试</a></li>
</ul>
</li>
<li><a href="#4-android%E7%AB%AF">4 <code>Android</code>端</a>
<ul>
<li><a href="#41-%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE">4.1 新建项目</a></li>
<li><a href="#42-%E4%BE%9D%E8%B5%96%E6%9D%83%E9%99%90">4.2 依赖+权限</a></li>
<li><a href="#43-%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84">4.3 项目结构</a></li>
<li><a href="#44-%E5%AE%9E%E4%BD%93%E7%B1%BB">4.4 实体类</a></li>
<li><a href="#45-%E5%B7%A5%E5%85%B7%E7%B1%BB">4.5 工具类</a></li>
<li><a href="#46-%E5%93%8D%E5%BA%94%E4%BD%93%E5%93%8D%E5%BA%94%E7%A0%81">4.6 响应体+响应码</a></li>
<li><a href="#47-%E8%AF%B7%E6%B1%82url%E5%B8%B8%E9%87%8F">4.7 请求<code>URL</code>常量</a></li>
<li><a href="#48-mainactivity">4.8 <code>MainActivity</code></a></li>
</ul>
</li>
<li><a href="#5-%E6%B5%8B%E8%AF%95">5 测试</a></li>
<li><a href="#6-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9">6 注意事项</a></li>
<li><a href="#7-%E6%BA%90%E7%A0%81">7 源码</a></li>
<li><a href="#8-%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5">8 参考链接</a></li>
</ul>
</p>
<h1 id="1-前言概述">1 前言&amp;概述</h1>
<p>这篇文章是基于<a href="https://www.bingling.site/post/hou-duan-spring-bootqian-duan-android-jiao-hu-mysql-zeng-shan-cha-gai/">这篇文章</a>的更新，主要是更新了一些技术栈以及开发工具的版本，还有修复了一些Bug。</p>
<p>本文是<code>SpringBoot</code>+<code>Android</code>+<code>MySQL</code>的增删查改的简单实现，用到的技术包括<code>Jackson</code>、<code>OkHttp</code>、<code>bouncycastle</code>、<code>Spring Data JPA</code>。</p>
<h1 id="2-环境">2 环境</h1>
<ul>
<li><code>Android 4.1.2</code></li>
<li><code>IDEA 2020.3.1</code></li>
<li><code>Spring Boot 2.4.2</code></li>
<li><code>MySQL 8.0.23</code></li>
<li><code>OpenJDK 11</code></li>
</ul>
<p>环境准备就略过了，需要的可以参考这里。</p>
<h1 id="3-后端">3 后端</h1>
<h2 id="31-新建项目">3.1 新建项目</h2>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20210122185350403.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>依赖：</p>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20210122185537927.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="32-项目结构">3.2 项目结构</h2>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20210126211346366.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="33-实体类">3.3 实体类</h2>
<pre><code class="language-java">@Entity
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Integer id;

    private String name;
    private String password;
}
</code></pre>
<p>基本的<code>Lombok</code>注解+<code>JPA</code>中的两个注解：</p>
<ul>
<li><code>@Id</code>：标识主键</li>
<li><code>@GeneratedValue</code>：主键生成策略，包括四个</li>
</ul>
<p>主键生成策略如下：</p>
<ul>
<li><code>GenerationType.TABLE</code>：使用一个特定的数据库表格来保存主键，不依赖外部环境和数据库的具体实现，但是不能充分利用数据库特性，一般不会优先使用，且一般配合<code>@TableGenerator</code>使用</li>
<li><code>GenerationType.SEQUENCE</code>：一些数据库不支持主键自增（如<code>Oracle</code>），这时就可以使用<code>SEQUENCE</code>，只有部分（<code>Oracle</code>/<code>DB2</code>/<code>PostgreSQL</code>）支持序列对象，一般不用于其他数据库</li>
<li><code>GenerationType.IDENTITY</code>：一般意义上的主键自增长，插入数据时自动给主键复制，比如<code>MySQL</code>中的<code>auto_increment</code></li>
<li><code>GenerationType.AUTO</code>：主键生成策略交给持久化引擎，持久化引擎会根据数据库在以上三种主键策略中选择其中一种，这是<code>JPA</code>默认的主键生成策略</li>
</ul>
<h2 id="34-持久层">3.4 持久层</h2>
<p>继承<code>CrudRepository&lt;T,ID&gt;</code>，<code>T</code>为实体类，<code>ID</code>为主键类型：</p>
<pre><code class="language-java">@Repository
public interface UserRepository extends CrudRepository&lt;User,Integer&gt; {
    boolean existsByName(String name);
    User findByNameAndPassword(String name,String password);
}
</code></pre>
<p>一个需要注意的点是<code>CrudRepository&lt;T,ID&gt;</code>继承了<code>Repository&lt;T,ID&gt;</code>，而后者有一个叫<code>查询方法</code>的特性，就是说能根据一些方法中指定的关键字去生成对应的<code>SQL</code>，比如第一个方法<code>existsByName</code>，就根据<code>name</code>判断用户是否存在，参数为一个<code>String name</code>，返回<code>boolean</code>，具体的关键字以及例子参考如下：</p>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20210126213612921.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="35-业务层">3.5 业务层</h2>
<pre><code class="language-java">@Transactional
@Service
@RequiredArgsConstructor(onConstructor = @__(@Autowired))
public class UserService {
    private final UserRepository repository;

    public boolean exists(User user){
        return repository.existsByName(user.getName());
    }

    public User findByNameAndPassword(User user){
        return repository.findByNameAndPassword(user.getName(),user.getPassword());
    }

    public boolean insert(User user){
        repository.save(user);
        return true;
    }

    public boolean update(User user){
        if(repository.findById(user.getId()).isEmpty()){
            return false;
        }
        repository.save(user);
        return true;
    }

    public boolean deleteById(int id){
        if(!repository.existsById(id)){
            return false;
        }
        repository.deleteById(id);
        return true;
    }
}
</code></pre>
<p>注解解释如下：</p>
<ul>
<li><code>@Transactional</code>：</li>
<li><code>@Service</code>：标识为业务层，实际效果等价于<code>@Component</code></li>
<li><code>@RequiredArgsConstructor</code>：<code>Lombok</code>中的一个注解，主要是为了解决如下的警告：</li>
</ul>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/20210126213848467.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>其他一些根据方法名就知道含义的方法就不解释了。</p>
<h2 id="36-控制层">3.6 控制层</h2>
<pre><code class="language-java">@RestController
@RequestMapping(&quot;/&quot;)
@RequiredArgsConstructor(onConstructor = @__(@Autowired))
public class UserController {
    private final UserService service;

    @PostMapping(&quot;sign/in/up&quot;)
    public ResponseBody signInUp(@RequestBody User user) {
        if (service.exists(user)) {
            User u = service.findByNameAndPassword(user);
            return new ResponseBody(u != null ? ResponseCode.SIGN_IN_SUCCESS : ResponseCode.SIGN_IN_FAILED, u != null ? u.getId() : &quot;&quot;);
        }
        return new ResponseBody(service.insert(user) ? ResponseCode.SIGN_UP_SUCCESS : ResponseCode.SIGN_UP_FAILED, &quot;&quot;);
    }

    @PutMapping(&quot;update&quot;)
    public ResponseBody update(@RequestBody User user) {
        return new ResponseBody(service.update(user) ? ResponseCode.UPDATE_SUCCESS : ResponseCode.UPDATE_FAILED, &quot;&quot;);
    }

    @DeleteMapping(&quot;delete&quot;)
    public ResponseBody deleteByName(@RequestParam int id) {
        return new ResponseBody(service.deleteById(id) ? ResponseCode.DELETE_SUCCESS : ResponseCode.DELETE_FAILED, &quot;&quot;);
    }

    @GetMapping(&quot;test&quot;)
    public String test() {
        return &quot;test&quot;;
    }
}
</code></pre>
<p>注解解释如下：</p>
<ul>
<li><code>@RestController</code>：等价于<code>@ResponseBody</code>+<code>@Controller</code>，<code>@RepsonseBody</code>是直接返回数据的注解（不是默认的视图名字），而<code>@Controller</code>与<code>@Service</code>类似，查看源码可知道都是<code>@Component</code>的别名</li>
<li><code>@RequestMapping</code>：表示该类中的方法中包含的<code>Mapping</code>都以此值开头</li>
<li><code>@PostMapping</code>/<code>@PutMapping</code>/<code>@DeleteMapping</code>/<code>@GetMapping</code>：标识处理<code>POST</code>/<code>PUT</code>/<code>Delete</code>/<code>GET</code>请求的路径，如果类上添加了<code>@RequestMapping</code>，则把路径拼接在<code>@RequestMapping</code>的后面，比如这里的<code>@GetMapping(&quot;test&quot;)</code>相当于<code>/test</code></li>
</ul>
<h2 id="37-响应体响应码">3.7 响应体+响应码</h2>
<p>响应体：</p>
<pre><code class="language-java">@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
public class ResponseBody {
    private int code;
    private Object data;
}
</code></pre>
<p>响应码：</p>
<pre><code class="language-java">public class ResponseCode {
    public static final int SIGN_IN_SUCCESS = 2000;
    public static final int SIGN_UP_SUCCESS = 2001;
    public static final int UPDATE_SUCCESS = 2002;
    public static final int DELETE_SUCCESS = 2003;

    public static final int SIGN_IN_FAILED = 3000;
    public static final int SIGN_UP_FAILED = 3001;
    public static final int UPDATE_FAILED = 3002;
    public static final int DELETE_FAILED = 3003;
}
</code></pre>
<h2 id="38-配置文件">3.8 配置文件</h2>
<pre><code class="language-yml">spring:
  datasource:
    username: root
    password: 123456
    url: jdbc:mysql://localhost:3306/userinfo

  jpa:
    open-in-view: false
    hibernate:
      ddl-auto: update
</code></pre>
<p>数据库名字以及用户名密码请根据自己需要修改，<code>open-in-view</code>这个选项在<code>JPA</code>默认为<code>true</code>，设置为<code>false</code>是为了抑制一个警告，开启它的含义是在事务外也可以访问懒加载的数据，这样可能会引起手动数据源切换失败的问题，因此设置为<code>false</code>。</p>
<p><code>ddl-auto: update</code>表示更新数据表，原有数据保留，而且能在没有创建表的情况下自动创建表。该参数一共有5个设置选项：<code>update</code>、<code>create</code>、<code>create-drop</code>、<code>validate</code>、<code>none</code>，具体区别可以查看<a href="https://www.cnblogs.com/qingmuchuanqi48/p/11616145.html">这里</a>。</p>
<h2 id="39-测试">3.9 测试</h2>
<p>运行后可以访问本地的<code>localhost:8080/test</code>会看到如下页面：</p>
<figure data-type="image" tabindex="6"><img src="https://img-blog.csdnimg.cn/20210127090748603.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>这样就没问题了，剩下的需要配合<code>Android</code>端测试。</p>
<h1 id="4-android端">4 <code>Android</code>端</h1>
<h2 id="41-新建项目">4.1 新建项目</h2>
<p><code>Android Q+Java</code>。</p>
<h2 id="42-依赖权限">4.2 依赖+权限</h2>
<p>依赖：</p>
<pre><code class="language-bash">implementation 'com.squareup.okhttp3:okhttp:4.9.0'
implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.1'
implementation 'org.bouncycastle:bcprov-jdk15to18:1.68'
implementation &quot;org.projectlombok:lombok:1.18.16&quot;
annotationProcessor 'org.projectlombok:lombok:1.18.16'
</code></pre>
<p>权限：</p>
<pre><code class="language-xml">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;
&lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;
&lt;!--&lt;application&gt;中--&gt;
android:usesCleartextTraffic=&quot;true&quot;
</code></pre>
<p>开启<code>viewBinding</code>：</p>
<pre><code class="language-bash">buildFeatures{
    viewBinding = true
}
</code></pre>
<figure data-type="image" tabindex="7"><img src="https://img-blog.csdnimg.cn/20210127092905832.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="43-项目结构">4.3 项目结构</h2>
<figure data-type="image" tabindex="8"><img src="https://img-blog.csdnimg.cn/2021012709135827.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="44-实体类">4.4 实体类</h2>
<pre><code class="language-java">@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class User {
    private int id;
    private String name;
    private String password;

    public User(String name, String password) {
        this.name = name;
        this.password = password;
    }
}
</code></pre>
<h2 id="45-工具类">4.5 工具类</h2>
<pre><code class="language-java">public class Utils {
    private static final Keccak.Digest512 digest512 = new Keccak.Digest512();

    public static String encrypt(String origin) {
        return new String(Hex.encode(digest512.digest(origin.getBytes(StandardCharsets.UTF_8))));
    }

    public static String getResponseMessage(int code) {
        String message = &quot;&quot;;
        switch (code) {
            case ResponseCode.SIGN_IN_SUCCESS:
                message = &quot;登录成功&quot;;
                break;
            case ResponseCode.SIGN_UP_SUCCESS:
                message = &quot;注册成功&quot;;
                break;
            case ResponseCode.SIGN_IN_FAILED:
                message = &quot;用户名或密码错误&quot;;
                break;
            case ResponseCode.SIGN_UP_FAILED:
                message = &quot;注册失败&quot;;
                break;
            case ResponseCode.DELETE_FAILED:
                message = &quot;删除失败&quot;;
                break;
            case ResponseCode.DELETE_SUCCESS:
                message = &quot;删除成功,自动退出&quot;;
                break;
            case ResponseCode.UPDATE_SUCCESS:
                message = &quot;更新成功&quot;;
                break;
            case ResponseCode.UPDATE_FAILED:
                message = &quot;更新失败&quot;;
                break;
            case ResponseCode.EMPTY_RESPONSE:
                message = &quot;响应体为空&quot;;
                break;
            case ResponseCode.SERVER_ERROR:
                message = &quot;服务器错误&quot;;
                break;
            case ResponseCode.JSON_SERIALIZATION:
                message = &quot;JSON序列化错误&quot;;
                break;
            case ResponseCode.EXIT_SUCCESS:
                message = &quot;退出成功&quot;;
                break;
            case ResponseCode.REQUEST_FAILED:
                message = &quot;请求发送失败&quot;;
                break;
            case ResponseCode.UNCHANGED_INFORMATION:
                message = &quot;未修改信息&quot;;
                break;
        }
        return message;
    }

    public static void showMessage(Context context, Message message) {
        Toast.makeText(context, getResponseMessage(message.what), Toast.LENGTH_SHORT).show();
    }
}
</code></pre>
<p>工具类有三个方法，分别是：</p>
<ul>
<li>加密：将密码进行<code>SHA3-512</code>加密，加密后的密码再发送到后端</li>
<li>获取对应信息：根据<code>Message</code>获取对应的提示信息</li>
<li>展示信息：利用<code>Toast</code>展示信息</li>
</ul>
<h2 id="46-响应体响应码">4.6 响应体+响应码</h2>
<p>响应体：</p>
<pre><code class="language-java">@NoArgsConstructor
@Setter
@Getter
public class RestResponse {
    private int code;
    private Object data;
}
</code></pre>
<p>响应码：</p>
<pre><code class="language-java">public class ResponseCode {
    public static final int SIGN_IN_SUCCESS = 2000;
    public static final int SIGN_UP_SUCCESS = 2001;
    public static final int UPDATE_SUCCESS = 2002;
    public static final int DELETE_SUCCESS = 2003;

    public static final int SIGN_IN_FAILED = 3000;
    public static final int SIGN_UP_FAILED = 3001;
    public static final int UPDATE_FAILED = 3002;
    public static final int DELETE_FAILED = 3003;

    public static final int EMPTY_RESPONSE = 4000;
    public static final int SERVER_ERROR = 4001;
    public static final int REQUEST_FAILED = 4002;
    public static final int JSON_SERIALIZATION = 4003;
    public static final int EXIT_SUCCESS = 4004;
    public static final int UNCHANGED_INFORMATION = 4005;
}
</code></pre>
<h2 id="47-请求url常量">4.7 请求<code>URL</code>常量</h2>
<pre><code class="language-java">public class NetworkSettings {
    private static final String HOST = &quot;192.168.1.8&quot;;
    private static final String PORT = &quot;8080&quot;;
    public static final String SIGN_IN_UP = &quot;http://&quot;+ HOST +&quot;:&quot;+PORT + &quot;/sign/in/up&quot;;
    public static final String UPDATE = &quot;http://&quot;+ HOST +&quot;:&quot;+PORT + &quot;/update&quot;;
    public static final String DELETE = &quot;http://&quot;+ HOST +&quot;:&quot;+PORT + &quot;/delete&quot;;
}
</code></pre>
<h2 id="48-mainactivity">4.8 <code>MainActivity</code></h2>
<p>上一部分代码吧，剩下的大部分类似，看源码链接即可。</p>
<pre><code class="language-java">public void signInUp(View view) {
    try {
        String name = binding.name.getText().toString();
        //SHA3-512加密
        String password = Utils.encrypt(binding.password.getText().toString());
        //构造OkHttp请求Request
        Request request = new Request.Builder().url(NetworkSettings.SIGN_IN_UP).post(
        	//请求体类型为application/json;charset=utf-8，利用了Jackson序列化为JSON
            RequestBody.create(mapper.writeValueAsString(new User(name, password)), mediaType)
        ).build();
        //异步POST操作，传入一个Callback回调
        client.newCall(request).enqueue(new Callback() {
        	//若失败
            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
            	//请求失败信息
                message.what = ResponseCode.REQUEST_FAILED;
                //展示对应信息，注意不能直接使用Toast.make(getApplicationContext(),&quot;message&quot;,Toast.LENGTH_SHORT).show()
                //因为不是同一个线程，需要使用Handler提交，也就是post()方法，参数为一个线程
                handler.post(()-&gt;Utils.showMessage(getApplicationContext(),message));
                e.printStackTrace();
            }

            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
            	//如果成功
                if (response.isSuccessful()) {
                	//获取请求体
                    ResponseBody body = response.body();
                    //如果响应体不为空
                    if (body != null) {
                    	//反序列化为响应体，包含了一个响应码以及数据字段
                        RestResponse restResponse = mapper.readValue(body.string(), RestResponse.class);
                        //设置Message
                        message.what = restResponse.getCode();
                        //如果登录成功
                        if(message.what == ResponseCode.SIGN_IN_SUCCESS){
                            handler.post(()-&gt;{
                            	//存储用户id
                                signInId = (int)restResponse.getData();
                                //更新UI
                                binding.update.setVisibility(View.VISIBLE);
                                binding.delete.setVisibility(View.VISIBLE);
                                binding.signInUp.setText(&quot;退出&quot;);
                                binding.signInUp.setOnClickListener(v-&gt;signOut(false));
                                //保存旧用户名以及旧密码在更新的时候使用
                                oldName = binding.name.getText().toString();
                                oldPassword = binding.password.getText().toString();
                            });
                        }
                    } else {
                    	//空响应体
                        message.what = ResponseCode.EMPTY_RESPONSE;
                        Log.e(&quot;RESPONSE_BODY_EMPTY&quot;, response.message());
                    }
                } else {
                	//服务器错误
                    message.what = ResponseCode.SERVER_ERROR;
                    Log.e(&quot;SERVER_ERROR&quot;, response.message());
                }
                //根据Message提示对应信息
                handler.post(()-&gt;Utils.showMessage(getApplicationContext(),message));
            }
        });
    } catch (JsonProcessingException e) {
        message.what = ResponseCode.JSON_SERIALIZATION;
        Utils.showMessage(getApplicationContext(),message);
        e.printStackTrace();
    }
}
</code></pre>
<p>这部分是登录注册的代码，还有更新用户信息以及删除用户的代码，大部分类似。</p>
<h1 id="5-测试">5 测试</h1>
<figure data-type="image" tabindex="9"><img src="https://img-blog.csdnimg.cn/20210127093739687.gif" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="6-注意事项">6 注意事项</h1>
<p>如果出现了问题某些功能不能正常实现可以参考<a href="https://blog.csdn.net/qq_27525611/article/details/112744223">此处的一些注意事项以及解决方案</a>。</p>
<h1 id="7-源码">7 源码</h1>
<p>提供了<code>Java</code>+<code>Kotlin</code>两种实现：</p>
<ul>
<li><a href="https://github.com/2293736867/spring-boot-Android-Mysql">Github</a></li>
<li><a href="https://gitee.com/u6b7b5fc3/spring-boot-Android-Mysql">码云</a></li>
<li><a href="https://codechina.csdn.net/qq_27525611/spring-boot-Android-Mysql">CODE.CHINA</a></li>
</ul>
<h1 id="8-参考链接">8 参考链接</h1>
<p>1、<a href="https://blog.csdn.net/u012493207/article/details/50846616">CSDN-JPA之@GeneratedValue注解</a></p>
<p>2、<a href="https://blog.csdn.net/sandalphon4869/article/details/105507162">spring boot jpa学习：2.DAO和Service的自增id、删、查、改操作</a></p>
<p><strong>如果觉得文章好看，欢迎点赞。</strong></p>
<p><strong>同时欢迎关注微信公众号：氷泠之路。</strong></p>
<figure data-type="image" tabindex="10"><img src="https://img-blog.csdnimg.cn/20200806194605566.gif" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第224期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-224-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-224-qi/">
        </link>
        <updated>2021-01-24T01:30:44.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>从小到大，唯一不变的，就是一颗不想念书的心。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>晨起开门雪满山，雪晴云淡日光寒。<br>
——郑燮《山中雪后》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>活的越是绝望，写的词越是温柔，这也许是世间最大的讽刺。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第223期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-223-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-223-qi/">
        </link>
        <updated>2021-01-23T01:28:32.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>别和我说对不起，因为我既不能原谅你，也无法捅死你。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>半床落月蛩声病，万里寒云雁阵迟。<br>
——曹雪芹《残菊》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>旅行的意义在于找到自己，而非浏览他人。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第222期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-222-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-222-qi/">
        </link>
        <updated>2021-01-22T01:23:52.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>其实人生，在某个节点后就结束了，大家只是在等彩蛋。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>惊飙掠地冬将半，解鞍正值昏鸦乱。<br>
——纳兰性德《菩萨蛮·白日惊飚冬已半》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>许久未见的朋友，定会在梦里，有一次无需言语的交流。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java后端部署以及与Android通信注意事项]]></title>
        <id>https://2293736867.github.io/post/java-hou-duan-bu-shu-yi-ji-yu-android-tong-xin-zhu-yi-shi-xiang/</id>
        <link href="https://2293736867.github.io/post/java-hou-duan-bu-shu-yi-ji-yu-android-tong-xin-zhu-yi-shi-xiang/">
        </link>
        <updated>2021-01-21T04:22:59.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#1-%E6%A6%82%E8%BF%B0">1 概述</a></li>
<li><a href="#2-%E5%88%86%E7%B1%BB">2 分类</a></li>
<li><a href="#3-java%E7%AB%AF">3 <code>Java</code>端</a>
<ul>
<li><a href="#31-%E6%95%B0%E6%8D%AE%E5%BA%93">3.1 数据库</a>
<ul>
<li><a href="#311-%E9%A9%B1%E5%8A%A8">3.1.1 驱动</a></li>
<li><a href="#312-%E7%94%A8%E6%88%B7%E5%90%8D%E5%AF%86%E7%A0%81%E6%9D%83%E9%99%90">3.1.2 用户名/密码/权限</a></li>
<li><a href="#313-spring-boot%E4%B8%AD%E7%9A%84%E5%8A%A0%E5%AF%86%E9%85%8D%E7%BD%AE">3.1.3 <code>Spring Boot</code>中的加密配置</a></li>
<li><a href="#314-maven">3.1.4 <code>Maven</code></a></li>
</ul>
</li>
<li><a href="#32-%E5%AE%89%E5%85%A8%E7%BB%84%E9%98%B2%E7%81%AB%E5%A2%99">3.2 安全组/防火墙</a>
<ul>
<li><a href="#321-%E4%B8%8D%E5%B8%A6%E9%98%B2%E7%81%AB%E5%A2%99">3.2.1 不带防火墙</a></li>
<li><a href="#322-%E5%B8%A6%E9%98%B2%E7%81%AB%E5%A2%99">3.2.2 带防火墙</a>
<ul>
<li><a href="#3221-firewalld">3.2.2.1 <code>firewalld</code></a></li>
<li><a href="#3222-iptables">3.2.2.2 <code>iptables</code></a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#33-404">3.3 <code>404</code></a>
<ul>
<li><a href="#331-servlet">3.3.1 <code>Servlet</code></a></li>
<li><a href="#332-spring-boot">3.3.2 <code>Spring Boot</code></a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#4-android%E7%AB%AF">4 <code>Android</code>端</a>
<ul>
<li><a href="#41-http">4.1 <code>HTTP</code></a></li>
<li><a href="#42-%E7%BA%BF%E7%A8%8B">4.2 线程</a></li>
<li><a href="#43-%E6%9D%83%E9%99%90">4.3 权限</a></li>
<li><a href="#44-avd">4.4 <code>AVD</code></a></li>
<li><a href="#45-ip">4.5 <code>IP</code></a></li>
</ul>
</li>
<li><a href="#5-%E5%85%B6%E4%BB%96%E9%97%AE%E9%A2%98">5 其他问题</a>
<ul>
<li><a href="#51-http%E9%80%9A%E4%BF%A1">5.1 <code>HTTP</code>通信</a></li>
<li><a href="#52-json%E5%BA%8F%E5%88%97%E5%8C%96">5.2 <code>JSON</code>序列化</a></li>
</ul>
</li>
<li><a href="#6-%E6%9C%80%E5%90%8E">6 最后</a></li>
</ul>
</p>
<h1 id="1-概述">1 概述</h1>
<p>本文列举了一些<code>Android</code>+后端<code>Java</code>通信/部署时的问题以及注意事项，覆盖的问题包括但不限于安全组、数据库、路径等，如果各位读者的<code>Android</code>端不能正常访问<code>Java</code>后端，希望这里的解决方案能帮助到您。</p>
<h1 id="2-分类">2 分类</h1>
<p>这里将问题分为三类：</p>
<ul>
<li><code>Java</code>端问题</li>
<li><code>Android</code>端问题</li>
<li>其他杂项问题</li>
</ul>
<p>先来看一下<code>Java</code>端可能出现的问题。</p>
<h1 id="3-java端">3 <code>Java</code>端</h1>
<p>包括：</p>
<ul>
<li>数据库</li>
<li>安全组/防火墙</li>
<li><code>404</code></li>
</ul>
<h2 id="31-数据库">3.1 数据库</h2>
<h3 id="311-驱动">3.1.1 驱动</h3>
<p>注意<code>MySQL5.7</code>与<code>MySQL8</code>注册驱动时是不一样的，<code>MySQL5.7</code>是：</p>
<pre><code class="language-java">Class.forName(&quot;com.mysql.jdbc.Driver&quot;);
</code></pre>
<p><code>MySQL8</code>以上是：</p>
<pre><code class="language-java">Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);
</code></pre>
<p>另外要注意<code>JAR</code>包版本正确。</p>
<h3 id="312-用户名密码权限">3.1.2 用户名/密码/权限</h3>
<p>首先需要确保配置文件中的访问数据库的用户名以及密码要正确，不然的话可能会出现各种空指针错误，另外需要确保该用户对目标数据库或表具有对应的权限。</p>
<h3 id="313-spring-boot中的加密配置">3.1.3 <code>Spring Boot</code>中的加密配置</h3>
<p>在<code>application.yaml</code>/<code>application.yml</code>/<code>application.properties</code>中配置对应的用户名以及密码，一般明文是没问题的，这里是针对使用了<code>Jasypt</code>加密库（<code>Jasypt</code>可以加密<code>Spring Boot</code>中的配置文件，使用可以参考<a href="https://blog.csdn.net/qq_27525611/article/details/105797382">这里</a>）来说的。</p>
<p>因为使用<code>Jasypt</code>后配置文件为密文，如果此时的加密口令不能正确读取会直接报错，因此可以针对<code>Jasypt</code>的加密方式（简单口令加密、非明文口令、非对称加密等）查看配置文件是否有错漏，或者是否配置了对应的环境变量等。</p>
<h3 id="314-maven">3.1.4 <code>Maven</code></h3>
<p><code>Maven</code>的<code>WAR</code>打包插件不能将新修改的文件编译为字节码并打包，因此，如果修改了数据库的密码后，需要重新编译，一般步骤是先<code>clean</code>，再编译最后打包：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20210126103651188.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="32-安全组防火墙">3.2 安全组/防火墙</h2>
<h3 id="321-不带防火墙">3.2.1 不带防火墙</h3>
<p>查看防火墙可以使用：</p>
<pre><code class="language-bash">systemctl status firewalld
# 或
systemctl status iptables
</code></pre>
<p>如果是没有开启，那就只需要处理安全组就可以了。</p>
<p>一般服务器厂商都会提供安全组，开放对应的端口以及<code>IP</code>即可：</p>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20210121121059632.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h3 id="322-带防火墙">3.2.2 带防火墙</h3>
<h4 id="3221-firewalld">3.2.2.1 <code>firewalld</code></h4>
<p>带防火墙的话，可以先查看开启了哪些服务以及规则：</p>
<pre><code class="language-bash">firewall-cmd --list-services
firewall-cmd --list-ports
</code></pre>
<p>并根据需要添加相应规则，比如开放<code>8080</code>端口给所有<code>IP</code>：</p>
<pre><code class="language-bash"># 添加规则
firewall-cmd --add-port=8080/tcp --permanent
# 重新加载
firewall-cmd --reload
</code></pre>
<p>移除规则的话可以使用：</p>
<pre><code class="language-bash"># 移除规则
firewalld-cmd --remove-port=8080/tcp --permanent
# 也需要重新加载
firewall-cmd --reload
</code></pre>
<h4 id="3222-iptables">3.2.2.2 <code>iptables</code></h4>
<p>查看状态：</p>
<pre><code class="language-bash">systemctl status iptables
</code></pre>
<p>添加规则，以开启<code>8080</code>端口为例，修改<code>/etc/sysconfig/iptables</code>：</p>
<pre><code class="language-bash">vim /etc/sysconfig/iptables
</code></pre>
<p>并添加：</p>
<pre><code class="language-bash">-A INPUT -m state --state NEW -m tcp -p tcp --dport 8080 -j ACCEPT
-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 8080 -j ACCEPT
</code></pre>
<p>重启服务生效：</p>
<pre><code class="language-bash">systemctl restart iptables
</code></pre>
<h2 id="33-404">3.3 <code>404</code></h2>
<p>出现<code>404</code>的原因主要是因为路径出现问题，这里分两种情况讨论：</p>
<ul>
<li>使用<code>JavaWeb Servlet</code>形式</li>
<li><code>Spring Boot</code></li>
</ul>
<h3 id="331-servlet">3.3.1 <code>Servlet</code></h3>
<p>使用<code>Servlet</code>的话，本地运行需要配置<code>Tomcat</code>或其他<code>Web</code>服务器，因此如果在<code>IDEA</code>中配置<code>Tomcat</code>的话，需要在<code>Application context</code>这里配置路径：</p>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20210121104131489.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>当然不配置也不是不可以，默认有一个项目名的路径，通常会很长难以记忆，建议修改为一个容易记忆的路径。</p>
<p>如果是部署在服务器上的<code>Tomcat</code>，需要注意打包后的<code>WAR</code>包名字，比如打包后为<code>demo.war</code>，放置<code>webapps</code>后，启动<code>Tomcat</code>会自动解包为<code>webapps/demo</code>，这时候的路径需要对应<code>demo</code>进行访问，比如：</p>
<pre><code class="language-bash">http://www.example.com:8080/demo
http://xxx.xxx.xxx.xxx:8080/demo
</code></pre>
<h3 id="332-spring-boot">3.3.2 <code>Spring Boot</code></h3>
<p>使用<code>SpringBoot</code>的话基本上不会出现路径错误的问题，得益于<code>SpringBoot</code>强大的默认配置，一般在对应的方法上写上：</p>
<pre><code class="language-java">@GetMapping(&quot;/demo&quot;)
@PostMapping(&quot;/demo&quot;)
</code></pre>
<p>就可以访问了。</p>
<h1 id="4-android端">4 <code>Android</code>端</h1>
<p>排查完了<code>Java</code>端问题再来看看<code>Android</code>端的问题，包括：</p>
<ul>
<li><code>HTTP</code></li>
<li>线程</li>
<li><code>AVD</code></li>
<li>权限</li>
<li><code>IP</code></li>
</ul>
<h2 id="41-http">4.1 <code>HTTP</code></h2>
<p>从<code>Android P</code>开始默认要求使用<code>HTTPS</code>，默认情况下使用<code>HTTP</code>会出现如下异常：</p>
<pre><code class="language-css">W/System.err: java.io.IOException: Cleartext HTTP traffic to **** not permitted
java.net.UnknownServiceException: CLEARTEXT communication ** not permitted by network security policy
</code></pre>
<p>有两种解决办法：</p>
<ul>
<li>使用<code>HTTPS</code></li>
<li>修改<code>AndroidManifest.xml</code>使其允许<code>HTTP</code>连接</li>
</ul>
<p>使用后一种方法的话，在<code>AndroidManifest.xml</code>添加如下语句即可：</p>
<pre><code class="language-xml">&lt;application 
android:usesCleartextTraffic=&quot;true&quot;
/&gt;
</code></pre>
<h2 id="42-线程">4.2 线程</h2>
<p><code>Android 4.0</code>开始要求联网不能在主线程操作，所有有关联网的操作都需要新开一个线程，因此处理比较简单，将网络操作放在新线程中即可，示例如下：</p>
<pre><code class="language-java">FutureTask&lt;String&gt; task = new FutureTask&lt;&gt;(new NetworkThread());
Thread thread = new Thread(task);
thread.start();
String result = task.get();

public class NetworkThread implements Callable&lt;String&gt; {
    @Override
    public String call(){
        //网络操作
        return result;
    }
}
</code></pre>
<p>利用<code>FutureTask</code>，添加一个实现了<code>Callable&lt;T&gt;</code>（<code>T</code>的类型是线程操作的返回类型，比如这里是返回<code>String</code>）的类到其中，<code>start()</code>线程后，<code>get()</code>获取结果即可。</p>
<h2 id="43-权限">4.3 权限</h2>
<p>在<code>AndroidManifest.xml</code>添加网络权限：</p>
<pre><code class="language-xml">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;
&lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot; /&gt;
&lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;
</code></pre>
<h2 id="44-avd">4.4 <code>AVD</code></h2>
<p>出错日志如下：</p>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20210118055800483.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p><code>StackOverflow</code>上的方案是<code>卸载APP并重启AVD</code>：</p>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/20210118055847547.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>这个方法笔者测试是有效的但不确保百分百有效，估计这个是<code>AVD</code>的问题。</p>
<h2 id="45-ip">4.5 <code>IP</code></h2>
<p>对于<code>Android</code>来说，本地测试不能使用<code>localhost</code>或<code>127.0.0.1</code>，也就是不能使用：</p>
<pre><code class="language-java">&quot;http://localhost:8080/demo/xxxx&quot;
&quot;http://127.0.0.1:8080/demo/xxxx&quot;
</code></pre>
<p>而是使用内网<code>IP</code>，比如<code>192.168</code>开头的，或<code>10.253</code>开头的，可以使用</p>
<pre><code class="language-bash">ip addr
# 或
ifconfig
</code></pre>
<p>查看。</p>
<h1 id="5-其他问题">5 其他问题</h1>
<h2 id="51-http通信">5.1 <code>HTTP</code>通信</h2>
<p>这个主要是针对<code>Java Web</code>来说的，因为需要手动配置各种<code>HTTP</code>配置，比如<code>Content-Type</code>以及编码等，因此如果设置错误或<code>Android</code>端与<code>Java</code>端不一致就会导致<code>Android</code>端无法发送正确的参数或<code>Java</code>端无法获取正确的参数。</p>
<p>这里以原生的<code>HttpURLConnection</code>为例，在<code>Android</code>端，发送请求的设置如下：</p>
<pre><code class="language-java">String url = &quot;http://xxx.xxx.xxx.xxx:xxxx/demo/xxxx&quot;;
HttpURLConnection connection = (HttpURLConnection) new URL(url).openConnection();
            String data = &quot;name=&quot;+ URLEncoder.encode(name, StandardCharsets.UTF_8.toString())+&quot;&amp;password=&quot;+URLEncoder.encode(password,StandardCharsets.UTF_8.toString());
connection.setRequestMethod(&quot;POST&quot;);
connection.setDoInput(true);
connection.setDoOutput(true);
connection.getOutputStream().write(data.getBytes(StandardCharsets.UTF_8));
byte [] bytes = new byte[1024];
int len = connection.getInputStream().read(bytes);
return new String(bytes,0,len,StandardCharsets.UTF_8);
</code></pre>
<p>开启连接后，通过拼接以及<code>URLEncoder.encode()</code>的方式得到要发送的数据，再获取输出流将其写入。</p>
<p>在<code>Java</code>端对应代码如下：</p>
<pre><code class="language-java">@WebServlet(&quot;/xxxxx&quot;)
public class XXXServlet extends HttpServlet {
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException {
        request.setCharacterEncoding(&quot;utf-8&quot;);
        response.setCharacterEncoding(&quot;utf-8&quot;);
        response.setContentType(&quot;application/json;charset=utf-8&quot;);

        String name = request.getParameter(&quot;name&quot;);
        String password = request.getParameter(&quot;password&quot;);
	}
}
</code></pre>
<p>首先设置编码<code>UTF8</code>，然后获取参数即可，返回之前需要设置返回类型，这里是<code>application/json</code>。</p>
<h2 id="52-json序列化">5.2 <code>JSON</code>序列化</h2>
<p><code>JSON</code>序列化框架有很多，常见的有：</p>
<ul>
<li><code>Gson</code></li>
<li><code>Jackson</code></li>
<li><code>fastjson</code></li>
</ul>
<p>这里笔者测试的时候使用<code>Jackson</code>同时配合<code>Lombok</code>，注意需要加上<code>@Setter</code>以及<code>@Getter</code>，不然序列化/反序列化无法正常工作。</p>
<p>另外还需要存在默认的构造方法，使用序列化响应体时，示例如下：</p>
<pre><code class="language-java">@Setter
@Getter
public class ResponseBody{
    private Object data;
    private int code;
}
</code></pre>
<p>如果存在了其他的构造方法请添加<code>@NoArgsConsturctor</code>，生成一个无参构造方法。</p>
<p>在<code>Kotlin</code>中则需要指定默认值，比如：</p>
<pre><code class="language-kotlin">class ResponseBody(var code:Int,var data:Any)
</code></pre>
<p>这样是无法正常工作的，添加默认值就可以了：</p>
<pre><code class="language-kotlin">class ResponseBody(var code:Int=0,var data:Any=&quot;&quot;)
</code></pre>
<h1 id="6-最后">6 最后</h1>
<p>希望读者看到最后能解决问题，另外如果还有其他问题或一些解决问题的其他方案欢迎评论补充。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Debian10 安装MyCLI]]></title>
        <id>https://2293736867.github.io/post/debian10-an-zhuang-mycli/</id>
        <link href="https://2293736867.github.io/post/debian10-an-zhuang-mycli/">
        </link>
        <updated>2021-01-21T00:45:11.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-概述">1 概述</h1>
<p><code>Debian10</code>安装<code>MyCLI</code>。</p>
<p>环境：</p>
<ul>
<li><code>Debian10</code></li>
<li><code>Python3.7</code></li>
</ul>
<h1 id="2-准备环境">2 准备环境</h1>
<h2 id="21-python">2.1 <code>Python</code></h2>
<p>首先确保安装了<code>Python</code>：</p>
<pre><code class="language-bash">apt install python3
</code></pre>
<p>若是没有换源建议先换源，这里列出了阿里的源：</p>
<pre><code class="language-bash">deb http://mirrors.aliyun.com/debian/ buster main non-free contrib
deb-src http://mirrors.aliyun.com/debian/ buster main non-free contrib
deb http://mirrors.aliyun.com/debian-security buster/updates main
deb-src http://mirrors.aliyun.com/debian-security buster/updates main
deb http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib
deb-src http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib
deb http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib
deb-src http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib
</code></pre>
<p>使用：</p>
<pre><code class="language-bash">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak
sudo vim /etc/apt/sources.list
</code></pre>
<p>把源复制过去即可。</p>
<p>安装完成后可以加个软链：</p>
<pre><code class="language-bash">sudo ln -s /usr/bin/python /usr/bin/python3
</code></pre>
<h2 id="22-pip">2.2 <code>pip</code></h2>
<p>同时需要安装<code>pip</code>：</p>
<pre><code class="language-bash">curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
sudo python get-pip.py 
</code></pre>
<p>安装完成后可以先测试一下：</p>
<pre><code class="language-bash">pip --version
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20210120153719245.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>接着为<code>pip</code>换源，先创建<code>~/.pip</code>目录，在创建<code>~/.pip/pip.conf</code>文件：</p>
<pre><code class="language-bash">mkdir ~/.pip
cd ~/.pip
vim pip.conf
</code></pre>
<p>输入如下内容：</p>
<pre><code class="language-bash">[global]
index-url = https://pypi.tuna.tsinghua.edu.cn/simple
[install]
trusted-host = https://pypi.tuna.tsinghua.edu.cn
</code></pre>
<p>可以使用<code>pip config list</code>查看是否存在镜像：</p>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20210120155146995.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="3-安装mycli">3 安装<code>MyCLI</code></h1>
<pre><code class="language-bash">pip install mycli
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20210120155648180.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>使用：</p>
<pre><code class="language-bash">mycli -u USERNAME
</code></pre>
<p>输入密码即可：</p>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20210120155716457.png" alt="在这里插入图片描述" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第221期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-221-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-221-qi/">
        </link>
        <updated>2021-01-20T21:28:10.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>群发的祝福和个位数的红包，都是没有灵魂的。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>重唱梅边新度曲，催发寒梢冻蕊。<br>
——吴文英《金缕歌·陪履斎先生沧浪看梅》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>这里有你，他现在只有我了。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第220期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-220-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-220-qi/">
        </link>
        <updated>2021-01-19T21:25:27.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>运动一周瘦不下来不要紧，因为运动十周也瘦不下来的。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>江淮度寒食，京洛缝春衣。<br>
——王维《送綦母潜落第还乡》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>正因为不会发生，所以才叫奇迹。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第219期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-219-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-219-qi/">
        </link>
        <updated>2021-01-19T05:28:56.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>无论最后我们疏远成什么样，一个红包，就能回到当初。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>欲将轻骑逐，大雪满弓刀。<br>
——卢纶《和张仆射塞下曲·其三》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>温柔正确的人总是难以生存，因为这世界并不温柔，也不正确。</p>
</blockquote>
]]></content>
    </entry>
</feed>