<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://2293736867.github.io</id>
    <title>氷泠&apos;s blog</title>
    <updated>2021-06-23T01:16:35.062Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://2293736867.github.io"/>
    <link rel="self" href="https://2293736867.github.io/atom.xml"/>
    <subtitle>几百遍，重复了几百遍
重复的情绪重复的熬过想你的夜</subtitle>
    <logo>https://2293736867.github.io/images/avatar.png</logo>
    <icon>https://2293736867.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 氷泠&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[每日分享 第373期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-373-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-373-qi/">
        </link>
        <updated>2021-06-23T01:09:59.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>一个成年人是不会挑食的，他们会说，我对这个过敏。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>若耶溪傍采莲女，笑隔荷花共人语。<br>
——李白《采莲曲》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>与其诅咒黑暗，不如点亮烛光。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1624410676989.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>今天还是剑指的题啊。</p>
<p>顺便提一下<code>LeetCode</code>改版了，<code>cn</code>版更加接近了国际版。</p>
<p>今天的每日一题比较简单，可以直接右移32次计算：</p>
<pre><code class="language-java">public class Solution {
    public int hammingWeight(int n) {
        int ans = 0;
        for (int i = 0; i &lt; 32; i++)
            ans += (n &gt;&gt;&gt; i) &amp; 1;
        return ans;
    }
}
</code></pre>
<p>右移<code>i</code>位后与<code>1</code>相与，如果为<code>1</code>表示对应的位为<code>1</code>，累加到结果处即可。</p>
<p>当然更快的方法是直接将最右边的一位<code>1</code>置为<code>0</code>，公式就是：</p>
<pre><code class="language-java">n = ( n &amp; (n-1) );
</code></pre>
<p>应用公式后循环的次数会小于等于32：</p>
<pre><code class="language-java">public class Solution {
    public int hammingWeight(int n) {
        int ans = 0;
        while(n != 0){
            n = (n &amp; (n-1));
            ++ans;
        }
        return ans;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1624410660717.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第372期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-372-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-372-qi/">
        </link>
        <updated>2021-06-21T18:51:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>一见钟情就是好看，深思熟虑就是没钱。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>夜来南风起，小麦覆陇黄。<br>
——白居易《观刈麦》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>时间就是一个饥饿的怪物，稍有不慎便会被它吃掉。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1624301749763.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>今天居然出剑指的题了，好家伙：</p>
<pre><code class="language-java">import java.util.*;

public class Solution {
    private final List&lt;String&gt; list = new ArrayList&lt;&gt;(40320);
    public String[] permutation(String s) {
        dfs(s.toCharArray(),0,s.length());
        return list.toArray(new String[0]);
    }

    private void dfs(char[]ch,int start,int n){
        if(start == n-1){
            list.add(new String(ch));
            return;
        }
        for (int i = start; i &lt; n; i++) {
            if(i == start){
                dfs(ch,start+1,n);
                continue;
            }
            int j = i-1;
            while(j &gt;= start){
                if(ch[j] == ch[i]){
                    break;
                }
                --j;
            }
            if(j + 1 != start){
                continue;
            }

            char c = ch[start];
            ch[start] = ch[i];
            ch[i] = c;

            dfs(ch,start+1,n);

            c = ch[i];
            ch[i] = ch[start];
            ch[start] = c;
        }
    }
}
</code></pre>
<p>这是交换字符做的，官方题解给的是一个回溯还有下一个排列那个算法。</p>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1624301912454.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第371期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-371-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-371-qi/">
        </link>
        <updated>2021-06-21T00:06:19.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>有钱能买来幸福吗？不能，有钱本身就是幸福！</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>惟有绿荷红菡萏，卷舒开合任天真。<br>
——李商隐《赠荷花》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>早知如此绊人心，何如当初莫相识。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1624234354250.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>手动排列组合：</p>
<pre><code class="language-java">import java.util.ArrayList;
import java.util.List;

public class Solution {
    public List&lt;String&gt; readBinaryWatch(int turnedOn) {
        if (turnedOn == 0) {
            return List.of(&quot;0:00&quot;);
        }
        List&lt;String&gt; ans = new ArrayList&lt;&gt;(500);
        String[][] hour = new String[4][];
        String[][] minute = new String[5][];

        hour[0] = new String[]{&quot;1&quot;, &quot;2&quot;, &quot;4&quot;, &quot;8&quot;};
        hour[1] = new String[]{&quot;3&quot;, &quot;5&quot;, &quot;6&quot;, &quot;9&quot;, &quot;10&quot;};
        hour[2] = new String[]{&quot;7&quot;, &quot;11&quot;};

        minute[0] = new String[]{&quot;01&quot;, &quot;02&quot;, &quot;04&quot;, &quot;08&quot;, &quot;16&quot;, &quot;32&quot;};
        minute[1] = new String[]{&quot;03&quot;, &quot;05&quot;, &quot;09&quot;, &quot;17&quot;, &quot;33&quot;, &quot;06&quot;, &quot;10&quot;, &quot;18&quot;, &quot;34&quot;, &quot;12&quot;, &quot;20&quot;, &quot;36&quot;, &quot;24&quot;, &quot;40&quot;, &quot;48&quot;};
        minute[2] = new String[]{&quot;07&quot;, &quot;11&quot;, &quot;19&quot;, &quot;35&quot;, &quot;13&quot;, &quot;21&quot;, &quot;37&quot;, &quot;25&quot;, &quot;41&quot;, &quot;49&quot;, &quot;14&quot;, &quot;22&quot;, &quot;38&quot;, &quot;26&quot;, &quot;42&quot;, &quot;50&quot;, &quot;28&quot;, &quot;44&quot;, &quot;52&quot;, &quot;56&quot;};
        minute[3] = new String[]{&quot;15&quot;, &quot;23&quot;, &quot;39&quot;, &quot;27&quot;, &quot;43&quot;, &quot;51&quot;, &quot;29&quot;, &quot;45&quot;, &quot;53&quot;, &quot;57&quot;, &quot;30&quot;, &quot;46&quot;, &quot;54&quot;, &quot;58&quot;};
        minute[4] = new String[]{&quot;31&quot;, &quot;47&quot;, &quot;55&quot;, &quot;59&quot;};

        for (int m = 0; m &lt;= turnedOn; m++) {
            int h = turnedOn - m;
            if(m &lt;= 3 &amp;&amp; h &lt;= 5){

            }
            if (m == 0 &amp;&amp; h &lt;= 3) {
                for (String s : hour[h - 1]) {
                    ans.add(s + &quot;:00&quot;);
                }
            } else if (h == 0 &amp;&amp; m &lt;= 5) {
                for (String s : minute[m - 1]) {
                    ans.add(&quot;0:&quot; + s);
                }
            } else if (h &lt;= 3 &amp;&amp; m &lt;= 5) {
                for (String hh : hour[h - 1]) {
                    for (String mm : minute[m - 1]) {
                        ans.add(hh + &quot;:&quot; + mm);
                    }
                }
            }
        }
        return ans;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1624234391625.png" alt="" loading="lazy"></figure>
<p>当然肯定不够大佬的回溯剪枝快：</p>
<pre><code class="language-java">class Solution {

    // 直接把二进制的问题转换为数组累加问题
    int[] hours = new int[]{1,2,4,8,0,0,0,0,0,0};
    int[] minutes = new int[]{0,0,0,0,1,2,4,8,16,32};
    List&lt;String&gt; res = new ArrayList&lt;&gt;();

    public List&lt;String&gt; readBinaryWatch(int turnedOn) {
        // 方法二：采用回溯法
        backTrack(turnedOn,0,0,0);
        return res;

    }

    // 回溯的参数：num(需要点亮的灯，初始为turnedOn),index(点亮的下标)
    // hour(小时数)minute(分钟数)
    public void backTrack(int num,int index,int hour,int minute){
        // 剪枝操作
        if(hour &gt; 11  || minute &gt; 59){
            return;
        }
        // 递归出口,当点亮到第0栈灯的时候，那么回溯所有数据
        if(num == 0){
            // 进行字符串拼接
            StringBuilder sb = new StringBuilder();
            sb.append(hour).append(':');
            if(minute &lt; 10){
                sb.append('0');
            }
            sb.append(minute);z
            res.add(sb.toString());
            //记得return终止掉
            return;
        }
        // 这里是从下标开始递归遍历
        for(int i = index; i &lt; 10; i++){
            backTrack(num - 1, i+1,hour+hours[i],minute+minutes[i]);
        }
    }
}
</code></pre>
<p>看做01序列分别对分钟和小时进行取值，强。</p>
<figure data-type="image" tabindex="3"><img src="https://2293736867.github.io/post-images/1624234527631.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第370期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-370-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-370-qi/">
        </link>
        <updated>2021-06-19T19:03:28.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>你的晚安，只是想让我闭嘴。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>初月未终夕，边烽不过秦。<br>
——贾岛《暮过山村》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>人总是贪婪的，就像是最开始，我也只是想知道你的名字。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1624129533522.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>使用一种树的思想，一个节点有两个指针：</p>
<ul>
<li>兄弟指针：指向兄弟</li>
<li>孩子指针：指向孩子</li>
</ul>
<p>题目中的<code>birth</code>实际上是添加节点操作，通过哈希表找到对应的<code>parent</code>后，首先判断它的孩子是否为空，如果为空直接添加孩子，如果不为空，拿到孩子节点，并把新节点添加到最后的兄弟节点。</p>
<p>另外需要注意的一个操作是获取操作，本质上是树的遍历，利用了栈，每次遍历某节点的时候：</p>
<ul>
<li>遍历该节点，如果不是死亡状态，添加到列表中</li>
<li>如果该节点的兄弟节点不为空，添加兄弟节点到栈中</li>
<li>如果该节点的孩子节点不为空，添加孩子节点到栈中</li>
</ul>
<p>这样就能得到先遍历孩子再遍历兄弟的顺序了，代码如下：</p>
<pre><code class="language-java">import java.util.*;

public class ThroneInheritance {
    private final Node root;
    private final Map&lt;String,Node&gt; map;
    public ThroneInheritance(String kingName) {
        root = new Node();
        root.name = kingName;
        map = new HashMap&lt;&gt;();
        map.put(kingName,root);
    }

    public void birth(String parentName, String childName) {
        Node children = new Node();
        children.name = childName;
        map.put(childName,children);
        Node parent = map.get(parentName);
        if(parent.children == null){
            parent.children = children;
        }else {
            parent = parent.children;
            while (parent.brother != null) {
                parent = parent.brother;
            }
            parent.brother = children;
        }
    }

    public void death(String name) {
        map.get(name).death = true;
    }

    public List&lt;String&gt; getInheritanceOrder() {
        List&lt;String&gt; list = new LinkedList&lt;&gt;();
        Stack&lt;Node&gt; stack = new Stack&lt;&gt;();
        stack.add(root);
        while (!stack.isEmpty()){
            Node temp = stack.pop();
            if(!temp.death){
                list.add(temp.name);
            }
            if(temp.brother != null){
                stack.push(temp.brother);
            }
            if(temp.children != null){
                stack.push(temp.children);
            }
        }
        return list;
    }

    private static class Node{
        String name;
        boolean death;
        Node brother;
        Node children;
    }
}
</code></pre>
<p>必须吹一波自己，近乎双100，不愧是在凌晨三点做的：</p>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1624129460904.png" alt="" loading="lazy"></figure>
<p>再优化一下，最快279ms，比第一名快，舒服：</p>
<figure data-type="image" tabindex="3"><img src="https://2293736867.github.io/post-images/1624130160141.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="4"><img src="https://2293736867.github.io/post-images/1624130109126.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第369期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-369-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-369-qi/">
        </link>
        <updated>2021-06-18T16:38:35.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>岁月是把杀猪刀，可他拿丑的人一点办法也没有。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>藕花珠缀，犹似汗凝妆。<br>
——阎选《临江仙·雨停荷荠逗浓香》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>如果你是我该多好，那你就知道我有多难过，多喜欢你。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1624080638582.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>本来想动归的，看了一下数据量，直接暴力回溯：</p>
<pre><code class="language-java">import java.util.List;

public class Solution {
    private int max = 0;
    public int maxLength(List&lt;String&gt; arr) {
        dfs(arr,0,new StringBuilder());
        return max;
    }

    private void dfs(List&lt;String&gt; arr,int index,StringBuilder current){
        int len = current.length();
        if(index &lt; arr.size()) {
            if(len &gt; max){
                max = len;
            }
            dfs(arr,index+1,current);
            StringBuilder next = new StringBuilder(current);
            next.append(arr.get(index));
            if(check(next)){
                dfs(arr,index+1,next);
            }
        }
        if(len &gt; max){
            max = len;
        }
    }

    private boolean check(StringBuilder builder){
        boolean []table = new boolean[26];
        for (int i=0;i&lt;builder.length();++i){
            int index = builder.charAt(i) - 'a';
            if(!table[index]){
                table[index] = true;
            }else{
                return false;
            }
        }
        return true;
    }
}
</code></pre>
<p>效果一般般：</p>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1624034460831.png" alt="" loading="lazy"></figure>
<p>加上位运算优化（看了题解的）：</p>
<pre><code class="language-java">import java.util.List;

public class Solution {
    private int ans = 0;

    public int maxLength(List&lt;String&gt; arr) {
        int n = arr.size();
        int [] masks = new int[n];
        int index = 0;
        for (String s : arr) {
            int mask = 0;
            for (int i = 0; i &lt; s.length(); i++) {
                int ch = s.charAt(i) - 'a';
                if (((mask &gt;&gt; ch) &amp; 1) != 0) {
                    mask = 0;
                    break;
                }
                mask |= 1 &lt;&lt; ch;
            }
            if (mask &gt; 0) {
                masks[index++] = mask;
            }
        }
        backtrack(0,0,masks,index);
        return ans;
    }

    private void backtrack(int pos, int mask,int []masks,int n) {
        if (pos == n){
            ans = Math.max(ans, Integer.bitCount(mask));
            return;
        }

        if ((mask &amp; masks[pos]) == 0) {
            backtrack(pos + 1, mask | masks[pos],masks,n);
        }
        backtrack(pos + 1, mask,masks,n);
    }
}
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://2293736867.github.io/post-images/1624075839526.png" alt="" loading="lazy"></figure>
<p>本质上是用一个<code>mask</code>去代替哈希表，<code>mask</code>是一个整型，32位，因为只有小写字母，最多只有26位，所以可以利用一个整型中的每一位去判断字母是否出现过。</p>
<p>具体做法就是，一个字符串对应一个整型<code>mask</code>，遍历每个字符串中的每一个字符，如果字符已经出现过（对应的<code>mask</code>为1），也就是以下语句为<code>true</code>：</p>
<pre><code class="language-java">if(((mask &gt;&gt; ch) &amp; 1) != 0)
</code></pre>
<p>这样就把<code>mask</code>重置为0，否则将对应的位置为1：</p>
<pre><code class="language-java">mask = mask | (1 &lt;&lt; ch);
</code></pre>
<p>也就是</p>
<pre><code class="language-java">mask |= (1&lt;&lt;ch);
</code></pre>
<p>在回溯判断的时候，使用</p>
<pre><code class="language-java">mask &amp; masks[pos] == 0
</code></pre>
<p>即可判断字母是否出现过，如果不为0，表示有重合的1，也就是出现过相同字母了，否则进行下一层的回溯。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何建立一个足够安全的SSH连接？]]></title>
        <id>https://2293736867.github.io/post/ru-he-jian-li-yi-ge-zu-gou-an-quan-de-ssh-lian-jie/</id>
        <link href="https://2293736867.github.io/post/ru-he-jian-li-yi-ge-zu-gou-an-quan-de-ssh-lian-jie/">
        </link>
        <updated>2021-06-18T07:54:10.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-概述">1 概述</h1>
<p>使用<code>SSH</code>连接服务器是一件很平常的事，但是，连接是否足够安全是一个令人担忧的问题。本文从如下几个方面介绍了如何建立一个足够安全的<code>SSH</code>连接：</p>
<ul>
<li>端口</li>
<li>协议</li>
<li>用户</li>
<li>密码</li>
<li>密钥对</li>
<li><code>ssh-agent</code></li>
</ul>
<h1 id="2-端口">2 端口</h1>
<p>第一步就是修改默认端口<code>22</code>，修改<code>/etc/ssh/sshd_config</code>中的<code>Port</code>即可，比如这里修改为<code>1234</code>端口：</p>
<pre><code class="language-bash">Port 1234
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200820155542693.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>在<code>Debian</code>系的系统中直接修改端口就可以了，在<code>RedHat</code>中还需要使用<code>semanage</code>去开启端口：</p>
<pre><code class="language-bash">yum install policycoreutils-python #没有安装的话需要先安装
semanage port -a -t ssh_port_t -p tcp 1234 # 添加端口
semanage port -l | grep ssh # 验证是否添加成功
</code></pre>
<h1 id="3-ssh协议">3  <code>SSH</code>协议</h1>
<p><code>SSH2</code>协议要比<code>SSH1</code>安全，因此建议使用，同样修改配置文件：</p>
<pre><code class="language-bash">Protocol 2 # 如果没有就末尾添加
</code></pre>
<p>这样客户端连接的时候就不能使用<code>Protocol 1</code>协议连接：</p>
<pre><code class="language-bash">ssh -1 username@ip
</code></pre>
<p>会提示</p>
<pre><code class="language-bash">SSH protocol v.1 is no longer supported
</code></pre>
<h1 id="4-超时断开">4 超时断开</h1>
<p>修改为<code>60s</code>未操作自动断开：</p>
<pre><code class="language-bash">ClientAliveInterval 60 
# 以秒为单位，超过60s未操作自动断开

ClientAliveCountMax 0 
# 如果客户端没有响应则判断一次超时，该参数设置允许超时的次数
</code></pre>
<h1 id="5-限制用户">5 限制用户</h1>
<h2 id="51-禁用root用户登录">5.1 禁用<code>root</code>用户登录</h2>
<pre><code class="language-bash">PermitRootLogin no
</code></pre>
<p>当然禁用之前需要先创建好登录的用户，这里假设创建一个叫<code>aa</code>的用户：</p>
<pre><code class="language-bash">useradd aa
passwd aa
vim /etc/sudoers
</code></pre>
<p>复制一行<code>root</code>的权限并修改用户名：</p>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20210618095059197.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>然后输入<code>:wq!</code>强制保存退出。</p>
<h2 id="52-指定用户登录">5.2 指定用户登录</h2>
<pre><code class="language-bash">AllowUsers testuser
</code></pre>
<p>这样只能通过该用户连接到该服务器，另外，如果出现拒绝登录的问题：</p>
<pre><code class="language-bash">kex_exchange_identification: read: Connection reset by peer
</code></pre>
<p>则需要去开启对应允许的<code>ip</code>登录，修改<code>/etc/hosts.allow</code>，添加：</p>
<pre><code class="language-bash">sshd: ALL
</code></pre>
<h2 id="53-禁用特定用户登录">5.3 禁用特定用户登录</h2>
<pre><code class="language-bash">DenyUser testuser
</code></pre>
<p>禁止通过<code>testuser</code>登录。</p>
<p>类似的配置还有<code>AllowGroups</code>与<code>DenyGroups</code>。</p>
<h1 id="6-密码">6 密码</h1>
<p>禁用（空）密码登录：</p>
<pre><code class="language-bash">PermitEmptyPasswords no
PasswordAuthentication no
</code></pre>
<h1 id="7-日志">7 日志</h1>
<pre><code class="language-bash">LogLevel VERBOSE
</code></pre>
<p>默认为<code>INFO</code>，修改为<code>VERBOSE</code>可以得到更加详细的信息。</p>
<h1 id="8-密钥对">8 密钥对</h1>
<h2 id="81-生成密钥对">8.1 生成密钥对</h2>
<p>上面已经设置了不能使用密码登录，那么，换句话说需要使用密钥登录，生成密钥并不难：</p>
<pre><code class="language-bash">ssh-keygen -t rsa 
</code></pre>
<p>只需要指定算法即可，默认为<code>3072</code>位，可选<code>4096</code>位。</p>
<p>但是，相比起传统的<code>RSA</code>，在<code>OpenSSH 6.5</code>中引入了另一种叫<code>Ed25519</code>的更加安全的算法，使用椭圆曲线进行加密。<code>Ed25519</code>相比起<code>RSA</code>的优点有：</p>
<ul>
<li>体积更小：相比起<code>RSA 3072</code>的<code>544</code>个字符，<code>Ed25519</code>只有<code>68</code>个字符</li>
<li>更快：生成速度比<code>RSA</code>快，同时签名速度也比<code>RSA</code>快</li>
<li>更安全：签名过程不依赖随机数生成器，不依赖哈希函数的防碰撞特性，没有时间通道攻击的问题</li>
</ul>
<p>生成方式很简单：</p>
<pre><code class="language-bash">ssh-keygen -a 1024 -t ed25519 -f ~/.ssh/ed25519
</code></pre>
<p>参数说明如下：</p>
<ul>
<li><code>-a</code>：指定<code>KDF</code>（<code>Key Derivation Function</code>）的轮数</li>
<li><code>-t</code>：指定算法，可选<code>dsa</code>、<code>ecdsa</code>、<code>ecdsa-sk</code>、<code>ed25519</code>、<code>ed25519-sk</code>、<code>rsa</code></li>
<li><code>-f</code>：指定位置</li>
</ul>
<p>生成之后复制公钥即可：</p>
<pre><code class="language-bash">ssh-copy-id -i ~/.ssh/ed25519.pub user@ip
</code></pre>
<h2 id="82-私钥密码">8.2 私钥密码</h2>
<p>比如按上述方式生成密钥对时，会提示输入私钥密码：</p>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20200820164532325.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>这里的密码会在使用私钥连接的时候提示：</p>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20200820164836250.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="83-配合ssh-add">8.3 配合<code>ssh-add</code></h2>
<p>默认情况下每次使用私钥登录的时候都需要输入私钥的密码，如果不想每次输出，可以使用<code>ssh-add</code>：</p>
<pre><code class="language-bash">ssh-add ~/.ssh/test # ~/.ssh/test替换成对应的私钥路径
</code></pre>
<p>这样只需要输入一次私钥密码，下一次连接的时候就不需要输入私钥密码连接了。</p>
<h2 id="84-使用不同密钥对">8.4 使用不同密钥对</h2>
<p>假设您有多台服务器：<code>server1</code>，<code>server2</code>，<code>server3</code>，则可以为不同服务器使用不同的密钥对，而不是使用同一个密钥对：</p>
<pre><code class="language-bash">ssh-keygen -a 1024 -t ed25519 -f ~/.ssh/server1
ssh-keygen -a 1024 -t ed25519 -f ~/.ssh/server2
ssh-keygen -a 1024 -t ed25519 -f ~/.ssh/server3
</code></pre>
<p>接着复制公钥到对应的服务器上：</p>
<pre><code class="language-bash">ssh-copy-id user@server1 -i ~/.ssh/server1.pub
ssh-copy-id user@server2 -i ~/.ssh/server2.pub
ssh-copy-id user@server3 -i ~/.ssh/server3.pub
</code></pre>
<h1 id="9-ssh-agent">9 <code>ssh-agent</code></h1>
<h2 id="91-这是什么">9.1 这是什么？</h2>
<p><code>ssh-agent</code>是一个程序，可以帮助管理私钥。代理能提供如下用途：</p>
<ul>
<li>自动选择密钥：使用不同密钥连接到不同主机时，需要手动指定密钥（比如上面的<code>使用不同密钥对</code>的例子中，连接到不同服务器时需要加上<code>-i</code>参数），<code>ssh-agent</code>可以自动选择，不需要手动指定</li>
<li>自动输入私钥密码：如果私钥设置了密钥（比如上面的<code>私钥密码</code>例子），但是又需要频繁地使用私钥进行认证时，<code>ssh-agent</code>可以帮助自动输入私钥的密码</li>
</ul>
<h2 id="92-使用">9.2 使用</h2>
<p>首先启动：</p>
<pre><code class="language-bash">eval `ssh-agent` # 注意是反引号
</code></pre>
<p>接着添加私钥：</p>
<pre><code class="language-bash"># 以上面“使用不同的密钥对”为例
ssh-add ~/.ssh/server1
ssh-add ~/.ssh/server1
ssh-add ~/.ssh/server1
</code></pre>
<p>这样连接的时候就不需要手动指定<code>-i</code>参数了。</p>
<p>如果私钥指定了密码，会在<code>ssh-add</code>时进行提示输入：</p>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/20200820170238249.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>这样下次使用带密钥的私钥连接时就不需要输入密码了。</p>
<h1 id="10-2fa">10 <code>2FA</code></h1>
<p><code>Two-Factor Authentication</code>，缩写<code>2FA</code>，意为<code>双重认证</code>，<code>双因子认证</code>等等，顾名思义就是进行两步认证的操作，可选的应用有：</p>
<ul>
<li><code>Google Authenticator</code></li>
<li><code>Authy</code></li>
<li><code>Yubico</code></li>
<li><code>Duo</code></li>
</ul>
<p>比如<code>Google Authenticator</code>，安装之后，连接服务器需要进行输入验证码的操作。</p>
<p>具体的话就不演示了，因为笔者需要经常连接，因此这个选项对笔者来说不太实际，想要实现的话具体可以参考<a href="https://xz.aliyun.com/t/5249">这里</a>。</p>
<h1 id="11-其他选项">11 其他选项</h1>
<h2 id="111-设置最大错误次数">11.1 设置最大错误次数</h2>
<pre><code class="language-bash">MaxAuthTries 6
</code></pre>
<p>默认为最多允许<code>3</code>次密码错误（需要除2），修改为<code>2</code>则表示如果密码输入错误一次即自动断开。</p>
<h2 id="112-主动断开会话">11.2 主动断开会话</h2>
<pre><code class="language-bash">LoginGraceTime 120
</code></pre>
<p>在<code>LoginGraceTime</code>指定的时间内如果没有连接成功，则自动断开会话，默认单位为秒，可以指定以分钟为单位，比如：</p>
<pre><code class="language-bash">LoginGraceTime 2m
</code></pre>
<h1 id="12-最后">12 最后</h1>
<p>修改完配置文件<code>/etc/ssh/ssd_config</code>后，对<code>sshd</code>服务进行重启：</p>
<pre><code class="language-bash">systemctl restart sshd
</code></pre>
<h1 id="13-参考">13 参考</h1>
<ul>
<li>
<p><a href="http://www.zsythink.net/archives/2407/">了解ssh代理：ssh-agent</a></p>
</li>
<li>
<p><a href="https://www.jianshu.com/p/d0c48dcf6af6">简书-SSH超时断开(ClientAliveInterval和ClientAliveCountMax )的使用</a></p>
</li>
<li>
<p><a href="https://xz.aliyun.com/t/5249">使用两步验证（2FA）保护你的SSH连接</a></p>
</li>
<li>
<p><a href="https://blog.devolutions.net/2017/4/10-steps-to-secure-open-ssh">10 Steps to Secure Open SSH</a></p>
</li>
<li>
<p><a href="https://devops.ionos.com/tutorials/secure-the-ssh-server-on-ubuntu/">Secure The SSH Server On Ubuntu</a></p>
</li>
<li>
<p><a href="https://medium.com/risan/upgrade-your-ssh-key-to-ed25519-c6e8d60d3c54">Upgrade Your SSH Key to Ed25519</a></p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第368期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-368-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-368-qi/">
        </link>
        <updated>2021-06-18T00:51:23.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>活了这么多年发现，唯一坚持下去的，就是每天给手机充电。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>春阴垂野草青青，时有幽花一树明。<br>
——苏舜钦《淮中晚泊犊头》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>比自己，比梦想更重要的东西永远都存在着......</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1623977640051.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>差不多就是纯数学题。。。</p>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1624011515656.png" alt="" loading="lazy"></figure>
<pre><code class="language-java">class Solution {
    public String smallestGoodBase(String n) {
        long nVal = Long.parseLong(n);
        int mMax = (int) Math.floor(Math.log(nVal) / Math.log(2));
        for (int m = mMax; m &gt; 1; m--) {
            int k = (int) Math.pow(nVal, 1.0 / m);
            long mul = 1, sum = 1;
            for (int i = 0; i &lt; m; i++) {
                mul *= k;
                sum += mul;
            }
            if (sum == nVal) {
                return Integer.toString(k);
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://2293736867.github.io/post-images/1624011486296.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第367期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-367-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-367-qi/">
        </link>
        <updated>2021-06-16T16:17:33.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>生活不止眼前的苟且，还有读不懂的诗和到不了的远方。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>梧桐树，三更雨，不导离情正苦。<br>
——温庭筠《更漏子·玉炉香》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>人的痛苦会把自己折磨到多深呢？</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1623860387621.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>u1s1不会有限状态机，只会分类讨论：</p>
<pre><code class="language-java">public class Solution {
    private char[] c;
    public boolean isNumber(String s) {
        if (s == null) {
            return false;
        }
        char [] c = s.toCharArray();
        this.c = c;
        int n = c.length;
        if (n == 0) {
            return false;
        }
        if (c[0] != '+' &amp;&amp; c[0] != '-' &amp;&amp; c[0] &lt; '0' &amp;&amp; c[0] &gt; '9') {
            return false;
        }

        boolean alpha = false;
        boolean dot = false;
        int alphaIndex = 0;
        for (int i = 0; i &lt; n; i++) {
            if (c[i] == '+' || c[i] == '-') {
                if(i != 0 &amp;&amp; c[i-1] != 'e' &amp;&amp; c[i-1] != 'E'){
                    return false;
                }
            } else if (c[i] == '.') {
                if (!dot) {
                    dot = true;
                } else {
                    return false;
                }
            } else if (c[i] == 'e' || c[i] == 'E'){
                if (!alpha) {
                    alpha = true;
                    alphaIndex = i;
                } else {
                    return false;
                }
            }else if (!Character.isDigit(c[i])){
                return false;
            }
        }
        if (!alpha) {
            return isInt(0,n) || isDouble(0,n);
        }

        if (isInt(0,alphaIndex) || isDouble(0,alphaIndex)) {
            return isInt(alphaIndex+1,n);
        }
        return false;
    }

    private boolean isInt(int start,int end){
        if(end == start){
            return false;
        }
        char[] c = this.c;
        if(c[start] == '+' || c[start] == '-'){
            if(end - start == 1){
                return false;
            }
            ++start;
        }
        for (int i = start; i &lt; end; i++) {
            if(c[i] == '.'){
                return false;
            }
        }
        return true;
    }

    private boolean isDouble(int start,int end){
        if(end == start){
            return false;
        }
        char [] c = this.c;
        int n = end - start;
        boolean first = false;
        if(c[0] == '+' || c[0] == '-'){
            if(end - start == 1){
                return false;
            }
            ++start;
            first = true;
        }
        for (int i = start; i &lt; end; i++) {
            if(c[i] == '.') {
                return n != (first ? 1 : 0) + 1;
            }
        }
        return false;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1623860431249.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第366期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-366-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-366-qi/">
        </link>
        <updated>2021-06-15T22:03:55.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>终于中了500万，兑奖的时候，笑醒了。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>波面澄霞，兰艇采香去。<br>
——高观国《祝英台近·荷花》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>每个人的心里，都有一个忘不记，却无法拥抱珍惜的人。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1623794775074.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>这是笔者做过的所有题中，能得到的最短的答案，没有之一：</p>
<pre><code class="language-java">public class Solution {
    public boolean stoneGame(int[] piles) {
        return true;
    }
}
</code></pre>
<p>当然这是经过数学分析的出来的。</p>
<p>可以将所有的石头分为两组，偶数组（第一组，下标为偶数）和奇数组（第二组，下标为奇数），分为两组以后，可以计算出每一组石子的数量，知道哪一组的石子数量更多，先手的人只需要取走数量更多的石子即可，因此先手的人总是可以赢得比赛。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第365期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-365-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-365-qi/">
        </link>
        <updated>2021-06-14T21:30:21.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>世上没有钱解决不了的事情，如果有，那就是你的钱不够。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>小园几许，收尽春光。<br>
——秦观《行香子·树绕村庄》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>人的痛苦会把自己折磨到多深呢？</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1623706244428.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>其实就是找到数组的最大值，直接上<code>O(n)</code>的算法，因为数据量本来就不大，直接0ms了：</p>
<pre><code class="language-java">public class Solution{
    public int peakIndexInMountainArray(int[] arr) {
        int max = arr[0];
        int index = 0;
        int n = arr.length;
        for(int i=1;i&lt;n;++i){
            if(arr[i] &gt; max){
                max = arr[i];
                index = i;
            }else{
                break;
            }
        }
        return index;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1623706291752.png" alt="" loading="lazy"></figure>
<p>（<s>并不是在凌晨5点做的，只是切了Windows没有同步时间</s>）</p>
<p>不扯了不扯了，来个正经的二分：</p>
<pre><code class="language-java">public class Solution {
    public int peakIndexInMountainArray(int[] arr) {
        int l = 0;
        int r = arr.length - 1;
        while (l &lt; r) {
            int m = (l + r) &gt;&gt; 1;
            if (arr[m] &gt; arr[l]) {
                l = m;
            } else {
                r = m;
            }
        }
        while (arr[l] &lt; arr[l-1]) {
            r = l;
            l = 0;
            while (l &lt; r) {
                int m = (l + r) &gt;&gt; 1;
                if (arr[m] &gt; arr[l]) {
                    l = m;
                } else {
                    r = m;
                }
            }
        }
        return l;
    }
}
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://2293736867.github.io/post-images/1623732782692.png" alt="" loading="lazy"></figure>
<p>要注意的事一次二分之后需要使用循环去继续二分，这样才能找到正确的答案，因为答案有可能是偏左边起点的，这样一次二分之后有可能只是找到部分最大值，比如：</p>
<pre><code class="language-bash">24,69,100,99,79,78,67,36,26,19
</code></pre>
<p>一次二分之后只能返回<code>l=4</code>，也是<code>79</code>的位置，此时需要继续对该位置进行二分：</p>
<ul>
<li><code>r = 4</code></li>
<li><code>l = 0</code></li>
</ul>
<p>直到<code>arr[l] &gt; arr[l-1]</code>为止。</p>
]]></content>
    </entry>
</feed>