<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://2293736867.github.io</id>
    <title>氷泠&apos;s blog</title>
    <updated>2020-07-11T04:15:21.826Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://2293736867.github.io"/>
    <link rel="self" href="https://2293736867.github.io/atom.xml"/>
    <subtitle>我配不上你，
纵然很努力。</subtitle>
    <logo>https://2293736867.github.io/images/avatar.png</logo>
    <icon>https://2293736867.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 氷泠&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[每日分享 第23期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-23-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-23-qi/">
        </link>
        <updated>2020-07-11T03:56:54.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1594439943160.jpeg" alt="" loading="lazy"></figure>
<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>我从不去想何时能成功，既然选择了远方，那就还远着呢。</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>自1922年以来，已有30项（最高100万美元）现金悬赏令向所有人征集能够证明超自然现象的证据，可至今为止，仍未收集到任何相关证据。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>江月去人只数尺子，风灯照夜欲三更。<br>
——杜甫《漫成一绝》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>所有的梦境都是另一个现实，永远不要忘记。</p>
</blockquote>
<h1 id="每日音乐">每日音乐</h1>
<blockquote>
<p><a href="https://music.163.com/#/song?id=1449406576">温泉-许嵩/刘美麟</a></p>
</blockquote>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1594439982530.jpg" alt="" loading="lazy"></figure>
<blockquote>
<p>你用温柔手臂弯住迟钝的我<br>
蓝色披风鼓裹着半立方悸动<br>
骑行在泉水小镇下坡有点陡<br>
正好紧贴我背后</p>
</blockquote>
<blockquote>
<p>和你在一起就会莫名的放松<br>
所有阴翳的回忆都一扫而空<br>
在深巷小馆品尝当年的果酒<br>
像你清新而醇厚</p>
</blockquote>
<blockquote>
<p>喜欢看你的笑容<br>
绽放在夏日雨后<br>
你融化了多少的忧愁或许只有我能懂<br>
你轻轻的问我<br>
我有没有点重<br>
可抱住你就不想松手</p>
</blockquote>
<blockquote>
<p>喜欢看你的笑容<br>
环绕着香甜的风<br>
你戳中了我的审美点准确得好像针灸<br>
我微微的颤抖<br>
那紧张的喉咙<br>
认真讲述了没做的梦<br>
很生动</p>
</blockquote>
<blockquote>
<p>你用温柔手臂弯住迟钝的我<br>
蓝色披风鼓裹着半立方悸动<br>
骑行在泉水小镇下坡有点陡<br>
正好紧贴我身后</p>
</blockquote>
<blockquote>
<p>和你在一起就会莫名的放松<br>
所有阴翳的会议都一扫而空<br>
在深巷小馆品尝当地的果酒<br>
像你清新而醇厚</p>
</blockquote>
<blockquote>
<p>喜欢看你的笑容<br>
绽放在夏日雨后<br>
你融化了多少的忧愁或许只有我能懂<br>
你轻轻的问我<br>
我有没有点重<br>
可抱住你就不想松手</p>
</blockquote>
<blockquote>
<p>喜欢看你的笑容<br>
环绕着香甜的风<br>
你戳中了我的审美点准确得好像针灸<br>
我微微的颤抖<br>
那紧张的喉咙<br>
认真讲述了没做的梦<br>
很生动</p>
</blockquote>
<blockquote>
<p>说实话我可不确定我能够陪你多久<br>
没关系能博红颜一笑是我的温柔<br>
等我们绕过几轮冬夏和春秋<br>
还能不能和你遨游</p>
</blockquote>
<blockquote>
<p>喜欢看你的笑容<br>
绽放在夏日雨后<br>
你融化了多少的忧愁或许只有我能懂<br>
你轻轻的问我<br>
我有没有点重<br>
可抱住你就不想松手</p>
</blockquote>
<blockquote>
<p>喜欢看你的笑容<br>
环绕着香甜的风<br>
有泡在丛林里的温泉神器疗愈的作用<br>
我微微的颤抖<br>
那紧张的喉咙<br>
认真讲述了没做的梦<br>
很生动</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[设计模式学习笔记（二）：UML与面向对象设计原则]]></title>
        <id>https://2293736867.github.io/post/she-ji-mo-shi-xue-xi-bi-ji-er-uml-yu-mian-xiang-dui-xiang-she-ji-yuan-ze/</id>
        <link href="https://2293736867.github.io/post/she-ji-mo-shi-xue-xi-bi-ji-er-uml-yu-mian-xiang-dui-xiang-she-ji-yuan-ze/">
        </link>
        <updated>2020-07-11T03:53:56.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#1-uml">1 UML</a>
<ul>
<li><a href="#11-uml">1.1 UML</a></li>
<li><a href="#12-uml%E7%89%B9%E6%80%A7">1.2 UML特性</a></li>
<li><a href="#13-uml%E7%BB%93%E6%9E%84">1.3 UML结构</a>
<ul>
<li><a href="#131-%E8%A7%86%E5%9B%BE">1.3.1 视图</a></li>
<li><a href="#132-%E5%9B%BE">1.3.2 图</a></li>
<li><a href="#133-%E6%A8%A1%E5%9E%8B%E5%85%83%E7%B4%A0">1.3.3 模型元素</a></li>
<li><a href="#134-%E9%80%9A%E7%94%A8%E6%9C%BA%E5%88%B6">1.3.4 通用机制</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#2-uml%E7%B1%BB%E5%9B%BE">2 UML类图</a>
<ul>
<li><a href="#21-%E7%B1%BB%E5%9B%BE">2.1 类图</a>
<ul>
<li><a href="#211-%E7%B1%BB%E5%90%8D">2.1.1 类名</a></li>
<li><a href="#212-%E5%B1%9E%E6%80%A7">2.1.2 属性</a></li>
<li><a href="#213-%E6%93%8D%E4%BD%9C">2.1.3 操作</a></li>
</ul>
</li>
<li><a href="#22-%E7%B1%BB%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB">2.2 类之间的关系</a></li>
</ul>
</li>
<li><a href="#3-%E5%85%B3%E8%81%94%E5%85%B3%E7%B3%BB">3 关联关系</a>
<ul>
<li><a href="#31-%E5%8F%8C%E5%90%91%E5%85%B3%E8%81%94">3.1 双向关联</a></li>
<li><a href="#32-%E5%8D%95%E5%90%91%E5%85%B3%E8%81%94">3.2 单向关联</a></li>
<li><a href="#33-%E8%87%AA%E5%85%B3%E8%81%94">3.3 自关联</a></li>
<li><a href="#34-%E5%A4%9A%E9%87%8D%E6%80%A7%E5%85%B3%E8%81%94">3.4 多重性关联</a></li>
<li><a href="#35-%E8%81%9A%E5%90%88%E5%85%B3%E7%B3%BB">3.5 聚合关系</a></li>
<li><a href="#36-%E7%BB%84%E5%90%88%E5%85%B3%E7%B3%BB">3.6 组合关系</a></li>
</ul>
</li>
<li><a href="#4-%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB">4 依赖关系</a></li>
<li><a href="#5-%E6%B3%9B%E5%8C%96%E5%85%B3%E7%B3%BB">5 泛化关系</a></li>
<li><a href="#6-%E6%8E%A5%E5%8F%A3%E4%B8%8E%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB">6 接口与实现关系</a></li>
<li><a href="#7-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99">7 面向对象设计原则</a>
<ul>
<li><a href="#71-%E6%A6%82%E8%BF%B0">7.1 概述</a></li>
<li><a href="#72-%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99srp">7.2 单一职责原则SRP</a></li>
<li><a href="#73-%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99ocp">7.3 开闭原则OCP</a></li>
<li><a href="#74-%E9%87%8C%E6%B0%8F%E4%BB%A3%E6%8D%A2%E5%8E%9F%E5%88%99lsp">7.4 里氏代换原则LSP</a></li>
<li><a href="#75-%E4%BE%9D%E8%B5%96%E5%80%92%E8%BD%AC%E5%8E%9F%E5%88%99dip">7.5 依赖倒转原则DIP</a></li>
<li><a href="#76-%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99isp">7.6 接口隔离原则ISP</a></li>
<li><a href="#77-%E5%90%88%E6%88%90%E5%A4%8D%E7%94%A8%E5%8E%9F%E5%88%99crp">7.7 合成复用原则CRP</a>
<ul>
<li><a href="#771-%E7%BB%A7%E6%89%BF">7.7.1 继承</a></li>
<li><a href="#772-%E7%BB%84%E5%90%88%E8%81%9A%E5%90%88">7.7.2 组合/聚合</a></li>
</ul>
</li>
<li><a href="#78-%E8%BF%AA%E7%B1%B3%E7%89%B9%E6%B3%95%E5%88%99lod">7.8 迪米特法则LoD</a></li>
</ul>
</li>
<li><a href="#8-%E6%80%BB%E7%BB%93">8 总结</a></li>
</ul>
</p>
<h1 id="1-uml">1 UML</h1>
<h2 id="11-uml">1.1 UML</h2>
<p>UML（Unified Modeling Language）是统一建模语言，1997年11月UML1.1版本提交给OMG并正式通过，成为建模语言的个那个也标准。2003年6月UML2.0获得正式通过。</p>
<h2 id="12-uml特性">1.2 UML特性</h2>
<ul>
<li>U（Unified）：统一，UML融合了多种优秀的面向对象建模方法以及多种得到认可的软件工程方法，消除了因方法林立且相互独立而带来的种种不便，集众家之长，股名“统一”。通过统一的表示方法可以让不同知识背景的领域专家，系统分析设计人员以及开发人员可以方便地交流</li>
<li>M（Modeling）：UML是一种通用的可视化建模语言，不同与编程语言，UML通过一些标准的图形符号和文字来对系统进行建模，用于对软件进行描述，可视化处理，构造系统制品的文档。UML适用于各种软件开发方法，软件生命周期的各个阶段，各种应用领域以及各种开发工具</li>
<li>L（Language）：UML是一种语言，也就意味着它有属于自己的标准表达规则，不是一种类似Java，C++的编程语言，而是一种分析设计语言，一种建模语言</li>
</ul>
<h2 id="13-uml结构">1.3 UML结构</h2>
<p>UML结构通常包括以下4个部分：视图，图，模型元素以及通用机制。</p>
<h3 id="131-视图">1.3.1 视图</h3>
<p>UML视图用于从不同的角度来表示待建模的系统。视图是由许多图形组成的一个抽象集合，在建立一个系统模型时，只有通过定义多个视图，每个视图显示该系统的一个特定方面，才能构造出该系统的完整蓝图。<br>
UML视图包括：</p>
<ul>
<li>用户视图：以用户的观点表示系统的目标，是所有视图的核心，用于描述系统的需求</li>
<li>结构视图：系统的静态行为，描述系统的静态元素，比如包，类，对象以及它们之间的关系</li>
<li>行为视图：系统的动态行为，描述系统的组成元素在系统运行时的交互关系</li>
<li>实现视图：系统中逻辑元素的分布，描述系统中物理文件以及它们之间的关系</li>
<li>环境视图：系统中物理元素的分布，描述系统中硬件设备以及他们之间的关系</li>
</ul>
<h3 id="132-图">1.3.2 图</h3>
<p>UML图是描述UML视图内容的图形，UML2.0提供了13种图，分别是用例图，类图，对象图，包图，组合结构图，状态图，活动图，顺序图，通信图，定时图，交互概览图，组件图和部署图。其中：</p>
<ul>
<li>用例图对应用户视图</li>
<li>类图，对象图，包图和组合结构图对应结构视图</li>
<li>状态图，活动图，顺序图，通信图，定时图和交互概览图对应行为视图</li>
<li>组件图对应实现视图</li>
<li>部署图对应环境视图</li>
</ul>
<h3 id="133-模型元素">1.3.3 模型元素</h3>
<p>模型元素是指UML图中所使用的一些概念，对应于普通的面向对象概念，如类，对象，消息以及这些概念之间的关系，如关联关系，泛化关系等。</p>
<h3 id="134-通用机制">1.3.4 通用机制</h3>
<p>UML提供的通用机制为模型元素提供额外的注释，信息和语义，这些通用机制也提供了扩展机制，允许用户对UML进行扩展，如定义新的建模元素，扩展原有的语义，添加新的特殊信息来扩展模型元素的规则说明等，以便适用于特定的方法或过程，组织和用户。</p>
<h1 id="2-uml类图">2 UML类图</h1>
<h2 id="21-类图">2.1 类图</h2>
<p>类封装了数据和行为，是具有相同属性，操作，关系的对象集合的总称。类图是用出现在系统中不同类来描述系统的静态结构，主要描述不同的类以及它们之间的关系。<br>
在UML中，类图包含类名，属性以及操作。如下面的Employee类：<br>
<img src="https://img-blog.csdnimg.cn/20200710201647414.png" alt="在这里插入图片描述" loading="lazy"><br>
类一般由三部分组成：</p>
<ul>
<li>类名</li>
<li>属性</li>
<li>操作</li>
</ul>
<h3 id="211-类名">2.1.1 类名</h3>
<p>类名就是类的名字，一个字符串。</p>
<h3 id="212-属性">2.1.2 属性</h3>
<p>类的成员变量，一般的格式为</p>
<pre><code class="language-bash">可见性 名称 : 类型 [ = 默认值]
</code></pre>
<p>可见性表示该属性对于类外的元素是否可见，包括：</p>
<ul>
<li>公有：<code>+</code></li>
<li>私有：<code>-</code></li>
<li>受保护：<code>#</code></li>
<li>包：<code>~</code></li>
</ul>
<h3 id="213-操作">2.1.3 操作</h3>
<p>UML规定操作的定义方式为：</p>
<pre><code class="language-bash">可见性 名称(参数列表)[ : 返回类型]
</code></pre>
<ul>
<li>可见性与属性可见性的定义一致</li>
<li>参数列表表示方法的参数，语法与属性定义类似，用<code>,</code>分隔</li>
</ul>
<h2 id="22-类之间的关系">2.2 类之间的关系</h2>
<p>UML提供了四种不同的方式表示类与类之间的关系：</p>
<ul>
<li>关联关系</li>
<li>依赖关系</li>
<li>泛化关系</li>
<li>接口与实现关系</li>
</ul>
<p>下面逐个看一下。</p>
<h1 id="3-关联关系">3 关联关系</h1>
<p>关联关系是一种结构化关系，用于表示一类对象与另一类对象之间有联系。在UML中用实线连接有关联关系的类。可以在关联线上标注角色名，关系的两端代表两种不同的角色，因此在一个关联关系中可以包含两个角色名，角色名不是必须的，但可以使类之间的关系更加明确。<br>
例如在一个登录界面类<code>LoginForm</code>包含一个<code>JButton</code>：</p>
<p><img src="https://img-blog.csdnimg.cn/20200710230718471.png" alt="在这里插入图片描述" loading="lazy"><br>
UML中关联通常包括以下六种形式：</p>
<ul>
<li>双向关联</li>
<li>单向关联</li>
<li>自关联</li>
<li>多重性关联</li>
<li>聚合关系</li>
<li>组合关系</li>
</ul>
<h2 id="31-双向关联">3.1 双向关联</h2>
<p>默认情况下关联是双向的，例如顾客购买商品并拥有商品，反之卖出的商品总是某个顾客与之相关联：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200710231216478.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="32-单向关联">3.2 单向关联</h2>
<p>关联也可以是单向的，在UML中关联用带箭头的实线表示，比如顾客拥有地址：<br>
<img src="https://img-blog.csdnimg.cn/20200710231436264.png" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="33-自关联">3.3 自关联</h2>
<p>系统中可能会存在一些类的属性对象类型为该类本身，这种特殊的关联关系为自关联，常见于链表：<br>
<img src="https://img-blog.csdnimg.cn/20200710231728997.png" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="34-多重性关联">3.4 多重性关联</h2>
<p>多重性关联又称为多重性关联联系，表示两个关联对象在数量上的对应关系。在UML中，对象之间的多重性可以直接在关联直线上用一个数字或者一个数字范围来表示。常见的表示方式如下：<br>
<img src="https://img-blog.csdnimg.cn/20200710233413832.png" alt="在这里插入图片描述" loading="lazy"><br>
例如一个界面可以具有0个或多个按钮，但是一个按钮只能从属于一个界面：<br>
<img src="https://img-blog.csdnimg.cn/20200710233621254.png" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="35-聚合关系">3.5 聚合关系</h2>
<p>聚合关系表示整体与部分的关系，使用空心菱形表示。聚合关系中部分是整体的一部分，但是部分可以脱离整体独立存在，比如引擎是汽车的一部分，但是引擎可以独立于汽车存在：<br>
<img src="https://img-blog.csdnimg.cn/20200710234027538.png" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="36-组合关系">3.6 组合关系</h2>
<p>组合关系也表示整体与部分之间的关系，但是部分不能脱离整体存在。组合关系使用实心菱形表示。比如人的头和嘴巴是组合关系：<br>
<img src="https://img-blog.csdnimg.cn/20200710234310219.png" alt="在这里插入图片描述" loading="lazy"></p>
<h1 id="4-依赖关系">4 依赖关系</h1>
<p>依赖关系是一种使用关系，在需要表示“一个事物使用另一个事物”时使用依赖关系。UML中依赖关系用带箭头的虚线表示，由依赖的一方指向被依赖的一方。例如驾驶员开车，开车需要车，也就是驾驶员依赖于车：<br>
<img src="https://img-blog.csdnimg.cn/20200710234731593.png" alt="在这里插入图片描述" loading="lazy"></p>
<h1 id="5-泛化关系">5 泛化关系</h1>
<p>泛化关系也就是继承关系，用于描述父类与之类之间的关系，父类又叫基类或者超类，子类又称作派生类。UML中泛化关系用带空心三角形的直线表示，箭头指向基类：<br>
<img src="https://img-blog.csdnimg.cn/20200710235324792.png" alt="在这里插入图片描述" loading="lazy"></p>
<h1 id="6-接口与实现关系">6 接口与实现关系</h1>
<p>很多语言比如Java，C#都有接口的概念，接口通常没有属性，所有是操作都是抽象的，只有操作的声明没有操作的实现。UML中使用<code>&lt;&lt;Interface&gt;&gt;</code>表示接口：<br>
<img src="https://img-blog.csdnimg.cn/20200710235919561.png" alt="在这里插入图片描述" loading="lazy"><br>
类与接口之间的实现关系使用空心三角形+虚线表示：</p>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200710235847382.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="7-面向对象设计原则">7 面向对象设计原则</h1>
<h2 id="71-概述">7.1 概述</h2>
<p>面向对象设计的目标之一是支持可维护性复用，一方面需要实现设计方案或者源代码的重用，一方面要确保系统能够易于扩展和修改，具有较好的灵活性。面向对象设计原则由此诞生，它们蕴含于很多设计模式中，是从许多方案总结出来的指导性原则。常见的7种面向对象设计原则如下：</p>
<ul>
<li>单一权责原则</li>
<li>开闭原则</li>
<li>里氏代换原则</li>
<li>依赖倒转原则</li>
<li>接口隔离原则</li>
<li>合成复用原则</li>
<li>迪米特法则</li>
</ul>
<h2 id="72-单一职责原则srp">7.2 单一职责原则SRP</h2>
<p><strong>单一权责原则（Single Responsibility Principal）：一个类只负责一个功能领域中的相应职责。<br>
或者可以定义为：就一个类而言，应该只有一个引起它变化的原因。</strong></p>
<p>单一权责原则的核心思想是：一个类不能太“累”。一个类（大到模块，小到方法）承担的职责越多，被复用的可能性越小，而且一个类承担的职责过多，就相当于将这些职责耦合在一起，当其中一个职责变化时，可能会影响其他职责的运作，因此需要将职责分离，封装在不同的类中，即将不同的变化原因封装在不同的类中。单一权责原则是实现高内聚，低耦合的指导方针。</p>
<h2 id="73-开闭原则ocp">7.3 开闭原则OCP</h2>
<p><strong>开闭原则（Open-Closed Principle）：一个软件实体应当对扩展开放，对修改关闭。即软件实体应尽量不修改原有代码的情况下进行扩展。</strong></p>
<p>其中软件实体可以是一个软件模块，一个由多个类组成的局部结构或者一个独立的类。<br>
一个软件设计符合开闭原则，则可以非常方便地对其进行扩展，而且在扩展时无须修改现有代码，使得软件系统在拥有适应性和灵活性的同时具备较好的稳定性和延续性。</p>
<p>为了满足开闭原则，需要对系统进行抽象化设计，抽象化是开闭原则的关键。可以通过接口，抽象类等定义抽象层，通过具体类进行扩展，修改系统的行为时无需修改抽象层，只需要增加新的具体类来实现新的业务功能即可，实现在不修改已有代码的基础上扩展系统的功能，达到开闭原则的要求。</p>
<h2 id="74-里氏代换原则lsp">7.4 里氏代换原则LSP</h2>
<p><strong>里氏代换原则（Liskov Substitution Principle）：所有引用基类/父类的地方必须能透明地使用其子类的对象。</strong></p>
<p>简单地说就是父类出现的地方可以用子类代替，程序不会产生任何的错误和异常。使用里氏代换原则时，应该将父类设计为抽象类或者接口，让子类继承父类或实现父类接口，并实现父类中声明的方法，运行时，子类实例代替父类实例，可以很方便地扩展系统的功能，无须修改原有子类的代码，增加新的功能可以通过增加一个新的子类来实现。</p>
<h2 id="75-依赖倒转原则dip">7.5 依赖倒转原则DIP</h2>
<p><strong>依赖倒转原则（Dependency Inversion Principal）：抽象不应该依赖具体细节，细节应当依赖于抽象，换言之要针对接口编程，而不是针对实现编程。</strong></p>
<p>依赖倒转原则要求程序在源代码中传递参数时或者在关联关系中，尽量引用高层次的抽象层类，即使有接口和抽象类进行变量类型声明，参数类型声明，方法返回类型声明以及数据类型的转换等，而不是用具体类来做。一个具体类应该只实现接口或者抽象类中声明过的方法，而不要给出多余的方法，否则将无法调用在子类中新增的方法。</p>
<p>在实现依赖倒转原则时，需要针对抽象层进行编程，而将具体类的对象通过依赖注入（Dependency Injection）的方式注入到其他对象中。依赖注入是指当一个对象要与其他对象发生依赖关系时，通过抽象来注入所依赖的对象。常用的注入方式包括：</p>
<ul>
<li>构造注入：通过构造函数来传入具体类的对象</li>
<li>设值注入（setter注入）：通过setter来传入具体类对象</li>
<li>接口注入：通过实现在接口中声明的方法来传入具体类对象</li>
</ul>
<p>上面的方法在定义时使用抽象类型，在运行时传入具体类型的对象，由子类对象来覆盖父类对象 。</p>
<h2 id="76-接口隔离原则isp">7.6 接口隔离原则ISP</h2>
<p><strong>接口隔离原则（Interface Segregation Principal）：使用多个专门的接口，而不使用单一的总接口，即客户端不应该依赖于那些它不需要的接口。</strong></p>
<p>也就是说，当一个接口太大时需要划分为更小的接口，使用该接口的客户端仅需知道与之相关的方法。每一个接口应该承担一种相对独立的角色，这里的接口有两层意思：</p>
<ul>
<li>一种是指一个类型所具有的方法特征的集合，仅仅是一种逻辑上的抽象</li>
<li>另一种是指某个语言具体接口的定义，有严格的定义和结构，比如Java中的interface</li>
</ul>
<p>ISP对两种不同含义的表达方式有所不同：</p>
<ul>
<li>当接口理解成一个类型所提供的所有方法特征的集合时，这就是一种逻辑上的概念，接口的划分将直接带来类型的划分，可以把接口理解成角色，一个接口只能代表一个角色，每个角色都有它特定的一个接口，此时这个原则可以叫“角色隔离原则”</li>
<li>把接口理解成狭义的特定语言的接口，ISP表达的意思是接口仅仅提供客户端需要的行为，客户端不需要的行为则隐藏起来，应当为客户端提供尽可能小的接口，而不提供大的总接口。接口应尽量细化，同时接口中的方法应该尽量少，每个接口中只包含一个客户端（如子模块或者业务逻辑类）所需的方法即可，这种机制也叫“定制服务”</li>
</ul>
<p>使用接口隔离原则时，注意控制接口的粒度：</p>
<ul>
<li>接口太小导致接口泛滥，不利于维护</li>
<li>接口太大将违背ISP，灵活性差，使用不方便</li>
</ul>
<p>一般而言接口中仅包含为某一类用户定制的方法即可。</p>
<h2 id="77-合成复用原则crp">7.7 合成复用原则CRP</h2>
<p><strong>合成复用原则（Composite Reuse Principal）：尽量使用对象组合而不是继承来达成复用目的。</strong></p>
<p>合成复用原则又叫组合/聚合复用原则（Composition/Aggregate Reuse Principal），就是在一个新对象中通过关联关系（组合/聚合）对对象进行重用而不是使用继承。</p>
<p>面向对象设计中，可以通过两种方法在不同环境中复用已有的设计和实现：</p>
<ul>
<li>继承</li>
<li>组合/聚合</li>
</ul>
<h3 id="771-继承">7.7.1 继承</h3>
<p>继承需要严格遵循里氏代换原则，有效使用继承会有助于对问题的理解，降低复杂度，而滥用继承反而会增加系统构建和维护的难度以及系统的复杂度。继承主要带来的问题是会破环系统的封装性，因为继承会将基类实现细节暴露给子类，由于基类内部细节对子类可见，因此叫“<strong>白箱复用</strong>”。一般而言两个类之间的关系是“Is-A”关系就可以使用继承。</p>
<h3 id="772-组合聚合">7.7.2 组合/聚合</h3>
<p>尽管可以通过继承来对代码进行复用，一般来说优先考虑组合/聚合。组合/聚合可以使系统更加灵活，降低类与类之间的耦合度。由于新对象可以直接调用已有对象的功能，这样做可以使成员对象的内部实现细节对新对象不可见，所以这种复用叫“<strong>黑箱复用</strong>”。一般而言两个类之间的关系是“Has-A”关系就可以使用组合/聚合。</p>
<h2 id="78-迪米特法则lod">7.8 迪米特法则LoD</h2>
<p><strong>迪米特法则（Law of Demeter）：一个软件实体应当尽可能少地与其他实体发生相互作用。</strong></p>
<p>迪米特法则又叫最少知识原则（Least Knowledge Principal，LKP），迪米特法则会对软件实体之间通信的宽度与深度进行限制，可以降低系统的耦合度，使类与类之间保持松耦合。<br>
迪米特法则还有几种定义形式：不要和“陌生人”说话，只与直接朋友通信。对于一个对象“朋友”可以是以下几类：</p>
<ul>
<li>对象本身（this）</li>
<li>以参数形式传入的对象</li>
<li>成员对象</li>
<li>如果成员对象是一个集合，那么集合中的元素也是“朋友”</li>
<li>当前对象所创建的对象</li>
</ul>
<p>满足上述条件之一即是“朋友”，否则就是“陌生人”，不能和“陌生人”发生直接交互。<br>
迪米特法则要求设计系统时尽量减少对象之间的交互，通过引入一个合理的中间类来降低现有对象之间的耦合度。应用迪米特法则时需要注意几点：</p>
<ul>
<li>优先将类设计为不变类</li>
<li>类划分上尽量创建松耦合的类</li>
<li>类结构设计上尽量降低成员变量和成员函数的访问权限</li>
<li>在对其他类的引用上，一个对象对其他对象的引用应当降到最低</li>
</ul>
<h1 id="8-总结">8 总结</h1>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20200711005605808.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20200711094651100.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p><strong>如果觉得文章好看，欢迎点赞。</strong></p>
<p><strong>同时欢迎关注微信公众号：氷泠之路。</strong></p>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/20200711111358683.gif" alt="在这里插入图片描述" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue学习笔记（一）]]></title>
        <id>https://2293736867.github.io/post/vue-xue-xi-bi-ji-yi/</id>
        <link href="https://2293736867.github.io/post/vue-xue-xi-bi-ji-yi/">
        </link>
        <updated>2020-07-10T09:05:56.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#1-vue%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84">1 Vue目录结构</a></li>
<li><a href="#2-vue%E5%AF%B9%E8%B1%A1">2 Vue对象</a></li>
<li><a href="#3-vue%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95">3 Vue模板语法</a>
<ul>
<li><a href="#31-%E6%8F%92%E5%80%BC">3.1 插值</a></li>
<li><a href="#32-%E5%B1%9E%E6%80%A7">3.2 属性</a></li>
<li><a href="#33-%E8%A1%A8%E8%BE%BE%E5%BC%8F">3.3 表达式</a></li>
<li><a href="#34-%E6%8C%87%E4%BB%A4">3.4 指令</a></li>
<li><a href="#35-%E5%8F%82%E6%95%B0">3.5 参数</a></li>
<li><a href="#36-%E4%BF%AE%E9%A5%B0%E7%AC%A6">3.6 修饰符</a></li>
<li><a href="#37-v-model">3.7 v-model</a></li>
<li><a href="#38-%E6%8C%89%E9%92%AE%E4%BA%8B%E4%BB%B6">3.8 按钮事件</a></li>
<li><a href="#39-%E8%BF%87%E6%BB%A4%E5%99%A8">3.9 过滤器</a></li>
<li><a href="#310-%E7%BC%A9%E5%86%99">3.10 缩写</a></li>
</ul>
</li>
</ul>
</p>
<h1 id="1-vue目录结构">1 Vue目录结构</h1>
<ul>
<li><code>build</code>：项目构建webpack的相关代码</li>
<li><code>config</code>：配置目录，包括端口号等</li>
<li><code>node_modules</code>：npm加载的项目依赖模块</li>
<li><code>src</code>：开发的目录模块，包含<code>assets</code>（资源文件），<code>components</code>（组件文件），<code>App.vue</code>项目入口文件，<code>main.js</code>项目核心文件</li>
<li><code>static</code>：静态资源文件，如图片，字体等</li>
<li><code>test</code>：初始测试目录</li>
<li><code>.xxx</code>：配置文件，比如语法配置，git配置等等</li>
<li><code>index.html</code>：首页入口文件</li>
<li><code>package.json</code>：项目配置文件</li>
<li><code>README.md</code>：项目说明文件</li>
</ul>
<h1 id="2-vue对象">2 Vue对象</h1>
<p><code>Vue</code>对象的基本参数有：</p>
<ul>
<li><code>el</code>：DOM元素的id</li>
<li><code>data</code>：用于定义属性</li>
<li><code>methods</code>：用于定义函数</li>
<li><code>{{}}</code>输出对象属性和函数返回值</li>
</ul>
<p>一个Vue实例被创建时，会向Vue的响应式系统加入了<code>data</code>中能找到的所有属性，当这些属性的值改变时HTML视图也会发生相应变化。</p>
<h1 id="3-vue模板语法">3 Vue模板语法</h1>
<p>Vue.js使用了基于HTML的模板语法，允许开发者声明式地将DOM绑定至底层Vue实例数据。<br>
Vue.js的核心是一个允许你采用简洁的模板语法来声明式的将数据渲染进DOM的系统，结合响应系统，在应用状态改变时，Vue能够智能地计算出重新渲染组建的最小代价并应用到DOM操作上。</p>
<h2 id="31-插值">3.1 插值</h2>
<p>插值分为两种方式：</p>
<ul>
<li>纯文本</li>
<li>HTML</li>
</ul>
<p>纯文本可以使用<code>{{}}</code>插值，比如：</p>
<pre><code class="language-html">&lt;div id=&quot;app&quot;&gt;{{message}}&lt;/div&gt;
</code></pre>
<pre><code class="language-js">&lt;script&gt;
new Vue({
	el:'#app',
	data:{
		message:'text'
	}
})
&lt;/script&gt;
</code></pre>
<p>HTML使用<code>v-html</code>指令：</p>
<pre><code class="language-html">&lt;div id=&quot;app&quot; v-html=&quot;message&quot;&gt;&lt;/div&gt;
</code></pre>
<pre><code class="language-js">&lt;script&gt;
new Vue({
	el:'#app',
	data:{
		message:'&lt;h1&gt;h1标题&lt;/h1&gt;'
	}
})
&lt;/script&gt;
</code></pre>
<h2 id="32-属性">3.2 属性</h2>
<p>属性绑定使用<code>v-bind</code>指令，比如：</p>
<pre><code class="language-html">&lt;div v-bind:class=&quot;{'class1':use}&quot;&gt;&lt;/div&gt;
</code></pre>
<pre><code class="language-js">&lt;script&gt;
new Vue({
	el:'#app',
	data:{
		use:false
	}
})
&lt;/script&gt;
</code></pre>
<h2 id="33-表达式">3.3 表达式</h2>
<p>可以在<code>{{}}</code>直接嵌入JS表达式，包括计算以及函数调用等等，比如：</p>
<pre><code class="language-html">&lt;div id=&quot;app&quot;&gt;
	{{5.222-1.2345}}
	&lt;br&gt;
	{{ok ? 'YES' : 'NO'}}
	&lt;br&gt;
	{{message.reverse()}}
&lt;/div&gt;
</code></pre>
<pre><code class="language-js">&lt;script&gt;	
new Vue({
	el:'#app',
	data:{
		ok:true,
		message:'Reverse',
	}
})
&lt;/scirpt&gt;
</code></pre>
<h2 id="34-指令">3.4 指令</h2>
<p>指令是带有<code>v-</code>前缀的特殊属性，指令用于在表达式的值改变时，将某些行为应用到DOM上，比如：</p>
<pre><code class="language-html">&lt;div id=&quot;app&quot;&gt;
	&lt;p v-if=&quot;seen&quot;&gt;看到了&lt;/p&gt;
&lt;/div&gt;
</code></pre>
<pre><code class="language-js">&lt;script&gt;
new Vue({
	el:'#app',
	data:{
		seen:true
	}
})
&lt;/script&gt;
</code></pre>
<h2 id="35-参数">3.5 参数</h2>
<p>参数在指令后面以冒号表明，比如<code>v-bind</code>指令用于响应地更新HTML：</p>
<pre><code class="language-html">&lt;div id=&quot;app&quot;&gt;
	&lt;a v-bind:href=&quot;url&quot;&gt;某个网站&lt;/a&gt;
&lt;/div&gt;
</code></pre>
<pre><code class="language-js">&lt;script&gt;
new Vue({
	el:'#app',
	data:{
		url:'https://www.xxx.com'
	}
})
&lt;/script&gt;
</code></pre>
<p><code>href</code>是参数，告知<code>v-bind</code>指令将该元素的<code>href</code>属性与表达式<code>url</code>的值绑定。</p>
<h2 id="36-修饰符">3.6 修饰符</h2>
<p>修饰符是以<code>.</code>指明的特殊后缀，用于指出一个指令应该以特殊的方式绑定，例如<code>.prevent</code>修饰符告知<code>v-on</code>指令对于出发事件调用<code>event.preventDefault()</code>：</p>
<pre><code class="language-html">&lt;form v-on:sbumit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt; 
</code></pre>
<h2 id="37-v-model">3.7 v-model</h2>
<p><code>v-model</code>用来在<code>input</code>，<code>select</code>，<code>textarea</code>，<code>chekcbox</code>，<code>radio</code>等表单控件元素上创建双向的数据绑定，根据表单上的值更新绑定元素的值。比如：</p>
<pre><code class="language-html">&lt;div id=&quot;app&quot;&gt;
	&lt;p&gt;{{message}}&lt;/p&gt;
	&lt;input v-model=&quot;message&quot;&gt;
&lt;/div&gt;
</code></pre>
<pre><code class="language-js">&lt;script&gt;
new Vue({
	el:'#app',
	data:{
		message:'text'
	}
})
&lt;/script&gt;
</code></pre>
<h2 id="38-按钮事件">3.8 按钮事件</h2>
<p>可以使用<code>v-on:click</code>监听按钮事件，比如：</p>
<pre><code class="language-html">&lt;div id=&quot;app&quot;&gt;
	&lt;p&gt;{{message}}&lt;/p&gt;
	&lt;button v-on:click=&quot;reverse&quot;&gt;反转字符串&lt;/button&gt;
&lt;/div&gt;
</code></pre>
<pre><code class="language-js">&lt;script&gt;
new Vue({
	el:'#app',
	data:{
		message:'reverseeeeee'
	},
	methods:{
		reverse:function(){
			this.message=this.messaage.split('').reverse().join('')
		}
	}
})
&lt;/script&gt;
</code></pre>
<h2 id="39-过滤器">3.9 过滤器</h2>
<p>允许定义过滤器用作一些常见文本的格式化，比如：</p>
<pre><code class="language-html">&lt;div id=&quot;app&quot;&gt;{{message | f}}&lt;/div&gt;
</code></pre>
<pre><code class="language-js">&lt;script&gt;
new Vue({
	el:'#app',
	data:{
		message:'text'
	},
	filters:{
		f:function(value){
			if(!value) return ''
			value = value.toString
			return value.charAt(0).toUpperCase()+value.slice(1)
		}
	}
})
&lt;/script&gt;
</code></pre>
<p>另外，过滤器可以串联以及接受参数：</p>
<pre><code class="language-js">{{message | filterA | filterB}}
{{message | filterA('arg1','arg2')}} // message作为filterA的第一个参数，'arg1','arg2'分别为第二个，第三个参数
</code></pre>
<p>将上面的过滤器改动一下：</p>
<pre><code class="language-html">&lt;div id=&quot;app&quot;&gt;{{message | f(10)}}&lt;/di&gt;
</code></pre>
<pre><code class="language-js">&lt;script&gt;
new Vue({
	el:'#app',
	data:{
	},
	filter:{
		f:function(value,times){
			if(!value) return ''
			value = value.toString()
			value = value.charAt(0).toUpperCase()+value.slice(1)
			return value.repeat(times)
		}
	}
})
&lt;/script&gt;
</code></pre>
<h2 id="310-缩写">3.10 缩写</h2>
<ul>
<li><code>v-bind:href</code>可以缩写为<code>:href</code></li>
<li><code>v-on:click</code>可以缩写为<code>@click</code></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[设计模式学习笔记（一）：设计模式]]></title>
        <id>https://2293736867.github.io/post/she-ji-mo-shi-xue-xi-bi-ji-yi-she-ji-mo-shi/</id>
        <link href="https://2293736867.github.io/post/she-ji-mo-shi-xue-xi-bi-ji-yi-she-ji-mo-shi/">
        </link>
        <updated>2020-07-10T06:38:05.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#1-%E5%89%8D%E8%A8%80">1 前言</a></li>
<li><a href="#2-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F">2 设计模式</a>
<ul>
<li><a href="#21-%E6%9D%A5%E6%BA%90">2.1 来源</a></li>
<li><a href="#22-%E5%AE%9A%E4%B9%89">2.2 定义</a></li>
</ul>
</li>
<li><a href="#3-%E5%B8%B8%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F">3 常用设计模式</a>
<ul>
<li><a href="#31-%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F">3.1 创建型模式</a></li>
<li><a href="#32-%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F">3.2 结构型模式</a></li>
<li><a href="#33-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F">3.3 行为型模式</a></li>
</ul>
</li>
<li><a href="#4-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%94%A8%E9%80%94">4 设计模式用途</a></li>
<li><a href="#5-%E6%80%BB%E7%BB%93">5 总结</a></li>
</ul>
</p>
<h1 id="1-前言">1 前言</h1>
<p>软件开发技术包含“招式”与“内功”，其中，编程语言，开发技术，著名框架可以认为是“招式”，而数据结构，算法，设计模式，重构，软件工程等则为“内功”。“招式”可以很快学会，但是“内功”的修炼需要更长的时间。对设计模式的学习会令“内功”大增，配合日益纯熟的“招式”，软件开发“功力”想必会达到一个新境界。下面来正式踏入修炼设计模式之旅。</p>
<h1 id="2-设计模式">2 设计模式</h1>
<h2 id="21-来源">2.1 来源</h2>
<p><strong>模式是在特定环境下人们解决某类重复出现的问题的一套成功或有效的解决方案。</strong><br>
GoF（Gang of Four，简称GoF，分别是Erich Gamma，Richard Helm，Ralph Johnson，John Vlissides）将模式的概念引入软件工程领域，标志着软件模式的诞生。软件模式是将模式的一般概念应用与软件开发领域，即软件开发的总体指导思想或参照样板。软件模式并非仅限于设计模式，还包括架构模式，分析模式和过程模式等。<br>
在软件模式中，设计模式是研究最为深入的分支。设计模式用于在特定条件下为一些重复出现的问题提供合理的，有效的解决方案。</p>
<h2 id="22-定义">2.2 定义</h2>
<p>设计模式一般定义如下：</p>
<pre><code class="language-bash">设计模式是一套被反复使用的，多数人知晓的，经过分类编目的，代码设计经验的总结，使用设计模式是为了可重用代码，
让代码更容易被他人理解并且提高代码的可靠性。
</code></pre>
<p>设计模式一般包含的要素：</p>
<ul>
<li>模式名称</li>
<li>问题</li>
<li>目的</li>
<li>解决方案</li>
<li>效果</li>
</ul>
<p>其中关键要素为模式名称，问题，解决方案以及效果：</p>
<ul>
<li>模式名称：模式的命名</li>
<li>问题：描述了应该在何时使用模式，包括了设计中存在的问题以及问题存在的原因</li>
<li>解决方案：描述了一个设计模式的组成部分，以及这些组成部分之间的相互关系，各自的职责和协作方式，通常解决方案通过UML类图和核心代码进行描述</li>
<li>效果：描述了模式的优缺点以及使用模式时应权衡的问题</li>
</ul>
<p>GoF设计模式有23个，模式分类可以按照用途或者处理方式进行分类，按照用途分类的话，可以分为：</p>
<ul>
<li><strong>创建型模式：主要用于描述如何创建对象</strong></li>
<li><strong>结构型模式：主要用于描述如何实现类或对象的组合</strong></li>
<li><strong>行为型模式：主要用于描述类或对象怎么交互以及怎样分配职责</strong></li>
</ul>
<p>根据处理方式分类，可以分为：</p>
<ul>
<li>类模式</li>
<li>对象模式</li>
</ul>
<p>两种分类模式通常结合使用，比如单例模式是对象创建型模式。</p>
<h1 id="3-常用设计模式">3 常用设计模式</h1>
<h2 id="31-创建型模式">3.1 创建型模式</h2>
<ul>
<li>单例模式</li>
<li>简单工厂模式</li>
<li>工厂方法模式</li>
<li>抽象工厂模式</li>
<li>原型模式</li>
<li>建造者模式</li>
</ul>
<h2 id="32-结构型模式">3.2 结构型模式</h2>
<ul>
<li>适配器模式</li>
<li>桥接模式</li>
<li>组合模式</li>
<li>装饰模式</li>
<li>外观模式</li>
<li>享元模式</li>
<li>代理模式</li>
</ul>
<h2 id="33-行为型模式">3.3 行为型模式</h2>
<ul>
<li>职责链模式</li>
<li>命令模式</li>
<li>解释器模式</li>
<li>迭代器模式</li>
<li>中介者模式</li>
<li>备忘录模式</li>
<li>观察者模式</li>
<li>状态模式</li>
<li>策略模式</li>
<li>模板方法模式</li>
<li>访问者模式</li>
</ul>
<h1 id="4-设计模式用途">4 设计模式用途</h1>
<ul>
<li>能够实现可维护性复用的设计方案，提高设计与开发效率</li>
<li>设计模式提供了一套通用的设计词汇和一种通用的形式来方便开发人员之间的沟通以及交流，使得设计方案更加通俗易懂。因为设计模式跨语言，跨平台，跨应用，跨国界</li>
<li>大部分设计模式都兼顾了系统的可重用性以及可扩展性，使得可以更好地重用一些已有的设计方案、功能模块以及一个完整的软件系统</li>
<li>合理使用设计模式并对设计模式的使用情况进行文档化，将有助于别人更快地理解系统</li>
</ul>
<h1 id="5-总结">5 总结</h1>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200710134902806.jpg" alt="在这里插入图片描述" loading="lazy"></figure>
<p><strong>如果觉得文章好看，欢迎点赞。</strong></p>
<p><strong>同时欢迎关注微信公众号：氷泠之路。</strong></p>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200711111358683.gif" alt="在这里插入图片描述" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第22期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-22-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-22-qi/">
        </link>
        <updated>2020-07-09T18:58:24.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>二十年前吃小浣熊，集不齐卡的傻孩子们，依然集不齐五福。</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>太空的宇航员需要在风扇附近睡觉，以便他们呼吸时面前不会形成二氧化碳云，从而避免因此窒息而死。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>霜落荆门江树空，布帆无恙挂秋风。<br>
——李白《秋下荆门》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>如果必须要失去，那么不如一开始就不曾拥有。</p>
</blockquote>
<h1 id="每日音乐">每日音乐</h1>
<blockquote>
<p><a href="https://music.163.com/#/song?id=548556306">季彦霖-选择失忆</a></p>
</blockquote>
<blockquote>
<p>一杯烈酒倒入喉<br>
是你 给的温柔<br>
想念翻滚如浪腾<br>
最后 更痛</p>
</blockquote>
<blockquote>
<p>最后的最后<br>
不过 是一场梦<br>
心越来越痛<br>
如果 回到最初</p>
</blockquote>
<blockquote>
<p>如何能选择忘记<br>
忘记每一段过去<br>
你的话语太伤心<br>
一点也没有余地<br>
可我还是会想你<br>
去想你 没忘记<br>
你刺痛我心<br>
或许一切都归零<br>
归零到最初记忆<br>
我一定选择<br>
不会继续爱你<br>
我的爱已经选择暂停<br>
选择了失忆</p>
</blockquote>
<blockquote>
<p>一杯烈酒倒入喉<br>
是你 给的温柔<br>
想念翻滚如浪腾<br>
最后 更痛<br>
最后的最后<br>
不过 是一场梦<br>
心越来越痛<br>
如果 回到最初</p>
</blockquote>
<blockquote>
<p>如何能选择忘记<br>
忘记每一段过去<br>
你的话语太伤心<br>
一点也没有余地<br>
可我还是会想你<br>
去想你 没忘记<br>
你刺痛我心<br>
或许一切都归零<br>
归零到最初记忆<br>
我一定选择<br>
不会继续爱你<br>
我的爱已经选择暂停<br>
选择了失忆</p>
</blockquote>
<blockquote>
<p>如何能选择忘记<br>
忘记每一段过去<br>
你的话语太伤心<br>
一点也没有余地<br>
可我还是会想你<br>
去想你 没忘记<br>
你刺痛我心<br>
或许一切都归零<br>
归零到最初记忆<br>
我一定选择<br>
不会继续爱你<br>
我的爱已经选择暂停<br>
选择了失忆</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[强大的工具（一）：Capslock+ 3.x版本]]></title>
        <id>https://2293736867.github.io/post/qiang-da-de-gong-ju-yi-capslock-3x-ban-ben/</id>
        <link href="https://2293736867.github.io/post/qiang-da-de-gong-ju-yi-capslock-3x-ban-ben/">
        </link>
        <updated>2020-07-09T06:28:29.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#1-%E6%A6%82%E8%BF%B0">1 概述</a></li>
<li><a href="#2-%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD">2 基础功能</a>
<ul>
<li><a href="#21-%E5%85%89%E6%A0%87%E7%A7%BB%E5%8A%A8">2.1 光标移动</a></li>
<li><a href="#22-%E5%85%89%E6%A0%87%E9%80%89%E6%8B%A9">2.2 光标选择</a></li>
<li><a href="#23-%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C">2.3 删除操作</a></li>
<li><a href="#24-%E6%8D%A2%E8%A1%8C">2.4 换行</a></li>
<li><a href="#25-%E5%89%AA%E8%B4%B4%E6%9D%BF">2.5 剪贴板</a></li>
</ul>
</li>
<li><a href="#3-f1-f6">3 F1-F6</a>
<ul>
<li><a href="#31-f1">3.1 F1</a></li>
<li><a href="#32-f2">3.2 F2</a></li>
<li><a href="#33-f3">3.3 F3</a></li>
<li><a href="#34-f4">3.4 F4</a></li>
<li><a href="#35-f5">3.5 F5</a></li>
<li><a href="#36-f6">3.6 F6</a></li>
</ul>
</li>
<li><a href="#4-%E9%AB%98%E7%BA%A7%E5%8A%9F%E8%83%BD">4 高级功能</a>
<ul>
<li><a href="#41-%E5%85%A8%E5%B1%80%E8%AE%BE%E7%BD%AE">4.1 全局设置</a></li>
<li><a href="#42-tab">4.2 Tab</a>
<ul>
<li><a href="#421-%E8%A1%A5%E5%85%A8">4.2.1 补全</a></li>
<li><a href="#422-%E8%AE%A1%E7%AE%97">4.2.2 计算</a></li>
</ul>
</li>
<li><a href="#43-%E7%AA%97%E5%8F%A3%E7%BB%91%E5%AE%9A">4.3 窗口绑定</a></li>
<li><a href="#44-qbar">4.4 Qbar</a>
<ul>
<li><a href="#441-%E8%AE%BE%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BB%A5%E5%8F%8A%E7%89%88%E6%9C%AC%E4%BF%A1%E6%81%AF">4.4.1 设置文件以及版本信息</a></li>
<li><a href="#442-%E6%89%93%E5%BC%80%E7%BD%91%E5%9D%80">4.4.2 打开网址</a></li>
<li><a href="#443-%E6%B5%8F%E8%A7%88%E6%96%87%E4%BB%B6">4.4.3 浏览文件</a></li>
<li><a href="#444-%E6%90%9C%E7%B4%A2">4.4.4 搜索</a></li>
<li><a href="#445-%E4%BD%BF%E7%94%A8%E7%89%B9%E5%AE%9A%E7%A8%8B%E5%BA%8F%E6%89%93%E5%BC%80%E7%89%B9%E5%AE%9A%E6%96%87%E4%BB%B6">4.4.5 使用特定程序打开特定文件</a></li>
<li><a href="#446-%E7%BB%86%E8%8A%82%E8%A1%A5%E5%85%85">4.4.6 细节补充</a></li>
</ul>
</li>
<li><a href="#45-qbar%E8%87%AA%E5%AE%9A%E4%B9%89">4.5 Qbar自定义</a></li>
<li><a href="#46-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%89%E9%94%AE">4.6 自定义按键</a></li>
</ul>
</li>
<li><a href="#5-%E5%85%B6%E4%BB%96">5 其他</a></li>
</ul>
</p>
<h1 id="1-概述">1 概述</h1>
<p>作者终于把Capslock+更新到了3.x版本了，所以就更了这篇博客。<br>
2.x版本的可以<a href="https://blog.csdn.net/qq_27525611/article/details/85678767">戳这里</a>。<br>
Linux版本的可以<a href="https://blog.csdn.net/qq_27525611/article/details/106965282">戳这里</a>。<br>
3.x版本与2.x版本的主要不同是更新了新的键盘布局，更加顺手，下面让我们一起来看一下吧。</p>
<h1 id="2-基础功能">2 基础功能</h1>
<p>下面的按键都以Capslock+开头，也就是说需要先按着Capslock键，而Alt键无特殊说明指的是左边的Alt键。</p>
<h2 id="21-光标移动">2.1 光标移动</h2>
<table>
<thead>
<tr>
<th>按键</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr>
<td>E</td>
<td>光标向上移动一次</td>
</tr>
<tr>
<td>Alt+E</td>
<td>光标向上移动三次</td>
</tr>
<tr>
<td>D</td>
<td>光标向下移动一次</td>
</tr>
<tr>
<td>Alt+D</td>
<td>光标向下移动三次</td>
</tr>
<tr>
<td>S</td>
<td>光标向左移动一次</td>
</tr>
<tr>
<td>Alt+S</td>
<td>光标向左移动五次</td>
</tr>
<tr>
<td>F</td>
<td>光标向右移动一次</td>
</tr>
<tr>
<td>Alt+F</td>
<td>光标向右移动五次</td>
</tr>
</tbody>
</table>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200708163346860.gif" alt="在这里插入图片描述" loading="lazy"></figure>
<table>
<thead>
<tr>
<th>按键</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr>
<td>T</td>
<td>光标向上移动十次</td>
</tr>
<tr>
<td>Alt+T</td>
<td>光标向上移动三十次</td>
</tr>
<tr>
<td>B</td>
<td>光标向下移动十次</td>
</tr>
<tr>
<td>Alt+B</td>
<td>光标向下移动三十次</td>
</tr>
</tbody>
</table>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200708164058273.gif" alt="在这里插入图片描述" loading="lazy"></figure>
<table>
<thead>
<tr>
<th>按键</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
<td>光标向左移动一个单词</td>
</tr>
<tr>
<td>Alt+A</td>
<td>光标向左移动三个单词</td>
</tr>
<tr>
<td>G</td>
<td>光标向右移动一个单词</td>
</tr>
<tr>
<td>Alt+G</td>
<td>光标向左移动三个单词</td>
</tr>
<tr>
<td>P</td>
<td>光标移动到行首</td>
</tr>
<tr>
<td>Alt+P</td>
<td>光标移动到页首</td>
</tr>
<tr>
<td>;</td>
<td>光标移动到行尾</td>
</tr>
<tr>
<td>Alt+;</td>
<td>光标移动到页尾</td>
</tr>
</tbody>
</table>
<p><strong>注意中文不好界定单词的界限，一般会整句跳过。</strong></p>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/2020070816540074.gif" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="22-光标选择">2.2 光标选择</h2>
<table>
<thead>
<tr>
<th>按键</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr>
<td>I</td>
<td>光标向上选中一次</td>
</tr>
<tr>
<td>Alt+I</td>
<td>光标向上选中三次</td>
</tr>
<tr>
<td>K</td>
<td>光标向下选中一次</td>
</tr>
<tr>
<td>Alt+K</td>
<td>光标向下选中三次</td>
</tr>
<tr>
<td>J</td>
<td>光标向左选中一次</td>
</tr>
<tr>
<td>Alt+J</td>
<td>光标向左选中五次</td>
</tr>
<tr>
<td>L</td>
<td>光标向右选中一次</td>
</tr>
<tr>
<td>Alt+L</td>
<td>光标向右选中五次</td>
</tr>
</tbody>
</table>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20200708170406326.gif" alt="在这里插入图片描述" loading="lazy"></figure>
<table>
<thead>
<tr>
<th>按键</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr>
<td>,</td>
<td>光标选中当前单词</td>
</tr>
<tr>
<td>Alt+,</td>
<td>光标选中当前行</td>
</tr>
<tr>
<td>U</td>
<td>光标选中至行首</td>
</tr>
<tr>
<td>Alt+U</td>
<td>光标选中至页首</td>
</tr>
<tr>
<td>O</td>
<td>光标选中至行尾</td>
</tr>
<tr>
<td>Alt+O</td>
<td>光标选中至页尾</td>
</tr>
</tbody>
</table>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/20200708173232184.gif" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="23-删除操作">2.3 删除操作</h2>
<table>
<thead>
<tr>
<th>按键</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr>
<td>W</td>
<td>光标向后删除（=Backspace）</td>
</tr>
<tr>
<td>Alt+W</td>
<td>光标向后删除单词</td>
</tr>
<tr>
<td>R</td>
<td>光标向前删除（=Delete）</td>
</tr>
<tr>
<td>Alt+R</td>
<td>光标向前删除单词</td>
</tr>
<tr>
<td>[</td>
<td>光标删除至行首</td>
</tr>
<tr>
<td>Alt+[</td>
<td>光标删除至页首</td>
</tr>
<tr>
<td>/</td>
<td>光标删除至行尾</td>
</tr>
<tr>
<td>Alt+/</td>
<td>光标删除至页尾</td>
</tr>
<tr>
<td>Backspace</td>
<td>删除当前行</td>
</tr>
<tr>
<td>Alt+Backspace</td>
<td>删除全部内容</td>
</tr>
</tbody>
</table>
<figure data-type="image" tabindex="6"><img src="https://img-blog.csdnimg.cn/20200708172629866.gif" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="24-换行">2.4 换行</h2>
<table>
<thead>
<tr>
<th>按键</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr>
<td>Space</td>
<td>等价于Enter</td>
</tr>
<tr>
<td>Enter</td>
<td>向下插入一行，相当于先按End再按Enter</td>
</tr>
</tbody>
</table>
<figure data-type="image" tabindex="7"><img src="https://img-blog.csdnimg.cn/20200708173543536.gif" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="25-剪贴板">2.5 剪贴板</h2>
<table>
<thead>
<tr>
<th>按键</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr>
<td>X/C/V</td>
<td>剪切/复制/粘贴，独立于Ctrl+X/C/V，如果有选中则剪切/复制选中的内容，如果没有选中会剪切/复制当前行的内容</td>
</tr>
<tr>
<td>Alt+X/C/V</td>
<td>另一套独立的剪贴板</td>
</tr>
</tbody>
</table>
<figure data-type="image" tabindex="8"><img src="https://img-blog.csdnimg.cn/20200708174006521.gif" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="3-f1-f6">3 F1-F6</h1>
<h2 id="31-f1">3.1 F1</h2>
<p>打开<a href="https://capslox.com/capslock-plus/">官网</a>。</p>
<h2 id="32-f2">3.2 F2</h2>
<p>F2是计算面板。可以按<code>Enter</code>或者<code>Shift+Enter</code>获取计算结果，加上<code>Shift</code>计算结果会出现下一行。<br>
也可以按<code>Capslock+Tab</code>获取结果，这样会把原来的表达式给替换掉。</p>
<figure data-type="image" tabindex="9"><img src="https://img-blog.csdnimg.cn/20200708175450223.gif" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="33-f3">3.3 F3</h2>
<p>F3是翻译功能，使用的是有道API，注意事项如下：</p>
<ul>
<li>英语单次可以不用选中，只需要光标靠着单词</li>
<li>中文最好选中再翻译，不好界定“单词”界限</li>
<li>翻译框的文本可以使用<code>Capslock+Alt+Backspace</code>清空再次输入进行下一次翻译</li>
<li>网络差的话使用翻译可能会导致Capslock+假死，稍等即可</li>
<li>API接口请求为每小时1000次，如果有特殊需求可以前往<a href="https://ai.youdao.com/gw.s">有道智云</a>申请一个独立Key，并修改<code>Capslock+settings.int</code></li>
</ul>
<figure data-type="image" tabindex="10"><img src="https://img-blog.csdnimg.cn/2020070819335986.gif" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="34-f4">3.4 F4</h2>
<p>F4可以将窗口变修改窗口透明度：</p>
<ul>
<li>短按：修改为半透明/不透明</li>
<li>长按：配合鼠标滚轮修改透明度</li>
</ul>
<h2 id="35-f5">3.5 F5</h2>
<p>F5重新加载Cpaslock+，会有一个reload提示框。</p>
<h2 id="36-f6">3.6 F6</h2>
<p>F6可以置顶或者解除置顶一个窗口。</p>
<h1 id="4-高级功能">4 高级功能</h1>
<h2 id="41-全局设置">4.1 全局设置</h2>
<p>全局设置在<code>Capslock+settings.ini</code>的<code>[Global]</code>中，其中：</p>
<ul>
<li><code>autostart</code>：是否开机自启，可选1或0，默认为0，不自启</li>
<li><code>default_hotkey_scheme</code>：热键布局，可选<code>capslox</code>或<code>capslock_plus</code>，默认前者，后者为2.x版本的热键</li>
<li><code>loadScript</code>：加载的JS脚本，必须位于<code>loadScript</code>文件夹下，用逗号分隔要加载的JS，比如<code>locaScript=1.js,2.js</code></li>
<li><code>mouseSpeed</code>：按下<code>Capslock+Alt</code>时的鼠标速度，默认为3，可以按住<code>Capslock+Alt</code>配合滚轮修改临时的鼠标速度</li>
<li><code>allowClipboard</code>：是否开启默认剪贴板，可选1或0，默认为1，开启</li>
<li><code>loadingAnimation</code>：是否开启加载动画，可选1或0，默认为1，开启</li>
</ul>
<h2 id="42-tab">4.2 Tab</h2>
<p>Tab可以实现字符串的补全还有计算。</p>
<h3 id="421-补全">4.2.1 补全</h3>
<p>补全就是利用设置文件中的值对特定的字符串进行补全，比如设置有</p>
<pre><code class="language-java">qq = 123456
tel = 11111111111
</code></pre>
<p>输入<code>qq</code>或者<code>tel</code>后按<code>Capslock+Tab</code>就可以补全：</p>
<figure data-type="image" tabindex="11"><img src="https://img-blog.csdnimg.cn/20200709100452818.gif" alt="在这里插入图片描述" loading="lazy"></figure>
<p>可以输入<code>Capslock+Q</code>再输入<code>cl set</code>打开设置文件，在<code>Capslock+settings.ini</code>的<code>[TabHotString]</code>中进行设置：<br>
<img src="https://img-blog.csdnimg.cn/20200709100254388.png" alt="在这里插入图片描述" loading="lazy"><br>
格式为：</p>
<pre><code class="language-java">键名 = 字符串
</code></pre>
<p>可以加上空格。<br>
这个可以填上一些常见的个人信息，邮箱，电话什么的。对程序员可以自定义某些代码段，比如可以设置</p>
<pre><code class="language-java">so = System.out.println(&quot;&quot;);
</code></pre>
<p>修改完txt直接保存即可生效，无需使用<code>Capslock+F5</code>进行重载。</p>
<h3 id="422-计算">4.2.2 计算</h3>
<p>计算可以对普通的表达式进行计算，或者调用JS函数进行计算，默认内置了以下函数（在<code>loadScript</code>下的<code>scriptDemo.js</code>中）：</p>
<ul>
<li><code>pow</code>：次幂，比如<code>pow(3,2.1)</code></li>
<li><code>variance</code>：方差，比如<code>variance(1,2,3,4,5)</code></li>
<li><code>spVariance</code>：样本方差，比如<code>spVariance(1,2,3,4,5)</code></li>
<li><code>stdResidual</code>：标准化残差，比如<code>stdResidual(1,2,3,4,5,6)</code></li>
<li><code>average</code>：平均值，比如<code>average(1,2,3)</code></li>
<li><code>stepNum</code>：输出一组步进数字，比如<code>stepNum(1,3,3)</code>会输出<code>1,4,7</code>，参数是<code>起始值，个数，步长</code></li>
<li><code>roll</code>：随机数，比如<code>roll(100)</code>会输出一个<code>0-99</code>的随机数</li>
<li><code>date</code>：当前日期</li>
<li><code>time</code>：当前时间</li>
<li><code>dateTime</code>：当前日期+时间</li>
<li><code>String.alignment</code>：字符串对齐格式，参数为<code>对齐参考符号，是否按名称长短排序</code>，参数类型为<code>字符串类型，布尔类型</code>，默认值为<code>'=',false</code></li>
<li><code>String.repeat</code>：字符串重复函数，比如<code>&quot;123&quot;.repeat(3)</code>会输出<code>123123123</code></li>
</ul>
<figure data-type="image" tabindex="12"><img src="https://img-blog.csdnimg.cn/20200709102944132.gif" alt="在这里插入图片描述" loading="lazy"></figure>
<p>细节补充：</p>
<ul>
<li>使用时需要把光标移动到表达式或者函数的右边</li>
<li>表达式含有<code>=</code>时保留原来表达式，不含有<code>=</code>时直接将结果替换掉原来表达式</li>
<li>表达式带有空格需要选中表达式或者在表达式头部加上反引号</li>
<li>若表达式跨越多行需要选中</li>
</ul>
<p>如果需要自定义函数，请编写<code>.js</code>文件，并放置于<code>loadScript</code>文件夹下，并修改<code>Capslock+settings.int</code>中的<code>[Gloabl]</code>下的<code>loadScript</code>，在默认的<code>scriptDemo.js</code>后面逗号分隔加上自己的<code>.js</code>文件即可。</p>
<h2 id="43-窗口绑定">4.3 窗口绑定</h2>
<p>有三种窗口绑定模式：</p>
<ul>
<li>单击：绑定当前激活的窗口</li>
<li>双击：追加绑定当前激活的窗口</li>
<li>三击：绑定当前窗口所属程序的所有窗口</li>
</ul>
<p>什么意思呢？窗口绑定的键位为<code>Capslock+Win+0-9</code>，比如当前打开了浏览器，再按下了<code>Capslock+Win+1</code>，就会绑定浏览器到<code>1</code>这个按键，这时候按一次<code>Capslock+1</code>就会把浏览器最小化，再按一次<code>Cpaslock+1</code>就会把浏览器还原。</p>
<p>这时候如果切换到了一个记事本窗口，按下了<code>Capslock+Win+1+1</code>（按两次1），就会把这个记事本也绑定到<code>1</code>这个按键，这时候按<code>Capslock+1</code>就会在浏览器以及记事本之间切换。</p>
<p>如果打开了多个记事本，同时窗口切换到其中一个记事本，按下<code>Capslock+Win+1+1+1</code>（按三次1），就会把所有的记事本窗口绑定到<code>1</code>这个按键，这时候按下<code>Capslock+1</code>就会在这些记事本窗口之间进行切换。</p>
<p>这个功能笔者觉得不错，起码比<code>Alt+Tab</code>或者<code>Win+Tab</code>好用，切换速度很快。</p>
<h2 id="44-qbar">4.4 Qbar</h2>
<p>Qbar是Capslock+提供的一个功能输入框，按下<code>Capslock+Q</code>显示。<br>
功能包括：</p>
<ul>
<li>查看相关设置文件以及版本信息：输入<code>cl about</code>或者<code>cl set</code></li>
<li>打开网址</li>
<li>文件浏览</li>
<li>使用自定义搜索引擎进行搜索</li>
<li>使用特定应用程序打开特定文件</li>
</ul>
<h3 id="441-设置文件以及版本信息">4.4.1 设置文件以及版本信息</h3>
<ul>
<li>输入<code>cl about</code>可以查看版本信息</li>
<li>输入<code>cl set</code>可以查看配置文件的demo以及进行配置文件的修改，包括全局配置，热字串配置等</li>
</ul>
<figure data-type="image" tabindex="13"><img src="https://img-blog.csdnimg.cn/20200709105100990.gif" alt="在这里插入图片描述" loading="lazy"></figure>
<h3 id="442-打开网址">4.4.2 打开网址</h3>
<figure data-type="image" tabindex="14"><img src="https://img-blog.csdnimg.cn/20200709105359308.gif" alt="在这里插入图片描述" loading="lazy"></figure>
<ul>
<li>可以输入<code>baidu.com</code>或者加上前缀<code>web baidu.com</code></li>
<li>网址以<code>http://</code>或者<code>https://</code>或者<code>www.</code>开头可以省略</li>
<li><code>Ctrl+Enter</code>而不是直接<code>Enter</code>可以加上前缀<code>www.</code>以及后缀<code>.com</code>，就像图中一样，如果不是<code>Ctrl+Enter</code>而是直接<code>Enter</code>会搜索<code>baidu</code></li>
</ul>
<h3 id="443-浏览文件">4.4.3 浏览文件</h3>
<p>可以进行本地文件的浏览：<br>
<img src="https://img-blog.csdnimg.cn/20200709105840403.gif" alt="在这里插入图片描述" loading="lazy"></p>
<ul>
<li>输入<code>/</code>或者<code>\</code>可以进入下一层目录</li>
<li>输入<code>Capslock+-</code>可以回到上一层目录</li>
<li>文件过多时为了保证速度会放弃加载部分图标</li>
</ul>
<h3 id="444-搜索">4.4.4 搜索</h3>
<p>可以使用自定义的搜索引擎搜索，默认为谷歌搜索，可以输入<code>cl set</code>查看。默认内置了：</p>
<ul>
<li>谷歌</li>
<li>百度</li>
<li>淘宝</li>
<li>维基百科</li>
<li>MDN</li>
</ul>
<p>使用很简单，可以直接输入搜索关键字然后Enter即可，选择相应引擎可以加上特定前缀：</p>
<p><img src="https://img-blog.csdnimg.cn/20200709110545179.gif" alt="在这里插入图片描述" loading="lazy"><br>
自带搜索引擎前缀关键字如下：</p>
<ul>
<li><code>s</code>或者<code>bd</code>：百度</li>
<li><code>g</code>或者<code>gg</code>：谷歌</li>
<li><code>m</code> ：MDN</li>
<li><code>wk</code>：维基百科</li>
<li><code>tb</code>：淘宝</li>
</ul>
<p>自定义搜索引擎时，将搜索词用<code>{q}</code>代替，并添加到<code>[QSearch]</code>字段即可，再加上关键字即可。<br>
Chrome自带了搜索引擎的管理功能，如果使用过知乎搜索，打开设置中的管理搜索引擎：<br>
<img src="https://img-blog.csdnimg.cn/2020070911174364.png" alt="在这里插入图片描述" loading="lazy"><br>
并找到知乎：<br>
<img src="https://img-blog.csdnimg.cn/20200709111821878.png" alt="在这里插入图片描述" loading="lazy"><br>
接着把整个字符串复制到<code>[QSearch]</code>，并修改<code>%s</code>为<code>{q}</code>，同时加上关键字<code>zh</code>：<br>
<img src="https://img-blog.csdnimg.cn/20200709112010492.png" alt="在这里插入图片描述" loading="lazy"><br>
接着就可以使用<code>zh</code>搜索了：</p>
<figure data-type="image" tabindex="15"><img src="https://img-blog.csdnimg.cn/2020070911253099.gif" alt="在这里插入图片描述" loading="lazy"></figure>
<h3 id="445-使用特定程序打开特定文件">4.4.5 使用特定程序打开特定文件</h3>
<p>需要再设置文件中设置<code>[QRun]</code>字段，比如设置了：</p>
<pre><code class="language-bash">[QRun]
code = &quot;D:\xxxx\xxx\xxx\Code.exe&quot;
txt = &quot;C:\xxx\xxx\xxx\1.txt&quot;
</code></pre>
<p>则可以输入<code>code txt</code>使用VSCode打开这个txt。</p>
<h3 id="446-细节补充">4.4.6 细节补充</h3>
<ul>
<li>选中文件再键入<code>Capslock+Q</code>会填上选中文件的路径</li>
<li>设置热字串时可以使用<code>Capslock+Q</code>设置，格式为<code>xxx -&gt; xxx</code>，比如<code>aa -&gt; 11</code>这样会提示是否将<code>aa</code>设为热字串，也可以加入<code>xxx -&gt; run xxx</code>或者<code>xxx -&gt; web xxx</code>，在对应的<code>[QWeb]</code>或者<code>[QRun]</code>下设置</li>
</ul>
<h2 id="45-qbar自定义">4.5 Qbar自定义</h2>
<p>Qbar可以按照设置文件里面的配置自定义样式，支持的样式如下表：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>取值</th>
</tr>
</thead>
<tbody>
<tr>
<td>borderBackgroundColor</td>
<td>背景颜色，默认red</td>
</tr>
<tr>
<td>borderRadius</td>
<td>边框四角圆角程度，默认9</td>
</tr>
<tr>
<td>textBackgroundColor</td>
<td>文字输入框的背景颜色，默认green</td>
</tr>
<tr>
<td>textColor</td>
<td>输入文字的颜色，默认ffffff，白色</td>
</tr>
<tr>
<td>editFontName</td>
<td>输入文字的字体，默认Hiragino Sans GB W6</td>
</tr>
<tr>
<td>editFontSize</td>
<td>输入文字大小，默认12</td>
</tr>
<tr>
<td>listFontName</td>
<td>提示列表字体，默认consoals</td>
</tr>
<tr>
<td>listFontSize</td>
<td>提示列表字体大小，默认10</td>
</tr>
<tr>
<td>listBackgroundColor</td>
<td>提示列表背景颜色，默认blue</td>
</tr>
<tr>
<td>listColor</td>
<td>提示列表文字颜色，默认0x000000</td>
</tr>
<tr>
<td>listCount</td>
<td>提示列表行数，默认5</td>
</tr>
<tr>
<td>lineHeight</td>
<td>提示列表每行高度，默认19</td>
</tr>
<tr>
<td>progressColor</td>
<td>进度条颜色，默认0x00cc99</td>
</tr>
</tbody>
</table>
<p>颜色可以是指定的16种HTML的基础颜色之一或者6位RGB颜色值（可以省略0x前缀），例如<code>red</code>，<code>ffffaa</code>，<code>FFFFAA</code>，<code>0xFFFFAA</code>。</p>
<h2 id="46-自定义按键">4.6 自定义按键</h2>
<p>Capslock+支持的按键有：</p>
<ul>
<li><code>Capslock + (LALt + ) F1~F12</code></li>
<li><code>Capslock + (LALt + ) 0~9</code></li>
<li><code>Capslock + (LALt + ) a~z</code></li>
<li><code>Capslock + (LALt + ) -=[]\;',./</code></li>
<li><code>Capslock + (LALt + ) Backspace, Tab, Enter, Space, RAlt</code></li>
<li><code>Capslock+Win+0~9</code></li>
</ul>
<p>实际上按下某个键相当于执行特定的函数，比如按下了<code>Capslock+B</code>，在配置文件中可以找到如下映射：</p>
<pre><code class="language-java">caps_b=keyFunc_moveDown(10)
</code></pre>
<p>由于是AutoHotKey写的，代码开源在Github上，需要的话可以自行修改对应的函数，另外还有如下四个没有按键映射的函数：</p>
<ul>
<li><code>keyFunc_mediaPlayPause</code>：停止播放</li>
<li><code>keyFunc_volumeUp</code>：增大音量</li>
<li><code>keyFunc_volumeDown</code>：降低音量</li>
<li><code>keyFunc_volumeMute</code>：静音</li>
</ul>
<p>可以直接修改对应键位后面的映射函数，比如<code>caps_lalt_1=keyFunc_doNothing</code>修改为<code>caps_lalt_1=keyFunc_volumeMute</code>，这样按下<code>Capslock+Alt+1</code>就可以静音了。</p>
<h1 id="5-其他">5 其他</h1>
<ul>
<li>启动过Capslock+后，可以通过快捷键<code>Ctrl+Alt+Capslock</code>启动</li>
<li>使用窗口绑定的功能时，如果同时开启了<code>PowerToys</code>会绑定不了，请先关闭<code>PowerToys</code>再进行窗口绑定（2.x的版本使用Alt不会有此问题，希望作者修复）</li>
<li>F12可以关闭/打开独立的剪贴板</li>
<li><code>Capslock+E/D/S/F</code>并不能完全代替上/下/左/右键，比如很多时候<code>Alt+←</code>是后退，但是<code>Alt+Capslock+S</code>被实现为了光标向左移动五次</li>
<li>其他更多请按<code>Capslock+F1</code>打开官网或者打开<code>Qbar</code>后输入<code>cl set</code>查看配置文件的更多信息</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第21期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-21-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-21-qi/">
        </link>
        <updated>2020-07-09T06:27:24.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1594276220508.jpeg" alt="" loading="lazy"></figure>
<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>混到现在，拿得起，放得下的，只有筷子。</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>尽管千禧一代经常被视为“滥交”一代，但他们的性伴侣比前几代人都少，而且性行为也比父母同龄时间更少。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>等闲识得东风面，万紫千红总是春。<br>
——朱熹《春日》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>无法拒绝的礼物，决定了我的轮廓什么样，却不能把我的心也捆绑。</p>
</blockquote>
<h1 id="每日音乐">每日音乐</h1>
<blockquote>
<p><a href="https://music.163.com/#/song?id=209758">倒带-蔡依林</a></p>
</blockquote>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1594276942931.jpeg" alt="" loading="lazy"></figure>
<blockquote>
<p>我受够了等待<br>
你所谓的安排<br>
说的未来到底多久才来</p>
</blockquote>
<blockquote>
<p>总是要来不及<br>
才知道我可爱<br>
我想依赖 而你却都不在</p>
</blockquote>
<blockquote>
<p>应该开心的地带<br>
你给的全是空白<br>
一个人假日发呆<br>
找不到人陪我看海</p>
</blockquote>
<blockquote>
<p>我在幸福的门外<br>
却一直都进不来<br>
你累积给的伤害我是真的很难释怀</p>
</blockquote>
<figure data-type="image" tabindex="3"><img src="https://2293736867.github.io/post-images/1594276950482.jpeg" alt="" loading="lazy"></figure>
<blockquote>
<p>终于看开爱回不来<br>
而你总是太晚明白<br>
最后才把话说开<br>
哭着求我留下来<br>
终于看开爱回不来<br>
我们面前太多阻碍<br>
你的手却放不开<br>
宁愿没出息求我别离开</p>
</blockquote>
<blockquote>
<p>你总是要我乖<br>
慢慢计划将来<br>
我的眼泪却一直掉下来<br>
过去怎么交代<br>
你该给的信赖<br>
被你亲手缓缓推入悬崖</p>
</blockquote>
<blockquote>
<p>从我脸上的苍白<br>
看到记忆慢下来<br>
过去甜蜜在倒带<br>
只是感觉已经不在<br>
而我对你的期待<br>
被你一次次摔坏<br>
已经碎成太多块<br>
要怎么拼凑跟重来</p>
</blockquote>
<figure data-type="image" tabindex="4"><img src="https://2293736867.github.io/post-images/1594276957194.jpg" alt="" loading="lazy"></figure>
<blockquote>
<p>终于看开爱回不来<br>
而你总是太晚明白<br>
最后才把话说开<br>
哭着求我留下来<br>
终于看开爱回不来<br>
我们面前太多阻碍<br>
你的手却放不开<br>
宁愿没出息求我别离开</p>
</blockquote>
<blockquote>
<p>终于看开爱回不来<br>
而你总是太晚明白<br>
最后才把话说开<br>
哭着求我留下来<br>
终于看开爱回不来<br>
我们面前太多阻碍<br>
你的手却放不开<br>
宁愿没出息求我别离开</p>
</blockquote>
<figure data-type="image" tabindex="5"><img src="https://2293736867.github.io/post-images/1594276962358.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第20期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-20-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-20-qi/">
        </link>
        <updated>2020-07-08T02:21:15.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1594174933839.jpeg" alt="" loading="lazy"></figure>
<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>听说你的城市下雨了，不知道你带伞了没有，如果带了这雨就白下了。</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>虽然美国威斯康星州的饮酒年龄为21岁，但根据法律规定，任何未成年人都可以在酒吧和餐馆喝酒，只要与达到法定饮酒年龄的父母或者监护人在一起即可。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>嫩阴里，烟滋露染，翠娇红溜。<br>
——吴文英《花心动·柳》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>这么好的一位少年，那么他喜欢着的少女，得是多好的姑娘啊？</p>
</blockquote>
<h1 id="每日音乐">每日音乐</h1>
<blockquote>
<p><a href="https://music.163.com/#/song?id=111933">开心的马骝-刘德华</a></p>
</blockquote>
<blockquote>
<p>紫色夹杂 灰色衬衫 T恤橙雨楼<br>
思想放任 衣衫更是 不须多扣钮<br>
衫松裤大 胶表带着 拉绳的布袋<br>
街边跳动 开心快活 七彩的马骝</p>
</blockquote>
<blockquote>
<p>夜 不再等候 别放手 不再要走<br>
夜街 穿插左右<br>
令我热热烈烈痛痛快快似喝醉了酒</p>
</blockquote>
<blockquote>
<p>大雨落在七彩雨楼 两点似菊豆<br>
十只着上七彩雨楼的湿水马骝<br>
夜里荡在尖东去追 刺激快感受<br>
站在路上一起再多饮光几罐酒</p>
</blockquote>
<blockquote>
<p>紫色夹杂 灰色衬衫 T恤橙雨楼<br>
思想放任 衣衫更是 不须多扣钮<br>
衫松裤大 胶表带着 拉绳的布袋<br>
街边跳动 开心快活 七彩的马骝<br>
夜 不再等候 别放手 不再要走<br>
夜街 穿插左右<br>
令我热热烈烈痛痛快快似喝醉了酒</p>
</blockquote>
<blockquote>
<p>大雨落在七彩雨楼两点似菊豆<br>
十只着上七彩雨楼的湿水马骝<br>
夜里荡在尖东去追刺激快感受<br>
站在路上一起再多饮光几罐酒</p>
</blockquote>
<blockquote>
<p>夜 不再等候 别放手 不再要走<br>
夜街 穿插左右<br>
令我热热烈烈痛痛快快似喝醉了酒<br>
大雨落在七彩雨楼两点似菊豆<br>
十只着上七彩雨楼的湿水马骝<br>
夜里荡在尖东去追刺激快感受<br>
站在路上一起再多饮光几罐酒</p>
</blockquote>
<blockquote>
<p>大雨落在七彩雨楼两点似菊豆<br>
十只着上七彩雨楼的湿水马骝<br>
夜里荡在尖东去追刺激快感受<br>
站在路上一起再多饮光几罐酒</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第19期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-19-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-19-qi/">
        </link>
        <updated>2020-07-07T02:20:56.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1594174925211.jpeg" alt="" loading="lazy"></figure>
<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>生活不止眼前的苟且，还有前任的喜贴，所以拉黑很重要。</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>人类已经通过旅行者1号从地球向外探测了近140亿英里，但仅向地球内部钻了7.5英里。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>有三秋桂子，十里荷花。<br>
——柳永《望海潮·东南形胜》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>奇怪的是，当他死去，所有人才开始爱他。</p>
</blockquote>
<h1 id="每日音乐">每日音乐</h1>
<blockquote>
<p><a href="https://music.163.com/#/song?id=473440527">外愈-任然</a></p>
</blockquote>
<blockquote>
<p>有人等在那家咖啡馆<br>
熟悉音乐播放不间断<br>
只为了纪念他们的走散</p>
</blockquote>
<blockquote>
<p>有一些习惯确实伤感<br>
假装隐藏却莫名心酸<br>
想表现坦然明明两难</p>
</blockquote>
<blockquote>
<p>没有谁能比谁更加好过<br>
掩饰伤口不代表谁软弱<br>
不要解释反而弄巧成拙<br>
想洒脱就别执着<br>
没了谁谁都一样的好过<br>
伤口随时间都会愈合<br>
终于明白过往会吞没所有</p>
</blockquote>
<blockquote>
<p>有一些习惯确实伤感<br>
假装隐藏却莫名心酸<br>
想表现坦然明明两难</p>
</blockquote>
<blockquote>
<p>没有谁谁比谁更加好过<br>
掩饰伤口不代表谁软弱<br>
不要解释反而弄巧成拙<br>
想洒脱就别执着<br>
没了谁谁都一样好过<br>
伤口随时间都会愈合<br>
终于明白过往会吞没所有</p>
</blockquote>
<blockquote>
<p>没有谁谁比谁更加好过<br>
掩饰伤口不代表谁软弱<br>
不要解释反而弄巧成拙<br>
想洒脱就别执着<br>
没了谁谁都一样好过<br>
伤口随时间都会愈合<br>
终于明白过往会吞没所有</p>
</blockquote>
<h1 id="高考">高考</h1>
<p>各位高三学子高考加油啊！<br>
疫情下的高考真是困难重重，有人说，这届考生真是“生于非典，考于新冠”，好像也有那么一点道理。</p>
<h2 id="安徽">安徽</h2>
<p>就在今天（2020.07.07）凌晨，安徽省黄山市歙（she）县遭遇了50年一遇的洪涝灾害，截至9点，歙县中学，歙县二中2个高考考点大部分考生均未进入考点，近十点正式通知语文考试取消。<br>
真是惨，真的变了“乘风破浪”的学生。</p>
<h2 id="贵州">贵州</h2>
<p>今天贵州安顺一大巴冲进水库，车内有高考考生，截止7日下午17时30分，共搜救出36人，其中21人死亡，15人受伤。<br>
真惨。</p>
<h2 id="阅读">阅读</h2>
<p>今年的语文阅读有新梗了，尼克乔治滑雪。<br>
全国一卷的阅读理解是海明威的一篇文章，叫《越野滑雪》，是这样的：</p>
<blockquote>
<p>“也许咱们再也没机会滑雪了，尼克，”乔治说。<br>
“咱们一定得滑，”尼克说，“要是不能滑就没有意义了。”<br>
“咱们要去滑，没错儿，”乔治说。<br>
“咱们一定得滑，”尼克附和说。<br>
“希望咱们能就此说定了，”乔治说。</p>
</blockquote>
<p>然后就出了一个题目问：</p>
<blockquote>
<p>两人的对话表达了什么？</p>
</blockquote>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1594176505204.jpeg" alt="" loading="lazy"></figure>
<p>原文（看不到图片的可以去搜索原文“《越野滑雪》 海明威”）：<br>
<img src="https://2293736867.github.io/post-images/1594176583346.webp" alt="" loading="lazy"></p>
<p>这个题目笔者也不会做，目前因为刚刚高考答案也没公开，网上也没多少文章，就不说什么了。</p>
<h2 id="作文">作文</h2>
<p>今年的高考语文试卷作文题一共11道，5道教育部命制，天津、上海、江苏、浙江等各1道，北京命制2道，下面看看全国一卷作文：</p>
<blockquote>
<p>春秋时期，齐国的公子纠与公子小白争夺君位，管仲和鲍叔分别辅佐他们。管仲带兵阻击小白，用箭射中他的衣带钩，小白装死逃脱。后来小白即位为君，史称齐桓公。鲍叔对桓公说，要想成就霸王之业，非管仲不可。于是桓公重用管仲，鲍叔甘居其下，终成一代霸业。后来人称颂齐桓公九合诸侯，一匡天下，为“春秋五霸”之首。孔子说：“桓公九合诸侯，不以兵车，管仲之力也。”司马迁说：“天下不多（称赞）管仲之贤而多鲍叔能知人也。”</p>
</blockquote>
<blockquote>
<p>班级计划举行读书会，围绕上述材料展开讨论。齐桓公、管仲、鲍叔三人，你对哪个感触最深？请结合你的感受和思考写一篇发言稿。</p>
</blockquote>
<p>于是就有了这样的图片：</p>
<figure data-type="image" tabindex="3"><img src="https://2293736867.github.io/post-images/1594177692235.jpeg" alt="" loading="lazy"></figure>
<p>笔者讨厌写作文，就不说什么了，立意可以看一下<a href="https://baijiahao.baidu.com/s?id=1671545420600236472&amp;wfr=spider&amp;for=pc">这里</a>。</p>
<p>其他作文题目可以看一下<a href="http://news.chinaxiaokang.com/dujiazhuangao/20200708/998613_1.html">这里</a>。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第18期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-18-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-18-qi/">
        </link>
        <updated>2020-07-05T16:51:47.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1593967959221.jpeg" alt="" loading="lazy"></figure>
<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>赚钱就像便秘——老难了，花钱就像拉稀——憋不住。</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>如果你在菲律宾的每座岛屿都待上一天，那么访问完这些岛屿将花上你将近21年的时间。这些岛屿的最新计数为7641座。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>去年五月黄梅雨，曾典袈裟籴米归。<br>
——与恭《思母》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>落叶的一生，只是为了归根吧。</p>
</blockquote>
<h1 id="每日音乐">每日音乐</h1>
<blockquote>
<p><a href="https://music.163.com/#/song?id=151985">丁香花-唐磊</a></p>
</blockquote>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1593969326765.jpg" alt="" loading="lazy"></figure>
<blockquote>
<p>你说你最爱丁香花<br>
因为你的名字就是她<br>
多么忧郁的话<br>
多愁善感的人啊</p>
</blockquote>
<blockquote>
<p>当花儿枯萎的时候<br>
当画面定格的时候<br>
多么娇嫩的花<br>
却躲不过风吹雨打</p>
</blockquote>
<figure data-type="image" tabindex="3"><img src="https://2293736867.github.io/post-images/1593969335203.jpg" alt="" loading="lazy"></figure>
<blockquote>
<p>飘啊摇啊的一生<br>
多少美丽编织的梦啊<br>
就这样匆匆你走了<br>
留给我一生牵挂</p>
</blockquote>
<blockquote>
<p>那坟前开满鲜花<br>
是你多么渴望的美啊<br>
你看啊漫山遍野<br>
你还觉得孤单吗</p>
</blockquote>
<blockquote>
<p>你听啊有人在唱<br>
那首你最爱的歌谣啊<br>
尘世间多少繁芜<br>
从此不必再牵挂</p>
</blockquote>
<figure data-type="image" tabindex="4"><img src="https://2293736867.github.io/post-images/1593969340313.jpg" alt="" loading="lazy"></figure>
<blockquote>
<p>你说你最爱丁香花<br>
因为你的名字就是它<br>
多么忧郁的话<br>
多愁善感的人啊</p>
</blockquote>
<blockquote>
<p>当花儿枯萎的时候<br>
当画面定格的时候<br>
多么娇嫩的花<br>
却躲不过风吹雨打</p>
</blockquote>
<blockquote>
<p>飘啊摇啊的一生<br>
多少美丽编织的梦啊<br>
就这样匆匆你走了<br>
留给我一生牵挂</p>
</blockquote>
<blockquote>
<p>那坟前开满鲜花<br>
是你多么渴望的美啊<br>
你看啊漫山遍野<br>
你还觉得孤单吗</p>
</blockquote>
<blockquote>
<p>你听啊有人在唱<br>
那首你最爱的歌谣啊<br>
尘世间多少繁芜<br>
从此不必再牵挂</p>
</blockquote>
<blockquote>
<p>那坟前开满鲜花<br>
是你多么渴望的美啊<br>
你看啊漫山遍野<br>
你还觉得孤单吗</p>
</blockquote>
<blockquote>
<p>你听啊有人在唱<br>
那首你最爱的歌谣啊<br>
尘世间多少繁芜<br>
从此不必再牵挂</p>
</blockquote>
<blockquote>
<p>院子里栽满丁香花<br>
开满紫色美丽的鲜花<br>
我在这里陪着她<br>
一生一世守护她</p>
</blockquote>
]]></content>
    </entry>
</feed>