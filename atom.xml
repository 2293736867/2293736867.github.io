<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://2293736867.github.io</id>
    <title>氷泠&apos;s blog</title>
    <updated>2020-09-14T00:07:48.822Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://2293736867.github.io"/>
    <link rel="self" href="https://2293736867.github.io/atom.xml"/>
    <subtitle>我配不上你，
纵然很努力。</subtitle>
    <logo>https://2293736867.github.io/images/avatar.png</logo>
    <icon>https://2293736867.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 氷泠&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[每日分享 第93期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-93-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-93-qi/">
        </link>
        <updated>2020-09-17T00:02:41.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>当咸鱼拥有了梦想，它就会成为，一只拥有梦想的咸鱼。</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>自1995年起，50%的尼日尔人口一直是不足16岁的青少年，目前尼日尔的总人口是2160万。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>十月到幽州，戈鋋若罗星。<br>
——李白《经乱离后天恩流夜郎忆旧游书怀赠江夏韦太守良宰》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>生而为人，我很抱歉。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第92期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-92-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-92-qi/">
        </link>
        <updated>2020-09-15T23:57:44.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>如果你的男朋友对你百依百顺，从不拈花惹草，可能是因为他钱不够。</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>《小鸡快跑》是至今票房最高的定格动画电影，甚至打败了《圣诞夜惊魂》。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>无波真古井，有节是秋筠。<br>
——苏轼《临江仙·送钱穆父》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>每天都是新的一天，有好运比什么都强。</p>
</blockquote>
<h1 id="关于aarch64">关于<code>aarch64</code></h1>
<p>发现<code>aarch64</code>真的带给笔者不少的坑，因为很多软件什么的都“默认”<code>x86</code>，害。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第91期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-91-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-91-qi/">
        </link>
        <updated>2020-09-15T01:06:04.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>垃圾还有大爷大妈捡走，你呢？</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>你的牙釉质比龙虾壳或犀牛角还坚硬，甚至比钢铁还坚硬。牙釉质是由矿化的磷酸钙组成，而磷酸钙是生物所能制造的最坚硬的物质。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>悟了长生理，秋莲处处开。<br>
——吕岩《五言》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>痛苦犹如一艘船，欲望是指南针。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第90期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-90-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-90-qi/">
        </link>
        <updated>2020-09-14T00:48:37.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>很多人觉得自己活得太累，实际上，他们可能只是睡得太晚。</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>作为地球上最高大、最古老的生物之一，颤抖居人正慢慢死于骡鹿之口。这片位于犹他州的颤杨群面积达到106英亩，拥有近80000年的历史，目前正因被骡鹿吞食新茎而日益稀疏。与此同时，骡鹿目前正因为没有天敌而蓬勃繁衍。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>阴生古苔绿，色染秋烟碧。<br>
——李白《南轩松》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>死去的人不需要花。被花所拯救的是留下的人。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第89期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-89-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-89-qi/">
        </link>
        <updated>2020-09-13T00:48:16.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>装逼只是瞬间，不要脸那才是永恒。</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>与居住在核电厂附近相比，居住在煤电厂附近所受的辐射剂量更高。这是因为煤电厂所排粉煤灰的辐射量是类似核电厂废料的100倍。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>洞庭青草，近中秋，更无一点风色。<br>
——张孝祥《念奴娇·过洞庭》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>我于杀戮之中盛放，亦如黎明中的花朵。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第88期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-88-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-88-qi/">
        </link>
        <updated>2020-09-12T00:47:55.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>我一般说话都会给人留面子，万一我怼你了，没错我就是故意的。</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>有一种叫作疯狂蜂蜜的蜂蜜会让人产生幻觉。由于售价高达每磅80美元，因此尼泊尔采蜜人会为了收获这种蜂蜜而进行危险的垂直攀爬。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>青青园中葵，朝露待日晞。<br>
——佚名《长歌行》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>机场永远等不到船，就像我永远等不到你。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第87期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-87-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-87-qi/">
        </link>
        <updated>2020-09-11T00:47:09.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>所有抱怨社会不公和制度的人翻译过来只有一句话：请给我金钱，女人和社会地位。</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>扁虫同时拥有雄性和雌性生殖器官，如果它们找不到与自己交配的扁虫，它们将通过将针状交配器刺入自己的脑袋以为自己授精，这种交配方式叫自交。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>不知明镜里，何处得秋霜。<br>
——李白《秋浦歌十七首》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>能诚实地承认穷，诚恳地表达对于钱的兴趣，就是对穷者的尊严。</p>
</blockquote>
<h1 id="关于每日音乐">关于每日音乐</h1>
<p>最近有点忙，而且找不到什么好听的新歌，所以关于每日音乐分享这部分就先暂告一段落了，如有不便请多多包涵。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Spring Boot demo系列（四）：Spring Web+Validation]]></title>
        <id>https://2293736867.github.io/post/spring-boot-demo-xi-lie-si-spring-webvalidation/</id>
        <link href="https://2293736867.github.io/post/spring-boot-demo-xi-lie-si-spring-webvalidation/">
        </link>
        <updated>2020-09-10T01:59:24.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#1-%E6%A6%82%E8%BF%B0">1 概述</a></li>
<li><a href="#2-%E6%A0%A1%E9%AA%8C">2 校验</a></li>
<li><a href="#3-hibernate-validator">3 <code>Hibernate Validator</code></a></li>
<li><a href="#4-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8">4 基本使用</a></li>
<li><a href="#5-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86">5 异常处理</a></li>
<li><a href="#6-%E5%BF%AB%E9%80%9F%E5%A4%B1%E8%B4%A5%E6%A8%A1%E5%BC%8F">6 快速失败模式</a></li>
<li><a href="#7-valid%E4%B8%8Evalidated">7 <code>@Valid</code>与<code>@Validated</code></a>
<ul>
<li><a href="#71-%E5%88%86%E7%BB%84">7.1 分组</a></li>
<li><a href="#72-%E7%BB%84%E5%BA%8F%E5%88%97">7.2 组序列</a></li>
</ul>
</li>
<li><a href="#8-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3">8 自定义注解</a></li>
<li><a href="#9-%E6%9D%A5%E7%82%B9aop">9 来点<code>AOP</code></a>
<ul>
<li><a href="#91-%E4%BE%9D%E8%B5%96">9.1 依赖</a></li>
<li><a href="#92-%E9%AA%8C%E8%AF%81%E6%B3%A8%E8%A7%A3">9.2 验证注解</a></li>
<li><a href="#93-%E5%AD%97%E6%AE%B5%E9%AA%8C%E8%AF%81">9.3 字段验证</a></li>
<li><a href="#94-%E5%AE%9A%E4%B9%89%E9%AA%8C%E8%AF%81%E5%99%A8">9.4 定义验证器</a></li>
</ul>
</li>
<li><a href="#10-%E5%8F%82%E8%80%83%E6%BA%90%E7%A0%81">10 参考源码</a></li>
</ul>
</p>
<h1 id="1-概述">1 概述</h1>
<p>本文主要讲述了如何使用<code>Hibernate Validator</code>以及<code>@Valid/@Validate</code>注解。</p>
<h1 id="2-校验">2 校验</h1>
<p>对于一个普通的<code>Spring Boot</code>应用，经常可以在业务层看到以下类似的操作：</p>
<pre><code class="language-java">if(id == null)
{...}
if(username == null)
{...}
if(password == null)
{...}
</code></pre>
<p>这是很正常的，但是会显得代码很繁琐，一个更好的做法就是使用<code>Hibernate Validator</code>。</p>
<h1 id="3-hibernate-validator">3 <code>Hibernate Validator</code></h1>
<p><code>JSR</code>是<code>Java Specification Requests</code>的缩写，意思是<code>Java规范提案</code>，<code>JSR-303</code>是<code>Java EE 6</code>的一项子规范，叫作<code>Bean Validation</code>，<code>Hibernate Validator</code>是<code>Bean Validator</code>的参考实现。其中<code>JSR-303</code>内置<code>constraint</code>如下：</p>
<ul>
<li><code>@Null</code>：被注解元素必须为<code>null</code></li>
<li><code>@NotNull</code>：必须不为<code>null</code></li>
<li><code>@AssertTrue</code>/<code>@AssertFalse</code>：必须为<code>true</code>/<code>false</code></li>
<li><code>@Min(value)</code>/<code>@Max(value)</code>：指定最小值/最大值（可以相等）</li>
<li><code>@DecimalMin(value)</code>/<code>DecimalMax(value)</code>：指定最小值/最大值（不能相等）</li>
<li><code>@Size(min,max)</code>：大小在给定范围</li>
<li><code>@Digits(integer,fraction)</code>：将字符串转为浮点数，并且规定整数位数最大<code>integer</code>位，小数位数最大<code>fraction</code>位</li>
<li><code>@Past</code>：必须是一个过去日期</li>
<li><code>@Future</code>：必须是将来日期</li>
<li><code>@Pattern</code>：必须符合正则表达式</li>
</ul>
<p>其中<code>Hibernate Validator</code>添加的<code>constraint</code>如下：</p>
<ul>
<li><code>@Email</code>：必须符合邮箱格式</li>
<li><code>@Length(min,max)</code>：字符串长度范围</li>
<li><code>@Range</code>：数字在指定范围</li>
</ul>
<p>而在<code>Spring</code>中，对<code>Hibernate Validator</code>进行了二次封装，添加了自动校验并且可以把校验信息封装进特定的<code>BindingResult</code>中。</p>
<h1 id="4-基本使用">4 基本使用</h1>
<p>注解直接在实体类的对应字段加上即可：</p>
<pre><code class="language-java">@Setter
@Getter
public class User {
    @NotBlack(message = &quot;邮箱不能为空&quot;)
    @Email(message = &quot;邮箱非法&quot;)
    private String email;
    @NotBlack(message = &quot;电话不能为空&quot;)
    private String phone;
}
</code></pre>
<p>控制层：</p>
<pre><code class="language-java">@CrossOrigin(value = &quot;http://localhost:3000&quot;)
@RestController
public class TestController {
    @PostMapping(&quot;/test&quot;)
    public boolean test(@RequestBody @Valid User user)
    {
        return true;
    }
}
</code></pre>
<p>测试：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200909171918903.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200909172101821.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20200909172134182.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>可以看到把<code>phone</code>字段留空或者使用非法邮箱格式时直接抛出异常。</p>
<h1 id="5-异常处理">5 异常处理</h1>
<p>前面说过校验出错会把异常放进<code>BindingResult</code>中，具体的处理方法就是加上对应参数即可，控制层修改如下：</p>
<pre><code class="language-java">@PostMapping(&quot;/test&quot;)
public boolean test(@RequestBody @Valid User user, BindingResult result)
{
    if(result.hasErrors())
        result.getAllErrors().forEach(System.out::println);
    return true;
}
</code></pre>
<p>可以通过<code>getAllErrors</code>获取所有的错误，这样就可以对具体错误进行处理了。</p>
<h1 id="6-快速失败模式">6 快速失败模式</h1>
<p><code>Hibernate Validator</code>有两种校验模式：</p>
<ul>
<li>普通模式：默认，检验所有属性，然后返回所有验证失败信息</li>
<li>快速失败模式：只要有一个验证失败便返回</li>
</ul>
<p>使用快速失败模式需要通过<code>HiberateValidateConfiguration</code>以及<code>ValidateFactory</code>创建<code>Validator</code>，并且使用<code>Validator.validate</code>手动校验，首先可以添加一个生成<code>Validator</code>的类：</p>
<pre><code class="language-java">import org.hibernate.validator.HibernateValidator;
import org.springframework.context.annotation.Configuration;

import java.util.Set;
import javax.validation.ConstraintViolation;
import javax.validation.Validation;
import javax.validation.Validator;

@Configuration
public class FailFastValidator {
    private final Validator validator;
    public FailFastValidator()
    {
        validator = Validation
        .byProvider(HibernateValidator.class)
        .configure()
        .failFast(true)
        .buildValidatorFactory()
        .getValidator();
    }

    public Set&lt;ConstraintViolation&lt;User&gt;&gt; validate(User user)
    {
        return validator.validate(user);
    }
}
</code></pre>
<p>接着修改控制层，去掉<code>User</code>上的<code>@Valid</code>，同时注入<code>validator</code>进行手动校验：</p>
<pre><code class="language-java">import com.example.demo.entity.User;
import com.example.demo.failfast.FailFastValidator;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import javax.validation.ConstraintViolation;
import java.util.Set;

@CrossOrigin(value = &quot;http://localhost:3000&quot;)
@RestController
@RequiredArgsConstructor(onConstructor = @__(@Autowired))
public class TestController {
    private final FailFastValidator validator;
    @PostMapping(&quot;/test&quot;)
    public boolean test(@RequestBody User user)
    {
        Set&lt;ConstraintViolation&lt;User&gt;&gt; message = validator.validate(user);
        message.forEach(System.out::println);
        return true;
    }
}
</code></pre>
<p>这样一旦校验失败便会返回，而不是校验完所有的字段记录所有错误信息再返回。</p>
<h1 id="7-valid与validated">7 <code>@Valid</code>与<code>@Validated</code></h1>
<p><code>@Valid</code>位于<code>javax.validation</code>下，而<code>@Validated</code>位于<code>org.springframework.validation.annotation</code>下，是<code>@Valid</code>的一次封装，在<code>@Valid</code>的基础上，增加了分组以及组序列的功能，下面分别进行介绍。</p>
<h2 id="71-分组">7.1 分组</h2>
<p>当不同的情况下需要不同的校验方式时，可以使用分组功能，比如在某种情况下需要注册时不需要校验邮箱，而修改信息的时候需要校验邮箱，则实体类可以如下设计：</p>
<pre><code class="language-java">@Setter
@Getter
public class User {
    @NotBlank(message = &quot;邮箱不能为空&quot;,groups = GroupB.class)
    @Email(message = &quot;邮箱非法&quot;,groups = GroupB.class)
    private String email;
    @NotBlank(message = &quot;电话不能为空&quot;,groups = {GroupA.class,GroupB.class})
    private String phone;

    public interface GroupA{}
    public interface GroupB{}
}
</code></pre>
<p>接着修改控制层，并使用<code>@Validate</code>代替原来的<code>@Valid</code>：</p>
<pre><code class="language-java">public class TestController {
    @PostMapping(&quot;/test&quot;)
    public boolean test(@RequestBody @Validated(User.GroupA.class) User user)
    {
        return true;
    }
}
</code></pre>
<p>在<code>GroupA</code>的情况下，只校验电话，测试如下：</p>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20200909174327878.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>而如果修改为<code>GroupB</code>：</p>
<pre><code class="language-java">public boolean test(@RequestBody @Validated(User.GroupB.class) User user)
</code></pre>
<p>这样就邮箱与电话都校验：</p>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/20200909174437324.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="72-组序列">7.2 组序列</h2>
<p>默认情况下，校验是无序的，也就是说，对于下面的实体类：</p>
<pre><code class="language-java">public class User {
    @NotBlank(message = &quot;邮箱不能为空&quot;)
    @Email(message = &quot;邮箱非法&quot;)
    private String email;
    @NotBlank(message = &quot;电话不能为空&quot;)
    private String phone;
}
</code></pre>
<p>先校验哪一个并没有固定顺序，修改控制层如下，返回错误信息：</p>
<pre><code class="language-java">@PostMapping(&quot;/test&quot;)
public String test(@RequestBody @Validated User user, BindingResult result)
{
    for (ObjectError allError : result.getAllErrors()) {
        return allError.getDefaultMessage();
    }
    return &quot;true&quot;;
}
</code></pre>
<p>可以看到两次测试的结果不同：</p>
<figure data-type="image" tabindex="6"><img src="https://img-blog.csdnimg.cn/2020090918234135.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="7"><img src="https://img-blog.csdnimg.cn/20200909182406397.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>因为顺序不固定，而如果指定了顺序：</p>
<pre><code class="language-java">public class User {
    @NotBlank(message = &quot;邮箱不能为空&quot;,groups = First.class)
    @Email(message = &quot;邮箱非法&quot;,groups = First.class)
    private String email;
    @NotBlank(message = &quot;电话不能为空&quot;,groups = Third.class)
    private String phone;

    public interface First{}
    public interface Second{}
    public interface Third{}
    @GroupSequence({First.class,Second.class,Third.class})
    public interface Group{}
}
</code></pre>
<p>同时控制层指定顺序：</p>
<pre><code class="language-java">public String test(@RequestBody @Validated(User.Group.class) User user, BindingResult result)
</code></pre>
<p>这样就一定会先校验<code>First</code>，也就是先校验邮箱是否为空。</p>
<h1 id="8-自定义注解">8 自定义注解</h1>
<p>尽管使用上面的各种注解已经能解决很多情况了，但是对于一些特定的情况，需要一些特别的校验，而自带的注解不能满足，这时就需要自定义注解了，比如上面的电话字段，国内的是11位的，而且需要符合某些条件（比如默认区号<code>+86</code>等），下面就自定义一个专门用于手机号码的注解：</p>
<pre><code class="language-java">@Documented
@Constraint(validatedBy = PhoneValidator.class)
@Target({ElementType.FIELD,ElementType.METHOD})
@Retention(RetentionPolicy.RUNTIME)
public @interface Phone {
    String message() default &quot;请使用合法的手机号码&quot;;
    Class&lt;?&gt; [] groups() default {};
    Class&lt;? extends Payload&gt; [] payload() default {};
}
</code></pre>
<p>同时定义一个验证类：</p>
<pre><code class="language-java">public class PhoneValidator implements ConstraintValidator&lt;Phone,String&gt; {
    @Override
    public boolean isValid(String s, ConstraintValidatorContext constraintValidatorContext) {
        if(s.length() != 11)
            return false;
        return Pattern.matches(&quot;^((17[0-9])|(14[0-9])|(13[0-9])|(15[^4,\\D])|(18[0,5-9]))\\d{8}$&quot;,s);
    }
}
</code></pre>
<p>接着修改实体类，加上注解即可：</p>
<pre><code class="language-java">@Phone
@NotBlank(message = &quot;电话不能为空&quot;)
private String phone;
</code></pre>
<p>测试如下，可以看到虽然是11位了，但是格式非法，因此返回相应信息：</p>
<figure data-type="image" tabindex="8"><img src="https://img-blog.csdnimg.cn/20200909184017180.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="9-来点aop">9 来点<code>AOP</code></h1>
<p>默认情况下<code>Hibernate Validator</code>不是快速失败模式的，但是如果配成快速失败模式就不能用<code>@Validate</code>了，需要手动实例化一个<code>Validator</code>，这是一种很麻烦的操作，虽然说可以利用组序列“伪装”成一个快速失败模式，但是有没有更好的解决办法呢？</p>
<p>有！</p>
<p>就是。。。</p>
<p>自己动手使用<code>AOP</code>实现校验。</p>
<h2 id="91-依赖">9.1 依赖</h2>
<p><code>AOP</code>这种高级的东西当然是用别人的轮子啊：</p>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<h2 id="92-验证注解">9.2 验证注解</h2>
<p>首先自定义一个验证注解，这个注解的作用类似<code>@Validate</code>：</p>
<pre><code class="language-java">public @interface UserValidate {}
</code></pre>
<h2 id="93-字段验证">9.3 字段验证</h2>
<p>自定义一些类似<code>@NotEmpty</code>等的注解：</p>
<pre><code class="language-java">@Documented
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.FIELD)
public @interface MyEmail {
    String message() default &quot;邮箱不能为空，且需要一个合法的邮箱&quot;;
    int order();
}

@Documented
@Target(ElementType.FIELD)
@Retention(RetentionPolicy.RUNTIME)
public @interface MyPhone {
    String message() default &quot;电话不能为空，且需要一个合法的电话&quot;;
    int order();
}
</code></pre>
<h2 id="94-定义验证器">9.4 定义验证器</h2>
<pre><code class="language-java">@Aspect
@Component
public class UserValidator {
    @Pointcut(&quot;@annotation(com.example.demo.aop.UserValidate)&quot;)
    public void userValidate(){}

    @Before(&quot;userValidate()&quot;)
    public void validate(JoinPoint point) throws EmailException, PhoneException, IllegalAccessException {
        User user = (User)point.getArgs()[0];
        TreeMap&lt;Integer,Annotation&gt; treeMap = new TreeMap&lt;&gt;();
        HashMap&lt;Integer,Object&gt; allFields = new HashMap&lt;&gt;();
        for (Field field : user.getClass().getDeclaredFields()) {
            field.setAccessible(true);
            for (Annotation annotation : field.getAnnotations()) {
                if(annotation.annotationType() == MyEmail.class)
                {
                    treeMap.put(((MyEmail)annotation).order(),annotation);
                    allFields.put(((MyEmail)annotation).order(),field.get(user));
                }
                else if(annotation.annotationType() == MyPhone.class)
                {
                    treeMap.put(((MyPhone)annotation).order(),annotation);
                    allFields.put(((MyPhone)annotation).order(),field.get(user));
                }
            }
        }
        for (Map.Entry&lt;Integer, Annotation&gt; entry : treeMap.entrySet()) {
            Class&lt;? extends Annotation&gt; type = entry.getValue().annotationType();
            if(type == MyEmail.class)
            {
                validateEmail((String)allFields.get(entry.getKey()));
            }
            else if(type == MyPhone.class)
            {
                validatePhone((String)allFields.get(entry.getKey()));
            }
        }
    }

    private static void validateEmail(String s) throws EmailException
    {
        throw new EmailException();
    }

    private static void validatePhone(String s) throws PhoneException
    {
        throw new PhoneException();
    }
}
</code></pre>
<p>这个是实现校验的核心，首先定义一个切点：</p>
<pre><code class="language-java">@Pointcut(&quot;@annotation(com.example.demo.aop.UserValidate)&quot;)
public void userValidate(){}
</code></pre>
<p>该切点应用在注解<code>@UserValidate</code>上，接着定义验证方法<code>validate</code>，首先通过切点获取其中的参数以及参数中的注解，并且模拟了组序列，先使用<code>TreeMap</code>进行排序，最后针对遍历该<code>TreeMap</code>，对不同的注解分别调用不同的方法校验。</p>
<p>实体类简单定义顺序即可：</p>
<pre><code class="language-java">public class User {
    @MyEmail(order = 2)
    private String email;
    @MyPhone(order = 1)
    private String phone;
}
</code></pre>
<p>控制类中的注解定义在方法上：</p>
<pre><code class="language-java">@PostMapping(&quot;/test&quot;)
@UserValidate
public String test(@RequestBody User user)
{
    return &quot;true&quot;;
}
</code></pre>
<p>这样就自定义实现了一个简单的<code>JSR-303</code>了。</p>
<p>当然该方法还有很多的不足，比如需要配合全局异常处理，不然的话会直接抛出异常：</p>
<figure data-type="image" tabindex="9"><img src="https://img-blog.csdnimg.cn/20200909195817539.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>前端也是直接返回异常：</p>
<figure data-type="image" tabindex="10"><img src="https://img-blog.csdnimg.cn/20200909195834685.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>一般情况下还是推荐使用<code>Hibernate Validator</code>，应对常规情况足够了。</p>
<h1 id="10-参考源码">10 参考源码</h1>
<p><code>Java</code>版：</p>
<ul>
<li><a href="https://github.com/2293736867/SpringBootDemoJava/tree/master/HibernateValidator">Github</a></li>
<li><a href="https://gitee.com/u6b7b5fc3/SpringBootDemoJava/tree/master/HibernateValidator">码云</a></li>
</ul>
<p><code>Kotlin</code>版：</p>
<ul>
<li><a href="https://github.com/2293736867/SpringBootDemoKotlin/tree/master/HibernateValidator">Github</a></li>
<li><a href="https://gitee.com/u6b7b5fc3/SpringBootDemoKotlin/tree/master/HibernateValidator">码云</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第86期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-86-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-86-qi/">
        </link>
        <updated>2020-09-09T17:03:15.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>钱不是万能的，但有钱真的可以为所欲为。</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>2010年，哥伦比亚军队制作了一首名为《Better Days》的歌曲，其副歌中嵌入了莫尔斯电码，并在被叛军控制的领土上播出，以此提高人质的士气。其密文如下：“已有19人获救，你就是下一个，不要放弃希望”。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>古刹疏钟度，遥岚破风悬。<br>
——李贺《南园十三首》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>不要想，去感受。</p>
</blockquote>
<h1 id="每日音乐">每日音乐</h1>
<blockquote>
<p><a href="https://www.kugou.com/song/143mmx36.html#hash=530B4F05106ABB8DD5EFE29AAFB6D306&amp;album_id=36183150">嚣张（粤语）-大泫</a></p>
</blockquote>
<blockquote>
<p>请你讲<br>
给我知<br>
你想说的话<br>
其实我<br>
还是我<br>
想得太多<br>
如何能<br>
强忍眼泪<br>
去怀抱孤独进睡<br>
怎么会<br>
不可能<br>
再与你一堆</p>
</blockquote>
<blockquote>
<p>不要讲<br>
给我知<br>
你的规矩吧<br>
仍是我<br>
全做错<br>
现已丑化<br>
别埋藏<br>
容不了下去<br>
加深这空虚<br>
烧光那<br>
些多余<br>
忘记尽瘁</p>
</blockquote>
<blockquote>
<p>奋力做个傀儡愿意破碎受重伤<br>
黑暗像是伴着寂寞<br>
共我做对象<br>
偶然发现你在<br>
我旁拍掌<br>
还是这么嚣张<br>
不再日日夜夜<br>
痴心卑恭地妄想<br>
想要改写怎么仿佛<br>
听到你声响<br>
多可笑<br>
还是打了败仗</p>
</blockquote>
<blockquote>
<p>不要讲<br>
给我知<br>
你的规矩吧<br>
仍是我<br>
全做错<br>
现已丑化<br>
别埋藏<br>
容不了下去<br>
加深这空虚<br>
烧光那<br>
些多余<br>
忘记尽瘁</p>
</blockquote>
<blockquote>
<p>奋力做个傀儡愿意破碎受重伤<br>
黑暗像是伴着寂寞共我做对象<br>
偶然发现你在我旁拍掌<br>
还是这么嚣张<br>
不再日日夜夜<br>
痴心卑恭地妄想<br>
想要改写怎么仿佛听到你声响<br>
多可笑<br>
还是打了败仗</p>
</blockquote>
<blockquote>
<p>奋力做个傀儡愿意破碎受重伤<br>
黑暗像是伴着寂寞共我做对象<br>
偶然发现你在我旁拍掌<br>
还是这么嚣张<br>
不再日日夜夜<br>
痴心卑恭地妄想<br>
想要改写怎么仿佛听到你声响<br>
多可笑<br>
还是打了败仗</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第85期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-85-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-85-qi/">
        </link>
        <updated>2020-09-09T14:28:07.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>没人牵手，我就揣兜。</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>在大萧条期间，一位银行家说服佛罗里达州Quincy镇的家庭以每股19美元的价格购买可口可乐的股票。后来，该镇以67位百万富翁成为美国人均最富有的地方。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>酒贱常愁客少，月明多被云妨。<br>
——苏轼《西江月·世事一场大梦》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>去死两次！</p>
</blockquote>
<h1 id="每日音乐">每日音乐</h1>
<blockquote>
<p><a href="http://www.yymp3.com/Play/9181/116999.htm">月牙湾-F.I.R</a></p>
</blockquote>
<blockquote>
<p>敦煌天空的沙粒<br>
带着我们的记忆<br>
我从半路看回去<br>
这秦关漫漫好婉踞</p>
</blockquote>
<blockquote>
<p>梦想穿过了西域<br>
包含了多少的禅意<br>
爱情像一本游记<br>
我会找寻它的密语<br>
看月牙湾下的泪光<br>
在丝路上被遗忘</p>
</blockquote>
<blockquote>
<p>是谁的心啊<br>
孤单地留下<br>
他还好吗<br>
我多想爱他<br>
那永恒的泪<br>
凝固那一句话<br>
也许可能蒸发</p>
</blockquote>
<blockquote>
<p>是谁的爱啊<br>
比泪水坚强<br>
轻声呼唤<br>
就让我融化<br>
每一滴雨水<br>
演化成我翅膀<br>
想着我爱的人<br>
追吧</p>
</blockquote>
<blockquote>
<p>梦想穿过了西域<br>
包含了多少的禅意<br>
爱情像一本游记<br>
我会找寻它的密语<br>
看月牙湾下的泪光<br>
在丝路上被遗忘</p>
</blockquote>
<blockquote>
<p>是谁的心啊<br>
孤单地留下<br>
他还好吗<br>
我多想爱他<br>
那永恒的泪<br>
凝固那一句话<br>
也许可能蒸发</p>
</blockquote>
<blockquote>
<p>是谁的爱啊<br>
比泪水坚强<br>
轻声呼唤<br>
就让我融化<br>
每一滴雨水<br>
演化成我翅膀<br>
向着我爱的人<br>
追吧</p>
</blockquote>
<blockquote>
<p>是谁的心啊<br>
孤单地留下<br>
他还好吗<br>
我多想爱他<br>
那永恒的泪<br>
凝固那一句话<br>
也许可能蒸发</p>
</blockquote>
<blockquote>
<p>是谁的爱啊<br>
比泪水坚强<br>
轻声呼唤<br>
就让我融化<br>
每一滴雨水<br>
演化成我翅膀<br>
向着我爱的人<br>
追吧</p>
</blockquote>
]]></content>
    </entry>
</feed>