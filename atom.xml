<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://2293736867.github.io</id>
    <title>氷泠&apos;s blog</title>
    <updated>2020-09-24T10:36:01.095Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://2293736867.github.io"/>
    <link rel="self" href="https://2293736867.github.io/atom.xml"/>
    <subtitle>我配不上你，
纵然很努力。</subtitle>
    <logo>https://2293736867.github.io/images/avatar.png</logo>
    <icon>https://2293736867.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 氷泠&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[每日分享 第101期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-101-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-101-qi/">
        </link>
        <updated>2020-09-25T08:24:54.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>你可以像猪一样懒，却无法像只猪一样，懒得心安理得。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>秋浦田舍翁，采鱼水中宿。<br>
——李白《秋浦歌十七首》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>在人间有谁或者不像是一场炼狱，我不哭我已经没有尊严能放弃。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Spring Boot demo系列（八）：Jasypt]]></title>
        <id>https://2293736867.github.io/post/spring-boot-demo-xi-lie-ba-jasypt/</id>
        <link href="https://2293736867.github.io/post/spring-boot-demo-xi-lie-ba-jasypt/">
        </link>
        <updated>2020-09-24T10:35:18.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-概述">1 概述</h1>
<p><code>Jasypt</code>是一个加密库，<code>Github</code>上有一个集成了<code>Jasypt</code>的<code>Spring Boot</code>库，叫<code>jasypt-spring-boot</code>，本文演示了如何使用该库对配置文件进行加密。</p>
<h1 id="2-依赖">2 依赖</h1>
<p>首先添加依赖：</p>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;com.github.ulisesbocchio&lt;/groupId&gt;
    &lt;artifactId&gt;jasypt-spring-boot-starter&lt;/artifactId&gt;
    &lt;version&gt;3.0.3&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<p><code>Gradle</code>：</p>
<pre><code class="language-bash">implementation(&quot;com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.3&quot;)
</code></pre>
<h1 id="3-简单加密">3 简单加密</h1>
<p>简单加密就是直接把加密口令（注意不是加密密码）以明文形式写在配置文件中，步骤如下：</p>
<ul>
<li>配置文件配置加密口令</li>
<li>获取密文</li>
<li>替换明文</li>
</ul>
<h2 id="31-加密口令">3.1 加密口令</h2>
<p>在配置文件加上如下参数：</p>
<pre><code class="language-yaml">jasypt:
  encryptor:
    password: test
</code></pre>
<p>其中<code>test</code>就是加密的口令。</p>
<h2 id="32-获取密文">3.2 获取密文</h2>
<p>比如配置文件需要加密的值如下：</p>
<pre><code class="language-yaml">test: value
</code></pre>
<p>在测试类对<code>StringEncryptor</code>进行注入并使用其中的<code>encrypt</code>加密通过<code>@Value</code>获取的值：</p>
<pre><code class="language-java">@SpringBootTest
class DemoApplicationTests {
    @Autowired
    private StringEncryptor encryptor;

    @Value(&quot;${test}&quot;)
    private String value;

    @Test
    void contextLoads() {
        System.out.println(encryptor.encrypt(value));
    }
}
</code></pre>
<p>点击旁边的绿色小三角形即可运行，输出如下：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200924000606468.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>这个就是对应的密文。</p>
<h2 id="33-替换明文">3.3 替换明文</h2>
<p>把密文加上前缀<code>ENC(</code>与后缀<code>)</code>替换明文：</p>
<pre><code class="language-yaml">test: ENC(IlEvyvcULhZJrHLDtPun2ut433RvAdpaNJ9IZt9uNUk3hDSKQsdOXLEkWyiK6QR3)
</code></pre>
<p>这样就完成了对属性<code>test</code>进行加密。</p>
<h2 id="34-测试">3.4 测试</h2>
<p>直接通过<code>@Value</code>获取的值即为明文：</p>
<pre><code class="language-java">@SpringBootTest
class DemoApplicationTests {

    @Autowired
    private StringEncryptor encryptor;

    @Value(&quot;${test}&quot;)
    private String value;

    @Test
    void contextLoads() {
        System.out.println(encryptor.encrypt(value));
    }

    @Test
    void decrypt()
    {
        System.out.println(value);
    }
}
</code></pre>
<p>直接运行其中的<code>decrypt</code>即可输出明文。</p>
<h1 id="4-自定义加密">4 自定义加密</h1>
<h2 id="41-自定义加密类">4.1 自定义加密类</h2>
<p>默认采用的加密算法为<code>PBE</code>算法，如果觉得不能符合要求可以自定义加密类。</p>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200924064738911.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>自定义加密类实现<code>StringEncrypto</code>接口即可，需要在配置文件写上<code>Bean</code>的名称：</p>
<pre><code class="language-java">@Component
public class Encryptor implements StringEncryptor{

    @Override
    public String encrypt(String s) {
        return s+&quot;111&quot;;
    }

    @Override
    public String decrypt(String s) {
        return s.substring(0,s.indexOf(&quot;111&quot;));
    }
}
</code></pre>
<p>这里的加密很简单，直接在明文后面加上<code>111</code>，解密的话去掉<code>111</code>。另外在配置文件上写上<code>Bean</code>的名称：</p>
<pre><code class="language-yaml">jasypt:
  encryptor:
#    password: test
    bean: encryptor
</code></pre>
<p>同时可以把口令注释掉，因为此时已经不需要使用口令进行加密了。</p>
<p>测试：</p>
<pre><code class="language-java">@SpringBootTest
class DemoApplicationTests {

    @Autowired
    private StringEncryptor encryptor;

    @Value(&quot;${test}&quot;)
    private String value;

    @Test
    void contextLoads() {
        System.out.println(encryptor.encrypt(value));
    }

    @Test
    void decrypt()
    {
        System.out.println(encryptor.decrypt(value));
    }

}
</code></pre>
<h2 id="42-非对称加密">4.2 非对称加密</h2>
<p>生成公钥与私钥借助了工具类库<code>Hutool</code>，依赖如下：</p>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;cn.hutool&lt;/groupId&gt;
    &lt;artifactId&gt;hutool-crypto&lt;/artifactId&gt;
    &lt;version&gt;5.4.3&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
    &lt;groupId&gt;org.bouncycastle&lt;/groupId&gt;
    &lt;artifactId&gt;bcprov-jdk15on&lt;/artifactId&gt;
    &lt;version&gt;1.66&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<p><code>Gradle</code>：</p>
<pre><code class="language-bash">implementation(&quot;cn.hutool:hutool-crypto:5.4.3&quot;)
implementation(&quot;org.bouncycastle:bcprov-jdk15on:1.66&quot;)
</code></pre>
<p>生成公钥私钥：</p>
<pre><code class="language-java">KeyPair pair = SecureUtil.generateKeyPair(&quot;RSA&quot;);
System.out.println(Base64.getEncoder().encodeToString(pair.getPublic().getEncoded()));
System.out.println(Base64.getEncoder().encodeToString(pair.getPrivate().getEncoded()));
</code></pre>
<p>生成后添加到<code>jasypt.encryptor.public-key-string</code>与<code>jasypt.encryptor.private-key-string</code>：</p>
<pre><code class="language-yaml">jasypt:
  encryptor:
#    password: test
#    bean: encryptor
    public-key-string: MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCZV5U0+Ck4AEpawUoiHOkG4ZNC6EeEvFZVCcyaIM0MiusGMM6ye9ZT6Ok756/vQsJbsYDGDtIDX82TsmYbZkN7QPuclABSL5SmaDYdJM/MeYKfMwrDb0lWARqF5ql9Rgol7Agq4ef8yQEbSmUDW/LQe+xXtCTer5MoJViUHV56MwIDAQAB
    private-key-string: MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBAJlXlTT4KTgASlrBSiIc6Qbhk0LoR4S8VlUJzJogzQyK6wYwzrJ71lPo6Tvnr+9CwluxgMYO0gNfzZOyZhtmQ3tA+5yUAFIvlKZoNh0kz8x5gp8zCsNvSVYBGoXmqX1GCiXsCCrh5/zJARtKZQNb8tB77Fe0JN6vkyglWJQdXnozAgMBAAECgYA8syFCrwtt+ht00ne8ijIqQagP/6+z2PPZxL/DsUFJ+kGvmSlxGLlOTO/qgTuxG/2g22JsxFgY8tcHZMKrjO8f4TLKPsaFgX1OwNhJO4SoMlfUUAR9HSMv49vx5mOvh2QUrC5+4rIQI1Rm8zbKyAqCjHIKr8hA6bIKEHO2qXK05QJBANhAA+djwrr3orIIBTRp+H6/JChH76XtoQfcQyT+CrEu/4tHVkbO2cEqcdKDScswHyTPu5UaSU2HFW/0Lj8Kg40CQQC1h1YMysd51djCf/Ud7L2sSIduy3DUSLc6XRX1IWAqxO+8gkvknDW7QztNES9YqwYEkLNLAjp1v8Gq+o2JQKS/AkAENCpfQycz70BwaYuAW1cDT7/qMIvOE/J/bp63h2C51QoOsRJSSg8dnC+eQgMbOhJA6vDgkyQ9p5SZGowTmaa5AkEAneQAIZJC3KL3LX20ivm+pFpVijXjhpFU5avPjG4iQjEXQISoVEjWp3G747V91Aa1bkUZ3bUref13Cytw7h/O6wJBAJHNIHKKTAkmslguJU5hll1HqrzyI9lcB5XqcgvdsxijUkZ95FThk6hNQuNV0sO/itUijQsJAtNdDITKmdcPMWg=
</code></pre>
<p>然后就可以像加密得到密文并替换明文了。</p>
<h1 id="5-非明文口令">5 非明文口令</h1>
<p>对于<code>jasypt.encryptor.password</code>，可以使用非明文口令，这样口令的传递方式有三种：</p>
<ul>
<li>通过命令行参数传递</li>
<li>通过应用环境变量传递</li>
<li>通过系统环境变量传递</li>
</ul>
<h2 id="51-通过命令行参数传递">5.1 通过命令行参数传递</h2>
<p>首先先写上明文口令，得到密文：</p>
<pre><code class="language-yaml">jasypt:
  encryptor:
    password: test
test: value
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20200924080510685.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>加上前后缀替换明文后，去掉加密口令：</p>
<pre><code class="language-yaml">#jasypt:
#  encryptor:
#    password: test

test: ENC(quCu1b+Z7SPHmgVsmbkeyNZmNe1LJw+SxjmwwLjNaWoH/ce3r6iHGvaMN5eQcu0P)
</code></pre>
<p>并在测试类的参数类加上</p>
<pre><code class="language-bash">--jasypt.encryptor.password=test
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20200924080917909.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>由于这里是测试类命令行参数添加不了，但是在启动类是可以添加的：</p>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/20200924081009860.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>这种方法就跳过演示了。</p>
<p>对于<code>Gradle</code>，测试的时候需要在<code>build.gradle</code>/<code>build.gradle.kts</code>添加参数：</p>
<pre><code class="language-java">tasks.withType&lt;Test&gt; {
    useJUnitPlatform()
    jvmArgs(&quot;-Djasypt.encryptor.password=test&quot;)
    // 不能是jvmArgs(&quot;--jasypt.encryptor.password=test&quot;)
}
</code></pre>
<h2 id="52-通过应用环境变量传递">5.2 通过应用环境变量传递</h2>
<p>和第一种方式差不多，第一种在<code>Program arguments</code>设置，而这种方法在<code>VM options</code>中设置：</p>
<pre><code class="language-bash">-Djasypt.encryptor.password=test
</code></pre>
<figure data-type="image" tabindex="6"><img src="https://img-blog.csdnimg.cn/20200924081304896.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="7"><img src="https://img-blog.csdnimg.cn/20200924081352130.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="53-系统环境变量方式传递">5.3 系统环境变量方式传递</h2>
<p>通过系统环境变量方式传递<code>jasypt.encryptor.password</code>时，需要指定是哪一个环境变量：</p>
<pre><code class="language-yaml">jasypt:
  encryptor:
    password: ${ENCRYPT}
</code></pre>
<p>比如这里指定的是<code>ENCRYPT</code>环境变量，设置好环境变量后就可以直接加密解密了。</p>
<h1 id="6-部署注意事项">6 部署注意事项</h1>
<h2 id="61-打包">6.1 打包</h2>
<p>因为在配置文件中缺少了<code>jasypt.encryptor.password</code>，因此使用<code>Maven</code>打包时会出错：</p>
<figure data-type="image" tabindex="8"><img src="https://img-blog.csdnimg.cn/20200924152313685.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>在<code>Maven</code>打包配置中加上参数即可：</p>
<figure data-type="image" tabindex="9"><img src="https://img-blog.csdnimg.cn/20200924152518468.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>但是使用<code>Gradle</code>打包时不需要添加额外的参数。</p>
<h2 id="62-部署">6.2 部署</h2>
<p>现在一般通过<code>JAR</code>直接部署即可，也就是通过</p>
<pre><code class="language-bash">java -jar demo.jar
</code></pre>
<p>部署，这时候根据需要加上对应的参数即可，比如：</p>
<pre><code class="language-bash">java -jar demo.jar --jasypt.encryptor.password=test
java -Djasypt.encryptor.password=test -jar demo.jar
</code></pre>
<p>如果通过系统变量获取加密口令，请确保对应的环境变量存在。</p>
<p>另外，如果通过<code>Docker</code>部署，请在<code>ENTRYPOINT</code>加上对应参数，比如：</p>
<pre><code class="language-java">ENTRYPOINT [&quot;java&quot;,&quot;-Djasypt.encryptor.password=test&quot;,&quot;-jar&quot;,&quot;demo.jar&quot;]
ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;demo.jar&quot;,,&quot;--jasypt.encryptor.password=test&quot;,]
</code></pre>
<p>通过系统环境变量获取请加上<code>ENV</code>：</p>
<pre><code class="language-bash">ENV ENCRYPT=&quot;test&quot;
</code></pre>
<h1 id="7-参考源码">7 参考源码</h1>
<p><code>Java</code>版：</p>
<ul>
<li><a href="https://github.com/2293736867/SpringBootDemoJava/tree/master/Jasypt">Github</a></li>
<li><a href="https://gitee.com/u6b7b5fc3/SpringBootDemoJava/tree/master/Jasypt">码云</a></li>
<li><a href="https://codechina.csdn.net/qq_27525611/SpringBootDemoJava/-/tree/master/Jasypt">CODE.CHINA</a></li>
</ul>
<p><code>Kotlin</code>版：</p>
<ul>
<li><a href="https://github.com/2293736867/SpringBootDemoKotlin/tree/master/Jasypt">Github</a></li>
<li><a href="https://gitee.com/u6b7b5fc3/SpringBootDemoKotlin/tree/master/Jasypt">码云</a></li>
<li><a href="https://codechina.csdn.net/qq_27525611/SpringBootDemoKotlin/-/tree/master/Jasypt">CODE.CHINA</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第100期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-100-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-100-qi/">
        </link>
        <updated>2020-09-24T08:24:13.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>别人扮猪吃老虎，你只能扮猪。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>未觉池塘青草梦，结前梧叶已秋声。<br>
——偶成《朱熹》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>你还是这么冷漠啊。不过，仅此而已的话，我是不会泄气的。</p>
</blockquote>
<h1 id="100期纪念">100期纪念</h1>
<p>打个卡。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Spring Boot demo系列（七）：Swagger]]></title>
        <id>https://2293736867.github.io/post/spring-boot-demo-xi-lie-qi-swagger/</id>
        <link href="https://2293736867.github.io/post/spring-boot-demo-xi-lie-qi-swagger/">
        </link>
        <updated>2020-09-23T15:47:21.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-概述">1 概述</h1>
<p><code>Swagger</code>主要用于生成<code>API</code>文档，本文演示了如何使用目前最新的<code>OpenAPI3</code>以及<code>Swagger</code>来进行接口文档的生成。</p>
<h1 id="2-依赖">2 依赖</h1>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.springdoc&lt;/groupId&gt;
    &lt;artifactId&gt;springdoc-openapi-ui&lt;/artifactId&gt;
    &lt;version&gt;1.4.7&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<p><code>Gradle</code>：</p>
<pre><code class="language-bash">implementation( &quot;org.springdoc:springdoc-openapi-ui:1.4.7&quot;)
</code></pre>
<h1 id="3-配置">3 配置</h1>
<p><code>Swagger</code>的配置很简单，仅需要一个<code>@OpenAPIDefinition</code>即可，<code>@OpenAPIDefinition</code>用于描述全局的配置信息，参考配置如下：</p>
<ul>
<li><code>info</code>表示基本信息，比如标题，版本，描述等</li>
<li><code>externalDocs</code>是参考文档</li>
<li><code>servers</code>是服务器地址</li>
</ul>
<pre><code class="language-java">@OpenAPIDefinition(info = @Info(title = &quot;标题&quot;,version = &quot;版本&quot;,description = &quot;描述&quot;),
        externalDocs = @ExternalDocumentation(description = &quot;参考文档&quot;,url = &quot;https://www.baidu.com&quot;),
        servers = @Server(url = &quot;http://localhost:8080&quot;))
public class SwaggerConfig {
}
</code></pre>
<p>接着在配置文件写上文档路径：</p>
<pre><code class="language-yaml">springdoc:
  api-docs:
    path: /doc
</code></pre>
<h1 id="4-访问">4 访问</h1>
<p>运行后直接访问</p>
<pre><code class="language-bash">localhost:8080/swagger-ui/index.html/
</code></pre>
<p>会出现如下界面：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/2020092320230770.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>搜索栏中输入配置文件中的路径<code>/doc</code>搜索即可：</p>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200923202415449.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>或者直接访问：</p>
<pre><code class="language-bash">http://localhost:8080/swagger-ui/index.html?url=/doc
</code></pre>
<h1 id="5-控制器">5 控制器</h1>
<p>下一步就是添加具体的接口，先来看一个简单的例子：</p>
<pre><code class="language-java">@RestController
@Tag(name = &quot;测试Controller&quot;)
@RequestMapping(&quot;/&quot;)
public class TestController {
    @GetMapping(&quot;test&quot;)
    @Operation(description = &quot;测试接口&quot;,tags = &quot;测试Controller&quot;)
    public String test()
    {
        return &quot;success&quot;;
    }
}
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20200923202627787.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>运行后可以看到多了一个接口，也就是<code>@Tag</code>与<code>@Operation</code>起作用了，注解说明如下：</p>
<ul>
<li><code>@Tag</code>表示标签，<code>name</code>指定标签的值，也可以加上<code>description</code>等属性</li>
<li><code>@Operation</code>作用在方法上，可以指定描述以及标签，也可以指定参数以及返回值等信息</li>
</ul>
<p>类似的注解还有很多，比如：</p>
<ul>
<li><code>@Parameter</code>：指定参数属性，比如<code>description</code>、<code>name</code>等</li>
<li><code>@ApiResponse</code>：指定返回值，常用的属性有<code>responseCode</code>以及<code>description</code></li>
<li><code>@Schema</code>：用在实体类上以及实体类字段上，在接口上可以显示对应的值</li>
</ul>
<h1 id="6-完整示例">6 完整示例</h1>
<p>下面是一个接口控制器的完整示例：</p>
<pre><code class="language-java">@RestController
@Tag(name = &quot;测试Controller&quot;)
@RequestMapping(&quot;/&quot;)
public class TestController {
    @GetMapping(&quot;test&quot;)
    @Operation(description = &quot;测试接口&quot;,tags = {&quot;测试Controller&quot;,&quot;测试&quot;})
    public String test()
    {
        return &quot;success&quot;;
    }

    @GetMapping(&quot;test2&quot;)
    @Operation(description = &quot;这个也是测试接口&quot;,tags = {&quot;测试Controller&quot;,&quot;2号测试接口&quot;})
    @Parameter(description = &quot;必要参数&quot;,name = &quot;parm&quot;)
    public String test2(@RequestParam String parm)
    {
        return &quot;需要参数&quot;;
    }

    @GetMapping(&quot;test3&quot;)
    @Operation(description = &quot;带有返回状态的接口&quot;,tags = {&quot;测试Controller&quot;})
    @ApiResponse(responseCode = &quot;111&quot;,description = &quot;测试成功&quot;)
    @ApiResponse(responseCode = &quot;222&quot;,description = &quot;测试失败&quot;)
    public void test3(@RequestBody String body)
    {
    }

    @GetMapping(&quot;test4&quot;)
    @Operation(description = &quot;User接口&quot;,tags = {&quot;测试Controller&quot;})
    @ApiResponse(responseCode = &quot;100&quot;,description = &quot;添加成功&quot;)
    public void test4(@RequestBody User user)
    {
    }
}
</code></pre>
<p>实体类：</p>
<pre><code class="language-java">@Getter
@Schema(description = &quot;用户&quot;)
public class User {
    @Schema(description = &quot;用户名&quot;)
    private String name;
    @Schema(description = &quot;主键&quot;)
    private String id;
}
</code></pre>
<p>效果如图：</p>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20200923204821839.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/20200923204838123.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="6"><img src="https://img-blog.csdnimg.cn/2020092320485282.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="7"><img src="https://img-blog.csdnimg.cn/20200923204905817.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="7-参考源码">7 参考源码</h1>
<p><code>Java</code>版：</p>
<ul>
<li><a href="https://github.com/2293736867/SpringBootDemoJava/tree/master/Swagger">Github</a></li>
<li><a href="https://gitee.com/u6b7b5fc3/SpringBootDemoJava/tree/master/Swagger">码云</a></li>
<li><a href="https://codechina.csdn.net/qq_27525611/SpringBootDemoJava/-/tree/master/Swagger">CODE.CHINA</a></li>
</ul>
<p><code>Kotlin</code>版：</p>
<ul>
<li><a href="https://github.com/2293736867/SpringBootDemoKotlin/tree/master/Swagger">Github</a></li>
<li><a href="https://gitee.com/u6b7b5fc3/SpringBootDemoKotlin/tree/master/Swagger">码云</a></li>
<li><a href="https://codechina.csdn.net/qq_27525611/SpringBootDemoKotlin/-/tree/master/Swagger">CODE.CHINA</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第99期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-99-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-99-qi/">
        </link>
        <updated>2020-09-23T08:21:41.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>任何时候都记得微笑，这会让你看起来，像个不能随便惹的神经病。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>云淡风轻近午天，傍花随柳过前川。<br>
——程颢《春日偶成》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>扬帆起航，于舟渡之。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第98期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-98-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-98-qi/">
        </link>
        <updated>2020-09-22T08:21:09.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>自古情深留不住，总是套路得人心。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>闲云潭影日悠悠，物换星移几度秋。<br>
——王勃《藤王阁诗》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>我们是独立的个体，却不是孤独的存在。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第97期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-97-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-97-qi/">
        </link>
        <updated>2020-09-21T08:19:52.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>你努力找他说话的样子，像极了商场里的导购。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>冉冉秋光留不住，满阶红叶暮。<br>
——李煜《谢秋恩·冉冉秋光留不住》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>I like you, but just like you.</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第96期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-96-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-96-qi/">
        </link>
        <updated>2020-09-19T17:12:18.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>当年我背井离乡，乡里人从此再也没有，喝上一口井水。</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>鸟类是鄂目动物的近亲，也是已经灭绝的有羽毛的恐龙的后代。这也使得了鸟类成了唯一“活下来”的恐龙该。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>塞下秋来风景异，衡阳雁去无留意。<br>
——范仲淹《渔家傲·秋思》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>每个人的心里，都有一个忘不记，却无法拥抱珍惜的人。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[解决JDK9以上的非法反射访问警告]]></title>
        <id>https://2293736867.github.io/post/jie-jue-jdk9-yi-shang-de-fei-fa-fan-she-fang-wen-jing-gao/</id>
        <link href="https://2293736867.github.io/post/jie-jue-jdk9-yi-shang-de-fei-fa-fan-she-fang-wen-jing-gao/">
        </link>
        <updated>2020-09-19T12:28:16.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-问题描述">1 问题描述</h1>
<p><code>JDK9</code>以上很多库都有这种非法反射访问的警告，比如<code>protostuff</code>：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200919194048433.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>解决方法两个：</p>
<ul>
<li><code>JDK</code>降级</li>
<li><code>添加JVM</code>参数</li>
</ul>
<h1 id="2-原因">2 原因</h1>
<p>降到<code>JDK8</code>能解决以上问题。</p>
<p>但是这不是本文的重点。</p>
<p>先说一下出现该警告的原因，笔者使用的<code>JDK</code>为<code>OpenJDK 11</code>，<code>JDK9</code>以上模块不能使用反射去访问非公有的成员/成员方法以及构造方法，除非模块标识为<code>opens</code>去允许反射访问。旧<code>JDK</code>制作的库（<code>JDK8</code>及以下）运行在<code>JDK9</code>上会自动被标识为<code>未命名模块</code>，为了处理该警告，<code>JDK9</code>以上提出了一个新的<code>JVM</code>参数：<code>--illegal-access</code>。</p>
<h1 id="3-illegal-access">3 <code>--illegal-access</code></h1>
<p>该参数有四个可选值：</p>
<ul>
<li><code>permit</code>：默认值，允许通过反射访问，因此会提示像上面一样的警告，这个是首次非法访问警告，后续不警告</li>
<li><code>warn</code>：每次非法访问都会警告</li>
<li><code>debug</code>：在<code>warn</code>的基础上加入了类似<code>e.printStackTrace()</code>的功能</li>
<li><code>deny</code>：禁止所有的非法访问除了使用特别的命令行参数排除的模块，比如使用<code>--add-opens</code>排除某些模块使其能够通过非法反射访问</li>
</ul>
<p>因此解决的办法很简单，将其设置为<code>deny</code>，并添加<code>--add-opens</code>开启对应的允许非法反射访问的模块即可。</p>
<p>可以通过先设置为<code>debug</code>找到对应的非法访问的代码，比如<code>protostuff</code>中的非法反射访问代码段如下：</p>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200919201147228.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20200919201213390.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>这都是<code>JDK</code>基本模块的代码，因此，添加<code>--add-opens=java.base/java.lang.invoke=ALL-UNNAMED</code>即可。<code>--add-opens</code>可以使模块中的包对其他模块开放，这样就可以在运行期使用深层反射访问该程序包中的所有成员类型。</p>
<h1 id="4-总结">4 总结</h1>
<p>因此解决的办法是添加如下两个<code>JVM</code>参数：</p>
<pre><code class="language-bash">--illegal-access=deny --add-opens java.base/java.lang=ALL-UNNAMED
</code></pre>
<p><code>IDEA</code>可以在运行配置中的<code>VM options</code>中添加：</p>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20200919201617951.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>如果使用<code>Maven</code>打包的时候还是会出现警告，可以在<code>IDEA</code>中的<code>Maven</code>配置中添加全局的<code>Maven</code>参数：</p>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/2020091920210955.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>另外，如果使用<code>Gradle</code>而不是<code>Maven</code>作为管理工具，<code>Gradle</code>测试的时候还是会显示警告，尽管<code>Gradle</code>运行配置里面有<code>VM Options</code>选项：</p>
<figure data-type="image" tabindex="6"><img src="https://img-blog.csdnimg.cn/20200919201812198.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>但在这里添加是没用的，正确的做法是在<code>build.gradle</code>中添加：</p>
<pre><code class="language-css">test {
    useJUnitPlatform()
    jvmArgs('--illegal-access=deny')
    jvmArgs('--add-opens', 'java.base/java.lang.invoke=ALL-UNNAMED')
}
</code></pre>
<p>这样<code>Gradle</code>测试也没有问题了。</p>
<h1 id="5-参考">5 参考</h1>
<ul>
<li><a href="https://www.logicbig.com/tutorials/core-java-tutorial/modules/illegal-access-operations.html">Java 9 Modules - The Unnamed Module and Accessing JDK Internal Code via Reflection</a></li>
<li><a href="https://github.com/gradle/gradle/issues/6725">Gradle Github Issue-Gradle 4.10: Illegal reflective access to method java.lang.Object.finalize</a></li>
<li><a href="https://www.cnblogs.com/IcanFixIt/p/7144366.html">博客园-Java 9 揭秘（9. 打破模块封装）</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第95期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-95-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-95-qi/">
        </link>
        <updated>2020-09-18T17:12:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>我每天拼了命努力就是为了，向那些看不起我的人证明，他们是对的。</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>二战时，美国一艘驱逐舰靠扔土豆战胜了一艘日本潜水艇，因为日本人以为他们扔的是手雷。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>伤心枕上三更雨，点滴霖霪。<br>
——李清照《添字丑奴儿·窗前谁种芭蕉树》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>就像那句狠话：有一天，我一定会后悔的。</p>
</blockquote>
]]></content>
    </entry>
</feed>