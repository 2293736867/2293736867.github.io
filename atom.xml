<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://2293736867.github.io</id>
    <title>氷泠&apos;s blog</title>
    <updated>2020-07-17T17:51:08.071Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://2293736867.github.io"/>
    <link rel="self" href="https://2293736867.github.io/atom.xml"/>
    <subtitle>我配不上你，
纵然很努力。</subtitle>
    <logo>https://2293736867.github.io/images/avatar.png</logo>
    <icon>https://2293736867.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 氷泠&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[每日分享 第30期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-30-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-30-qi/">
        </link>
        <updated>2020-07-17T17:34:58.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1595007375325.jpg" alt="" loading="lazy"></figure>
<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>知道为何自古红颜多薄命吗？因为没人在意丑的人活多久。</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>为了便于将石料运到现场，建造北京紫禁城的工人修建了一条冰路。这条冰路通过雪橇运输石料，以水进行润滑，从而减少摩擦，并使雪橇在水重新冷冻之前更容易滑动。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>白发渔樵江渚上，惯看秋月春风。<br>
——杨慎《临江仙·滚滚长江东逝水》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>末将于禁，愿为曹家世代赴汤蹈火。</p>
</blockquote>
<h1 id="每日音乐">每日音乐</h1>
<blockquote>
<p><a href="http://www.kugou.com/song/132nvb3e.html#hash=B7B91C42239189D7299DDFB4CDCCBFB8&amp;album_id=0">我热情如火，你冰冻成河-黄静美</a></p>
</blockquote>
<blockquote>
<p>我该如何去厮守<br>
你才觉得不将就<br>
互相折磨到白头<br>
渐渐消逝的温柔<br>
难道非你不可 是有多难得<br>
这样的感情对我来说</p>
</blockquote>
<blockquote>
<p>或许不知道<br>
自己到底要的是什么<br>
遇见你就像飞蛾扑火<br>
不管值不值得<br>
最美的承诺<br>
只是一时快乐惹的祸<br>
而如今只剩孤独的我<br>
注定没有结果</p>
</blockquote>
<blockquote>
<p>我懂你要的自由<br>
别再惯性找借口<br>
你从未被我拥有<br>
随时都可能放开手<br>
而我热情如火 你冰冻成河<br>
被爱的权利你都占有</p>
</blockquote>
<blockquote>
<p>我该如何去厮守<br>
你才觉得不将就<br>
互相折磨到白头<br>
渐渐消逝的温柔<br>
难道非你不可 是有多难得<br>
这样的感情对我来说<br>
不值得</p>
</blockquote>
<blockquote>
<p>或许不知道<br>
自己到底要的是什么<br>
遇见你就像飞蛾扑火<br>
不管值不值得<br>
最美的承诺<br>
只是一时快乐惹的祸<br>
而如今只剩孤独的我<br>
注定没有结果</p>
</blockquote>
<blockquote>
<p>我懂你要的自由<br>
别再惯性找借口<br>
你从未被我拥有<br>
随时都能放开手<br>
而我热情如火 你冰冻成河<br>
被爱的权利你都占有</p>
</blockquote>
<blockquote>
<p>我该如何厮守<br>
你才觉得不将就<br>
互相折磨到白头<br>
渐渐消逝的温柔<br>
难道非你不可 是有多难得<br>
这样的感情对我来说</p>
</blockquote>
<blockquote>
<p>我懂你要的自由<br>
别再惯性找借口<br>
你从未被我拥有<br>
随时都能放开手<br>
而我热情如火 你冰冻成河<br>
被爱的权利你都占有</p>
</blockquote>
<blockquote>
<p>我该如何去厮守<br>
你才觉得不将就<br>
互相折磨到白头<br>
渐渐消逝的温柔<br>
难道非你不可 是有多难得<br>
这样的感情对我来说<br>
不值得</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[设计模式（七）：原型模式]]></title>
        <id>https://2293736867.github.io/post/she-ji-mo-shi-qi-yuan-xing-mo-shi/</id>
        <link href="https://2293736867.github.io/post/she-ji-mo-shi-qi-yuan-xing-mo-shi/">
        </link>
        <updated>2020-07-17T17:33:11.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#1-%E5%AE%9A%E4%B9%89">1 定义</a></li>
<li><a href="#2-%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95">2 实现方法</a>
<ul>
<li><a href="#21-%E9%80%9A%E7%94%A8%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95">2.1 通用实现方法</a></li>
<li><a href="#22-clone">2.2 <code>clone()</code></a></li>
</ul>
</li>
<li><a href="#3-%E5%AE%9E%E4%BE%8B">3 实例</a></li>
<li><a href="#4-%E6%B5%85%E5%85%8B%E9%9A%86%E4%B8%8E%E6%B7%B1%E5%85%8B%E9%9A%86">4 浅克隆与深克隆</a>
<ul>
<li><a href="#41-%E6%B5%85%E5%85%8B%E9%9A%86">4.1 浅克隆</a></li>
<li><a href="#42-%E6%B7%B1%E5%85%8B%E9%9A%86">4.2 深克隆</a></li>
</ul>
</li>
<li><a href="#5-%E5%8E%9F%E5%9E%8B%E7%AE%A1%E7%90%86%E5%99%A8">5 原型管理器</a>
<ul>
<li><a href="#51-%E5%AE%9A%E4%B9%89">5.1 定义</a></li>
<li><a href="#52-%E5%AE%9E%E4%BE%8B">5.2 实例</a></li>
</ul>
</li>
<li><a href="#6-%E4%B8%BB%E8%A6%81%E4%BC%98%E7%82%B9">6 主要优点</a></li>
<li><a href="#7-%E4%B8%BB%E8%A6%81%E7%BC%BA%E7%82%B9">7 主要缺点</a></li>
<li><a href="#8-%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF">8 适用场景</a></li>
<li><a href="#9-%E6%80%BB%E7%BB%93">9 总结</a></li>
</ul>
</p>
<h1 id="1-定义">1 定义</h1>
<p><strong>原型模式：使用原型实例指定创建对象的种类，并且通过克隆这些原型创建新的对象。<br>
原型模式是一种对象创建型模式。</strong></p>
<p>原型模式的工作原理很简单，将一个原型对象传给那个要发动创建的对象，这个要发动创建的对象通过请求原型对象克隆自己来实现创建过程。原型模式是一种另类的创建型模式，创建克隆对象的工厂就是原型类自身，工厂方法由克隆方法实现。</p>
<p>通过克隆方法创建的对象是全新的对象，它们在内存中拥有新的地址，通常对克隆多产生的对象进行的修改不会对原型对象造成任何的影响，每一个克隆的对象都是相互独立的，通过不同的方式对克隆对象进行修改之后，可以得到一系列相似但不完全相同的对象。</p>
<p>结构图如下：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200717155947994.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>原型模式包含以下三个角色：</p>
<ul>
<li>Prototype（原型抽象类）：声明克隆方法的接口，是所有具体原型类的公共父类，可以是抽象类也可以是接口，还能是具体实现类</li>
<li>ConcretePrototypr（具体原型类）：实现在抽象原型类中声明的克隆方法，在克隆方法中返回自己的一个克隆对象</li>
<li>Client（客户类）：让一个原型对象克隆自身从而创建一个新的对象，在客户类中只需要直接实例化或通过工厂方法等方式创建一个原型对象，再通过调用该对象的克隆方法即可得到多个相同的对象。</li>
</ul>
<h1 id="2-实现方法">2 实现方法</h1>
<p>在Java中常用的实现方法有两种：</p>
<ul>
<li>通用实现方法</li>
<li><code>clone()</code>方法</li>
</ul>
<h2 id="21-通用实现方法">2.1 通用实现方法</h2>
<p>通用的克隆实现方法是在具体原型类的克隆方法中实例化一个与自身类型相同的对象并将其返回，并将相关的参数传入新创建的对象中，保证成员变量相同。<br>
示例代码：</p>
<pre><code class="language-java">public class Test
{
    public static void main(String[] args) {
        Prototype prototype1 = new ConcretePrototype();
        prototype1.setField(&quot;test&quot;);
        Prototype prototype2 = prototype1.clone();
        System.out.println(prototype1.getField() == prototype2.getField());
        System.out.println(prototype1 == prototype2);
    }
}

interface Prototype
{
    Prototype clone();
    void setField(String f);
    String getField();
}


class ConcretePrototype implements Prototype
{
    private String field;

    public void setField(String f)
    {
        field = f;
    }

    public String getField()
    {
        return field;
    }

    public Prototype clone()
    {
        Prototype prototype = new ConcretePrototype();
        prototype.setField(this.field);
        return prototype;
    }
}
</code></pre>
<h2 id="22-clone">2.2 <code>clone()</code></h2>
<p><code>java.lang.Object</code>提供了一个<code>clone()</code>，可以将一个Java对象克隆一份，利用<code>clone()</code>可以直接将对象克隆一份，但是必须实现<code>Cloneable</code>接口，否则<code>clone()</code>时会抛出<code>CloneNotSupportedException</code>。<br>
示例代码如下：</p>
<pre><code class="language-java">// 在2.1的基础上修改ConcreteProtoype即可
class ConcretePrototype implements Prototype,Cloneable
{
    private String field;

    public void setField(String f)
    {
        field = f;
    }

    public String getField()
    {
        return field;
    }

    public Prototype clone()
    {
        Object object = null;
        try
        {
            object = super.clone();
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        return (Prototype)object;
    }
}
</code></pre>
<p>一般而言，Java中的<code>clone()</code>满足：</p>
<ul>
<li>对任何对象<code>x</code>都有<code>x.clone() != x</code>，也就是克隆的对象与原型对象不是同一个对象</li>
<li>对任何对象<code>x</code>都有<code>x.clone().getClass() == x.getClass()</code>，即克隆对象与原型对象的类型一样</li>
<li>如果<code>x</code>的<code>equals()</code>定义恰当，那么<code>x.clone().equals(x)</code>应该成立</li>
</ul>
<p>具体实现步骤如下：</p>
<ul>
<li>覆盖<code>clone()</code>，并声明为<code>public</code></li>
<li><code>clone()</code>中调用<code>super.clone()</code></li>
<li>派生类需要实现<code>Cloneable</code>接口</li>
</ul>
<h1 id="3-实例">3 实例</h1>
<blockquote>
<p>开发一个工作周报系统，工作周报的内容都大同小异，只有一些小地方存在差异，但是系统每次默认创建的都是空白报表，用户不断复制粘贴来填写重复内容。使用原型模式对其进行优化，快速创建相同或类似的工作周报。</p>
</blockquote>
<p>代码如下：</p>
<pre><code class="language-java">public class Test
{
    public static void main(String[] args) {
        WeeklyLog weeklyLog1 = new WeeklyLog();
        weeklyLog1.setContent(&quot;content&quot;);
        weeklyLog1.setName(&quot;Weekly log 1&quot;);
        weeklyLog1.setDateTime(LocalDateTime.now());

        System.out.println(weeklyLog1.getName());
        System.out.println(weeklyLog1.getContent());
        System.out.println(weeklyLog1.getDateTime());

        WeeklyLog weeklyLog2 = weeklyLog1.clone();
        weeklyLog2.setName(&quot;Weekly log 2&quot;);
        System.out.println(weeklyLog2.getName());
        System.out.println(weeklyLog2.getContent());
        System.out.println(weeklyLog2.getDateTime());
    }
}

class WeeklyLog implements Cloneable
{
    private String name;
    private LocalDateTime dateTime;
    private String content;

    //getter and setter
    //...

    public WeeklyLog clone()
    {
        Object obj = null;
        try
        {
            obj = super.clone();
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        return (WeeklyLog)obj;
    }
    
}
</code></pre>
<h1 id="4-浅克隆与深克隆">4 浅克隆与深克隆</h1>
<p>一般来说，工作周报可能会携带附件，使用上面的原型模式来进行工作周报的复制没有问题，但是附件（一般是另一个类）不会进行复制。这是因为浅克隆与深克隆的原因，下面具体来看一下。</p>
<h2 id="41-浅克隆">4.1 浅克隆</h2>
<p>在浅克隆中，如果原型对象的成员变量是值类型，将复制一份给克隆对象。（在Java中）值类型包括：</p>
<ul>
<li>int</li>
<li>double</li>
<li>byte</li>
<li>boolean</li>
<li>char</li>
<li>float</li>
<li>long</li>
<li>short</li>
</ul>
<p>也就是这些类型的值都会完整复制一份给克隆对象，对于引用类型，则将引用对象的地址复制一份给克隆对象。（在Java中）引用类型就是除了基本类型之外的所有类型，常见的有：</p>
<ul>
<li>类</li>
<li>接口</li>
<li>数组</li>
</ul>
<p>对于引用类型，原型对象与克隆对象指向相同的内存地址，也就是其实并没有被复制，而是共享一份地址相同的值。<br>
在Java中可以通过<code>Object</code>的<code>clone()</code>实现浅克隆，也就是上面例子的做法。</p>
<h2 id="42-深克隆">4.2 深克隆</h2>
<p>在深克隆中，无论变量是值类型还是引用类型都会完整复制一份给克隆对象。<br>
在Java中实现深克隆可以通过序列化等方式实现。序列化就是将对象写到流的过程，写到流中的对象是原有对象的一个复制品，而原对象仍然存在于内存中。想要进行序列化必须实现<code>Serializable</code>接口。</p>
<p>代码如下：</p>
<pre><code class="language-java">public class Test
{
    public static void main(String[] args) {
        WeeklyLog weeklyLog1 = new WeeklyLog();
        WeeklyLog weeklyLog2 = null;
        Attachement attachement = new Attachement();
        weeklyLog1.setAttachement(attachement);
        try
        {
            weeklyLog2 = weeklyLog1.deepClone(); 
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        System.out.println(weeklyLog1 == weeklyLog2);
        System.out.println(weeklyLog1.getAttachement() == weeklyLog2.getAttachement());
    }
}

class Attachement implements Serializable
{
    private String name;
    //getter and setter
    //...
}

class WeeklyLog implements Serializable
{
    private String name;
    private LocalDateTime dateTime;
    private String content;
    private Attachement attachement;

    //getter and setter
    //...

    public WeeklyLog deepClone() throws IOException , ClassNotFoundException , OptionalDataException
    {
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream);
        objectOutputStream.writeObject(this);

        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArrayOutputStream.toByteArray());
        ObjectInputStream objectInputStream = new ObjectInputStream(byteArrayInputStream);

        return (WeeklyLog)objectInputStream.readObject();
    }
}
</code></pre>
<p>当然除了使用<code>ByteArrayOutput/InputStream</code>以及<code>ObjectInput/OutputStream</code>外，还可以利用以下工具类进行深克隆：</p>
<ul>
<li><code>org.apache.commons.lang3.SerializationUtils.clone()</code>：需要实现<code>Serializable</code>接口</li>
<li><code>Gson</code>：无需实现<code>Serializable</code>接口，<code>toJson()+fromJson()</code></li>
<li><code>Jackson</code>：也是无需实现<code>Serializable</code>接口，<code>readValue()+writeValueAsString()</code>等</li>
</ul>
<h1 id="5-原型管理器">5 原型管理器</h1>
<h2 id="51-定义">5.1 定义</h2>
<p>原型管理器是将多个原型对象存储在一个集合中供客户端使用的专门负责克隆对象的工厂，其中定义了一个集合用于存储原型对象，如果需要某个原型对象的克隆，可以通过复制集合中对应的原型对象来获取。在原型管理器中针对抽象原型类进行编程。<br>
结构图如下：<br>
<img src="https://img-blog.csdnimg.cn/2020071800411674.png" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="52-实例">5.2 实例</h2>
<blockquote>
<p>日常办公中会有许多公文需要创建，例如《可行性分析报告》，《立项建议书》，《软件需求规格说明书》，《项目进展报告》等，为了提高工作效率需要为各类公文创建模板，用户可以通过这些模板快速创建新的公文，这些公文模板进行统一的管理，系统根据用户的请求的不同生成不同的新公文。</p>
</blockquote>
<p>首先是抽象原型以及具体原型的代码：</p>
<pre><code class="language-java">interface OfficialDocument extends Cloneable
{
    OfficialDocument clone();
    void display();
}

//可行性分析报告
class FAR implements OfficialDocument 
{
    public OfficialDocument clone()
    {
        OfficialDocument far = null;
        try
        {
            far = (OfficialDocument)super.clone();
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        return far;
    }

    public void display()
    {
        System.out.println(&quot;可行性分析报告&quot;);
    }
}

//软件需求规格说明书
class SRS implements OfficialDocument
{
    public OfficialDocument clone()
    {
        OfficialDocument srs = null;
        try
        {
            srs = (OfficialDocument)super.clone();
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        return srs;
    }

    public void display()
    {
        System.out.println(&quot;软件需求规格说明书&quot;);
    }
}
</code></pre>
<p>接着是原型管理器的代码，使用枚举单例实现：</p>
<pre><code class="language-java">enum PrototypeManager 
{
    INSTANCE;

    private Hashtable&lt;String,OfficialDocument&gt; hashtable = new Hashtable&lt;&gt;();
    private PrototypeManager()
    {
        add(&quot;far&quot;,new FAR());
        add(&quot;srs&quot;,new SRS());
    }

    public void add(String key,OfficialDocument document)
    {
        hashtable.put(key, document);
    }

    public OfficialDocument get(String key)
    {
        return ((OfficialDocument)hashtable.get(key)).clone();
    }
}
</code></pre>
<p>测试代码：</p>
<pre><code class="language-java">public class Test
{
    public static void main(String[] args) {
        PrototypeManager manager = PrototypeManager.INSTANCE;
        OfficialDocument document1,document2,document3,document4;

        document1 = manager.get(&quot;far&quot;);
        document1.display();

        document2 = manager.get(&quot;far&quot;);
        document2.display();
        System.out.println(document1 == document2);

        document3 = manager.get(&quot;srs&quot;);
        document3.display();

        document4 = manager.get(&quot;srs&quot;);
        document4.display();
        System.out.println(document3 == document4);
    }
}
</code></pre>
<h1 id="6-主要优点">6 主要优点</h1>
<ul>
<li>简化创建过程：当创建新的对象实例较为复杂时，使用原型模式可以简化对象的创建过程，通过复制一个已有实例可以提高新实例的创建效率</li>
<li>扩展性较好：由于在原型模式中提供了抽象原型类，在客户端可以针对抽象原型类进行编程，而将具体原型类写在配置文件中，增加或减少具体原型类对系统都没有任何影响</li>
<li>简化创建结构：原型模式提供了简化的创建结构。工厂方法模式常常需要有一个与产品类等级结构相同的工厂等级结构，而原型模式就不需要这样，原型模式中产品的复制是通过封装在原型类中的克隆方法实现的，无需专门的工厂类来创建产品</li>
<li>保存状态：可以使用深克隆的方式保存对象的状态。使用原型模式将对象复制一份并将其状态保存起来，以便在需要的时候使用，例如恢复到某一历史状态，可辅助实现撤销操作</li>
</ul>
<h1 id="7-主要缺点">7 主要缺点</h1>
<ul>
<li>修改不方便：需要为每一个类配备一个克隆方法，而且该克隆方法位于一个类的内部，当对已有的类进行改造的时候，需要修改源代码，违背了OCP（开放闭合原则）</li>
<li>深克隆需要嵌套类支持：在实现深克隆时需要编写较为复杂的代码，而且当对象之间存在多重的嵌套引用时，为了实现深克隆，每一层对象都必须支持深克隆，实现起来可能比较麻烦</li>
</ul>
<h1 id="8-适用场景">8 适用场景</h1>
<ul>
<li>创建新对象成本较大，比如初始化需要较长时间，占用太多的CPU资源或网络资源，新的对象可以通过原型模式对已有对象进行复制获取，如果是相似对象可以对成员变量稍作修改</li>
<li>如果系统要保存对象的状态，而对象的变化状态很小，或者对象本身占用内存较少，可以使用原型模式配合备忘录模式</li>
<li>需要避免使用分层次的工厂类来创建分层次的对象，并且类的实例对象只有一个或很少的几个组合状态，通过复制原型对象得到新实例可能比使用构造函数创建一个实例方便</li>
</ul>
<h1 id="9-总结">9 总结</h1>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200718011132428.png" alt="在这里插入图片描述" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第29期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-29-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-29-qi/">
        </link>
        <updated>2020-07-17T07:11:12.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1594970039866.jpeg" alt="" loading="lazy"></figure>
<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>又一天过去了，怎么样，是不是梦想更遥远了？</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>为阻止俄罗斯潜艇入境，瑞典和平雨仲裁协会创造了一种名为“唱歌水手”打指示牌，指示牌显示着一个身穿紧身内裤打水手扭动臀部打动画，同时以莫尔斯电码播报：“是同性恋就往这边开”。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>端午临中夏，时清日复长。<br>
——李隆基《端午》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>我听到水流进入我打身体，我听到阳光穿透海面。</p>
</blockquote>
<h1 id="每日音乐">每日音乐</h1>
<blockquote>
<p><a href="https://music.163.com/#/song?id=718765">ブルーバード（青鸟）-いきものがかり</a></p>
</blockquote>
<blockquote>
<p>飛翔いたら戻らないと言って<br>
目指したのは 蒼い 蒼い あの空</p>
</blockquote>
<blockquote>
<p>“悲しみ”はまだ覚えられず<br>
“切なさ”は今つかみはじめた<br>
あなたへと抱く この感情も<br>
今“言葉”に変わっていく<br>
未知なる世界の 遊迷(ゆめ)から目覚めて<br>
この羽根を広げ 飛び立つ<br>
飛翔(はばた)いたら 戻らないと言って<br>
目指したのは 白い 白い あの雲<br>
突き抜けたら みつかると知って<br>
振り切るほど 蒼い 蒼い あの空<br>
蒼い 蒼い あの空<br>
蒼い 蒼い あの空</p>
</blockquote>
<blockquote>
<p>愛想尽きたような音で<br>
錆びれた古い窓は壊れた<br>
見飽きたカゴは ほら捨てていく<br>
振り返ることはもうない<br>
高鳴る鼓動に 呼吸を共鳴(あず)けて<br>
この窓を蹴って 飛び立つ<br>
駆け出したら 手にできると言って<br>
いざなうのは 遠い 遠い あの声<br>
眩しすぎた あなたの手も握って<br>
求めるほど 蒼い 蒼い あの空</p>
</blockquote>
<blockquote>
<p>墜ちていくと わかっていた<br>
それでも 光を追い続けていくよ<br>
飛翔(はばた)いたら 戻らないと言って<br>
探したのは 白い 白い あの雲<br>
突き抜けたら みつかると知って<br>
振り切るほど 蒼い 蒼い あの空<br>
蒼い 蒼い あの空<br>
蒼い 蒼い あの空</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第28期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-28-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-28-qi/">
        </link>
        <updated>2020-07-16T03:47:53.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1594969599906.jpeg" alt="" loading="lazy"></figure>
<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>如果你变成了备胎，请忘记你也是千斤顶。</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>在秘密战争（1959-1975）或称“老挝内战”期间，美国对这个小小打东南亚国家进行了超过50万次飞行任务，投下的炸弹数量超过了第二次世界大战对德国和日本的总和。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>空床卧听南窗雨，谁复挑灯夜补衣。<br>
——贺铸《半死桐·重过阊门万事非》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>相恨不如潮有信，相思始觉海非深。</p>
</blockquote>
<h1 id="每日音乐">每日音乐</h1>
<blockquote>
<p><a href="https://music.163.com/#/song?id=1407187590">Don't let me know-iKON</a></p>
</blockquote>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1594912272522.jpeg" alt="" loading="lazy"></figure>
<blockquote>
<p>난 모르게 해줘요<br>
너무 사랑해서<br>
자랑하고 싶은 그런 사람 만나도<br>
난 모르겠어요<br>
너만큼 애틋한<br>
사람을 만날 수 있을까 걱정돼<br>
알아요 우리가 했던 그 모든 순간<br>
이제는 그와 나누겠죠<br>
그래도 제발<br>
처량한 내가 모르게 해줘요<br>
아직 가슴속에 아직 가슴속에<br>
네가 가득해서 네가 가득해서<br>
다른 누군가를 다른 누군가를<br>
채울 수가 없어<br>
난 모르게 해줘요 너무 사랑해서<br>
자랑하고 싶은 그런 사람 만나도<br>
난 모르겠어요 너만큼 애틋한<br>
사람을 만날 수 있을까 걱정돼<br>
내가 모르게 아직은 괜찮지가 않아요<br>
나도 모르게 마음이 저릴까 봐 겁나요<br>
난 모르게 해줘요<br>
Yeah 당신의 아름다움을<br>
혼자 담아내기에<br>
나의 그릇이 너무 작아서<br>
놓치다 못해 엎질러지고<br>
야속하게 물처럼 흩어져<br>
너는 괜찮은 사람 만나<br>
내가 행복할 거라 생각하면<br>
기쁘기는 하다만<br>
왠지 맘 한켠이 아파<br>
아직 가슴속에 아직 가슴속에<br>
네가 가득해서 네가 가득해서<br>
다른 누군가를 다른 누군가를<br>
채울 수가 없어<br>
난 모르게 해줘요 너무 사랑해서<br>
자랑하고 싶은 그런 사람 만나도<br>
난 모르겠어요 너만큼 애틋한<br>
사람을 만날 수 있을까 걱정돼<br>
내가 모르게 아직은 괜찮지가 않아요<br>
나도 모르게 마음이 저릴까 봐 겁나요<br>
난 모르게 해줘요<br>
좋아요 그대가 웃어서<br>
아파요 난 그러지 못해서<br>
함께 했었던 그 시절에서<br>
벗어나질 못해요<br>
내가 모르게<br>
아직은 괜찮지가 않아요<br>
나도 모르게<br>
마음이 저릴까 봐 겁나요<br>
Oh oh oh oh oh oh oh<br>
Oh oh oh oh oh oh oh<br>
Oh oh oh oh oh oh oh<br>
Oh oh oh oh oh oh oh<br>
난 모르게 해줘요<br>
너무 사랑해서<br>
자랑하고 싶은 그런 사람 만나도<br>
난 모르겠어요<br>
너만큼 애틋한<br>
사람을 만날 수 있을까 걱정돼<br>
난 모르게 해줘요</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第27期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-27-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-27-qi/">
        </link>
        <updated>2020-07-15T03:47:16.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1594740928858.jpeg" alt="" loading="lazy"></figure>
<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>瘦的人能把衣服穿出故事，胖的人只能穿成事故。</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>海马没有胃，只有肠子可以从食物中吸收营养。因此食物会迅速通过其消化系统，导致它们必须几乎不断进食。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>纷纷红紫已成尘，布谷声中夏令新。<br>
——陆游《初夏绝句》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>爱欲于人，犹如执炬，逆风而行，必有烧手之患。</p>
</blockquote>
<h1 id="每日音乐">每日音乐</h1>
<blockquote>
<p><a href="https://music.qugeek.com/app/player.php?auto-action=true&amp;action=search&amp;s-source=tencent&amp;wd=%E4%BD%A0%E7%9A%84%E9%85%92%E9%A6%86%E5%AF%B9%E6%88%91%E6%89%93%E4%BA%86%E7%83%8A+%E7%B2%A4%E8%AF%AD">独留世上-小甜（你的酒馆对我打了烊粤语）</a></p>
</blockquote>
<blockquote>
<p>是那天<br>
多恩爱的一双<br>
但这刻<br>
竟通话都牵强<br>
明白爱情死了<br>
不必开口讲原谅</p>
</blockquote>
<blockquote>
<p>情像酒馆打烊门关上<br>
留下此生不必还的账<br>
能自欺不松开谁手掌<br>
紧抱残像 来独留世上<br>
情是苦酒一杯像砒霜<br>
尝尽刻骨穿心和冷枪<br>
然后撕开伤口来欣赏<br>
无关我那样</p>
</blockquote>
<blockquote>
<p>说过那些天老地长<br>
日后换作凄凉<br>
如同无恙<br>
我半醉半醒<br>
挤笑扮欢畅<br>
梦里断肠</p>
</blockquote>
<blockquote>
<p>未够伤<br>
小小擦损轻伤<br>
愉快些<br>
请关掉供的氧<br>
明白爱情死了<br>
不必开口说原谅</p>
</blockquote>
<blockquote>
<p>情像酒馆打烊门关上<br>
留下此生不必还的账<br>
能自欺不松开谁手掌<br>
紧抱残像<br>
来独留世上</p>
</blockquote>
<blockquote>
<p>情是苦酒一杯像砒霜<br>
尝尽刻骨穿心和冷枪<br>
然后撕开伤口来欣赏<br>
无关我那样</p>
</blockquote>
<blockquote>
<p>请你请你补上那一枪<br>
你我方算美好绝唱<br>
想你想你不过渐变凉<br>
气数早已结出寒霜</p>
</blockquote>
<blockquote>
<p>情像酒馆打烊门关上<br>
留下此生不必还的账<br>
谁亦不必捉紧谁手掌<br>
应要拍掌<br>
能独留世上<br>
情是苦酒一杯像砒霜<br>
吸取寂寞做绝望营养<br>
当作喜剧落幕便散场<br>
无关我那样<br>
然后安息于心房中央<br>
无关我那样</p>
</blockquote>
<h1 id="印度神油">印度神油</h1>
<h2 id="起源">起源</h2>
<p>印度神油真的来自印度吗？<br>
就像阿拉伯数字不是阿拉伯人发明一样，印度神油其实并不来自印度，产自中国香港。<br>
1958年，何敏森，何敏祯两兄弟在香港九龙办了一个叫“华仁行”的化工厂：</p>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1594711562829.webp" alt="" loading="lazy"></figure>
<p>主要产品包括杀虫剂，脚气喷雾，药膏等，当时有一个著名的黑旋风广告：</p>
<blockquote>
<p>月黑风高夜，黑旋风忍者为民除害，唔使用剑嘎，用黑旋风就得嘞<br>
——黑旋风够晒威，黑旋风的确好使</p>
</blockquote>
<figure data-type="image" tabindex="3"><img src="https://2293736867.github.io/post-images/1594711679246.webp" alt="" loading="lazy"></figure>
<p>至于印度神油，则是何敏森的灵感之作。第一代印度神油如下：</p>
<figure data-type="image" tabindex="4"><img src="https://2293736867.github.io/post-images/1594711751781.png" alt="" loading="lazy"></figure>
<blockquote>
<p>多年后的华仁行老员工透露：所有的成为都是自己配出来的，主要是一些有麻醉作用的药物，跟真正的印度半毛钱关系也没有。</p>
</blockquote>
<p>至于为什么安上印度的名号，大概是因为印度宗教与性文化。</p>
<p>印度几乎所有的宗教，文化和艺术都起源于《吠陀经》，在吠陀教传统中，性是永无终结的。人们对将对性的信奉和拒绝当作决定灵魂存亡的措施，无论是印度教教徒还是佛教教徒都信仰“投胎转世”的人生轮回说，认为人死后灵魂可变成人或动物继续存在。而性就是人类这种人生轮回的一个重要部分，尤其在印度教是继承了印度土著居民达罗毗茶人的生殖文化和雅利安人的自然崇拜传统而产生的一种宗教，他们都认为生殖与性欲就是人生最关键的连接点。</p>
<p>尽管印度教和佛教都有禁欲主义传统，但是在大量的典籍中却发现这些宗教与性文化有千丝万缕的联系，而这些典籍中的记载也令人寻味，也就知道这些宗教禁欲却不禁性。他们只是认为人应该放弃对性自由，婚姻和家庭三种乐欲的追求，这样才能去往极乐世界，而性本身确实天堂必经之路。由此可以看出禁欲与禁性是完全不同的两个概念，而佛教在传入中国时却对于性是完全禁止，这是因为佛教为了在中国生存和更好的传播并发展延续而不得不与中国文化传统习俗相融合，逐渐改变修缮佛教中的教义，向中国根深蒂固的儒家文化让步，以求妥协和彼此融合。中国的佛教更多的是带有中国儒家文化色彩，而这也是为什么佛教能在中国发扬光大而在印度本土逐渐衰落的原因之一。而与印度接壤的西藏却更接近于原来的印度佛教，并有了藏传佛教中的密宗一支。</p>
<p>印度人虽然撰写了第一本集“爱”与“性”为一体的《爱经》，但他们却总是将“爱”与“性”完全分开，认为真正的爱应该是无师自通的人类本能，无需任何指导，相反“性”却需要强调技巧。因而，印度关于性问题的书籍中常常用最主要的篇幅来介绍“无爱的性技巧”，即使《爱经》一书也明显反映出这一倾向。</p>
<p>大多的宗教尽管互不相干，却也在长期的历史沿革中不断吸收和相互的影响着。如佛教中的密宗，其中就有一个欢喜佛。在笈多王朝（320年-600年）以后，佛教在印度本土日益衰微，几乎没有立足之地，印度教日趋强盛，几乎控制了印度大部分地区，尤其在南印度，基本都是印度教的势力范围。尽管在古印度帕拉王朝（750-1150年）的庇护统治下，佛教又保存了一段较长的时期，但是为了发展和延续，不得不吸收了大量的印度教的内容，衍变为密宗。</p>
<p>密教也称坦罗多教，坦罗多的词根tan的原义就是生殖，繁衍。在密宗中，彼岸的超验智慧“般若”代表女性的创造活力，另一种修炼的方式“方便”代表男性的创造活力，分别以女阴的变形莲花和男根的变形金刚杵为象征，通过想象的阴阳交媾和真实的男女欢交的瑜伽方式，亲证“般若”与“方便”融为一体的极乐涅磐境界。这就是欢喜佛的宗教寓意。佛教密宗里男女双修就是印度教性力派影响下的产物。</p>
<p>在欢喜佛图象中凶神恶煞的明王和明王妃合抱交媾，明妃搂其头，一足围绕其腰，就是“大乐”形式。与明王合为一体的妩媚多姿的明妃，是明王修行时必不可少的伙伴。在佛经上叫做“先以欲勾之，后令入佛智”，她以爱欲供奉那些残暴的神魔，使之受到感化，然后再把他们引到佛的境界中来。这就是供奉欢喜佛所谓的“调心工具”和培植佛性的“机缘”。对着欢喜佛的“观形鉴视”，时日久了则习以为常，欲念之心顿消，利用“空乐双运”产生了悟空性，达到“以欲制欲”的目的。</p>
<p>密宗认为他们对女性的崇拜是一种无私的行为，是一种真正意义上的爱：无爱，也就是《爱经》所诠释的性爱的最高境界。因此，密宗仪式中的性事并不表现为激情，而是一种非个性化的行为，一种无状态的心灵状态和浑然一体的自我，沉浸于其中的是彻底的自我和自我的解脱。正是在这种解脱的意义上，禁欲与纵性，苦行与性力奇特地化为一体，成为同归的殊途。这也就是为什么在许多的寺庙中你都可以看见精美绝伦的性爱雕像的原由，在今天，漫步在印度诸多神庙中，你感受到的不是性的羞涩隐晦而是一种自然的原生态的美，那种源于生命本质的，是最持久的，也是永恒的。</p>
<p>好了扯远了，回归正题，为了让印度神油为更多人”造福“，华仁行找来一辆厢式卡车，上面印着：</p>
<blockquote>
<p>印度神油，妙不可言，佛国之宝，的确够劲</p>
</blockquote>
<figure data-type="image" tabindex="5"><img src="https://2293736867.github.io/post-images/1594714257356.webp" alt="" loading="lazy"></figure>
<p>在加上电影的宣传：</p>
<figure data-type="image" tabindex="6"><img src="https://2293736867.github.io/post-images/1594738150613.webp" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="7"><img src="https://2293736867.github.io/post-images/1594738154518.webp" alt="" loading="lazy"></figure>
<p>印度神油变得非常火爆，一位印度的中文导游表示：</p>
<blockquote>
<p>每一个中国游客都会问哪里能买到正宗的印度神油，自己不厌其烦地被追问了几十年。</p>
</blockquote>
<p>另外据阿里巴巴，京东等电商平台数据统计显示，2019年3月-2020年2月，男士精油近一年线上交易总额达1.04亿，销售同比上涨86.17%。</p>
<figure data-type="image" tabindex="8"><img src="https://2293736867.github.io/post-images/1594738322802.webp" alt="" loading="lazy"></figure>
<h2 id="究竟有没有用">究竟有没有用？</h2>
<p>用“鼻祖”华仁行出品的印度神油来说，主要原材料为蟾蜍，即从中华大蟾蜍或黑眶蟾蜍皮肤身上的有毒分泌物制取而成。现代医学认为，产出对于跌打损伤有消肿止痛之效，适量喷涂皮肤可有麻痹之感，使得敏感度下降，从而起到延时作用。<br>
但是对于真正存在生殖障碍的患者来说，无异于饮鸠止渴。此外频繁使用外用药极易导致受伤或者发炎，操作手法也需谨慎，否则麻到对方等于互相伤害。</p>
<p>浙江大学医学院揭露，西医用于治疗男性障碍一般多为口服用药，这种外用药无法直接作用于内部海绵体，并不能起到实际作用，反而会延误病情的治疗良机。说到底印度神油只是一款有着局麻作用的普通男性外用保健品，充其量只能起到辅助作用，健康本体才是关键所在。<br>
再看看后来的“正统”印度本土精油，可以分为六大种类：</p>
<ul>
<li>皇帝油</li>
<li>延时喷剂</li>
<li>男士红油</li>
<li>阿育吠陀玉女油</li>
<li>阿育吠陀霸油</li>
<li>男优膏</li>
</ul>
<p>但其实即使商品种类混杂，能证明真实有效的并不多，换句话说，说无效也不奇怪。</p>
<h2 id="鱼龙混杂的神油市场">鱼龙混杂的神油市场</h2>
<p>印度神油并非商标，谁都可以使用以及生产，久而久之市场混乱程度可想而知。<br>
在电商平台上随意搜索即能找到各种各样的印度神油，虽然价格参差不齐，但是都会突出“本产品由印度XXX集团出品”，“本品选用印度秘方XXX”等宣传词，月销量过万者比比皆是。但实际上国家药监局从未批准过从印度进口任何延时喷剂，这类山寨精油大多是私人作坊炮制出的三无产品，即便国内最正宗的印度神油，最多也不过是香港华仁行生产的罢了。<br>
每年国家处理的神油造假类案件达数万起，一方面利益熏心的商家们为增加销量，不惜铤而走险，不仅私自添加明令禁止的化学成分，很多配比更是经不起考量，轻则过敏反应，重则对肝，肾等产生不可逆转的副作用。另一方面，因为涉及隐私，多数人宁可吞下哑巴亏，也不愿公开报案，使得造假制假事件屡禁不止，愈演愈烈。</p>
<h2 id="说明">说明</h2>
<p>摘自<a href="https://mp.weixin.qq.com/s/10z5mjGHASnqbj3l2Vzb_g">这里</a>与<a href="https://sites.google.com/site/voiceofgreengrass/-474">这里</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第26期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-26-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-26-qi/">
        </link>
        <updated>2020-07-14T03:25:54.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1594697528030.jpeg" alt="" loading="lazy"></figure>
<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>穷不可怕，可怕的是，最穷的人是我。</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>凭借2013年的电影《达拉斯买家俱乐部》，化妆师罗宾·马修斯赢得了第86届奥斯卡最佳化妆与发型设计奖，在整部影片28天的制作周期中，化妆预算仅为250美元。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>最爱湖东行不足，绿杨阴里白沙堤。<br>
——白居易《钱塘湖春行》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>吾心吾行澄如明镜，所作所为皆为正义。</p>
</blockquote>
<h1 id="每日音乐">每日音乐</h1>
<blockquote>
<p><a href="https://music.163.com/#/song?id=1335350269">生而为人-尚士达</a></p>
</blockquote>
<blockquote>
<p>曾经说过不会抽的烟<br>
都已经吸进肺里好几年<br>
曾经的梦想天真无邪<br>
后来满脑子都是为了钱<br>
每年生日闭眼许的愿<br>
能有几个可以灵验<br>
人总会变 抱歉</p>
</blockquote>
<blockquote>
<p>都说生命可以不分贵贱<br>
可有人生来就被叫做少爷<br>
有人只能看着地面<br>
抬头都是些肮脏的嘴脸<br>
励志要走社会的前列<br>
可总是败在势力的面前<br>
肺腑之言 抱歉</p>
</blockquote>
<blockquote>
<p>我想忘了从前的一切<br>
做一个凡事不问的俗人<br>
从今天起远离人群<br>
做一只狡猾的狐狸<br>
那天我双手合十<br>
看着镜子里狼狈的自己<br>
我用了一半的青春<br>
来思考做人的道理</p>
</blockquote>
<blockquote>
<p>对不起年少的自己<br>
行千万里 再别忘了初心</p>
</blockquote>
<blockquote>
<p>都说生命可以不分贵贱<br>
可有人生来就被叫做少爷<br>
有人只能看着地面<br>
抬头都是些肮脏的嘴脸<br>
励志要走在社会的前列<br>
可总是败在势力的面前<br>
肺腑之言 抱歉</p>
</blockquote>
<blockquote>
<p>我想忘了从前的一切<br>
做一个凡事不问的俗人<br>
从今天起远离人群<br>
做一只狡猾的狐狸<br>
那天我双手合十<br>
看着镜子里狼狈的自己<br>
我用了一半的青春<br>
来思考做人的道理<br>
对不起年少的自己<br>
行千万里 再别忘了初心</p>
</blockquote>
<blockquote>
<p>我想忘了从前的一切<br>
做一个凡事不问的俗人<br>
从今天起远离人群<br>
做一只狡猾的狐狸<br>
那天我双手合十<br>
看着镜子里狼狈的自己<br>
我用了一半的青春<br>
来思考做人的道理<br>
对不起年少的自己<br>
行千万里 再别忘了初心</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第25期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-qi/">
        </link>
        <updated>2020-07-13T02:41:29.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1594608403583.jpeg" alt="" loading="lazy"></figure>
<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>把女孩子弄哭是很没种的事，把男孩子弄哭是一件叼爆的事啊。</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>骆驼仅需13分钟就可喝下13加仑（约114升的水）。这些水储存在骆驼的血液中，而不是存在能量丰富而且富含脂肪的驼峰中。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>又莫是东风逐君来，便吹散眉间一点春皱。<br>
——苏轼《洞仙歌·咏柳》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>不合理的事物，未必都是显而易见的。</p>
</blockquote>
<h1 id="每日音乐">每日音乐</h1>
<blockquote>
<p><a href="https://music.163.com/#/song?id=546715801">童话幻灭-蒋蒋</a></p>
</blockquote>
<blockquote>
<p>你开始悲伤哽咽<br>
像诗里写的决别<br>
陪你看过那场雪<br>
一转眼却要分别<br>
这故事就要完结<br>
落笔时满天枫叶<br>
陪你走过那条街<br>
霎那间童话幻灭</p>
</blockquote>
<blockquote>
<p>我没搞懂也没种<br>
我陷在黑黑无底洞<br>
爬不出来<br>
不知好歹<br>
板着脸孔话很冲<br>
说我不是你的英雄<br>
算哪盘菜<br>
只好认栽</p>
</blockquote>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1594609876841.jpg" alt="" loading="lazy"></figure>
<blockquote>
<p>我努力释怀回忆的挚爱<br>
却刻进脑海不让人去猜<br>
目送着离开注定回不来<br>
就算是伤害也瞒天过海</p>
</blockquote>
<blockquote>
<p>你开始悲伤哽咽<br>
像诗里写的决别<br>
陪你看过那场雪<br>
一转眼却要分别<br>
这故事就要完结<br>
落笔时满天枫叶<br>
陪你走过那条街<br>
霎那间童话幻灭</p>
</blockquote>
<blockquote>
<p>我没搞懂也没种<br>
我陷在黑黑无底洞<br>
爬不出来<br>
不知好歹<br>
板着脸孔话很冲<br>
说我不是你的英雄<br>
算哪盘菜<br>
只好认栽</p>
</blockquote>
<blockquote>
<p>我努力释怀回忆的挚爱<br>
却刻进脑海不让人去猜<br>
目送着离开注定回不来<br>
就算是伤害也瞒天过海</p>
</blockquote>
<blockquote>
<p>你开始悲伤哽咽<br>
像诗里写的决别<br>
陪你看过那场雪<br>
一转眼就要分别<br>
落笔时满天枫叶<br>
陪你走过那条街<br>
霎那间童话幻灭</p>
</blockquote>
<blockquote>
<p>你开始悲伤哽咽<br>
像诗里写的决别<br>
陪你看过那场雪<br>
一转眼就要分别<br>
这故事就要完结<br>
落笔时满天枫叶<br>
陪你走过那条街<br>
霎那间通话幻灭</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[设计模式学习笔记（四）：简单工厂模式]]></title>
        <id>https://2293736867.github.io/post/she-ji-mo-shi-xue-xi-bi-ji-si-jian-dan-gong-han-mo-shi/</id>
        <link href="https://2293736867.github.io/post/she-ji-mo-shi-xue-xi-bi-ji-si-jian-dan-gong-han-mo-shi/">
        </link>
        <updated>2020-07-13T02:40:09.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#1-%E5%AE%9A%E4%B9%89">1 定义</a></li>
<li><a href="#2-%E7%BB%93%E6%9E%84">2 结构</a></li>
<li><a href="#3-%E5%AE%9E%E4%BE%8B">3 实例</a></li>
<li><a href="#4-%E7%AE%80%E5%8C%96">4 简化</a></li>
<li><a href="#5-%E4%B8%BB%E8%A6%81%E4%BC%98%E7%82%B9">5 主要优点</a></li>
<li><a href="#6-%E4%B8%BB%E8%A6%81%E7%BC%BA%E7%82%B9">6 主要缺点</a></li>
<li><a href="#7-%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF">7 适用场景</a></li>
<li><a href="#8-%E6%80%BB%E7%BB%93">8 总结</a></li>
</ul>
</p>
<h1 id="1-定义">1 定义</h1>
<p><strong>简单工厂模式（Simple Factory Pattern）：定义一个工厂类，它可以根据参数的不同返回不同类的实例，被创建的实例通常都具有共同的父类。</strong></p>
<p>因为在简单工厂模式用于创建实例的方法是静态的方法，因此简单工厂模式又被称为静态工厂方法模式，它属于类创建型模式。</p>
<p>尽管简单工厂模式不属于GoF23种设计模式之一，但是实际中用途广泛，并且可以作为学习“工厂方法模式”以及“抽象工厂模式”的基础。</p>
<h1 id="2-结构">2 结构</h1>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/202007122243106.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>由图可知包含以下三个角色：</p>
<ul>
<li>Factory（工厂角色）：即工厂类，负责实现创建所有产品实例的内部逻辑，工厂类可以被外界直接调用，创建所需要的产品对象，在工厂类中提供了一个静态工厂方法用于获取产品</li>
<li>Product（抽象产品角色）：是工厂类所创建的所有对象的父类，封装了各种产品对象的公有方法。Product会提高系统的灵活性，使得在工厂类只需要定义一个通用的工厂产品方法，因为所有创建的具体产品都是其子类对象</li>
<li>ConcreteProduct（具体产品角色）：所有被创建的对象都充当这个角色的某个具体类的实例。每一个具体产品角色都继承了抽象产品角色，需要实现在抽象产品中声明的抽象方法</li>
</ul>
<h1 id="3-实例">3 实例</h1>
<p>某公司需要开发一个图表库，该图表库可以提供各种不同外观的图表，例如柱状图，折线图等等。</p>
<p>首先可以先设计一个抽象图表类（这里是一个接口）：</p>
<pre><code class="language-java">interface Chart
{
	void display();
}
</code></pre>
<p>接着各种具体产品类（柱状图，折线图，饼状图等）实现该接口即可：</p>
<pre><code class="language-java">class HistogramChart implements Chart
{
    public HistogramChart()
    {
        System.out.println(&quot;创建柱状图&quot;);
    }

    public void display()
    {
        System.out.println(&quot;显示柱状图&quot;);
    }
}

class PieChart implements Chart
{
    public PieChart()
    {
        System.out.println(&quot;创建饼状图&quot;);
    }

    public void display()
    {
        System.out.println(&quot;显示饼状图&quot;);
    }
}

class LineChart implements Chart
{
    public LineChart()
    {
        System.out.println(&quot;创建折线图&quot;);
    }

    public void display()
    {
        System.out.println(&quot;显示折线图&quot;);
    }
}
</code></pre>
<p>最后是工厂类，为了方便加上了枚举参数：</p>
<pre><code class="language-java">class Factory
{
    public static Chart getChart(Charts charts)
    {
        switch(charts)
        {
            case PIE_CHART:
                return new PieChart();
            case LINE_CHART:
                return new LineChart();
            case HISTOGRAM_CHART:
                return new HistogramChart();
            default:
                return null;
        }
    }
}

enum Charts
{
    PIE_CHART,LINE_CHART,HISTOGRAM_CHART;
}
</code></pre>
<p>测试：</p>
<pre><code class="language-java">public static void main(String[] args) {
    Chart chart = Factory.getChart(Charts.LINE_CHART);
    chart.display();
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200713093445437.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="4-简化">4 简化</h1>
<p>为了简化简单工厂模式，可以将抽象产品类与工厂类合并，将静态方法移至抽象产品类中：</p>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20200713094122200.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>这样可以通过抽象产品类的静态方法获取子类对象，优化代码如下：</p>
<pre><code class="language-java">interface Chart
{
    void display();
    static Chart getChart(Charts charts)
    {
        switch(charts)
        {
            case PIE_CHART:
                return new PieChart();
            case LINE_CHART:
                return new LineChart();
            case HISTOGRAM_CHART:
                return new HistogramChart();
            default:
                return null;
        }
    }
}
</code></pre>
<h1 id="5-主要优点">5 主要优点</h1>
<p>简单工厂模式的主要优点如下：</p>
<ul>
<li>分离职责：简单工厂模式实现了对象创建以及使用的分离，工厂类包含必要的判断逻辑，可以决定在什么时候创建什么哪一个产品的实例，客户端可以免除直接创建产品对象的职责，仅仅是“消费”产品</li>
<li>简化记忆：客户端无须知道具体产品类的名字，只需要知道对应的参数即可，一般使用常量字符串或者枚举</li>
<li>提高灵活性：可以引入配置文件（xml等）在不修改客户端代码情况下增加新的具体产品类，提高灵活性</li>
</ul>
<h1 id="6-主要缺点">6 主要缺点</h1>
<p>简单工厂模式的主要缺点如下：</p>
<ul>
<li>工厂类集中了所有产品的创建逻辑，一旦不能正常工作，整个系统都要受影响</li>
<li>由于引入了工厂类会增加系统中类的个数，会增加系统的复杂度和理解难度</li>
<li>系统扩展困难，一旦添加新产品就不得不修改工厂逻辑，在产品类型过多时，有可能造成工厂逻辑过于复杂，不利于系统的扩展和维护</li>
<li>简单工厂模式使用了静态工厂方法，造成工厂角色无法基于继承的等级结构</li>
</ul>
<h1 id="7-适用场景">7 适用场景</h1>
<ul>
<li>工厂类负责创建的对象比较少，由于创建对象较少，不会造成工厂方法中的业务逻辑太过复杂</li>
<li>客户端只需要知道传入工厂类的参数，对如何创建对象不关心</li>
</ul>
<h1 id="8-总结">8 总结</h1>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/2020071309592074.png" alt="在这里插入图片描述" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue学习笔记（二）]]></title>
        <id>https://2293736867.github.io/post/vue-xue-xi-bi-ji-er/</id>
        <link href="https://2293736867.github.io/post/vue-xue-xi-bi-ji-er/">
        </link>
        <updated>2020-07-12T05:47:26.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-条件判断">1 条件判断</h1>
<h2 id="11-普通if">1.1 普通if</h2>
<p>条件判断使用<code>v-if</code>指令：</p>
<pre><code class="language-html">&lt;div id=&quot;app&quot;&gt;
	&lt;p v-if=&quot;seen&quot;&gt;看到了&lt;/p&gt;;
&lt;/div&gt;
</code></pre>
<pre><code class="language-js">&lt;script&gt;
new Vue({
	el:'#app',
	data:{
		seen:true
	}
})
&lt;/script&gt;
</code></pre>
<p><code>v-if</code>指令根据表达式的值（在这里是<code>seen</code>）决定是否插入<code>&lt;p&gt;</code></p>
<h2 id="12-if-else">1.2 if-else</h2>
<p>可以使用<code>v-else</code>添加一个<code>else</code>块：</p>
<pre><code class="language-html">&lt;div id=&quot;app&quot;&gt;
	&lt;div v-if=&quot;Math.random()&gt;0.5&quot;&gt;1&lt;/div&gt;
	&lt;div v-else&gt;2&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<pre><code class="language-js">&lt;script&gt;
new Vue({
	el:'#app'
})
&lt;/sctipt&gt;
</code></pre>
<p>也可以增加<code>v-else-if</code>：</p>
<pre><code class="language-html">&lt;div id=&quot;app&quot;&gt;
	&lt;div v-if=&quot;value === 'A'&quot;&gt;A&lt;/div&gt;
	&lt;div v-else-if=&quot;value === 'B'&quot;&gt;B&lt;/div&gt;
	&lt;div v-else-if=&quot;value === 'C'&quot;&gt;C&lt;/div&gt;
	&lt;div v-else&gt;D&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<pre><code class="language-js">&lt;script&gt;
new Vue({
	el:'#app',
	data:{
		value:'A'
	}
})
&lt;/script&gt;
</code></pre>
<p><code>v-else</code>以及<code>v-else-if</code>必须跟在<code>v-if</code>或者<code>v-else-if</code>之后。</p>
<h2 id="13-v-show">1.3 v-show</h2>
<p>也可以根据<code>v-show</code>展示元素：</p>
<pre><code class="language-html">&lt;div id=&quot;app&quot;&gt;
	&lt;h1 v-show=&quot;ok&quot;&gt;Test&lt;/h1&gt;
&lt;/div&gt;
</code></pre>
<pre><code class="language-js">&lt;script&gt;
new Vue({
	el:'#app',
	data:
	{
		ok:true
	}
})
&lt;/script&gt;
</code></pre>
<h1 id="2-循环">2 循环</h1>
<p>循环使用<code>v-for</code>，格式为：<code>A in B</code>，其中<code>A</code>是<code>B</code>中的每一个值，若<code>B</code>为数组，则<code>A</code>表示其中的没一个元素，若<code>B</code>为对象，则<code>A</code>可以表示<code>B</code>中的没一个值，通常配合<code>&lt;li&gt;</code>使用：</p>
<pre><code class="language-html">&lt;div id=&quot;app&quot;&gt;
	&lt;ol&gt;
		&lt;li v-for=&quot;i in arr&quot;&gt;{{i.value}}&lt;/li&gt;
	&lt;/ol&gt;
&lt;/div&gt;
</code></pre>
<pre><code class="language-js">&lt;script&gt;
new Vue({
	el:'#app',
	data:
	{
		arr:
		[
			{value:'value1'},
			{value:'value2'},
			{value:'value3'}
		]
	}
})
&lt;/script&gt;
</code></pre>
<p>另外也可以通过一个对象的属性来迭代数据：</p>
<pre><code class="language-html">&lt;div id=&quot;app&quot;&gt;
	&lt;ul&gt;
		&lt;li v-for=&quot;value in obj&quot;&gt;{{value}}&lt;/li&gt;
	&lt;/ul&gt;
&lt;/div&gt;
</code></pre>
<pre><code class="language-js">&lt;script&gt;
new Vue({
	el:'#app',
	data:
	{
		obj:
		{
			value1:'value1',
			value2:'value2',
			value3:'value3'
		}
	}
})
&lt;/script&gt;
</code></pre>
<p>也可以提供第二个参数作为键名：</p>
<pre><code class="language-html">&lt;li v-for=&quot;(value,key) in obj&quot;&gt;
{{key}} -&gt; {{value}}
&lt;/li&gt;
</code></pre>
<p>第三个参数作为索引：</p>
<pre><code class="language-html">&lt;li v-for=&quot;(value,key,index) in obj&quot;&gt;
{{index}} : {{key}} -&gt; {{value}}
&lt;/li&gt;
</code></pre>
<p>另外也可以迭代整数：</p>
<pre><code class="language-html">&lt;li v-for=&quot;n in 10&quot;&gt;{{n}}&lt;/li&gt;
</code></pre>
<p>范围是从0到10，包含0与10。</p>
<h1 id="3-计算属性">3 计算属性</h1>
<h2 id="31-computed">3.1 computed</h2>
<p>计算属性类似与方法调用，比如之前的反转字符串的例子：</p>
<pre><code class="language-js">{{message.split('').reverse().join('')}}
</code></pre>
<p>这样看起来很长，可以使用计算属性进行简化：</p>
<pre><code class="language-html">&lt;div id=&quot;app&quot;&gt;
	&lt;p&gt;{{reverse}}&lt;/p&gt;
&lt;/div&gt;
</code></pre>
<pre><code class="language-js">&lt;script&gt;
new Vue({
	el:'#app',
	data:
	{
		message:'Test'
	},
	computed:
	{
		reverse:function()
		{
			return this.message.split.reverse().join('')
		}
	}
})
&lt;/script&gt;
</code></pre>
<p>这里声明了一个计算属性<code>reverse</code>，提供的函数作为属性<code>reverse</code>的<code>getter</code>，<code>reverse</code>依赖于<code>message</code>，当<code>message</code>更新时，<code>reverse</code>也会更新。</p>
<h2 id="32-computed与methods">3.2 computed与methods</h2>
<p>可以使用<code>methods</code>来代替<code>computed</code>：</p>
<pre><code class="language-js">methods:
{
	reverse:function()
	{
		return this.message.split.reverse().join('')
	}
}
</code></pre>
<p>对应只需要增加一对<code>()</code>：</p>
<pre><code class="language-html">&lt;div id=&quot;app&quot;&gt;
	&lt;p&gt;{{reverse()}}&lt;/p&gt;
&lt;/div&gt;
</code></pre>
<p><code>computed</code>基于它的依赖缓存，只有相关依赖修改时才会重新取值，而使用<code>methods</code>，在重新渲染时函数总会重新调用执行。</p>
<h2 id="33-setter">3.3 setter</h2>
<p><code>computed</code>默认只有 <code>getter</code>，不过也可以自行提供<code>setter</code>：</p>
<pre><code class="language-js">var vm = new Vue({
	el:'#app',
	data:
	{
		name:'test',
		url:'https://www.test.com'
	},
	computed:
	{
		site:
		{
			get:function()
			{
				return this.name + ' ' + this.url; 
			},
			set:function(value)
			{
				var values = value.split(' ')
				this.name = values[0]
				this.url = values[1]
			}
		}
	}
})

vm.site = 'test2 https://www.test2.com'
document.write('name:'+vm.name)
document.write('&lt;br&gt;')
document.write('url:'+vm.url)
</code></pre>
<p>输入如下：<br>
<img src="https://img-blog.csdnimg.cn/20200712134247478.png" alt="在这里插入图片描述" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第24期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-24-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-24-qi/">
        </link>
        <updated>2020-07-12T03:23:19.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1594524691715.jpeg" alt="" loading="lazy"></figure>
<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>你不能因为你胖，就忽略了你的丑。</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>男性制造的精子比女性制造的卵子多1000000000000000000000000倍（25个0）。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>休说鲈鱼堪脍，尽西风，季鹰归未？<br>
——辛弃疾《水龙吟·登建康赏心亭》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>异地恋是，尝过欣喜若狂，也知道失魂落魄。</p>
</blockquote>
<h1 id="每日音乐">每日音乐</h1>
<blockquote>
<p><a href="https://music.163.com/#/song?id=1418131597">风恋歌-恋恋故人难 / 芝麻Mochi</a> (吹梦到西洲的日文版)</p>
</blockquote>
<blockquote>
<p>いつかの街角で 君とすれ違った時<br>
気付かぬふりをした 理由さえもわからずに<br>
木枯らし吹く道を俯きながら呟く<br>
ぽつりと漏れた言葉は 届くことなく消えてった<br>
街路樹 落ち葉が溢れる<br>
でも私の季節は変わらないままで<br>
教えてよ この風の行方<br>
あなたの想いは誰に向け吹くの<br>
頬を伝い流れる涙が乾かないのは<br>
そんな全て包む 愛を待っているから<br>
道行く足並みが忙しなくなるこの頃<br>
あなたは今頃何処で 誰の手を取り歩いてるの<br>
景色は色を変えるけど<br>
今も私の想いは変わらないままで<br>
教えてよ この恋の行方<br>
あなたを探して どこまでも往くの<br>
胸の奥に灯った炎が揺らがないのは<br>
今日も吹き止まない 風を待っているから<br>
あと何回この季節を 乗り越えられたのなら<br>
あなたに伝えられるだろう<br>
愛しさと切なさのその全てを<br>
教えてよ この恋の行方<br>
あなたにまた会えたのなら<br>
いつか夢に見た形じゃなくても どうか近くにいさせて<br>
教えてよ この風の行方<br>
あなたの想いは誰に向け吹くの<br>
頬を伝い流れる涙が乾かないのは<br>
そんな全て包む 愛を待っているから</p>
</blockquote>
]]></content>
    </entry>
</feed>