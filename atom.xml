<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://2293736867.github.io</id>
    <title>氷泠&apos;s blog</title>
    <updated>2021-05-14T16:53:58.217Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://2293736867.github.io"/>
    <link rel="self" href="https://2293736867.github.io/atom.xml"/>
    <subtitle>几百遍，重复了几百遍
重复的情绪重复的熬过想你的夜</subtitle>
    <logo>https://2293736867.github.io/images/avatar.png</logo>
    <icon>https://2293736867.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 氷泠&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[每日分享 第335期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-335-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-335-qi/">
        </link>
        <updated>2021-05-14T16:50:14.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>生活不会放弃你，但也不会放过你。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>正护月云轻，嫩冰犹薄。<br>
——辛弃疾《瑞鹤仙·赋梅》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>从一开始，我就不那么喜欢你。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1621011032287.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>简单题直接判断各个字符了：</p>
<pre><code class="language-java">public class Solution {
    public int romanToInt(String s) {
        char [] ch = s.toCharArray();
        int sum = 0;
        for (int i = 0; i &lt; ch.length; i++) {
            if(ch[i] == 'M'){
                sum += 1000;
            }else if(ch[i] == 'D'){
                sum += 500;
            }else if(ch[i] == 'C'){
                if(i+1 &lt; ch.length){
                    if(ch[i+1] == 'D') {
                        sum += 300;
                        ++i;
                    }else if(ch[i+1] == 'M'){
                        sum += 800;
                        ++i;
                    }
                }
                sum += 100;
            }else if(ch[i] == 'L'){
                sum += 50;
            }else if(ch[i] == 'X'){
                if(i+1 &lt; ch.length){
                    if(ch[i+1] == 'L') {
                        sum += 30;
                        ++i;
                    }else if(ch[i+1] == 'C'){
                        sum += 80;
                        ++i;
                    }
                }
                sum += 10;
            }else if(ch[i] == 'V'){
                sum += 5;
            }else{
                if(i+1 &lt; ch.length){
                    if(ch[i+1] == 'V') {
                        sum += 3;
                        ++i;
                    }else if(ch[i+1] == 'X'){
                        sum += 8;
                        ++i;
                    }
                }
                sum += 1;
            }
        }
        return sum;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1621011059036.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第334期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-334-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-334-qi/">
        </link>
        <updated>2021-05-13T16:14:11.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>转角一般不会遇到爱，只会遇到乞丐。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>何当凯旋宴将士，三更雪压飞狐城！<br>
——陆游《长歌行》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>萤火之光看起来比平常要更耀眼是错觉吗？今宵会成为永夜的吧。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1620922670877.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>直接暴力：</p>
<pre><code class="language-java">import java.util.LinkedList;
import java.util.List;

public class Solution {
    public String intToRoman(int num) {
        StringBuilder builder = new StringBuilder();
        while (num &gt;= 1000){
            builder.append('M');
            num -= 1000;
        }
        if(num &gt;= 900){
            builder.append(&quot;CM&quot;);
            num -= 900;
        }
        if(num &gt;= 500){
            builder.append('D');
            num -= 500;
        }
        if(num &gt;= 400){
            builder.append(&quot;CD&quot;);
            num -= 400;
        }
        while(num &gt;= 100){
            builder.append('C');
            num -= 100;
        }
        if(num &gt;= 90){
            builder.append(&quot;XC&quot;);
            num -= 90;
        }
        if(num &gt;= 50){
            builder.append('L');
            num -= 50;
        }
        if(num &gt;= 40){
            builder.append(&quot;XL&quot;);
            num -= 40;
        }
        while (num &gt;= 10){
            builder.append('X');
            num -= 10;
        }
        if(num &gt;= 9){
            builder.append(&quot;IX&quot;);
            num -= 9;
        }
        if(num &gt;= 5){
            builder.append(&quot;V&quot;);
            num -= 5;
        }
        if(num &gt;= 4){
            builder.append(&quot;IV&quot;);
            num -= 4;
        }
        while (num &gt;= 1){
            builder.append('I');
            num -= 1;
        }
        return builder.toString();
    }
}
</code></pre>
<p>虽然不太优雅，快就行了：</p>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1620922731037.png" alt="" loading="lazy"></figure>
<h1 id="双100">双100</h1>
<p>记录一下今天的双100：</p>
<figure data-type="image" tabindex="3"><img src="https://2293736867.github.io/post-images/1620971589553.png" alt="" loading="lazy"></figure>
<pre><code class="language-java">public class Solution {
    public boolean isValidSudoku(char[][] board) {
        int[] row = new int[9];
        int[] col = new int[9];
        int[] block = new int[9];

        for (int i = 0; i &lt; 9; i++) {
            for (int j = 0; j &lt; 9; j++) {
                if (board[i][j] != '.'){
                    int t = board[i][j] - 48;
                    if((col[j] &gt;&gt; t &amp; 1) == 1){
                        return false;
                    }else{
                        col[j] |= 1 &lt;&lt; t;
                    }

                    if((row[i] &gt;&gt; t &amp; 1) == 1){
                        return false;
                    }else{
                        row[i] |= 1 &lt;&lt; t;
                    }

                    int blockIndex = (i / 3) * 3 + j / 3;
                    if((block[blockIndex] &gt;&gt; t &amp; 1) == 1){
                        return false;
                    }else{
                        block[blockIndex] |= 1 &lt;&lt; t;
                    }
                }
            }
        }
        return true;
    }
}
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://2293736867.github.io/post-images/1620971595878.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第333期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-333-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-333-qi/">
        </link>
        <updated>2021-05-12T16:45:09.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>冬天就是好，穷的时候，还有西北风喝。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>迎得一钩月到，送得三更月去，莺燕不相猜。<br>
——张惠言《水调歌头（五首选三）》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>愿时光能缓，愿故人不散！</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1620838100076.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>二维dp升级到的一维dp（其实是题解的答案，逃）：</p>
<pre><code class="language-java">import java.util.Arrays;

public class Solution {
    private static final int MOD = 1000000007;

    public int numWays(int steps, int arrLen) {
        int maxColumn = Math.min(arrLen-1,steps);
        int [] dp = new int[maxColumn+1];
        dp[0] = 1;
        for (int i = 1; i &lt;= steps; i++) {
            int [] dpNext = new int[maxColumn+1];
            for (int j = 0; j &lt;= maxColumn; j++) {
                dpNext[j] = dp[j];
                if(j - 1 &gt;= 0){
                    dpNext[j] = (dpNext[j] + dp[j-1]) % MOD;
                }
                if(j + 1 &lt;= maxColumn){
                    dpNext[j] = (dpNext[j] + dp[j+1]) % MOD;
                }
            }
            dp = dpNext;
        }
        return dp[0];
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1620838143565.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第332期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-332-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-332-qi/">
        </link>
        <updated>2021-05-12T03:15:29.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>56个民族，55个加分。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>抛尽榆钱，依然难买春光驻。<br>
——王鹏运《点绛唇·饯春》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>我觉得，我这辈子最灿烂的笑容，大概都奉献给我电脑屏幕了。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1620789810031.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>第一次用的自以为很厉害的算法，三个前缀和数组加小区间优化：</p>
<pre><code class="language-java">import java.util.Arrays;

public class Solution {
    public int[] xorQueries(int[] arr, int[][] queries) {
        int n = arr.length;
        int m = queries.length;
        int [] result = new int [m];
        if(n &lt; 10){
            for(int i=0;i&lt;m;++i){
                int s1 = queries[i][0];
                int s2 = queries[i][1];
                int temp = arr[s1++];
                while(s1&lt;=s2){
                    temp ^= arr[s1++];
                }
                result[i] = temp;
            }
            return result;
        }
        int [] all = new int [n];
        int [] half1 = new int [n];
        int [] half2 = new int [n];

        all[0] = half1[0] = arr[0];
        half2[n/2] = arr[n/2];
        for(int i=1;i&lt;n;++i){
            if(i&lt;=n/2){
                half1[i] ^= half1[i-1] ^ arr[i];
            }else{
                half2[i] = half2[i-1] ^ arr[i];
            }
            all[i] = all[i-1] ^ arr[i];
        }
        for(int i=0;i&lt;m;++i){
            int s1 = queries[i][0];
            int s2 = queries[i][1];
            int temp;
            if(s2 - s1 &lt; 10){
                temp = arr[s1++];
                while(s1&lt;=s2){
                    temp ^= arr[s1++];
                }
            }else{
                if(s2 &lt;= n/2){
                    temp = half1[s2];
                    for(int j=0;j&lt;s1;++j){
                        temp ^= arr[j];
                    }
                }else if(s1 &gt; n/2){
                    temp = half2[s2];
                    for(int j=n/2;j&lt;s1;++j){
                        temp ^= arr[j];
                    }
                }else{
                    temp = all[s2];
                    for(int j=0;j&lt;s1;++j){
                        temp ^= arr[j];
                    }
                }
            }
            result[i] = temp;
        }
        return result;
    }
}
</code></pre>
<p>空间是好了，但时间烂的不想看：</p>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1620789428020.png" alt="" loading="lazy"></figure>
<p>看了题解才知道，这个才叫前缀和。。。。</p>
<pre><code class="language-java">import java.util.Arrays;

public class Solution {
    public int[] xorQueries(int[] arr, int[][] queries) {
        int n = arr.length;
        int m = queries.length;
        int [] result = new int [m];
        int [] all = new int [n];

        all[0] = arr[0];
        for(int i=1;i&lt;n;++i){
            all[i] = all[i-1] ^ arr[i];
        }
        for(int i=0;i&lt;m;++i){
            if(queries[i][0] == 0){
                result[i] = all[queries[i][1]];
            }else{
                result[i] = all[queries[i][0]-1] ^ all[queries[i][1]];
            }
        }
        return result;
    }
}
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://2293736867.github.io/post-images/1620789768949.png" alt="" loading="lazy"></figure>
<p>真正的<code>O(1)</code>求异或。</p>
<p><s>完犊子。。。</s></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第331期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-331-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-331-qi/">
        </link>
        <updated>2021-05-10T17:18:05.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>所有的故事都会有结局，只有生活跟你没完。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>诗随十里寻春路，愁在三更挂月村。<br>
——高启《咏梅九首》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>不会让你们碰那个人类一根手指的！</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1620667180065.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>通过“数学公式”确定了第一个，然后<code>O(n)</code>求剩下的就可以了：</p>
<pre><code class="language-java">public class Solution {
    public int[] decode(int[] encoded) {
        int n = encoded.length + 1;
        int [] r = new int[n];
        int all = 0;
        int temp;
        for (int i = 1; i &lt;= n; i++) {
            all ^= i;
            temp = (i&lt;&lt;1) - 1;
            if(temp &lt; n-1){
                all ^= encoded[temp];
            }
        }
        r[0] = all;

        for (int i = 0; i &lt; n-1; i++) {
            all ^= encoded[i];
            r[i+1] = all;
        }
        return r;
    }
}
</code></pre>
<p>不过很搞心态的是减少了一个<code>O(n)</code>循环居然还死活上不了2ms：</p>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1620667102785.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java高并发学习笔记（二）：线程安全与ThreadGroup]]></title>
        <id>https://2293736867.github.io/post/java-gao-bing-fa-xue-xi-bi-ji-er-xian-cheng-an-quan-yu-threadgroup/</id>
        <link href="https://2293736867.github.io/post/java-gao-bing-fa-xue-xi-bi-ji-er-xian-cheng-an-quan-yu-threadgroup/">
        </link>
        <updated>2021-05-10T12:49:37.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-来源">1 来源</h1>
<ul>
<li>来源：《Java高并发编程详解 多线程与架构设计》，汪文君著</li>
<li>章节：第四、六章</li>
</ul>
<p>本文是两章的笔记整理。</p>
<h1 id="2-概述">2 概述</h1>
<p>本文主要讲述了<code>synchronized</code>以及<code>ThreadGroup</code>的基本用法。</p>
<h1 id="3-synchronized">3 <code>synchronized</code></h1>
<h2 id="31-简介">3.1 简介</h2>
<p><code>synchronized</code>可以防止线程干扰和内存一致性错误，具体表现如下：</p>
<ul>
<li><code>synchronized</code>提供了一种锁机制，能够确保共享变量的互斥访问，从而防止数据不一致的问题</li>
<li><code>synchronized</code>包括<code>monitor enter</code>和<code>monitor exit</code>两个<code>JVM</code>指令，能保证在任何时候任何线程执行到<code>monitor enter</code>成功之前都必须从主存获取数据，而不是从缓存中，在<code>monitor exit</code>运行成功之后，共享变量被更新后的值必须刷入主内存而不是仅仅在缓存中</li>
<li><code>synchronized</code>指令严格遵循<code>Happens-Beofre</code>规则，一个<code>monitor exit</code>指令之前必定要有一个<code>monitor enter</code></li>
</ul>
<h2 id="32-基本用法">3.2 基本用法</h2>
<p><code>synchronized</code>的基本用法可以用于对代码块或方法进行修饰，比如：</p>
<pre><code class="language-java">private final Object MUTEX = new Object();
    
public void sync1(){
    synchronized (MUTEX){
    }
}

public synchronized void sync2(){
}
</code></pre>
<h2 id="33-字节码简单分析">3.3 字节码简单分析</h2>
<p>一个简单的例子如下：</p>
<pre><code class="language-java">public class Main {
    private static final Object MUTEX = new Object();

    public static void main(String[] args) throws InterruptedException {
        final Main m = new Main();
        for (int i = 0; i &lt; 5; i++) {
            new Thread(m::access).start();
        }
    }

    public void access(){
        synchronized (MUTEX){
            try{
                TimeUnit.SECONDS.sleep(20);
            }catch (InterruptedException e){
                e.printStackTrace();
            }
        }
    }
}
</code></pre>
<p>编译后查看字节码：</p>
<pre><code class="language-bash">javap -v -c -s -l Main.class
</code></pre>
<p><code>access()</code>字节码截取如下：</p>
<pre><code class="language-cpp">stack=3, locals=4, args_size=1
 0: getstatic     #9                  // Field MUTEX:Ljava/lang/Object;  获取MUTEX
 3: dup
 4: astore_1
 5: monitorenter					  // 执行monitor enter指令
 6: getstatic     #10                 // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
 9: ldc2_w        #11                 // long 20l
12: invokevirtual #13                 // Method java/util/concurrent/TimeUnit.sleep:(J)V
15: goto          23				  // 正常退出，跳转到字节码偏移量23的地方
18: astore_2
19: aload_2
20: invokevirtual #15                 // Method java/lang/InterruptedException.printStackTrace:()V
23: aload_1
24: monitorexit						  // monitor exit指令
25: goto          33
28: astore_3
29: aload_1
30: monitorexit
31: aload_3
32: athrow
33: return
</code></pre>
<p>关于<code>monitorenter</code>与<code>monitorexit</code>说明如下：</p>
<ul>
<li><code>monitorenter</code>：每一个对象与一个<code>monitor</code>相对应，一个线程尝试获取与对象关联的<code>monitor</code>的时候，如果<code>monitor</code>的计数器为0，会获得之后立即对计数器加1，如果一个已经拥有<code>monitor</code>所有权的线程重入，将导致计数器再次累加，而如果其他线程尝试获取时，会一直阻塞直到<code>monitor</code>的计数器变为0，才能再次尝试获取对<code>monitor</code>的所有权</li>
<li><code>monitorexit</code>：释放对<code>monitor</code>的所有权，将<code>monitor</code>的计数器减1，如果计数器为0，意味着该线程不再拥有对<code>monitor</code>的所有权</li>
</ul>
<h2 id="34-注意事项">3.4 注意事项</h2>
<h3 id="341-非空对象">3.4.1 非空对象</h3>
<p>与<code>monitor</code>关联的对象不能为空：</p>
<pre><code class="language-java">private Object MUTEX = null;
private void sync(){
    synchronized (MUTEX){

    }
}
</code></pre>
<p>会直接抛出空指针异常。</p>
<h3 id="342-作用域不当">3.4.2 作用域不当</h3>
<p>由于<code>synchronized</code>关键字存在排它性，作用域越大，往往意味着效率越低，甚至丧失并发优势，比如：</p>
<pre><code class="language-java">private synchronized void sync(){
    method1();
    syncMethod();
    method2();
}
</code></pre>
<p>其中只有第二个方法是并发操作，那么可以修改为</p>
<pre><code class="language-java">private Object MUTEX = new Object();
private void sync(){
    method1();
    synchronized (MUTEX){
        syncMethod();
    }
    method2();
}
</code></pre>
<h3 id="343-使用不同的对象">3.4.3 使用不同的对象</h3>
<p>因为一个对象与一个<code>monitor</code>相关联，如果使用不同的对象，这样就失去了同步的意义，例子如下：</p>
<pre><code class="language-java">public class Main {
    public static class Task implements Runnable{
        private final Object MUTEX = new Object();

        @Override
        public void run(){
            synchronized (MUTEX){
            }
        }
    }

    public static void main(String[] args) throws InterruptedException {
        for (int i = 0; i &lt; 20; i++) {
            new Thread(new Task()).start();
        }
    }
}
</code></pre>
<p>每一个线程争夺的<code>monitor</code>都是互相独立的，这样就失去了同步的意义，起不到互斥的作用。</p>
<h2 id="35-死锁">3.5 死锁</h2>
<p>另外，使用<code>synchronized</code>还需要注意的是有可能造成死锁的问题，先来看一下造成死锁可能的原因。</p>
<h3 id="351-死锁成因">3.5.1 死锁成因</h3>
<ul>
<li>交叉锁导致程序死锁：比如线程A持有R1的锁等待R2的锁，线程B持有R2的锁等待R1的锁</li>
<li>内存不足：比如两个线程T1和T2，T1已获取10MB内存，T2获取了15MB内存，T1和T2都需要获取30MB内存才能工作，但是剩余可用的内存为10MB，这样两个线程都在等待彼此释放内存资源</li>
<li>一问一答式的数据交换：服务器开启某个端口，等待客户端访问，客户端发送请求后，服务器因某些原因错过了客户端请求，导致客户端等待服务器回应，而服务器等待客户端发送请求</li>
<li>死循环引起的死锁：比较常见，使用<code>jstack</code>等工具看不到死锁，但是程序不工作，<code>CPU</code>占有率高，这种死锁也叫系统假死，难以排查和重现</li>
</ul>
<h3 id="352-例子">3.5.2 例子</h3>
<pre><code class="language-java">public class Main {
    private final Object MUTEX_READ = new Object();
    private final Object MUTEX_WRITE = new Object();

    public void read(){
        synchronized (MUTEX_READ){
            synchronized (MUTEX_WRITE){
            }
        }
    }

    public void write(){
        synchronized (MUTEX_WRITE){
            synchronized (MUTEX_READ){
            }
        }
    }

    public static void main(String[] args) throws InterruptedException {
        Main m = new Main();
        new Thread(()-&gt;{
            while (true){
                m.read();
            }
        }).start();
        new Thread(()-&gt;{
            while (true){
                m.write();
            }
        }).start();
    }
}
</code></pre>
<p>两个线程分别占有<code>MUTEX_READ</code>/<code>MUTEX_WRITE</code>，同时等待另一个线程释放<code>MUTEX_WRITE</code>/<code>MUTEX_READ</code>，这就是交叉锁造成的死锁。</p>
<h3 id="353-排查">3.5.3 排查</h3>
<p>使用<code>jps</code>找到进程后，通过<code>jstack</code>查看：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20210509221644115.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>可以看到明确的提示找到了1个死锁，<code>Thread-0</code>等待被<code>Thread-1</code>占有的<code>monitor</code>，而<code>Thread-1</code>等待被<code>Thread-0</code>占有的<code>monitor</code>。</p>
<h2 id="36-两个特殊的monitor">3.6 两个特殊的<code>monitor</code></h2>
<p>这里介绍两个特殊的<code>monitor</code>：</p>
<ul>
<li><code>this monitor</code></li>
<li><code>class monitor</code></li>
</ul>
<h3 id="361-this-monitor">3.6.1 <code>this monitor</code></h3>
<p>先上一段代码：</p>
<pre><code class="language-java">public class Main {
    public synchronized void method1(){
        System.out.println(Thread.currentThread().getName()+&quot; method1&quot;);
        try{
            TimeUnit.MINUTES.sleep(5);
        }catch (InterruptedException e){
            e.printStackTrace();
        }
    }

    public synchronized void method2(){
        System.out.println(Thread.currentThread().getName()+&quot; method2&quot;);
        try{
            TimeUnit.MINUTES.sleep(5);
        }catch (InterruptedException e){
            e.printStackTrace();
        }
    }

    public static void main(String[] args) throws InterruptedException {
        Main m = new Main();
        new Thread(m::method1).start();
        new Thread(m::method2).start();
    }
}
</code></pre>
<p>运行之后可以发现，只有一行输出，也就是说，只是运行了其中一个方法，另一个方法根本没有执行，使用<code>jstack</code>可以发现：</p>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20210509222610580.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>一个线程处于休眠中，而另一个线程处于阻塞中。而如果将<code>method2()</code>修改如下：</p>
<pre><code class="language-java">public void method2(){
    synchronized (this) {
        System.out.println(Thread.currentThread().getName() + &quot; method2&quot;);
        try {
            TimeUnit.MINUTES.sleep(5);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}
</code></pre>
<p>效果是一样的。也就是说，在方法上使用<code>synchronized</code>，等价于<code>synchronized(this)</code>。</p>
<h3 id="362-class-monitor">3.6.2 <code>class monitor</code></h3>
<p>把上面的代码中的方法修改为静态方法：</p>
<pre><code class="language-java">public class Main {
    public static synchronized void method1() {
        System.out.println(Thread.currentThread().getName() + &quot; method1&quot;);
        try {
            TimeUnit.MINUTES.sleep(5);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    public static synchronized void method2() {
        System.out.println(Thread.currentThread().getName() + &quot; method2&quot;);
        try {
            TimeUnit.MINUTES.sleep(5);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) throws InterruptedException {
        new Thread(Main::method1).start();
        new Thread(Main::method2).start();
    }
}
</code></pre>
<p>运行之后可以发现输出还是只有一行，也就是说只运行了其中一个方法，<code>jstack</code>分析也类似：</p>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20210509223432245.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>而如果将<code>method2()</code>修改如下：</p>
<pre><code class="language-java">public static void method2() {
    synchronized (Main.class) {
        System.out.println(Thread.currentThread().getName() + &quot; method2&quot;);
        try {
            TimeUnit.MINUTES.sleep(5);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}
</code></pre>
<p>可以发现输出还是一致，也就是说，在静态方法上的<code>synchronized</code>，等价于<code>synchronized(XXX.class)</code>。</p>
<h3 id="363-总结">3.6.3 总结</h3>
<ul>
<li><code>this monitor</code>：在成员方法上的<code>synchronized</code>，就是<code>this monitor</code>，等价于在方法中使用<code>synchronized(this)</code></li>
<li><code>class monitor</code>：在静态方法上的<code>synchronized</code>，就是<code>class monitor</code>，等价于在静态方法中使用<code>synchronized(XXX.class)</code></li>
</ul>
<h1 id="4-threadgroup">4 <code>ThreadGroup</code></h1>
<h2 id="41-简介">4.1 简介</h2>
<p>无论什么情况下，一个新创建的线程都会加入某个<code>ThreadGroup</code>中：</p>
<ul>
<li>如果新建线程没有指定<code>ThreadGroup</code>，默认就是<code>main</code>线程所在的<code>ThreadGroup</code></li>
<li>如果指定了<code>ThreadGroup</code>，那么就加入该<code>ThreadGroup</code>中</li>
</ul>
<p><code>ThreadGroup</code>中存在父子关系，一个<code>ThreadGroup</code>可以存在子<code>ThreadGroup</code>。</p>
<h2 id="42-创建">4.2 创建</h2>
<p>创建<code>ThreadGroup</code>可以直接通过构造方法创建，构造方法有两个，一个是直接指定名字（<code>ThreadGroup</code>为<code>main</code>线程的<code>ThreadGroup</code>），一个是带有父<code>ThreadGroup</code>与名字的构造方法：</p>
<pre><code class="language-java">ThreadGroup group1 = new ThreadGroup(&quot;name&quot;);
ThreadGroup group2 = new ThreadGroup(group1,&quot;name2&quot;);
</code></pre>
<p>完整例子：</p>
<pre><code class="language-java">public static void main(String[] args) throws InterruptedException {
    ThreadGroup group1 = new ThreadGroup(&quot;name&quot;);
    ThreadGroup group2 = new ThreadGroup(group1,&quot;name2&quot;);
    System.out.println(group2.getParent() == group1);
    System.out.println(group1.getParent().getName());
}
</code></pre>
<p>输出结果：</p>
<pre><code class="language-bash">true
main
</code></pre>
<h2 id="43-enumerate">4.3 <code>enumerate()</code></h2>
<p><code>enumerate()</code>可用于<code>Thread</code>和<code>ThreadGroup</code>的复制，因为一个<code>ThreadGroup</code>可以加入若干个<code>Thread</code>以及若干个子<code>ThreadGroup</code>，使用该方法可以方便地进行复制。方法描述如下：</p>
<ul>
<li><code>public int enumerate(Thread [] list)</code></li>
<li><code>public int enumerate(Thread [] list, boolean recurse)</code></li>
<li><code>public int enumerate(ThreadGroup [] list)</code></li>
<li><code>public int enumerate(ThreadGroup [] list, boolean recurse)</code></li>
</ul>
<p>上述方法会将<code>ThreadGroup</code>中的活跃线程/<code>ThreadGroup</code>复制到<code>Thread</code>/<code>ThreadGroup</code>数组中，布尔参数表示是否开启递归复制。</p>
<p>例子如下：</p>
<pre><code class="language-java">public static void main(String[] args) throws InterruptedException {
    ThreadGroup myGroup = new ThreadGroup(&quot;MyGroup&quot;);
    Thread thread = new Thread(myGroup,()-&gt;{
        while (true){
            try{
                TimeUnit.SECONDS.sleep(1);
            }catch (InterruptedException e){
                e.printStackTrace();
            }
        }
    },&quot;MyThread&quot;);
    thread.start();
    TimeUnit.MILLISECONDS.sleep(1);
    ThreadGroup mainGroup = currentThread().getThreadGroup();
    Thread[] list = new Thread[mainGroup.activeCount()];
    int recurseSize = mainGroup.enumerate(list);
    System.out.println(recurseSize);
    recurseSize = mainGroup.enumerate(list,false);
    System.out.println(recurseSize);
}
</code></pre>
<p>后一个输出比前一个少1，因为不包含<code>myGroup</code>中的线程（递归设置为<code>false</code>）。需要注意的是，<code>enumerate()</code>获取的线程仅仅是一个预估值，并不能百分百地保证当前<code>group</code>的活跃线程，比如调用复制之后，某个线程结束了生命周期或者新的线程加入进来，都会导致数据不准确。另外，返回的<code>int</code>值相较起<code>Thread[]</code>的长度更为真实，因为<code>enumerate</code>仅仅将当前活跃的线程分别放进数组中，而返回值<code>int</code>代表的是真实的数量而不是数组的长度。</p>
<h2 id="44-其他api">4.4 其他<code>API</code></h2>
<ul>
<li><code>activeCount()</code>：获取<code>group</code>中活跃的线程，估计值</li>
<li><code>activeGroupCount()</code>：获取<code>group</code>中活跃的子<code>group</code>，也是一个近似值，会递归获取所有的子<code>group</code></li>
<li><code>getMaxPriority()</code>：用于获取<code>group</code>的优先级，默认情况下，<code>group</code>的优先级为10，且所有线程的优先级不得大于线程所在<code>group</code>的优先级</li>
<li><code>getName()</code>：获取<code>group</code>名字</li>
<li><code>getParent()</code>：获取父<code>group</code>，如果不存在返回<code>null</code></li>
<li><code>list()</code>：一个输出方法，递归输出所有活跃线程信息到控制台</li>
<li><code>parentOf(ThreadGroup g)</code>：判断当前<code>group</code>是不是给定<code>group</code>的父<code>group</code>，如果给定的<code>group</code>是自己本身，也会返回<code>true</code></li>
<li><code>setMaxPriority(int pri)</code>：指定<code>group</code>的最大优先级，设定后也会改变所有子<code>group</code>的最大优先级，另外，修改优先级后会出现线程优先级大于<code>group</code>优先级的情况，比如线程优先级为10，设置<code>group</code>优先级为5后，线程优先级就大于<code>group</code>优先级，但是新加入的线程优先级必须不能大于<code>group</code>优先级</li>
<li><code>interrupt()</code>：导致所有的活跃线程被中断，递归调用线程的<code>interrupt()</code></li>
<li><code>destroy()</code>：如果没有任何活跃线程，调用后在父<code>group</code>中将自己移除</li>
<li><code>setDaemon(boolean daemon)</code>：设置为守护<code>ThreadGroup</code>后，如果该<code>ThreadGroup</code>没有任何活跃线程，自动被销毁</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第330期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-330-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-330-qi/">
        </link>
        <updated>2021-05-09T17:47:47.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>减肥就是要向妈妈证明，不光胖找不到对象，瘦也找不到！</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>寒随一夜去，春逐五更来。<br>
——史青《应诏赋得除夜》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>我们的时代还没到来，有的人死后方生。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1620664870513.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>用一个数组存，保存两次遍历的长度，比较即可：</p>
<pre><code class="language-java">public class Solution {
    private int [] arr = new int[201];
    private int len1 = 0;
    private int len2 = 0;

    public boolean leafSimilar(TreeNode root1, TreeNode root2) {
        f1(root1);
        f2(root2);
        return len1 == len2;
    }

    private void f1(TreeNode root){
        if(root != null){
            if(root.left == null &amp;&amp; root.right == null){
                arr[len1++] = root.val;
            }
            f1(root.left);
            f1(root.right);
        }
    }

    private void f2(TreeNode root){
        if(root != null){
            if(root.left == null &amp;&amp; root.right == null){
                if(arr[len2] == root.val){
                    ++len2;
                }else{
                    if(len2 == len1){
                        ++len2;
                    }
                    return;
                }
            }
            f2(root.left);
            f2(root.right);
        }
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1620664885369.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第329期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-329-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-329-qi/">
        </link>
        <updated>2021-05-09T05:04:14.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>突然发现，起床第一件事是摸手机，睡前最后一件事是放下手机。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>有孙母未去，出入无完裙。<br>
——杜甫《石壕吏》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>幸福的家庭都是相似的，不幸的家庭各有各的不幸。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1620536965623.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>一开始直接暴力超时：</p>
<pre><code class="language-java">import java.util.*;

public class Solution {

    private final PriorityQueue&lt;Node&gt; queue = new PriorityQueue&lt;&gt;();
    private final List&lt;Integer&gt; list = new ArrayList&lt;&gt;();
    private int m;
    private int k;

    public int minDays(int[] bloomDay, int m, int k) {
        this.m = m;
        this.k = k;
        int n = bloomDay.length;
        long target = (long) m * k;
        if (target &gt; n) {
            return -1;
        }
        for (int i = 0; i &lt; n; i++) {
            queue.add(new Node(bloomDay[i], i));
        }
        int bloomNum = 0;
        int day = -1;
        while (!queue.isEmpty()) {
            day = queue.peek().day;
            Node temp;
            while ((temp = queue.peek()) != null) {
                if (temp.day == day) {
                    list.add(temp.index);
                    queue.remove();
                    ++bloomNum;
                }else{
                    break;
                }
            }
            if (bloomNum &gt;= target) {
                if (check()) {
                    break;
                }
            }
        }
        return day;
    }

    private boolean check() {
        int bloomNum = 0;
        List&lt;Integer&gt; list = new ArrayList&lt;&gt;(this.list);
        list.sort(Comparator.naturalOrder());
        for (int i = 0; i &lt; list.size(); i++) {
            int j;
            int cur = list.get(i);
            for (j = cur+1;j&lt;=cur+k-1 &amp;&amp; list.contains(j);++j){
            }
            if(j &gt; cur+k-1){
                ++bloomNum;
                for (j = cur;j&lt;=cur+k-1;++j){
                    list.remove((Object)j);
                }
                i = -1;
            }
            if(bloomNum == m){
                return true;
            }
        }

        return false;
    }

    private static class Node implements Comparable&lt;Node&gt; {
        int day;
        int index;

        public Node(int day, int index) {
            this.day = day;
            this.index = index;
        }

        @Override
        public int compareTo(Node node) {
            if (node == this) {
                return 0;
            }
            if (this.day &lt; node.day) {
                return -1;
            } else if (this.day &gt; node.day) {
                return 1;
            }
            return 0;
        }
    }
}
</code></pre>
<p>然后看了题解才知道用二分，加上自己的极致优化，成功打败了最快的12ms：</p>
<pre><code class="language-java">public class Solution {

    private int[] bloomDay;

    public int minDays(int[] bloomDay, int m, int k) {
        if (m * k &gt; (this.bloomDay = bloomDay).length) {
            return -1;
        }

        int low = 1;
        int high = 1;
        for (int day : bloomDay) {
            if (day &gt; high) {
                high = day;
            }
        }

        while (low &lt; high) {
            int mid = low + ((high - low) &gt;&gt; 1);
            if (check(mid, m, k)) {
                high = mid;
            } else {
                low = mid + 1;
            }
        }
        return low;
    }

    private boolean check(int day, int m, int k) {
        int flowers = 0;
        int[] bloomDay = this.bloomDay;
        int n = bloomDay.length;

        for (int i = 0; i &lt; n; ++i) {
            if (bloomDay[i] &lt;= day) {
                if (++flowers == k) {
                    if (--m == 0) {
                        return true;
                    }
                    flowers = 0;
                }
            } else {
                if (i + m * k &gt; n) {
                    return false;
                }
                flowers = 0;
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1620537021276.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="https://2293736867.github.io/post-images/1620537057255.png" alt="" loading="lazy"></figure>
<h1 id="母亲节">母亲节</h1>
<p>今天是2021年5月9日，也就是五月的第二个周日，换句话说，是母亲节。</p>
<p>这里祝天底下的母亲节日快乐！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[解决druid在OpenJDK11+Gradle中的依赖问题]]></title>
        <id>https://2293736867.github.io/post/jie-jue-druid-zai-openjdk11gradle-zhong-de-yi-lai-wen-ti/</id>
        <link href="https://2293736867.github.io/post/jie-jue-druid-zai-openjdk11gradle-zhong-de-yi-lai-wen-ti/">
        </link>
        <updated>2021-05-08T12:14:30.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-问题描述">1 问题描述</h1>
<p>环境<code>OpenJDK 11</code>+<code>Gradle</code>，直接在<code>build.gradle</code>中引入<code>druid</code>的依赖，报错如下：</p>
<pre><code class="language-bash">'dependencies.dependency.systemPath' for com.sun:tools:jar must specify an absolute path but is ${project.basedir}/lib/openjdk-1.8-tools.jar in com.alibaba:druid:1.2.6
'dependencies.dependency.systemPath' for com.sun:jconsole:jar must specify an absolute path but is ${project.basedir}/lib/openjdk-1.8-jconsole.jar in com.alibaba:druid:1.2.6
</code></pre>
<h1 id="2-原因分析">2 原因分析</h1>
<p>具体原因的话在<a href="https://github.com/alibaba/druid/issues/3060">issue</a>中可以知道，其实就是没有兼容<code>JDK11</code>：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20210508191003854.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>既然运行没有问题，那么就手动解决编译问题好了。</p>
<h1 id="3-问题解决">3 问题解决</h1>
<p>根据<code>IDEA</code>的错误提示（具体因<code>druid</code>版本而异）：</p>
<pre><code class="language-bash">~/.gradle/caches/modules-2/files-2.1/com.alibaba/druid/1.2.6/c57198d77a31adf5bd36d35f9b12dc936b732587/druid-1.2.6.pom
</code></pre>
<p>修改提示中的<code>pom</code>文件：</p>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20210508191212686.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>把上面的两个包注释掉就可以了，在<code>1.2.6</code>版本的<code>druid</code>中，修改<code>pom</code>文件的第703行，添加注释即可：</p>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20210508191303886.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>再次重新导入依赖可以看到没有问题了：</p>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20210508191408437.png" alt="在这里插入图片描述" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[解决AUR无法正常升级WebStorm2021.1.1的问题]]></title>
        <id>https://2293736867.github.io/post/jie-jue-aur-wu-fa-zheng-chang-sheng-ji-webstorm202111-de-wen-ti/</id>
        <link href="https://2293736867.github.io/post/jie-jue-aur-wu-fa-zheng-chang-sheng-ji-webstorm202111-de-wen-ti/">
        </link>
        <updated>2021-05-08T07:19:53.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-问题描述">1 问题描述</h1>
<p>环境<code>Manjaro</code>+<code>paru</code>，升级<code>WebStorm</code>的时候，错误提示如下：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20210508150547587.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="2-原因">2 原因</h1>
<p>这个问题在<code>Arch</code>的<code>AUR</code>官网上<a href="https://aur.archlinux.org/packages/webstorm/">有讨论</a>：</p>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20210508150825742.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>就是<code>PKGBUILD</code>的文件中的版本号出错了，把版本号修改回来就可以了。</p>
<h1 id="3-解决方案">3 解决方案</h1>
<p>上面说了解决方案就是找到<code>WebStorm</code>的<code>PKGBUILD</code>版本并进行修改，<code>PKGBUILD</code>根据包管理工具的不同位于不同的缓存文件夹下，这里列举两个常见的<code>AUR</code>助手的缓存位置：</p>
<ul>
<li><code>yay</code>：<code>~/.cache/yay</code></li>
<li><code>paru</code>：<code>~/.cache/paru</code></li>
</ul>
<p>笔者使用的是<code>paru</code>，进入<code>~/.cache/paru/webstorm</code>，修改<code>PKGBUILD</code>，把版本从错误提示信息的<code>211.7142.468</code>改为<code>211.7142.46</code>：</p>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/2021050815155561.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20210508151737504.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>修改完后重新安装：</p>
<pre><code class="language-bash">paru -S webstorm
</code></pre>
<p>这样就成功了：</p>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/20210508151821713.png" alt="在这里插入图片描述" loading="lazy"></figure>
]]></content>
    </entry>
</feed>