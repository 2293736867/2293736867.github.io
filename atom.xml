<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://2293736867.github.io</id>
    <title>氷泠&apos;s blog</title>
    <updated>2021-05-04T02:06:55.319Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://2293736867.github.io"/>
    <link rel="self" href="https://2293736867.github.io/atom.xml"/>
    <subtitle>几百遍，重复了几百遍
重复的情绪重复的熬过想你的夜</subtitle>
    <logo>https://2293736867.github.io/images/avatar.png</logo>
    <icon>https://2293736867.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 氷泠&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[每日分享 第324期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-324-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-324-qi/">
        </link>
        <updated>2021-05-03T16:59:58.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>能有钱解决的问题都不是问题，但如何有钱，才是你最大的问题。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>北风吹雪四更初，嘉瑞天教及岁除。<br>
——陆游《除夜雪》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>你搅散一池星光成为我的月亮。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1620061928390.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>有点复杂，三维<code>dp</code>，其中<code>dp[i][j][k]</code>表示：</p>
<ul>
<li>第<code>i</code>个房子</li>
<li>目前已形成<code>j</code>个街区</li>
<li>第<code>i</code>个房子的颜色为<code>k</code></li>
<li>符合以上三种条件下所花费的最小费用</li>
</ul>
<p>转移方程需要根据当前房子有没有涂色去讨论：</p>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1620093981955.png" alt="" loading="lazy"></figure>
<p>代码：</p>
<pre><code class="language-java">public class Solution {
    public int minCost(int[] houses, int[][] cost, int m, int n, int target) {
        int[][][] dp = new int[m][target + 1][n + 1];
        for (int i = 0; i &lt; m; i++) {
            for (int j = 0; j &lt;= target; j++) {
                for (int k = 0; k &lt;= n; k++) {
                    dp[i][j][k] = 0x3f3f3f3f;
                }
            }
        }

        if (houses[0] == 0) {
            System.arraycopy(cost[0], 0, dp[0][1], 1, n);
        } else {
            dp[0][1][houses[0]] = 0;
        }

        for (int i = 1; i &lt; m; i++) {
            if (houses[i] == 0) {
                for (int curColor = 1; curColor &lt;= n; ++curColor) {
                    for (int preColor = 1; preColor &lt;= n; ++preColor) {
                        for (int j = 1; j &lt;= target; j++) {
                            dp[i][j][curColor] = (curColor == preColor ?
                                    Math.min(dp[i][j][curColor], dp[i - 1][j][curColor] + cost[i][curColor - 1]) :
                                    Math.min(dp[i][j][curColor], dp[i - 1][j - 1][preColor] + cost[i][curColor - 1])
                            );
                        }
                    }
                }
            } else {
                int curColor = houses[i];
                for (int preColor = 1; preColor &lt;= n; ++preColor) {
                    for (int j = 1; j &lt;= target; j++) {
                        dp[i][j][curColor] = (curColor == preColor ?
                                Math.min(dp[i][j][curColor], dp[i - 1][j][curColor]) :
                                Math.min(dp[i][j][curColor], dp[i - 1][j - 1][preColor])
                        );
                    }
                }
            }
        }

        int min = dp[m - 1][target][1];
        for (int i = 2; i &lt;= n; i++) {
            if (min &gt; dp[m - 1][target][i]) {
                min = dp[m - 1][target][i];
            }
        }
        return min == 0x3f3f3f3f ? -1 : min;
    }
}
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://2293736867.github.io/post-images/1620093851892.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第323期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-323-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-323-qi/">
        </link>
        <updated>2021-05-02T18:04:43.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>三观没用，你得靠五官。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>参横斗转欲三更，苦雨终风也解晴。<br>
——苏轼《六月二十日夜渡海》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>我本身得不到答案。所以，我希望能够有答出来之物的诞生。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1619978807809.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1619978812784.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JVM学习笔记（七）：Class文件结构]]></title>
        <id>https://2293736867.github.io/post/jvm-xue-xi-bi-ji-qi-class-wen-jian-jie-gou/</id>
        <link href="https://2293736867.github.io/post/jvm-xue-xi-bi-ji-qi-class-wen-jian-jie-gou/">
        </link>
        <updated>2021-05-02T14:17:07.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-来源">1 来源</h1>
<ul>
<li>来源：《Java虚拟机 JVM故障诊断与性能优化》——葛一鸣</li>
<li>章节：第九章</li>
</ul>
<p>本文是第九章的一些笔记整理。</p>
<h1 id="2-概述">2 概述</h1>
<p>本文主要介绍了<code>Class</code>文件的主要组成，包括魔数、版本号、常量池、访问标志等。</p>
<h1 id="3-class文件概览">3 <code>Class</code>文件概览</h1>
<p>根据<code>JVM</code>规范，一个<code>Class</code>文件可以非常严谨地描述为：</p>
<pre><code class="language-java">ClassFile{
	u4             magic;
    u2             minor_version;
    u2             major_version;
    u2             constant_pool_count;
    cp_info        constant_pool[constant_pool_count-1];
    u2             access_flags;
    u2             this_class;
    u2             super_class;
    u2             interfaces_count;
    u2             interfaces[interfaces_count];
    u2             fields_count;
    field_info     fields[fields_count];
    u2             methods_count;
    method_info    methods[methods_count];
    u2             attributes_count;
    attribute_info attributes[attributes_count];
}
</code></pre>
<p>下面会按顺序详细介绍里面的各个字段。</p>
<h1 id="4-魔数">4 魔数</h1>
<p>魔数（<code>Magic Number</code>）作为<code>Class</code>的标志，用来告诉<code>JVM</code>这是一个<code>Class</code>文件，魔数是一个4字节的无符号整数，固定为<code>0xCAFEBABE</code>。如果一个<code>Class</code>文件不以<code>0xCAFEBABE</code>开头，那么会抛出如下错误：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20210501092555377.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p><code>Linux</code>下可以直接使用<code>vim</code>打开<code>class</code>文件进行查看，比如需要打开一个<code>Test.class</code>文件，可以输入如下命令：</p>
<pre><code class="language-bash">vim -b Test.class
:%!xxd
</code></pre>
<p>切换到十六进制后就可以看到魔数了：</p>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20210501092757413.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="5-版本">5 版本</h1>
<p>魔数后面紧跟着<code>Class</code>的小版本和大版本号，这表示当前<code>Class</code>文件是由哪个版本的编译期产生的。小版本和大版本后都是占用两个字节，比如下图：</p>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20210501093335313.png" alt="在这里插入图片描述" loading="lazy"></figure>
<ul>
<li><code>0000</code>是小版本号</li>
<li><code>0037</code>是大版本号，十进制为<code>55</code>，也就是对应<code>JDK 11</code>版本的编译期</li>
</ul>
<h1 id="6-常量池">6 常量池</h1>
<p>在版本号后面，紧跟着就是常量池的数量以及若干个常量池表项：</p>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20210501094528106.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/20210501094538627.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>其中每一个常量池表项都具有标签属性：</p>
<figure data-type="image" tabindex="6"><img src="https://img-blog.csdnimg.cn/20210501095154980.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>对应关系举例如下：</p>
<ul>
<li><code>tag</code>为3：类型为<code>CONSTANT_Integer</code></li>
<li><code>tag</code>为4：类型为<code>CONSTANT_Float</code></li>
</ul>
<p>等等，比如<code>CONSTANT_Integer</code>结构如下：</p>
<pre><code class="language-java">CONSTANT_Integer_info {
    u1 tag;
    u4 bytes;
}
</code></pre>
<p>一个<code>tag</code>加上一个四字节的无符号整数。其他类型大部分类似，篇幅限制，详细请看<a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-4.html#jvms-4.4.1">JVM规范</a>。</p>
<h1 id="7-访问标记">7 访问标记</h1>
<p>访问标记使用两个字节表示，用于表明该类的访问信息，比如<code>public</code>/<code>abstract</code>等，对应关系如下：</p>
<ul>
<li><code>ACC_PUBLIC</code>：<code>0x0001</code>，表示<code>public</code>类</li>
<li><code>ACC_FINAL</code>：<code>0x0010</code>，表示是否为<code>final</code>类</li>
<li><code>ACC_SUPER</code>：<code>0x0020</code>，表示使用增强的方法调用父类的方法</li>
<li><code>ACC_INTERFACE</code>：<code>0x0200</code>，表示是否为接口</li>
<li><code>ACC_ABSTRACT</code>：<code>0x0400</code>，表示是否为抽象类</li>
<li><code>ACC_SYNTHETIC</code>：<code>0x1000</code>，由编译期产生的类，没有源码对应</li>
<li><code>ACC_ANNOTATION</code>：<code>0x2000</code>，表示是否是注释</li>
<li><code>ACC_ENUM</code>：<code>0x4000</code>，表示是否为枚举</li>
</ul>
<h1 id="8-当前类-父类和接口">8 当前类、父类和接口</h1>
<p>格式如下：</p>
<pre><code class="language-java">u2             this_class;                                    
u2             super_class;
u2             interfaces_count;
u2             interfaces[interfaces_count];
</code></pre>
<p>其中<code>this_class</code>与<code>super_class</code>都是两个字节的无符号整数，指向常量池中的一个<code>CONSTANT_Class</code>，表示当前的类型以及父类。另外，由于一个类可以实现多个接口，因此需要以数组形式保存多个接口的索引，如果没有实现任何接口，则<code>interfaces_count</code>为0。</p>
<h1 id="9-字段">9 字段</h1>
<p>字段的格式如下：</p>
<pre><code class="language-java">u2             fields_count;
field_info     fields[fields_count];
</code></pre>
<p><code>fields_count</code>是一个2字节的无符号整数，字段数量之后是具体的字段信息，每个字段都是一个<code>field_info</code>的结构，如下所示：</p>
<pre><code class="language-java">field_info {
    u2             access_flags;                         //访问标记，类似于类的访问标记，可以表示public/private/static等等
    u2             name_index;                           //两字节整数，指向常量池中的CONSTANT_Utf8
    u2             descriptor_index;                     //也是两字节整数，用于描述字段类型，也指向常量池中的CONSTANT_Utf8
    u2             attributes_count;                     //属性数量
    attribute_info attributes[attributes_count];         //属性，比如存储初始化值，一些注释信息等，需要使用attribute_info
}

attribute_info {
    u2 attribute_name_index;                             //属性名字，指向常量池的索引
    u4 attribute_length;                                 //属性长度
    u1 info[attribute_length];                           //字节数组表示的信息
}
</code></pre>
<h1 id="10-方法">10 方法</h1>
<h2 id="101-方法基本结构">10.1 方法基本结构</h2>
<p>方法的格式如下：</p>
<pre><code class="language-java">u2             methods_count;
method_info    methods[methods_count];
</code></pre>
<p>其中每一个<code>method_info</code>结构表示一个方法：</p>
<pre><code class="language-java">method_info {
    u2             access_flags;                            //访问标记，标记方法为public/private等等
    u2             name_index;                              //方法名称，一个指向常量池的索引
    u2             descriptor_index;                        //方法描述符，也是一个指向常量符的索引
    u2             attributes_count;                        //属性数量
    attribute_info attributes[attributes_count];            //属性，和字段类似，方法也可以携带属性，一个属性数量+一个属性描述数组
}
</code></pre>
<h2 id="102-code属性">10.2 <code>Code</code>属性</h2>
<p>方法的主要内容存放在属性中，在属性里面最重要的一个属性就是<code>Code</code>，<code>Code</code>存放着方法的字节码等信息，结构如下：</p>
<pre><code class="language-java">Code_attribute {
    u2 attribute_name_index;                      //属性名称，指向常量池的索引
    u4 attribute_length;                          //属性长度，不包括前6字节（u2+u4）
    u2 max_stack;                                 //操作数栈最大深度
    u2 max_locals;                                //局部变量表的最大值
    u4 code_length;                               //字节码长度
    u1 code[code_length];                         //字节码内容本身
    u2 exception_table_length;                    //异常处理表长度
    {   u2 start_pc;                              //四个字段表示在start_pc到end_pc两个偏移量之间
        u2 end_pc;                                //如果遇到了catch_type指向的异常
        u2 handler_pc;                            //代码就跳转到handler_pc位置执行
        u2 catch_type;                            
    } exception_table[exception_table_length];    //异常表
    u2 attributes_count;
    attribute_info attributes[attributes_count];
}
</code></pre>
<p><code>Code</code>属性本身也包含其他属性以进一步存储一些额外信息，主要包括：</p>
<ul>
<li><code>LineNumberTable</code></li>
<li><code>LocalVariableTable</code></li>
<li><code>StackMapTable</code></li>
</ul>
<h3 id="1021-linenumbertable">10.2.1 <code>LineNumberTable</code></h3>
<p><code>LineNumberTable</code>用于记录字节码偏移量和行号的对应关系，结构如下：</p>
<pre><code class="language-java">LineNumberTable_attribute {
    u2 attribute_name_index;                             //指向常量池的索引
    u4 attribute_length;                                 //属性长度
    u2 line_number_table_length;                         //表项记录条数
    {   u2 start_pc;                                     //字节码偏移量
        u2 line_number;	                                 //字节码偏移量对应的行号
    } line_number_table[line_number_table_length];       //表数组，每一个元素对应的是一个&lt;start_pc,line_number&gt;元组
}
</code></pre>
<h3 id="1022-localvariabletable">10.2.2 <code>LocalVariableTable</code></h3>
<p>这个属性也叫局部变量表，记录了一个方法中所有的局部变量，结构如下：</p>
<pre><code class="language-java">LocalVariableTable_attribute {
    u2 attribute_name_index;                                     //当前属性名字，指向常量池的索引
    u4 attribute_length;                                         //属性长度
    u2 local_variable_table_length;                              //局部变量表的表项条目
    {   u2 start_pc;                                             //当前局部变量开始位置
        u2 length;                                               //当前局部变量长度（可用于计算结束位置）
        u2 name_index;                                           //局部变量名称，指向常量池的索引
        u2 descriptor_index;                                     //局部变量的类型描述，指向常量池的索引
        u2 index;                                                //局部变量在当前栈帧的局部变量表中的槽位
    } local_variable_table[local_variable_table_length];         
}
</code></pre>
<h3 id="1023-stackmaptable">10.2.3 <code>StackMapTable</code></h3>
<p><code>StackMapTable</code>中含有若干个栈映射帧（<code>Stack Map Frame</code>）的数据，不包含运行时所需要的信息，仅用作<code>Class</code>文件的类型校验，结构如下：</p>
<pre><code class="language-java">StackMapTable_attribute {
    u2              attribute_name_index;                         //常量池索引，恒为&quot;StackMapTable&quot;
    u4              attribute_length;                             //属性长度
    u2              number_of_entries;                            //栈映射帧的数量
    stack_map_frame entries[number_of_entries];                   //具体的栈映射帧
}

union stack_map_frame {                                           //每个栈映射帧被定义为一个枚举值，取值如下
    same_frame;                                                   //具体每个取值的意义可以查看JVM规范
    same_locals_1_stack_item_frame;                               //https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-4.html#jvms-4.7.4
    same_locals_1_stack_item_frame_extended;
    chop_frame;
    same_frame_extended;
    append_frame;
    full_frame;
}
</code></pre>
<p>每个栈映射帧是为了说明在一个特定的字节码偏移位置上，系统的数据类型是什么，包括局部变量表的类型和操作数栈的类型。</p>
<h1 id="11-附录asm简单使用">11 附录：<code>ASM</code>简单使用</h1>
<p><code>ASM</code>是一个<code>Java</code>字节码操作库，很多著名的库都依赖于该库，比如<code>AspectJ</code>、<code>CGLIB</code>等等。但是<code>ASM</code>的性能远远超过<code>CGLIB</code>等高层字节码库，因为<code>ASM</code>更加接近底层，使用更为灵活且功能更为强大。</p>
<p>下面是一个简单的使用<code>ASM</code>输出<code>Hello World</code>的例子：</p>
<pre><code class="language-java">package com.company;

import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.Opcodes;

public class Main extends ClassLoader implements Opcodes {
    public static void main(String[] args) throws Exception{
    	//创建ClassWriter，指定COMPUTE_MAXS和COMPUTE_FRAMES，分别表示计算最大局部变量表以及最深操作数栈
        ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_MAXS | ClassWriter.COMPUTE_FRAMES);
        //通过ClassWriter设置类的基本信息，比如public访问标记，类名为Example
        cw.visit(V11,ACC_PUBLIC,&quot;Example&quot;,null,&quot;java/lang/Object&quot;,null);
        //生成Example的构造方法
        MethodVisitor mw = cw.visitMethod(ACC_PUBLIC ,&quot;&lt;init&gt;&quot;,&quot;()V&quot;,null,null);
        mw.visitVarInsn(ALOAD,0);
        mw.visitMethodInsn(INVOKESPECIAL,&quot;java/lang/Object&quot;,&quot;&lt;init&gt;&quot;,&quot;()V&quot;,false);
        mw.visitInsn(RETURN);
        mw.visitMaxs(0,0);
        mw.visitEnd();

		//生成public static void main(String []args)方法，并生成了main()方法的字节码
		//要求运行时调用System.out.println()，并输出&quot;Hello world&quot;：
        mw = cw.visitMethod(ACC_PUBLIC+ACC_STATIC,&quot;main&quot;,&quot;([Ljava/lang/String;)V&quot;,null,null);
        mw.visitFieldInsn(GETSTATIC,&quot;java/lang/System&quot;,&quot;out&quot;,&quot;Ljava/io/PrintStream;&quot;);
        mw.visitLdcInsn(&quot;Hello world!&quot;);
        mw.visitMethodInsn(INVOKEVIRTUAL,&quot;java/io/PrintStream&quot;,&quot;println&quot;,&quot;(Ljava/lang/String;)V&quot;,false);
        mw.visitInsn(RETURN);
        mw.visitMaxs(0,0);
        mw.visitEnd();

		//获取二进制表示
        byte[] code = cw.toByteArray();
        Main m = new Main();
        //将class文件载入系统，通过反射调用`main()`方法，输出结果
        Class&lt;?&gt; mainClass = m.defineClass(&quot;Example&quot;,code,0,code.length);
        mainClass.getMethods()[0].invoke(null, new Object[]{null});
    }
}
</code></pre>
<figure data-type="image" tabindex="7"><img src="https://img-blog.csdnimg.cn/20210501150243207.png" alt="在这里插入图片描述" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第322期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-322-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-322-qi/">
        </link>
        <updated>2021-05-02T13:52:42.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>凡是不赚钱的，都说自己在创业。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>海棠未雨，梨花先雪，一半春休。<br>
——王雱《眼儿媚·杨柳丝丝弄轻柔》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>我既不想伤害别人，也不想被伤害。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1619963723796.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>哈希统计每个间隙位置，计算间隙数量最大的垂直位置，再用总行数相减：</p>
<pre><code class="language-java">import java.util.*;

public class Solution {
    public int leastBricks(List&lt;List&lt;Integer&gt;&gt; wall) {
        Map&lt;Integer,Integer&gt; map = new HashMap&lt;&gt;();
        int max = 0;
        int n = wall.size();
        for (int i = 0; i &lt; n; i++) {
            List&lt;Integer&gt; l = wall.get(i);
            int sum = 0;
            int len = l.size()-1;
            for (int j = 0; j &lt; len; j++) {
                sum += l.get(j);
                int temp;
                map.put(sum,temp = (map.getOrDefault(sum,0)+1));
                if(temp &gt; max){
                    max = temp;
                }
            }
        }
        return n-max;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1619963711889.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第321期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-321-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-321-qi/">
        </link>
        <updated>2021-05-01T13:31:18.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>放弃这个字，说起来简单，做起来就更简单了。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>夜来小雨新霁，双燕舞风斜。<br>
——万俟咏《诉衷情·送春》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>彼此相互推卸不幸是没有结果的。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1619962296233.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>深搜：</p>
<pre><code class="language-java">import java.util.*;

public class Solution {
    private Map&lt;Integer,Employee&gt; map;
    public int getImportance(List&lt;Employee&gt; employees, int id) {
        map = new HashMap&lt;&gt;(employees.size());
        for(Employee employee:employees){
            map.put(employee.id,employee);
        }
        return f(id);
    }

    private int f(int id){
        int sum = map.get(id).importance;
        for (int i:map.get(id).subordinates){
            sum += f(i);
        }
        return sum;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1619962308238.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JVM学习笔记（六）：锁优化与CAS]]></title>
        <id>https://2293736867.github.io/post/jvm-xue-xi-bi-ji-liu-suo-you-hua-yu-cas/</id>
        <link href="https://2293736867.github.io/post/jvm-xue-xi-bi-ji-liu-suo-you-hua-yu-cas/">
        </link>
        <updated>2021-04-30T05:27:29.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-来源">1 来源</h1>
<ul>
<li>来源：《Java虚拟机 JVM故障诊断与性能优化》——葛一鸣</li>
<li>章节：第八章</li>
</ul>
<p>本文是第八章的一些笔记整理。</p>
<h1 id="2-概述">2 概述</h1>
<p>本文主要讲述了<code>JVM</code>在运行层面和代码层面的锁优化策略，最后介绍了实现无锁的其中一种方法<code>CAS</code>。</p>
<h1 id="3-对象头">3 对象头</h1>
<p><code>JVM</code>中每个对象都有一个对象头，用于保存对象的系统信息，<code>64bit JVM</code>的对象头结构如下图所示：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20210429104615245.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>其中：</p>
<ul>
<li><code>Mark Word</code>由<code>64bit</code>组成，一个功能数据区，可以存放对象的哈希、对象年龄、锁的指针等信息</li>
<li><code>KClass Word</code>在没有开启指针压缩的情况下，<code>64bit</code>组成，但是<code>64bit JVM</code>会默认开启指针压缩（<code>+UseCompressedOops</code>），所以会压缩到<code>32bit</code></li>
</ul>
<p>另外，从图中可以看到，不同的锁对应于不同的<code>Mark Word</code>：</p>
<ul>
<li>无锁：<code>25bit</code>空+<code>31bit</code>哈希值+<code>1bit</code>空+<code>4bit</code>分代年龄+<code>1bit</code>是否偏向锁+<code>2bit</code>锁标记</li>
<li>偏向锁：<code>54bit</code>持有偏向锁的线程<code>ID</code>+<code>2bit</code>偏向时间戳+<code>1bit</code>空+<code>4bit</code>分代年龄+<code>1bit</code>是否偏向锁+<code>2bit</code>锁标记</li>
<li>轻量锁：<code>62bit</code>栈中锁记录指针+<code>2bit</code>锁标记</li>
<li>重量锁：<code>62bit</code>重量级锁指针+<code>2bit</code>锁标记</li>
</ul>
<p><code>JVM</code>如何区分锁主要看两个字段：<code>biased_lock</code>与<code>lock</code>，对应关系如下：</p>
<ul>
<li><code>biased_lock=0 lock=00</code>：轻量级锁</li>
<li><code>biased_lock=0 lock=01</code>：无锁</li>
<li><code>biased_lock=0 lock=10</code>：重量级锁</li>
<li><code>biased_lock=0 lock=11</code>：<code>GC</code>标记</li>
<li><code>biased_lock=1 lock=01</code>：偏向锁</li>
</ul>
<h1 id="4-锁的运行时优化">4 锁的运行时优化</h1>
<p>很多时候<code>JVM</code>都会对线程竞争的操作在<code>JVM</code>层面进行优化，尽可能解决竞争问题，也会试图消除不必要的竞争，实现的方法包括：</p>
<ul>
<li>偏向锁</li>
<li>轻量级锁</li>
<li>重量级锁</li>
<li>自旋锁</li>
<li>锁消除</li>
</ul>
<h2 id="41-偏向锁jdk15默认关闭">4.1 偏向锁（<code>JDK15</code>默认关闭）</h2>
<h3 id="411-简介">4.1.1 简介</h3>
<p>偏向锁是<code>JDK 1.6</code>提出的一种锁优化方式，核心思想是，如果线程没有竞争，则取消已经取得锁的线程同步操作，也就是说，某个线程获取到锁后，锁就会进入偏向模式，当线程再次请求该锁时，无需再次进行相关的同步操作，从而节省操作时间。而在此期间如果有其他线程进行了锁请求，则锁退出偏向模式。</p>
<p>开启偏向锁的参数是<code>-XX:+UseBiasedLocking</code>，处于偏向锁时，<code>Mark Word</code>会记录获得锁的线程（<code>54bit</code>），通过该信息可以判断当前线程是否持有偏向锁。</p>
<p>注意<code>JDK15</code>后默认关闭了偏向锁以及禁用了相关选项，可以参考<a href="https://bugs.java.com/bugdatabase/view_bug.do?bug_id=JDK-8231264">JDK-8231264</a>。</p>
<h3 id="412-加锁流程">4.1.2 加锁流程</h3>
<p>偏向锁的加锁过程如下：</p>
<ul>
<li>第一步：访问<code>Mark Word</code>中的<code>biased_lock</code>是否设置为<code>1</code>，<code>lock</code>是否设置为<code>01</code>，确认为可偏向状态，如果<code>biased_lock</code>为<code>0</code>，则是无锁状态，直接通过<code>CAS</code>操作竞争锁，如果失败，执行第四步</li>
<li>第二步：如果为可偏向状态，测试线程<code>ID</code>是否指向当前线程，如果是，到达第五步，否则到达第三步</li>
<li>第三步：如果线程<code>ID</code>没有指向当前线程，通过<code>CAS</code>操作竞争锁，如果成功，将<code>Mark Word</code>中的线程<code>ID</code>设置为当前线程<code>ID</code>，然后执行第五步，如果失败，执行第四步</li>
<li>第四步：如果<code>CAS</code>获取偏向锁失败，表示有竞争，开始锁撤销</li>
<li>第五步：执行同步代码</li>
</ul>
<h3 id="413-例子">4.1.3 例子</h3>
<p>下面是一个简单的例子：</p>
<pre><code class="language-java">public class Main {
    private static List&lt;Integer&gt; list = new Vector&lt;&gt;();
    public static void main(String[] args){
        long start = System.nanoTime();
        for (int i = 0; i &lt; 1_0000_0000; i++) {
            list.add(i);
        }
        long end = System.nanoTime();
        System.out.println(end-start);
    }
}
</code></pre>
<p><code>Vector</code>的<code>add</code>是一个<code>synchronized</code>方法，使用如下参数测试：</p>
<pre><code class="language-bash">-XX:BiasedLockingStartupDelay=0 # 偏向锁启动时间，设置为0表示立即启动
-XX:+UseBiasedLocking # 开启偏向锁
</code></pre>
<p>输出如下：</p>
<pre><code class="language-bash">1664109780
</code></pre>
<p>而将偏向锁关闭：</p>
<pre><code class="language-bash">-XX:BiasedLockingStartupDelay=0
-XX:-UseBiasedLocking
</code></pre>
<p>输出如下：</p>
<pre><code class="language-bash">2505048191
</code></pre>
<p>可以看到偏向锁还是对系统性能有一定帮助的，但是需要注意偏向锁在锁竞争激烈的场合没有太强的优化效果，因为大量的竞争会导致持有锁的线程不停地切换，锁很难一直保持在偏向模式，这样不仅仅不能优化性能，反而因为频繁切换而导致性能下降，因此竞争激烈的场合可以尝试使用<code>-XX:-UseBiasedLocking</code>禁用偏向锁。</p>
<h2 id="42-轻量级锁">4.2 轻量级锁</h2>
<h3 id="421-简介">4.2.1 简介</h3>
<p>如果偏向锁失败，那么<code>JVM</code>会让线程申请轻量级锁。轻量级锁在内部使用一个<code>BasicObjectLock</code>的对象实现，该对象内部由：</p>
<ul>
<li>一个<code>BasicLock</code>对象</li>
<li>一个持有该锁的<code>Java</code>对象指针</li>
</ul>
<p>组成。<code>BasicObjectLock</code>对象放置在<code>Java</code>栈的栈帧中，在<code>BasicLock</code>对象还会维护一个叫<code>displaced_header</code>的字段，用于备份对象头部的<code>Mark Word</code>。</p>
<h3 id="422-加锁流程">4.2.2 加锁流程</h3>
<ul>
<li>第一步：通过<code>Mark Word</code>判断是否无锁（<code>biased_lock</code>是否为<code>0</code>且<code>lock</code>为<code>01</code>），如果是无锁，会创建一个叫锁记录（<code>Lock Record</code>）的空间，用于存储当前<code>Mark Word</code>的拷贝</li>
<li>第二步：将对象头的<code>Mark Word</code>复制到锁记录中</li>
<li>第三步：拷贝成功后，使用<code>CAS</code>操作尝试将锁对象<code>Mark Word</code>更新为指向锁记录的指针，并将线程栈帧中的锁记录的<code>owner</code>指向<code>Object</code>的<code>Mark Word</code></li>
<li>第四步：如果操作成功，那么就成功拥有了锁</li>
<li>第五步：如果操作失败，<code>JVM</code>会检查<code>Mark Word</code>是否指向当前线程的栈帧，如果是就说明当前线程已经拥有了这个对象的锁，就可以直接进入同步块继续执行，否则会让当前线程尝试自旋获取锁，自旋到达一定次数后如果还没有获得锁，那么会膨胀为重量级锁</li>
</ul>
<h2 id="43-重量级锁">4.3 重量级锁</h2>
<h3 id="431-简介">4.3.1 简介</h3>
<p>当轻量级锁自旋一定次数后还是无法获取锁，就会膨胀为重量级锁。相比起轻量级锁，<code>Mak Word</code>存放的是指向锁记录的指针，重量级锁中的<code>Mark Word</code>存放的是指向<code>Object Monitor</code>的指针，如下图所示：</p>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20210430103445676.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>（图源见文末）</p>
<p>因为锁记录是线程私有的，不能满足多线程都能访问的需求，因此重量级锁中引入了能线程共享的<code>ObjectMonitor</code>。</p>
<h3 id="432-加锁流程">4.3.2 加锁流程</h3>
<p>初次尝试加锁时，会先<code>CAS</code>尝试修改<code>ObjectMonitor</code>的<code>_owner</code>字段，结果如下：</p>
<ul>
<li>第一种：锁没有其他线程占用，成功获取锁</li>
<li>第二种：锁被其他线程占用，则当前线程重入锁，获取成功</li>
<li>第三种：锁被锁记录占用，而锁记录是线程私有的，也就是属于当前线程的，这样就属于重入，重入次数为1</li>
<li>第四种：都不满足，再次尝试加锁（调用<code>EnterI()</code>）</li>
</ul>
<p>而再次尝试加锁的过程，是一个循环，不断尝试获取锁直到成功为止，流程简述如下：</p>
<ul>
<li>多次尝试获取锁</li>
<li>获取失败把线程包装后放进阻塞队列</li>
<li>再次尝试获取锁</li>
<li>失败后将自己挂起</li>
<li>被唤醒后继续尝试获取锁</li>
<li>成功则退出循环，否则继续</li>
</ul>
<h2 id="44-自旋锁">4.4 自旋锁</h2>
<p>自旋锁可以使线程没有取得锁时不被挂起，而是去执行一个空循环（也就是所谓的自旋），在若干个空循环后如果可以获取锁，则继续执行，如果不能，挂起当前线程。</p>
<p>使用自旋锁后，线程被挂起的概率相对减小，线程执行的连贯性相对加强，因此对于锁竞争不是很激烈、锁占用并发时间很短的并发线程具有一定的积极意义，但是，对于竞争激烈且锁占用时间长的并发线程，自旋等待后仍无法获取锁，还是会被挂起，浪费了自旋时间。</p>
<p>在<code>JDK1.6</code>中提供了<code>-XX:+UseSpinning</code>参数开启自旋锁，但是<code>JDK1.7</code>后，自旋锁参数被取消，<code>JVM</code>不再支持由用户配置自旋锁，自旋锁总是被执行，次数由<code>JVM</code>调整。</p>
<h2 id="45-锁消除">4.5 锁消除</h2>
<h3 id="451-简介">4.5.1 简介</h3>
<p>锁消除就是把不必要的锁给去掉，比如，在一些单线程环境下使用一些线程安全的类，比如<code>StringBuffer</code>，这样就可以基于逃逸分析技术可消除这些不必要的锁，从而提高性能。</p>
<h3 id="452-例子">4.5.2 例子</h3>
<pre><code class="language-java">public class Main {
    private static final int CIRCLE = 200_0000;
    public static void main(String[] args){
        long start = System.nanoTime();
        for (int i = 0; i &lt; CIRCLE; i++) {
            createStringBuffer(&quot;Test&quot;,String.valueOf(i));
        }
        long end = System.nanoTime();
        System.out.println(end-start);
    }

    private static String createStringBuffer(String s1,String s2){
        StringBuffer sb = new StringBuffer();
        sb.append(s1);
        sb.append(s2);
        return sb.toString();
    }
}
</code></pre>
<p>参数：</p>
<pre><code class="language-bash">-XX:+DoEscapeAnalysis
-XX:-EliminateLocks
-Xcomp
-XX:-BackgroundCompilation
-XX:BiasedLockingStartupDelay=0
</code></pre>
<p>输出：</p>
<pre><code class="language-bash">260642198
</code></pre>
<p>而开启锁消除后：</p>
<pre><code class="language-bash">-XX:+DoEscapeAnalysis
-XX:+EliminateLocks
-Xcomp
-XX:-BackgroundCompilation
-XX:BiasedLockingStartupDelay=0
</code></pre>
<p>输出如下：</p>
<pre><code class="language-bash">253101105
</code></pre>
<p>可以看到还是有一定性能提升的，但是提升不大。</p>
<h1 id="5-锁的应用层优化">5 锁的应用层优化</h1>
<p>锁的应用层优化就是在代码层面对锁进行优化，方法包括：</p>
<ul>
<li>减少持有时间</li>
<li>减小粒度</li>
<li>锁分离</li>
<li>锁粗化</li>
</ul>
<h2 id="51-减少持有时间">5.1 减少持有时间</h2>
<p>减少锁持有时间就是尽可能减少某个锁的占用时间，以减少线程互斥时间，比如：</p>
<pre><code class="language-java">public synchronized void method(){
	A();
	B();
	C();
}
</code></pre>
<p>如果只有<code>B()</code>是同步操作，那么可以优化为在必要时进行同步，也就是在执行<code>B()</code>的时候进行同步操作：</p>
<pre><code class="language-java">public void method(){
	A();
	synchronized(this){
		B();
	}
	C();
}
</code></pre>
<h2 id="52-减小粒度">5.2 减小粒度</h2>
<p>所谓的减小锁粒度，就是指缩小锁定的对象范围，从而减小锁冲突的可能性，进而提高系统的并发能力。</p>
<p>减小粒度也是一种削弱多线程竞争的有效手段，比如典型的就是<code>ConcurrentHashMap</code>，在<code>JDK1.7</code>中的<code>segment</code>就是一个很好的例子。每次并发操作的时候只加锁某个特定的<code>segment</code>，从而提高并发性能。</p>
<h2 id="53-锁分离">5.3 锁分离</h2>
<p>锁分离就是将一个独占锁分成多个锁，比如<code>LinkedBlockingQueue</code>。在<code>take()</code>和<code>put()</code>操作中，使用的并不是同一个锁，而是分离成了一个<code>takeLock</code>和一个<code>putLock</code>：</p>
<pre><code class="language-java">private final ReentrantLock takeLock;
private final ReentrantLock putLock;
</code></pre>
<p>初始化操作如下：</p>
<pre><code class="language-java">this.takeLock = new ReentrantLock();
this.notEmpty = this.takeLock.newCondition();
this.putLock = new ReentrantLock();
</code></pre>
<p>而<code>take()</code>和<code>put()</code>操作如下：</p>
<pre><code class="language-java">public E take() throws InterruptedException {
    takeLock.lockInterruptibly();  //不能两个线程同时take
    //...
    try {
        //...
    } finally {
        takeLock.unlock();
    }
    //...
}

public void put(E e) throws InterruptedException {
	//...
    putLock.lockInterruptibly();  //不能两个线程同时put
    try {
        //...
    } finally {
        putLock.unlock();
    }
	//...
}
</code></pre>
<p>可以看到通过<code>putLock</code>以及<code>takeLock</code>两把锁实现了真正的取数据与写数据分离</p>
<h2 id="54-锁粗化">5.4 锁粗化</h2>
<p>通常情况下，为了保证多线程的有效并发，会要求每个线程持有锁的时间尽可能短，但是，如果对同一个锁不停请求，本身也会消耗资源，反而不利于性能优化，于是，在遇到一连串连续对同一个锁不断进行请求和释放的操作时，会把所有的锁操作整合成对锁的一次请求，减少对锁的请求同步次数，这个过程就叫锁粗化，比如</p>
<pre><code class="language-java">public void method(){
	synchronized(lock){
		A();
	}
	synchronized(lock){
		B();
	}
}
</code></pre>
<p>会被整合成如下形式：</p>
<pre><code class="language-java">public void method(){
	synchronized(lock){
		A();
		B();
	}
}
</code></pre>
<p>而在循环内申请锁，比如：</p>
<pre><code class="language-java">for(int i=0;i&lt;10;++i){
	synchronized(lock){
	}
}
</code></pre>
<p>应将锁粗化为</p>
<pre><code class="language-java">synchronized(lock){
	for(int i=0;i&lt;10;++i){
	}
}
</code></pre>
<h1 id="6-无锁cas">6 无锁：<code>CAS</code></h1>
<p>毫无疑问，为了保证多线程并发的安全，使用锁是一种最直观的方式，但是，锁的竞争有可能会称为瓶颈，因此，有没有不需要锁的方式去保证数据一致性呢？</p>
<p>答案是有的，就是这一小节介绍的主角：<code>CAS</code>。</p>
<p><code>CAS</code>就是<code>Compare And Swap</code>的缩写，<code>CAS</code>包含三个参数，形式为<code>CAS(V,E,N)</code>，其中：</p>
<ul>
<li><code>V</code>表示内存地址值</li>
<li><code>E</code>表示期望值</li>
<li><code>N</code>表示新值</li>
</ul>
<p>只有当<code>V</code>的值等于<code>E</code>的值时，才会把<code>V</code>设置为<code>N</code>，如果<code>V</code>的值和<code>N</code>的值不一样，那么表示已经有其他线程做了更新，当前线程什么也不做，最后<code>CAS</code>返回当前<code>V</code>的值。</p>
<p><code>CAS</code>的操作是抱着乐观的态度进行的，总认为自己可以成功完成操作，当多个线程同时使用<code>CAS</code>操作同一个变量的时候，只会有一个胜出并成功更新，其他均会失败。失败的线程不会被挂起，仅被告知失败，并且允许再次尝试，当然也允许失败的线程放弃操作。</p>
<h1 id="7-参考">7 参考</h1>
<ul>
<li><a href="https://blog.csdn.net/zhaocuit/article/details/100208879">CSDN-java对象头信息</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1667980">JVM系列之:详解java object对象在heap中的结构</a></li>
<li><a href="https://stackoverflow.com/questions/26357186/what-is-in-java-object-header">StackOverflow-What is in Java object header?</a></li>
<li><a href="https://blog.csdn.net/weixin_44584387/article/details/104763837">CSDN-Java 中锁是如何一步步膨胀的（偏向锁、轻量级锁、重量级锁）</a></li>
<li><a href="https://www.jianshu.com/p/8a8d2b42ddca">简书-Java Synchronized 重量级锁原理深入剖析上(互斥篇)</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第320期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-320-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-320-qi/">
        </link>
        <updated>2021-04-30T02:14:19.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>为什么你能像智障一样活着，而我却不可以。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>洛阳城东桃李花，飞来飞去落谁家？<br>
——刘希夷《代悲白头翁》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>人们生于信仰，毁于信仰。人们在信仰的灰烬重生。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1619748966774.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>不会电路，<code>O(n)</code>空间：</p>
<pre><code class="language-java">import java.util.*;

public class Solution {
    public int singleNumber(int[] nums) {
        int n = nums.length;
        if(n == 1){
            return nums[0];
        }
        long sum = 0;
        Map&lt;Integer,Boolean&gt; map = new HashMap&lt;&gt;();
        for (int num:nums){
            if(map.containsKey(num)){
                sum -= num;
            }else{
                map.put(num,true);
                sum += num* 2L;
            }
        }
        return (int)(sum/2);
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1619749011958.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第319期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-319-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-319-qi/">
        </link>
        <updated>2021-04-29T00:20:14.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>别和我说对不起，因为我既不能原谅你，也无法捅死你。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>见说江头春浪渺，殷勤欲送归船。<br>
——赵长卿《临江仙·暮春》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>在不同的遭遇里我发现你的瞬间，有种不可言说的温柔直觉。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1619655792502.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>暴力大法好，非常的节约空间：</p>
<pre><code class="language-java">import java.util.*;

public class Solution {
    public boolean canCross(int[] stones) {
        int n = stones.length;
        Map&lt;Integer, List&lt;Integer&gt;&gt; map = new HashMap&lt;&gt;(n);
        map.put(0, List.of(0));
        for (int i = 1; i &lt; n; i++) {
            List&lt;Integer&gt; target = new ArrayList&lt;&gt;();
            for (int j = 0; j &lt; i; j++) {
                List&lt;Integer&gt; list = map.get(stones[j]);
                if(list != null &amp;&amp; !list.isEmpty()){
                    int dis = stones[i] - stones[j];
                    for (Integer e:list){
                        if(Math.abs(e-dis) &lt;= 1 &amp;&amp; !target.contains(dis)){
                            target.add(dis);
                            if(i == n-1){
                                return true;
                            }
                        }
                    }
                }
            }
            map.put(stones[i],target);
        }
        return false;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1619659079138.png" alt="" loading="lazy"></figure>
<p>上二维<code>dp</code>，可以先上一次<code>O(n)</code>遍历判断是否有可能到达最后一个石头，如果没有直接返回<code>false</code>，遍历之后再一次<code>O(n^2)</code>遍历<code>dp</code>数组，数组存的是石头下标，转移方程为：</p>
<pre><code class="language-java">dp[i][k] = dp[j][k-1] || dp[j][k] || dp[j][k+1];
</code></pre>
<p>如果<code>i==n-1</code>，也就是到达了最后一个石头，可以直接返回<code>true</code>，否则<code>O(n^2)</code>遍历结束后，返回<code>false</code>。</p>
<pre><code class="language-java">public class Solution {
    public boolean canCross(int[] stones) {
        int n = stones.length;
        boolean [][] dp = new boolean[n][n];

        //测试发现O(n)的遍历貌似没什么用，反而增加耗时
        // for (int i = 1; i &lt; n; ++i) {
        //     if (stones[i] - stones[i - 1] &gt; i) {
        //         return false;
        //     }
        // }

        dp[0][0] = true;
        for (int i = 1; i &lt; n; i++) {
            for (int j = i-1; j &gt;= 0; --j) {
                int k = stones[i]-stones[j];
                if(k &gt; j+1){
                    break;
                }
                dp[i][k] = dp[j][k-1] || dp[j][k] || dp[j][k+1];
                if(i == n-1 &amp;&amp; dp[i][k]){
                    return true;
                }
            }
        }
        return false;
    }
}
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://2293736867.github.io/post-images/1619660800997.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第318期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-318-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-318-qi/">
        </link>
        <updated>2021-04-27T17:38:51.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>不要等明天交不上差，再找借口，今天就要找好。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>子规啼彻四更时，起视蚕稠怕叶稀。<br>
——谢枋得《残妇吟》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>人与人的羁绊是真正的力量之源。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1619545284012.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>双指针：</p>
<pre><code class="language-java">public class Solution {
    public boolean judgeSquareSum(int c) {
        if(c &lt;= 5){
            return c != 3;
        }
        int a = 0;
        int b = (int)Math.sqrt(c);
        while (a &lt;= b){
            int sum = a*a + b*b;
            if(sum == c){
                return true;
            }else if(sum &gt; c){
                --b;
            }else{
                ++a;
            }
        }
        return false;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1619545327711.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JVM学习笔记（五）：垃圾回收器和内存分配]]></title>
        <id>https://2293736867.github.io/post/jvm-xue-xi-bi-ji-wu-la-ji-hui-shou-qi-he-nei-cun-fen-pei/</id>
        <link href="https://2293736867.github.io/post/jvm-xue-xi-bi-ji-wu-la-ji-hui-shou-qi-he-nei-cun-fen-pei/">
        </link>
        <updated>2021-04-27T17:33:44.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-来源">1 来源</h1>
<ul>
<li>来源：《Java虚拟机 JVM故障诊断与性能优化》——葛一鸣</li>
<li>章节：第五章</li>
</ul>
<p>本文是第五章的一些笔记整理。</p>
<h1 id="2-概述">2 概述</h1>
<p>本文主要讲述了<code>JVM</code>中的常见垃圾回收器，包括：</p>
<ul>
<li>串行回收器</li>
<li>并行回收器</li>
<li><code>CMS</code></li>
<li><code>G1</code></li>
</ul>
<p>另外还提及了内存分配的一些细节以及一个简单的<code>JVM</code>调优实战。</p>
<h1 id="3-串行回收器">3 串行回收器</h1>
<p>串行回收器是指使用单线程进行垃圾回收的回收器，每次回收时，串行回收器只有一个工作线程。串行回收器作为最古老的一种回收器，特点如下：</p>
<ul>
<li>仅仅使用单线程进行垃圾回收</li>
<li>独占式的垃圾回收方式</li>
</ul>
<p>在串行回收器进行垃圾回收的时候，应用线程需要暂停工作直到回收完成，这种现象就是著名的<code>Stop-The-World</code>，也就是<code>STW</code>。</p>
<p>串行回收器的相关参数如下：</p>
<ul>
<li><code>-XX:+UseSerialGC</code>：新生代与老年代都使用串行回收器</li>
<li><code>-XX:+UseParNewGC</code>：新生代使用<code>ParNew</code>回收器，老年代使用串行回收器（<code>JDK9+</code>版本已删除该参数，因为<code>CMS</code>被<code>G1</code>代替）</li>
<li><code>-XX:+UseParallelGC</code>：新生代使用<code>ParallelGC</code>回收器，老年代使用串行回收器</li>
</ul>
<h1 id="4-并行回收器">4 并行回收器</h1>
<p>并行回收期在串行回收器的基础上进行了改进，使用多个线程同时对垃圾进行回收，常见的并行回收器有：</p>
<ul>
<li>新生代<code>ParNew</code>回收器</li>
<li>新生代<code>ParallelGC</code>回收器</li>
<li>老年代<code>ParallelOldGC</code>回收器</li>
</ul>
<h2 id="41-parnew">4.1 <code>ParNew</code></h2>
<p><code>ParNew</code>是一个工作在新生代的垃圾回收器，只是简单地将串行回收器多线程化，回收策略、算法、参数和新生代串行回收器一样。同时，<code>ParNew</code>也是独占式的回收器，回收过程中会<code>STW</code>。虽然<code>ParNew</code>采用了多线程进行垃圾回收，但是在单<code>CPU</code>或者并发能力较弱的系统中，并行回收器的效果有可能还要比串行回收器差。</p>
<p>开启<code>ParNew</code>可以使用如下参数：</p>
<ul>
<li><code>-XX:+UseParNewGC</code>：新生代使用<code>ParNew</code>，老年代使用串行回收器（<code>JDK9+</code>已删除）</li>
<li><code>-XX:+UseConcMarkSweepGC</code>：新生代使用<code>ParNew</code>，老年代使用<code>CMS</code>（<code>JDK9+</code>不建议，建议使用默认的<code>G1</code>）</li>
</ul>
<p><code>ParNew</code>工作时的线程数量可以使用<code>-XX:ParallelGCThreads</code>指定。</p>
<h2 id="42-parallelgc">4.2 <code>ParallelGC</code></h2>
<p><code>ParallelGC</code>是使用复制算法的回收器，与<code>ParNew</code>的相同点是，都是多线程、独占式的回收器，但是，<code>ParallelGC</code>会关注系统的吞吐量，可以通过如下参数启用<code>ParallelGC</code>：</p>
<ul>
<li><code>-XX:+UseParallelGC</code>：新生代使用<code>ParallelGC</code>，老年代使用串行回收器</li>
<li><code>-XX:+UseParallelOldGC</code>：新生代使用<code>ParallelGC</code>，老年代使用<code>ParallelOldGC</code></li>
</ul>
<p><code>ParallelGC</code>提供了两个参数控制系统的吞吐量：</p>
<ul>
<li><code>-XX:+MaxGCPauseMills</code>：设置最大垃圾回收停顿时间，一个大于0的整数。<code>ParallelGC</code>在工作的时候会调整<code>Java</code>堆大小或者其他参数，尽可能把停顿时间控制在<code>MaxGCPauseMills</code>以内，如果希望把停顿时间设置得很小，那么可能会使用一个较小的堆，因为较小的堆回收速度快于较大的堆，但后果是可能会导致垃圾回收的次数增多，有可能会降低吞吐量</li>
<li><code>-XX:+GCTimeRatio</code>：设置吞吐量大小，是一个<code>0-100</code>的整数，假设为<code>n</code>，那么系统将花费不超过<code>1/(1+n)</code>的时间进行垃圾回收，默认值为<code>99</code>，也就是用于垃圾回收的时间不得超过<code>1/(1+99)=1%</code></li>
</ul>
<p>另外还有一个<code>-XX:+UseAdaptiveSizePolicy</code>的参数，可以开启自适应策略，开启后，新生代大小、<code>eden</code>区和<code>survivor</code>区比例、晋升老年代的对象年龄等参数都会被自动调整。</p>
<h2 id="43-paralleloldgc">4.3 <code>ParallelOldGC</code></h2>
<p>从名字就可以知道这是一个工作在老年代的<code>ParallelGC</code>，一样关注系统吞吐量，使用了标记压缩法，<code>JDK 1.6+</code>可用。相关参数如下：</p>
<ul>
<li><code>-XX:+UseParallelOldGC</code>：指定在老年代使用<code>ParallelOldGC</code>（同时新生代使用<code>ParallelGC</code>）</li>
<li><code>-XX:ParallelGCThreads</code>：设置垃圾回收时的线程数量</li>
</ul>
<h1 id="5-cms">5 <code>CMS</code></h1>
<p><code>CMS</code>是<code>Concurrent Mark Sweep</code>的缩写，可以翻译为并发标记清除，一个使用标记清除法的多线程回收器，不会回收新生代。<code>CMS</code>与<code>ParallelGC</code>/<code>ParallelOldGC</code>不同，<code>CMS</code>主要关注的是系统停顿时间。</p>
<h2 id="51-工作流程">5.1 工作流程</h2>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20210427131940440.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>详细说明如下：</p>
<ul>
<li>初始标记：<code>STW</code>，作用是标记存活的对象，内容包括老年代中的所有<code>GC Roots</code>（<code>Java</code>中的<code>GC Roots</code>包括虚拟机栈引用的对象、方法区中类静态属性引用的对象、方法区中的常量引用的对象、本地方法栈中<code>JNI</code>引用的对象），以及新生代中引用到老年代对象的对象</li>
<li>并发标记：从初始标记阶段标记的对象开始找出所有存活的对象</li>
<li>预清理：因为并发标记并不能标记出老年代全部的存活对象（标记的同时应用程序会改变一些对象的引用），这个阶段是用于处理并发标记阶段因为引用关系改变而导致没有标记到的存活对象的（可以使用<code>-XX:-CMSPrecleaningEnabled</code>关闭）</li>
<li>重新标记：<code>STW</code>，目标是完成标记整个老年代的所有存活对象。如果此阶段花费时间过长，可以使用<code>-XX:+CMSScavengeBeforeRemark</code>，在重新标记之前进行<code>Yong GC</code>，不过该参数有可能会导致频繁的<code>CMS GC</code>，原因可以<a href="https://cloud.tencent.com/developer/article/1413725">戳这里</a></li>
<li>并发清理：清除没有标记的对象并回收空间，当然由于这个过程是并发的，也就是用户线程也会运行，而此时产生的垃圾无法被清理，只能留到下一次<code>GC</code>再清理，这部分垃圾就称为“浮动垃圾”</li>
<li>并发重置：重新设置<code>CMS</code>内部的数据结果，准备下一次<code>CMS</code>使用</li>
</ul>
<h2 id="52-主要参数">5.2 主要参数</h2>
<ul>
<li><code>-XX:+UseConcMarkSweepGC</code>：开启<code>CMS</code></li>
<li><code>-XX:ConcGCThreads</code>/<code>-XX:ParallelCMSThreads</code>：设置并发线程数</li>
<li><code>-XX:CMSInitiatingOccupancyFraction</code>：回收阈值，当老年代使用率超过该值的时候就进行回收，默认为<code>68</code>，如果内存使用增长率过快，导致<code>CMS</code>执行过程中出现内存不足的情况，<code>CMS</code>就会回收失败，<code>JVM</code>会启动老年代串行回收器进行回收，同时会触发<code>STW</code>，直到回收完成</li>
<li><code>-XX:+UseCMSCompactAtFullCollection</code>：因为<code>CMS</code>是一个并发回收器，回收后很大可能会出现大量的内存碎片，导致离散的可用空间无法分配给大对象，并再次触发<code>CMS GC</code>。使用该参数后，会在回收完成后进行一次内存压缩（表现为整理内存碎片，非并发）</li>
<li><code>-XX:CMSFullGCsBeforeCompaction</code>：用于设定多少次<code>CMS</code>后，进行一次内存压缩</li>
</ul>
<h1 id="6-g1">6 <code>G1</code></h1>
<p><code>G1</code>是<code>JDK7</code>引入的垃圾回收器，在<code>JDK9+</code>作为默认回收器，特点包括：</p>
<ul>
<li>并行性：回收期间可以由多个<code>GC</code>线程同时工作</li>
<li>并发性：部分工作可以和应用程序同时执行，一般不会在整个回收期阻塞应用程序</li>
<li>分代<code>GC</code>：兼顾新生代与老年代</li>
<li>空间整理：回收过程中会有适当的对象移动</li>
<li>可预见性：只选取部分区域进行内存回收，缩小了回收范围，同时可以控制<code>STW</code>时间</li>
</ul>
<h2 id="61-g1工作流程">6.1 <code>G1</code>工作流程</h2>
<p><code>G1</code>的回收过程可能有4个阶段：</p>
<ul>
<li>新生代<code>GC</code></li>
<li>并发标记周期</li>
<li>混合回收</li>
<li>（可选）<code>Full GC</code></li>
</ul>
<p>下面来分别看一下。</p>
<h3 id="611-新生代gc">6.1.1 新生代<code>GC</code></h3>
<p>新生代<code>GC</code>的工作区域是<code>eden</code>区以及<code>survivor</code>区，一旦<code>eden</code>区占满，新生代<code>GC</code>就会启动。新生代<code>GC</code>后，所有的<code>eden</code>区会被清空，老年代的区域有可能增多（因为部分<code>survivor</code>区或<code>eden</code>区的对象晋升到老年代）。</p>
<p>比如下面是新生代<code>G1 GC</code>日志的一部分：</p>
<pre><code class="language-bash">[1.076s][info][gc,start     ] GC(0) Pause Young (Normal) (G1 Evacuation Pause)
[1.076s][info][gc,task      ] GC(0) Using 2 workers of 10 for evacuation
[1.079s][info][gc,phases    ] GC(0)   Pre Evacuate Collection Set: 0.0ms
[1.079s][info][gc,phases    ] GC(0)   Evacuate Collection Set: 2.4ms
[1.079s][info][gc,phases    ] GC(0)   Post Evacuate Collection Set: 0.1ms
[1.079s][info][gc,phases    ] GC(0)   Other: 0.2ms
[1.079s][info][gc,heap      ] GC(0) Eden regions: 9-&gt;0(7)
[1.079s][info][gc,heap      ] GC(0) Survivor regions: 0-&gt;2(2)
[1.079s][info][gc,heap      ] GC(0) Old regions: 0-&gt;1
[1.079s][info][gc,heap      ] GC(0) Humongous regions: 0-&gt;0
[1.079s][info][gc,metaspace ] GC(0) Metaspace: 3473K-&gt;3473K(1056768K)
[1.079s][info][gc           ] GC(0) Pause Young (Normal) (G1 Evacuation Pause) 9M-&gt;2M(20M) 2.689ms
[1.079s][info][gc,cpu       ] GC(0) User=0.00s Sys=0.00s Real=0.01s
</code></pre>
<p>可以看到<code>eden</code>区域被清空，<code>survivor</code>区与老年区增多。</p>
<h3 id="612-并发标记周期">6.1.2 并发标记周期</h3>
<p><code>G1</code>的并发标记阶段和<code>CMS</code>有类似的地方，可以分为以下几步：</p>
<ul>
<li>初始标记（<code>STW</code>）：标记从根节点直接可达的对象，这个阶段会伴随着一次新生代<code>GC</code></li>
<li>根区域扫描（并发）：扫描由<code>survivor</code>区可直达的老年区域，并标记这些直接可达的对象</li>
<li>并发标记（并发）：和<code>CMS</code>类似，会扫描并查找整个堆的存活对象，并做好标记，这是一个并发的过程，但是会被新生代的<code>GC</code>打断</li>
<li>重新标记（<code>STW</code>）：对标记结果进行修正，使用<code>SATB</code>（<code>Snapshot-At-The-Beginning</code>）算法，在标记之初为存活对象创建一个快照，这个快照有助于加速重新标记的速度</li>
<li>独占清理（<code>STW</code>）：计算各个区域的存活对象和<code>GC</code>回收比例并进行排序，在这个阶段还会更新记忆集（<code>Remebered Set</code>）</li>
<li>并发清理（并发）：并发清理垃圾</li>
</ul>
<p>其中比较重要的一个阶段是并发标记阶段，在并发标记后，会增加一些标记为<code>G</code>的区域，这些区域被标记为<code>G</code>是因为内部的垃圾比例高，希望在后续的<code>GC</code>中进行收集，而这些被标记为<code>G</code>的区域会被<code>G1</code>记录在一个称为<code>Collection Sets</code>的集合中。</p>
<h3 id="613-混合回收">6.1.3 混合回收</h3>
<p>在并发标记周期中，虽然有部分对象被回收，但是总体上来说回收的比例是相当低的，但是在并发标记周期后，<code>G1</code>已经明确知道哪些区域有比较多的垃圾对象，在下一阶段就可以对其进行回收。</p>
<p>这个阶段就叫混合回收，因为既会执行正常的年轻代<code>GC</code>，也会选取一些被标记的老年代区域进行回收，同时处理了新生代和老年代。混合<code>GC</code>会执行多次，直到回收了足够的内存空间，然后它会触发一次新生代<code>GC</code>，然后不断循环，整体流程如下：</p>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20210427181933160.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h3 id="614-full-gc">6.1.4 <code>Full GC</code></h3>
<p>如果在并发回收的期间出现了内存不足，<code>G1</code>就会像<code>CMS</code>一样执行<code>Full GC</code>。另外，如果混合<code>GC</code>的时候空间不足，或者新生代<code>GC</code>时<code>survivor</code>区和老年代无法容纳幸存对象，都会导致一次<code>Full GC</code>。</p>
<h2 id="62-g1相关参数">6.2 <code>G1</code>相关参数</h2>
<ul>
<li><code>-XX:+UseG1GC</code>：启用<code>G1</code></li>
<li><code>-XX:MaxGCPauseMills</code>：<code>STW</code>最大时间，如果任意一次停顿时间超过设置值，<code>G1</code>会尝试自动调整新生代、老年代的比例、调整堆大小等</li>
<li><code>-XX:ParallelGCThreads</code>：用于设置并行回收时<code>GC</code>的工作线程数</li>
<li><code>-XX:InitiatingHeapOccupancyPercent</code>：可以指定整个堆的使用率到达多少的时候，触发并发标记周期的执行，默认是<code>45</code>。一旦设置了该值，<code>G1</code>始终不会去修改，如果设置过大，意味着并发周期会迟迟得不到启动，引起<code>Full GC</code>的可能性会大大增加，如果设置得过小，并发周期会执行得非常频繁，大量<code>GC</code>线程抢占<code>CPU</code>导致性能下降</li>
</ul>
<h1 id="7-gc调优简单实验">7 <code>GC</code>调优简单实验</h1>
<h2 id="71-概述">7.1 概述</h2>
<p>一个简单的实验，测试不同的<code>JVM</code>启动参数对<code>Tomcat</code>的影响，通过压力测试，获得<code>JVM</code>主要性能指标，体验不同参数对系统性能的影响。环境：</p>
<ul>
<li><code>Tomcat 10.0.5</code></li>
<li><code>OpenJDK 11.0.10</code></li>
<li><code>JMeter 5.4.1</code></li>
</ul>
<h2 id="72-步骤">7.2 步骤</h2>
<h3 id="721-添加线程组">7.2.1 添加线程组</h3>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20210427190736669.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p><code>Test Plan</code>中选择右键，<code>Thread(Users)</code>，再选择<code>Thread Group</code>，设置线程数以及循环次数：</p>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20210428012848289.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h3 id="722-添加采样器">7.2.2 添加采样器</h3>
<p>选中刚才添加的线程组，并选择界面中的<code>Edit-&gt;Add-&gt;Sampler-&gt;HTTP Request</code>，添加<code>HTTP</code>采样器：</p>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/20210427201708660.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>这里选择了默认的<code>Tomcat</code>页面进行测试，端口<code>1080</code>。</p>
<h3 id="723-添加总结报告">7.2.3 添加总结报告</h3>
<p>选中<code>HTTP Request</code>后，右键选择<code>Add-&gt;Listener-&gt;Summary Request</code>，添加总结报告，完成后就可以进行测试了。</p>
<h2 id="73-测试">7.3 测试</h2>
<p>先引入环境变量：</p>
<pre><code class="language-bash">export CATALINA_OPTS=&quot;-Xlog:gc:gc.log -Xmx32m -Xms32m -XX:ParallelGCThreads=4&quot; 
</code></pre>
<p>接下来的操作都以该环境变量为主，首先设置初始堆和最大堆为<code>32m</code>，设置好后运行<code>Tomcat</code>，并在<code>JMeter</code>中进行测试，下面是<code>GC</code>日志的前100行：</p>
<pre><code class="language-bash">[0.040s][info][gc] Using G1
[0.377s][info][gc] GC(0) Pause Young (Normal) (G1 Evacuation Pause) 14M-&gt;3M(32M) 2.699ms
[0.573s][info][gc] GC(1) Pause Young (Normal) (G1 Evacuation Pause) 14M-&gt;5M(32M) 2.605ms
[0.678s][info][gc] GC(2) Pause Young (Normal) (G1 Evacuation Pause) 16M-&gt;6M(32M) 2.355ms
[0.793s][info][gc] GC(3) Pause Young (Normal) (G1 Evacuation Pause) 17M-&gt;7M(32M) 1.579ms
[0.796s][info][gc] GC(4) Pause Young (Concurrent Start) (Metadata GC Threshold) 7M-&gt;7M(32M) 0.925ms
[0.796s][info][gc] GC(5) Concurrent Cycle
[0.808s][info][gc] GC(5) Pause Remark 8M-&gt;8M(32M) 2.363ms
[0.815s][info][gc] GC(5) Pause Cleanup 9M-&gt;9M(32M) 0.021ms
[0.816s][info][gc] GC(5) Concurrent Cycle 19.666ms
[0.899s][info][gc] GC(6) Pause Young (Normal) (G1 Evacuation Pause) 19M-&gt;8M(32M) 1.150ms
[1.018s][info][gc] GC(7) Pause Young (Normal) (G1 Evacuation Pause) 20M-&gt;9M(32M) 1.243ms
[17.760s][info][gc] GC(8) Pause Young (Normal) (G1 Evacuation Pause) 22M-&gt;15M(32M) 2.984ms
[17.810s][info][gc] GC(9) Pause Young (Normal) (G1 Evacuation Pause) 22M-&gt;19M(32M) 2.921ms
[17.818s][info][gc] GC(10) Pause Young (Concurrent Start) (G1 Evacuation Pause) 22M-&gt;21M(32M) 1.168ms
[17.818s][info][gc] GC(11) Concurrent Cycle
[17.822s][info][gc] GC(12) Pause Young (Normal) (G1 Evacuation Pause) 23M-&gt;23M(32M) 1.129ms
[17.830s][info][gc] GC(13) Pause Young (Normal) (G1 Evacuation Pause) 24M-&gt;24M(32M) 1.426ms
[17.836s][info][gc] GC(14) Pause Young (Normal) (G1 Evacuation Pause) 25M-&gt;25M(32M) 1.050ms
[17.843s][info][gc] GC(15) Pause Young (Normal) (G1 Evacuation Pause) 26M-&gt;26M(32M) 1.195ms
[17.853s][info][gc] GC(11) Pause Remark 27M-&gt;27M(32M) 3.820ms
[17.855s][info][gc] GC(16) Pause Young (Normal) (G1 Evacuation Pause) 27M-&gt;26M(32M) 1.672ms
[17.858s][info][gc] GC(17) Pause Young (Normal) (G1 Evacuation Pause) 27M-&gt;26M(32M) 1.069ms
[17.869s][info][gc] GC(18) Pause Young (Normal) (G1 Evacuation Pause) 27M-&gt;27M(32M) 1.121ms
[17.872s][info][gc] GC(19) Pause Young (Normal) (G1 Evacuation Pause) 28M-&gt;27M(32M) 0.811ms
[17.876s][info][gc] GC(20) Pause Young (Normal) (G1 Evacuation Pause) 28M-&gt;28M(32M) 0.867ms
[17.878s][info][gc] GC(11) Pause Cleanup 29M-&gt;29M(32M) 0.029ms
[17.879s][info][gc] GC(21) Pause Young (Prepare Mixed) (G1 Evacuation Pause) 29M-&gt;28M(32M) 0.905ms
[17.879s][info][gc] GC(11) Concurrent Cycle 60.929ms
[17.885s][info][gc] GC(22) To-space exhausted
[17.885s][info][gc] GC(22) Pause Young (Mixed) (G1 Evacuation Pause) 29M-&gt;30M(32M) 2.788ms
[17.891s][info][gc] GC(23) To-space exhausted
[17.891s][info][gc] GC(23) Pause Young (Concurrent Start) (G1 Evacuation Pause) 31M-&gt;31M(32M) 2.017ms
[17.891s][info][gc] GC(25) Concurrent Cycle
[17.915s][info][gc] GC(24) Pause Full (G1 Evacuation Pause) 31M-&gt;24M(32M) 24.037ms
[17.915s][info][gc] GC(25) Concurrent Cycle 24.201ms
[17.918s][info][gc] GC(26) Pause Young (Normal) (G1 Evacuation Pause) 25M-&gt;25M(32M) 0.881ms
[17.921s][info][gc] GC(27) Pause Young (Concurrent Start) (G1 Evacuation Pause) 26M-&gt;25M(32M) 1.092ms
[17.921s][info][gc] GC(28) Concurrent Cycle
[17.924s][info][gc] GC(29) Pause Young (Normal) (G1 Evacuation Pause) 26M-&gt;25M(32M) 0.842ms
[17.931s][info][gc] GC(30) Pause Young (Normal) (G1 Evacuation Pause) 26M-&gt;26M(32M) 2.357ms
[17.933s][info][gc] GC(31) Pause Young (Normal) (G1 Evacuation Pause) 27M-&gt;26M(32M) 1.058ms
[17.936s][info][gc] GC(32) Pause Young (Normal) (G1 Evacuation Pause) 27M-&gt;26M(32M) 0.966ms
[17.941s][info][gc] GC(33) Pause Young (Normal) (G1 Evacuation Pause) 27M-&gt;27M(32M) 0.911ms
[17.954s][info][gc] GC(34) Pause Young (Normal) (G1 Evacuation Pause) 28M-&gt;27M(32M) 1.532ms
[17.961s][info][gc] GC(35) To-space exhausted
[17.961s][info][gc] GC(35) Pause Young (Normal) (G1 Evacuation Pause) 28M-&gt;29M(32M) 1.326ms
[17.967s][info][gc] GC(36) To-space exhausted
[17.967s][info][gc] GC(36) Pause Young (Normal) (G1 Evacuation Pause) 30M-&gt;30M(32M) 1.425ms
[17.989s][info][gc] GC(37) Pause Full (G1 Evacuation Pause) 30M-&gt;28M(32M) 22.554ms
[17.989s][info][gc] GC(28) Concurrent Cycle 68.160ms
[17.993s][info][gc] GC(38) Pause Young (Normal) (G1 Evacuation Pause) 29M-&gt;29M(32M) 0.951ms
[17.997s][info][gc] GC(39) To-space exhausted
[17.997s][info][gc] GC(39) Pause Young (Concurrent Start) (G1 Evacuation Pause) 30M-&gt;30M(32M) 1.763ms
[17.997s][info][gc] GC(41) Concurrent Cycle
[18.020s][info][gc] GC(40) Pause Full (G1 Evacuation Pause) 30M-&gt;29M(32M) 22.459ms
[18.020s][info][gc] GC(41) Concurrent Cycle 22.538ms
[18.028s][info][gc] GC(42) To-space exhausted
[18.028s][info][gc] GC(42) Pause Young (Normal) (G1 Evacuation Pause) 30M-&gt;30M(32M) 1.399ms
[18.049s][info][gc] GC(43) Pause Full (G1 Evacuation Pause) 30M-&gt;30M(32M) 21.067ms
[18.058s][info][gc] GC(44) To-space exhausted
[18.058s][info][gc] GC(44) Pause Young (Concurrent Start) (G1 Evacuation Pause) 31M-&gt;31M(32M) 1.830ms
[18.058s][info][gc] GC(46) Concurrent Cycle
[18.080s][info][gc] GC(45) Pause Full (G1 Evacuation Pause) 31M-&gt;30M(32M) 22.113ms
[18.080s][info][gc] GC(46) Concurrent Cycle 22.213ms
[18.169s][info][gc] GC(47) To-space exhausted
[18.169s][info][gc] GC(47) Pause Young (Normal) (G1 Evacuation Pause) 31M-&gt;31M(32M) 87.776ms
[18.192s][info][gc] GC(48) Pause Full (G1 Evacuation Pause) 31M-&gt;30M(32M) 22.622ms
[18.214s][info][gc] GC(49) Pause Full (G1 Evacuation Pause) 30M-&gt;30M(32M) 22.480ms
[18.216s][info][gc] GC(50) Pause Young (Concurrent Start) (G1 Evacuation Pause) 30M-&gt;30M(32M) 1.112ms
[18.216s][info][gc] GC(52) Concurrent Cycle
[18.241s][info][gc] GC(51) Pause Full (G1 Evacuation Pause) 30M-&gt;30M(32M) 25.469ms
[18.266s][info][gc] GC(53) Pause Full (G1 Evacuation Pause) 30M-&gt;30M(32M) 24.480ms
[18.266s][info][gc] GC(52) Concurrent Cycle 50.062ms
[18.267s][info][gc] GC(54) Pause Young (Normal) (G1 Evacuation Pause) 30M-&gt;30M(32M) 0.681ms
[18.293s][info][gc] GC(55) Pause Full (G1 Evacuation Pause) 30M-&gt;30M(32M) 25.581ms
[18.316s][info][gc] GC(56) Pause Full (G1 Evacuation Pause) 30M-&gt;30M(32M) 22.917ms
[18.317s][info][gc] GC(57) Pause Young (Concurrent Start) (G1 Evacuation Pause) 30M-&gt;30M(32M) 1.170ms
[18.317s][info][gc] GC(59) Concurrent Cycle
[18.342s][info][gc] GC(58) Pause Full (G1 Evacuation Pause) 30M-&gt;30M(32M) 24.189ms
[18.365s][info][gc] GC(60) Pause Full (G1 Evacuation Pause) 30M-&gt;30M(32M) 23.685ms
[18.365s][info][gc] GC(59) Concurrent Cycle 48.004ms
[18.366s][info][gc] GC(61) Pause Young (Normal) (G1 Evacuation Pause) 30M-&gt;30M(32M) 0.810ms
[18.393s][info][gc] GC(62) Pause Full (G1 Evacuation Pause) 30M-&gt;30M(32M) 26.309ms
[18.419s][info][gc] GC(63) Pause Full (G1 Evacuation Pause) 30M-&gt;30M(32M) 26.395ms
[18.421s][info][gc] GC(64) Pause Young (Concurrent Start) (G1 Evacuation Pause) 30M-&gt;30M(32M) 0.978ms
[18.421s][info][gc] GC(66) Concurrent Cycle
[18.447s][info][gc] GC(65) Pause Full (G1 Evacuation Pause) 30M-&gt;30M(32M) 26.732ms
[18.473s][info][gc] GC(67) Pause Full (G1 Evacuation Pause) 30M-&gt;30M(32M) 25.213ms
[18.473s][info][gc] GC(66) Concurrent Cycle 52.098ms
[18.474s][info][gc] GC(68) Pause Young (Normal) (G1 Evacuation Pause) 30M-&gt;30M(32M) 1.288ms
[18.503s][info][gc] GC(69) Pause Full (G1 Evacuation Pause) 30M-&gt;30M(32M) 28.438ms
[18.526s][info][gc] GC(70) Pause Full (G1 Evacuation Pause) 30M-&gt;30M(32M) 22.862ms
[18.527s][info][gc] GC(71) Pause Young (Concurrent Start) (G1 Evacuation Pause) 30M-&gt;30M(32M) 1.047ms
[18.527s][info][gc] GC(73) Concurrent Cycle
[18.551s][info][gc] GC(72) Pause Full (G1 Evacuation Pause) 30M-&gt;30M(32M) 24.183ms
[18.572s][info][gc] GC(74) Pause Full (G1 Evacuation Pause) 30M-&gt;30M(32M) 21.006ms
[18.573s][info][gc] GC(73) Concurrent Cycle 45.322ms
[18.574s][info][gc] GC(75) Pause Young (Normal) (G1 Evacuation Pause) 30M-&gt;30M(32M) 0.711ms
[18.598s][info][gc] GC(76) Pause Full (G1 Evacuation Pause) 30M-&gt;30M(32M) 24.588ms
</code></pre>
<p>可以看到频繁发生了<code>Full GC</code>。</p>
<h2 id="74-调优">7.4 调优</h2>
<p>解决频繁发生<code>Full GC</code>的最简单一个方法就是将堆内存调大，使用如下参数再次启动<code>Tomcat</code>：</p>
<pre><code class="language-bash">export CATALINA_OPTS=&quot;-Xlog:gc:gc.log -Xmx256m -Xms32m -XX:ParallelGCThreads=4&quot;
</code></pre>
<p>日志如下：</p>
<pre><code class="language-bash">[0.024s][info][gc] Using G1
[0.278s][info][gc] GC(0) Pause Young (Normal) (G1 Evacuation Pause) 14M-&gt;3M(32M) 2.545ms
[0.355s][info][gc] GC(1) Pause Young (Normal) (G1 Evacuation Pause) 7M-&gt;4M(32M) 2.359ms
[0.485s][info][gc] GC(2) Pause Young (Normal) (G1 Evacuation Pause) 13M-&gt;5M(32M) 1.345ms
[0.595s][info][gc] GC(3) Pause Young (Normal) (G1 Evacuation Pause) 15M-&gt;6M(32M) 2.102ms
[0.686s][info][gc] GC(4) Pause Young (Concurrent Start) (Metadata GC Threshold) 16M-&gt;7M(32M) 3.140ms
[0.686s][info][gc] GC(5) Concurrent Cycle
[0.696s][info][gc] GC(5) Pause Remark 8M-&gt;8M(32M) 2.647ms
[0.700s][info][gc] GC(5) Pause Cleanup 8M-&gt;8M(32M) 0.019ms
[0.700s][info][gc] GC(5) Concurrent Cycle 13.683ms
[0.761s][info][gc] GC(6) Pause Young (Normal) (G1 Evacuation Pause) 17M-&gt;8M(32M) 1.689ms
[0.835s][info][gc] GC(7) Pause Young (Normal) (G1 Evacuation Pause) 19M-&gt;8M(32M) 1.680ms
[11.813s][info][gc] GC(8) Pause Young (Normal) (G1 Evacuation Pause) 19M-&gt;11M(32M) 2.670ms
[11.890s][info][gc] GC(9) Pause Young (Normal) (G1 Evacuation Pause) 21M-&gt;17M(32M) 4.077ms
[11.907s][info][gc] GC(10) Pause Young (Concurrent Start) (G1 Evacuation Pause) 22M-&gt;21M(32M) 1.528ms
[11.907s][info][gc] GC(11) Concurrent Cycle
[11.917s][info][gc] GC(12) Pause Young (Normal) (G1 Evacuation Pause) 23M-&gt;23M(32M) 1.918ms
[11.921s][info][gc] GC(13) Pause Young (Normal) (G1 Evacuation Pause) 24M-&gt;24M(32M) 0.955ms
[11.926s][info][gc] GC(14) Pause Young (Normal) (G1 Evacuation Pause) 25M-&gt;24M(32M) 0.733ms
[11.930s][info][gc] GC(15) Pause Young (Normal) (G1 Evacuation Pause) 25M-&gt;25M(32M) 0.769ms
[11.934s][info][gc] GC(11) Pause Remark 25M-&gt;25M(32M) 3.490ms
[11.937s][info][gc] GC(16) Pause Young (Normal) (G1 Evacuation Pause) 26M-&gt;25M(32M) 0.787ms
[11.945s][info][gc] GC(17) Pause Young (Normal) (G1 Evacuation Pause) 26M-&gt;25M(32M) 0.893ms
[11.949s][info][gc] GC(18) Pause Young (Normal) (G1 Evacuation Pause) 26M-&gt;26M(32M) 0.911ms
[11.949s][info][gc] GC(11) Pause Cleanup 26M-&gt;26M(32M) 0.029ms
[11.950s][info][gc] GC(11) Concurrent Cycle 42.921ms
[11.962s][info][gc] GC(19) Pause Young (Normal) (G1 Evacuation Pause) 27M-&gt;26M(32M) 0.855ms
[11.971s][info][gc] GC(20) Pause Young (Concurrent Start) (G1 Evacuation Pause) 27M-&gt;27M(32M) 1.335ms
[11.971s][info][gc] GC(21) Concurrent Cycle
[11.978s][info][gc] GC(22) Pause Young (Normal) (G1 Evacuation Pause) 28M-&gt;28M(32M) 0.853ms
[11.981s][info][gc] GC(23) Pause Young (Normal) (G1 Evacuation Pause) 29M-&gt;28M(32M) 0.777ms
[11.984s][info][gc] GC(24) Pause Young (Normal) (G1 Evacuation Pause) 29M-&gt;29M(64M) 0.944ms
[12.007s][info][gc] GC(21) Pause Remark 34M-&gt;34M(64M) 3.139ms
[12.032s][info][gc] GC(21) Pause Cleanup 39M-&gt;39M(64M) 0.041ms
[12.036s][info][gc] GC(25) Pause Young (Normal) (G1 Evacuation Pause) 39M-&gt;32M(64M) 3.190ms
[12.037s][info][gc] GC(21) Concurrent Cycle 65.196ms
[12.096s][info][gc] GC(26) Pause Young (Normal) (G1 Evacuation Pause) 41M-&gt;34M(64M) 2.597ms
[12.150s][info][gc] GC(27) Pause Young (Concurrent Start) (G1 Evacuation Pause) 43M-&gt;37M(64M) 2.926ms
[12.150s][info][gc] GC(28) Concurrent Cycle
[12.246s][info][gc] GC(28) Pause Remark 42M-&gt;42M(64M) 73.769ms
[12.259s][info][gc] GC(29) Pause Young (Normal) (G1 Evacuation Pause) 45M-&gt;38M(109M) 2.864ms
[12.263s][info][gc] GC(28) Pause Cleanup 40M-&gt;40M(109M) 0.037ms
[12.267s][info][gc] GC(28) Concurrent Cycle 117.019ms
[12.341s][info][gc] GC(30) Pause Young (Normal) (G1 Evacuation Pause) 59M-&gt;40M(109M) 3.691ms
[12.468s][info][gc] GC(31) Pause Young (Normal) (G1 Evacuation Pause) 72M-&gt;44M(109M) 3.743ms
[12.594s][info][gc] GC(32) Pause Young (Normal) (G1 Evacuation Pause) 76M-&gt;47M(109M) 3.134ms
[12.764s][info][gc] GC(33) Pause Young (Normal) (G1 Evacuation Pause) 79M-&gt;48M(109M) 2.044ms
[12.855s][info][gc] GC(34) Pause Young (Normal) (G1 Evacuation Pause) 80M-&gt;48M(109M) 2.071ms
[12.949s][info][gc] GC(35) Pause Young (Normal) (G1 Evacuation Pause) 82M-&gt;48M(109M) 1.615ms
[13.035s][info][gc] GC(36) Pause Young (Normal) (G1 Evacuation Pause) 83M-&gt;48M(109M) 1.681ms
[13.133s][info][gc] GC(37) Pause Young (Normal) (G1 Evacuation Pause) 83M-&gt;50M(109M) 3.947ms
[13.214s][info][gc] GC(38) Pause Young (Normal) (G1 Evacuation Pause) 85M-&gt;50M(109M) 3.206ms
[13.285s][info][gc] GC(39) Pause Young (Normal) (G1 Evacuation Pause) 85M-&gt;50M(109M) 2.007ms
[13.362s][info][gc] GC(40) Pause Young (Normal) (G1 Evacuation Pause) 87M-&gt;50M(109M) 2.705ms
[13.454s][info][gc] GC(41) Pause Young (Normal) (G1 Evacuation Pause) 90M-&gt;50M(109M) 3.772ms
</code></pre>
<p>吞吐量为<code>1.4w</code>每秒：</p>
<figure data-type="image" tabindex="6"><img src="https://img-blog.csdnimg.cn/20210427202729311.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>将堆大小调大后，可以明显看到<code>GC</code>次数减少，且没有发生<code>Full GC</code>，此时的可以将并发量增加，观察性能瓶颈，比如将线程数调到<code>2000</code>，循环数不变：</p>
<figure data-type="image" tabindex="7"><img src="https://img-blog.csdnimg.cn/20210427203011744.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>再次测试，日志如下（最后50行）：</p>
<pre><code class="language-bash">[7.554s][info][gc] GC(73) Pause Young (Concurrent Start) (G1 Evacuation Pause) 114M-&gt;82M(132M) 1.920ms
[7.554s][info][gc] GC(74) Concurrent Cycle
[7.590s][info][gc] GC(74) Pause Remark 99M-&gt;99M(132M) 4.054ms
[7.620s][info][gc] GC(74) Pause Cleanup 113M-&gt;113M(132M) 0.089ms
[7.620s][info][gc] GC(74) Concurrent Cycle 66.091ms
[7.624s][info][gc] GC(75) Pause Young (Normal) (G1 Evacuation Pause) 114M-&gt;82M(132M) 2.885ms
[7.677s][info][gc] GC(76) Pause Young (Concurrent Start) (G1 Evacuation Pause) 114M-&gt;82M(132M) 2.369ms
[7.677s][info][gc] GC(77) Concurrent Cycle
[7.730s][info][gc] GC(78) Pause Young (Normal) (G1 Evacuation Pause) 114M-&gt;82M(132M) 2.615ms
[7.756s][info][gc] GC(77) Pause Remark 95M-&gt;95M(132M) 2.964ms
[7.793s][info][gc] GC(79) Pause Young (Normal) (G1 Evacuation Pause) 114M-&gt;82M(132M) 5.707ms
[7.811s][info][gc] GC(77) Pause Cleanup 92M-&gt;92M(132M) 0.255ms
[7.812s][info][gc] GC(77) Concurrent Cycle 134.823ms
[7.854s][info][gc] GC(80) Pause Young (Normal) (G1 Evacuation Pause) 114M-&gt;82M(132M) 2.604ms
[7.912s][info][gc] GC(81) Pause Young (Concurrent Start) (G1 Evacuation Pause) 114M-&gt;82M(132M) 1.952ms
[7.912s][info][gc] GC(82) Concurrent Cycle
[7.940s][info][gc] GC(82) Pause Remark 94M-&gt;94M(132M) 3.422ms
[7.960s][info][gc] GC(82) Pause Cleanup 105M-&gt;105M(132M) 0.061ms
[7.960s][info][gc] GC(82) Concurrent Cycle 47.595ms
[7.976s][info][gc] GC(83) Pause Young (Prepare Mixed) (G1 Evacuation Pause) 114M-&gt;81M(132M) 2.423ms
[7.985s][info][gc] GC(84) Pause Young (Mixed) (G1 Evacuation Pause) 86M-&gt;81M(132M) 1.495ms
[8.038s][info][gc] GC(85) Pause Young (Concurrent Start) (G1 Evacuation Pause) 113M-&gt;81M(132M) 2.309ms
[8.038s][info][gc] GC(86) Concurrent Cycle
[8.079s][info][gc] GC(86) Pause Remark 104M-&gt;104M(132M) 3.507ms
[8.098s][info][gc] GC(87) Pause Young (Normal) (G1 Evacuation Pause) 114M-&gt;81M(132M) 3.336ms
[8.106s][info][gc] GC(86) Pause Cleanup 86M-&gt;86M(132M) 0.112ms
[8.106s][info][gc] GC(86) Concurrent Cycle 67.767ms
[8.148s][info][gc] GC(88) Pause Young (Normal) (G1 Evacuation Pause) 114M-&gt;81M(132M) 2.621ms
[8.205s][info][gc] GC(89) Pause Young (Concurrent Start) (G1 Evacuation Pause) 114M-&gt;81M(132M) 2.943ms
[8.205s][info][gc] GC(90) Concurrent Cycle
[8.263s][info][gc] GC(91) Pause Young (Normal) (G1 Evacuation Pause) 114M-&gt;81M(132M) 2.117ms
[8.274s][info][gc] GC(90) Pause Remark 84M-&gt;84M(132M) 4.372ms
[8.309s][info][gc] GC(90) Pause Cleanup 102M-&gt;102M(132M) 0.082ms
[8.309s][info][gc] GC(90) Concurrent Cycle 103.562ms
[8.331s][info][gc] GC(92) Pause Young (Prepare Mixed) (G1 Evacuation Pause) 114M-&gt;81M(132M) 2.712ms
[8.342s][info][gc] GC(93) Pause Young (Mixed) (G1 Evacuation Pause) 86M-&gt;80M(132M) 1.982ms
[8.392s][info][gc] GC(94) Pause Young (Normal) (G1 Evacuation Pause) 114M-&gt;80M(132M) 1.921ms
[8.437s][info][gc] GC(95) Pause Young (Normal) (G1 Evacuation Pause) 114M-&gt;80M(132M) 1.980ms
[8.487s][info][gc] GC(96) Pause Young (Normal) (G1 Evacuation Pause) 114M-&gt;80M(132M) 1.965ms
[8.528s][info][gc] GC(97) Pause Young (Normal) (G1 Evacuation Pause) 114M-&gt;80M(132M) 1.959ms
[8.600s][info][gc] GC(98) Pause Young (Normal) (G1 Evacuation Pause) 114M-&gt;80M(132M) 5.305ms
[8.655s][info][gc] GC(99) Pause Young (Normal) (G1 Evacuation Pause) 115M-&gt;80M(132M) 2.709ms
[8.709s][info][gc] GC(100) Pause Young (Normal) (G1 Evacuation Pause) 115M-&gt;80M(132M) 1.762ms
[8.759s][info][gc] GC(101) Pause Young (Normal) (G1 Evacuation Pause) 115M-&gt;80M(132M) 1.767ms
[8.801s][info][gc] GC(102) Pause Young (Normal) (G1 Evacuation Pause) 115M-&gt;80M(132M) 1.739ms
[8.850s][info][gc] GC(103) Pause Young (Normal) (G1 Evacuation Pause) 115M-&gt;80M(132M) 1.696ms
[8.899s][info][gc] GC(104) Pause Young (Normal) (G1 Evacuation Pause) 115M-&gt;80M(132M) 1.499ms
[8.952s][info][gc] GC(105) Pause Young (Normal) (G1 Evacuation Pause) 115M-&gt;80M(132M) 1.289ms
[8.999s][info][gc] GC(106) Pause Young (Normal) (G1 Evacuation Pause) 115M-&gt;80M(132M) 1.219ms
[9.043s][info][gc] GC(107) Pause Young (Normal) (G1 Evacuation Pause) 115M-&gt;80M(132M) 1.110ms
</code></pre>
<p>吞吐量为<code>2.3w</code>每秒：</p>
<figure data-type="image" tabindex="8"><img src="https://img-blog.csdnimg.cn/20210427203322511.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>相同的参数下，将线程数增加，吞吐量增加了，说明还没到达性能瓶颈，再次增大并发线程数：</p>
<figure data-type="image" tabindex="9"><img src="https://img-blog.csdnimg.cn/20210427203541236.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>日志如下：</p>
<pre><code class="language-bash">[58.313s][info][gc] GC(354) Pause Young (Normal) (G1 Evacuation Pause) 217M-&gt;209M(241M) 3.415ms
[58.328s][info][gc] GC(355) Pause Young (Normal) (G1 Evacuation Pause) 220M-&gt;210M(241M) 1.408ms
[58.354s][info][gc] GC(356) Pause Young (Normal) (G1 Evacuation Pause) 220M-&gt;210M(241M) 4.860ms
[58.378s][info][gc] GC(353) Pause Remark 221M-&gt;221M(241M) 5.735ms
[58.392s][info][gc] GC(357) Pause Young (Normal) (G1 Evacuation Pause) 221M-&gt;210M(241M) 1.799ms
[58.407s][info][gc] GC(353) Pause Cleanup 218M-&gt;218M(241M) 0.430ms
[58.408s][info][gc] GC(353) Concurrent Cycle 109.426ms
[58.416s][info][gc] GC(358) Pause Young (Prepare Mixed) (G1 Evacuation Pause) 221M-&gt;210M(241M) 1.584ms
[58.431s][info][gc] GC(359) Pause Young (Mixed) (G1 Evacuation Pause) 221M-&gt;187M(241M) 1.880ms
[58.463s][info][gc] GC(360) Pause Young (Mixed) (G1 Evacuation Pause) 197M-&gt;165M(244M) 2.684ms
[58.485s][info][gc] GC(361) Pause Young (Mixed) (G1 Evacuation Pause) 175M-&gt;144M(244M) 4.659ms
[58.505s][info][gc] GC(362) Pause Young (Mixed) (G1 Evacuation Pause) 154M-&gt;124M(244M) 5.943ms
[58.522s][info][gc] GC(363) Pause Young (Mixed) (G1 Evacuation Pause) 134M-&gt;118M(244M) 3.665ms
[58.640s][info][gc] GC(364) Pause Young (Normal) (G1 Evacuation Pause) 163M-&gt;119M(247M) 3.835ms
[58.722s][info][gc] GC(365) Pause Young (Normal) (G1 Evacuation Pause) 170M-&gt;119M(247M) 1.531ms
[58.823s][info][gc] GC(366) Pause Young (Normal) (G1 Evacuation Pause) 178M-&gt;119M(247M) 1.982ms
[58.926s][info][gc] GC(367) Pause Young (Normal) (G1 Evacuation Pause) 185M-&gt;120M(247M) 2.277ms
[59.023s][info][gc] GC(368) Pause Young (Normal) (G1 Evacuation Pause) 191M-&gt;120M(247M) 3.918ms
[59.192s][info][gc] GC(369) Pause Young (Normal) (G1 Evacuation Pause) 194M-&gt;120M(247M) 2.634ms
[59.346s][info][gc] GC(370) Pause Young (Normal) (G1 Evacuation Pause) 205M-&gt;120M(247M) 2.053ms
[59.479s][info][gc] GC(371) Pause Young (Normal) (G1 Evacuation Pause) 206M-&gt;120M(247M) 2.384ms
[59.615s][info][gc] GC(372) Pause Young (Normal) (G1 Evacuation Pause) 207M-&gt;120M(247M) 3.700ms
[59.733s][info][gc] GC(373) Pause Young (Normal) (G1 Evacuation Pause) 207M-&gt;120M(247M) 6.038ms
[59.917s][info][gc] GC(374) Pause Young (Normal) (G1 Evacuation Pause) 208M-&gt;120M(247M) 2.311ms
[60.062s][info][gc] GC(375) Pause Young (Normal) (G1 Evacuation Pause) 209M-&gt;120M(247M) 2.319ms
[60.197s][info][gc] GC(376) Pause Young (Normal) (G1 Evacuation Pause) 210M-&gt;120M(247M) 2.315ms
[60.316s][info][gc] GC(377) Pause Young (Normal) (G1 Evacuation Pause) 210M-&gt;120M(247M) 3.419ms
[60.456s][info][gc] GC(378) Pause Young (Normal) (G1 Evacuation Pause) 212M-&gt;120M(247M) 2.019ms
[60.638s][info][gc] GC(379) Pause Young (Normal) (G1 Evacuation Pause) 212M-&gt;120M(247M) 2.782ms
[60.799s][info][gc] GC(380) Pause Young (Normal) (G1 Evacuation Pause) 212M-&gt;120M(247M) 2.341ms
[60.947s][info][gc] GC(381) Pause Young (Normal) (G1 Evacuation Pause) 213M-&gt;120M(247M) 2.954ms
[61.102s][info][gc] GC(382) Pause Young (Normal) (G1 Evacuation Pause) 217M-&gt;120M(247M) 2.598ms
[61.234s][info][gc] GC(383) Pause Young (Concurrent Start) (G1 Evacuation Pause) 216M-&gt;120M(247M) 2.340ms
[61.234s][info][gc] GC(384) Concurrent Cycle
[61.271s][info][gc] GC(384) Pause Remark 133M-&gt;133M(247M) 4.457ms
[61.287s][info][gc] GC(384) Pause Cleanup 135M-&gt;135M(247M) 0.171ms
[61.288s][info][gc] GC(384) Concurrent Cycle 53.972ms
[61.444s][info][gc] GC(385) Pause Young (Prepare Mixed) (G1 Evacuation Pause) 216M-&gt;120M(247M) 2.913ms
[61.464s][info][gc] GC(386) Pause Young (Mixed) (G1 Evacuation Pause) 131M-&gt;103M(247M) 3.910ms
[61.486s][info][gc] GC(387) Pause Young (Mixed) (G1 Evacuation Pause) 114M-&gt;95M(247M) 3.828ms
[61.684s][info][gc] GC(388) Pause Young (Normal) (G1 Evacuation Pause) 200M-&gt;95M(247M) 2.013ms
[61.881s][info][gc] GC(389) Pause Young (Normal) (G1 Evacuation Pause) 215M-&gt;95M(247M) 2.089ms
[62.073s][info][gc] GC(390) Pause Young (Concurrent Start) (G1 Evacuation Pause) 217M-&gt;95M(247M) 2.686ms
[62.073s][info][gc] GC(391) Concurrent Cycle
[62.103s][info][gc] GC(391) Pause Remark 106M-&gt;106M(247M) 3.136ms
[62.122s][info][gc] GC(391) Pause Cleanup 118M-&gt;118M(247M) 0.111ms
[62.123s][info][gc] GC(391) Concurrent Cycle 49.728ms
[62.334s][info][gc] GC(392) Pause Young (Prepare Mixed) (G1 Evacuation Pause) 217M-&gt;95M(247M) 2.472ms
[62.348s][info][gc] GC(393) Pause Young (Mixed) (G1 Evacuation Pause) 106M-&gt;75M(247M) 1.981ms
[62.363s][info][gc] GC(394) Pause Young (Mixed) (G1 Evacuation Pause) 86M-&gt;59M(247M) 3.422ms
</code></pre>
<p>吞吐量<code>2.7w</code>：</p>
<figure data-type="image" tabindex="10"><img src="https://img-blog.csdnimg.cn/20210427203729120.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>由于篇幅限制，其他方法就不再叙述了，如果想再提高吞吐量，可以从下面几个方面入手：</p>
<ul>
<li>调大堆内存：<code>-Xmx1g</code></li>
<li>使用更多的线程：<code>-XX:ParallelGCThreads=8</code></li>
<li>设置更大的初始堆内存：<code>-Xms512m</code></li>
<li>设置更大的新生代：<code>-XX:G1NewSizePercent</code>+<code>-XX:G1MaxNewSizePercent</code></li>
</ul>
<h1 id="8-附录一回收的一些细节讨论">8 附录一：回收的一些细节讨论</h1>
<h2 id="81-禁用显式gc">8.1 禁用显式<code>GC</code></h2>
<p>一般情况下，<code>System.gc()</code>会触发<code>Full GC</code>，同时对老年代和新生代进行回收，<code>JVM</code>提供了一个<code>DisableExplicitGC</code>来控制是否可以显式触发<code>GC</code>。<code>System.gc()</code>底层是<code>native</code>方法，源码位于<code>jvm.cpp</code>中：</p>
<figure data-type="image" tabindex="11"><img src="https://img-blog.csdnimg.cn/20210427145330225.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>如果禁用了，就相当于是空实现，也就是什么也不会执行。</p>
<h2 id="82-显式gc使用并发回收">8.2 显式<code>GC</code>使用并发回收</h2>
<p>默认情况下，如果<code>System.gc()</code>生效，会使用传统的<code>Full GC</code>，同时会忽略参数中的<code>UseG1GC</code>以及<code>UseConcMarkSweepGC</code>，此时<code>CMS</code>/<code>G1</code>都是没有并发执行的，如果使用<code>-XX:+ExplicitGCInvokesConcurrent</code>后，就会改变这种默认行为。</p>
<p>比如下面的代码：</p>
<pre><code class="language-java">public static void main(String[] args){
    byte [] b = new byte[1024*1024*10];
    System.gc();
}
</code></pre>
<p>带上参数：</p>
<pre><code class="language-bash">-Xlog:gc*,gc+marking*=debug,gc+heap=debug
-Xmx30m
</code></pre>
<p>会触发<code>Full GC</code>：</p>
<figure data-type="image" tabindex="12"><img src="https://img-blog.csdnimg.cn/20210427204914920.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>而如果加上<code>-XX:+ExplicitGCInvokesConcurrent</code>后，不会发生<code>Full GC</code>，而是使用<code>G1</code>的并行<code>GC</code>：</p>
<figure data-type="image" tabindex="13"><img src="https://img-blog.csdnimg.cn/20210427205100371.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="83-关于对象如何晋升到老年代">8.3 关于对象如何晋升到老年代</h2>
<p>对象晋升为老年代的途径有以下几个：</p>
<ul>
<li>通过年龄晋升：在<code>survivor</code>区中存活到一定年龄后（默认是15），便进入老年代，但是需要注意对象的实际晋升年龄是由<code>survivor</code>的使用情况动态计算得来的，也就是说，默认情况下，年龄到达15一定晋升到老年代，但是未到达该年龄的对象也有可能晋升，可以通过<code>-XX:MaxTenuringThresold</code>设置晋升年龄、</li>
<li>通过大小晋升：如果对象很大，大到<code>eden</code>区和<code>survivor</code>区都无法容纳，则会直接晋升到老年代，可以通过<code>-XX:PreteureSizeThreshold</code>设置，单位为字节</li>
</ul>
<h2 id="84-关于tlab">8.4 关于<code>TLAB</code></h2>
<p><code>TLAB</code>全称是<code>Thread Local Allocation Buffer</code>，线程本地缓存分配，这是一个线程专用的内存分配区域。使用该区域的原因是为了加速对象的分配，尽管对象一般分配在堆上，而堆是所有线程共享的，同一时间可能会有多个线程申请堆空间，容易造成冲突，而对象分配是一种非常常见的操作，因此<code>Java</code>提供了<code>TLAB</code>来避免分配对象时的线程冲突，提高对象分配的效率。在<code>TLAB</code>启用的情况下，虚拟机会为每一个<code>Java</code>线程分配一块<code>TLAB</code>区域。</p>
<h3 id="841-一个简单的测试">8.4.1 一个简单的测试</h3>
<p>测试代码：</p>
<pre><code class="language-java">public static void main(String[] args){
    long start = System.nanoTime();
    for (int i = 0; i &lt; 1_0000_0000; i++) {
        byte [] b = new byte[2];
        b[0] = 1;
    }
    long end = System.nanoTime();
    System.out.println(end-start);
}
</code></pre>
<p>参数：</p>
<pre><code class="language-bash">-server -XX:+UseTLAB -Xcomp -XX:-BackgroundCompilation -XX:+DoEscapeAnalysis
</code></pre>
<p>输出：</p>
<pre><code class="language-bash">1013561
</code></pre>
<p>修改参数，关闭<code>TLAB</code>：</p>
<pre><code class="language-bash">-server -XX:-UseTLAB -Xcomp -XX:-BackgroundCompilation -XX:+DoEscapeAnalysis
</code></pre>
<p>输出：</p>
<pre><code class="language-bash">3154586
</code></pre>
<p>可以看到，开启了<code>TLAB</code>花费的时间大概是没有开启<code>TLAB</code>的时间的三分之一。</p>
<h3 id="842-对象的分配">8.4.2 对象的分配</h3>
<p>从上面的实验可以看到，<code>TLAB</code>对对象分配的影响还是很大的，但是，由于<code>TLAB</code>的空间通常比较小，很容易装满，比如<code>TLAB</code>为<code>100KB</code>，已经使用了<code>80KB</code>，如果需要分配一个<code>30KB</code>的对象，那么可以有两种处理办法：</p>
<ul>
<li>放弃当前的<code>TLAB</code>区域：就是重新再申请一块<code>TLAB</code>，但是这样会浪费原来<code>TLAB</code>剩下的<code>20KB</code></li>
<li>直接分配在堆上：保留当前的<code>TLAB</code>，将来如果有小于<code>20KB</code>的对象就可以直接使用剩下的<code>20KB</code></li>
</ul>
<p>因此，<code>JVM</code>内部会维护一个叫<code>refill_waste</code>的值：</p>
<ul>
<li>当请求的对象大于<code>refill_waste</code>时，会选择在堆分配</li>
<li>若小于该值，废弃当前<code>TLAB</code>，新建<code>TLAB</code>来分配新对象</li>
</ul>
<p>默认情况下，<code>TLAB</code>和<code>refill_waste</code>的大小都会在运行时不断调整，使系统的运行状态最优。</p>
<p>引入<code>TLAB</code>后，对象的分配流程如下：</p>
<figure data-type="image" tabindex="14"><img src="https://img-blog.csdnimg.cn/2021042721230183.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="9-附录二-常用gc参数总结">9 附录二： 常用<code>GC</code>参数总结</h1>
<h2 id="91-串行回收器相关参数">9.1 串行回收器相关参数</h2>
<ul>
<li><code>-XX:+UseSerialGC</code>：新生代和老年代使用串行回收器</li>
<li><code>-XX:SurvivorRatio</code>：设置<code>eden</code>区和<code>survivor</code>区大小比例</li>
<li><code>-XX:PretenureSizeThreshold</code>：设置大对象进入老年代的阈值，超过该值会被直接分配在老年代</li>
<li><code>-XX:MaxTenuringThreshold</code>：设置对象进入老年代的最大值，每一次<code>Minor GC</code>后对象年龄就会加1，大于这个年龄的对象会进入老年代</li>
</ul>
<h2 id="92-并行回收器相关参数">9.2 并行回收器相关参数</h2>
<ul>
<li><code>-XX:+UseParNewGC</code>：新生代使用并行回收器，老年代使用串行回收器（<code>JDK9+</code>已删除）</li>
<li><code>-XX:+UseParallelOldGC</code>：老年代使用<code>ParallelOldGC</code>，新生代使用<code>ParallelGC</code></li>
<li><code>-XX:+ParallelGCThreads</code>：设置用于垃圾回收的线程数</li>
<li><code>-XX:MaxGCPauseMills</code>：最大垃圾回收停顿时间，一个大于0的整数</li>
<li><code>-XX:GCTimeRatio</code>：设置吞吐量大小，一个<code>0-100</code>的整数</li>
<li><code>-XX:+UseAdaptiveSizePolicy</code>：打开自适应策略，新生代的大小、<code>eden</code>区和<code>survivor</code>区比例、晋升到老年代的对象年龄参数会被动态调整</li>
</ul>
<h2 id="93-cms相关参数">9.3 <code>CMS</code>相关参数</h2>
<ul>
<li><code>-XX:+UseConcMarkSweepGC</code>：新生代使用并行回收器，老年代使用<code>CMS</code>+串行回收器</li>
<li><code>-XX:ParallelCMSThreads</code>：设定<code>CMS</code>的线程数量</li>
<li><code>-XX:CMSInitiatingOccupancyFraction</code>：设置垃圾回收在老年代空间被使用多少后触发，默认为使用率为<code>68%</code></li>
<li><code>-XX:+UseCMSCompactAtFullCollection</code>：设置垃圾回收后是否需要进行一次内存碎片整理</li>
<li><code>-XX:CMSFullGCsBeforeCompaction</code>：设定进行多少次<code>CMS</code>后，进行一次内存压缩</li>
<li><code>-XX:+CMSClassUnloadingEnabled</code>：允许对类元数据区进行回收</li>
<li><code>-XX:CMSInitiatingPermOccupancyFraction</code>：当永久区占用率达到该百分比后，进行一次<code>CMS GC</code>，前提开启<code>-XX:+CMSClassUnloadingEnabled</code></li>
<li><code>-XX:+CMSIncrementalMode</code>：使用增量模式（<code>JDK9</code>移除）</li>
</ul>
<h2 id="94-g1相关参数">9.4 <code>G1</code>相关参数</h2>
<ul>
<li><code>-XX:+UseG1GC</code>：开启<code>G1</code></li>
<li><code>-XX:MaxGCPauseMills</code>：设置最大垃圾回收停顿时间</li>
<li><code>-XX:GCPauseIntervalMills</code>：设置停顿时间间隔</li>
</ul>
<h2 id="95-tlab相关参数">9.5 <code>TLAB</code>相关参数</h2>
<ul>
<li><code>-XX:+UseTLAB</code>：开启<code>TLAB</code></li>
<li><code>-XX:+PrintTLAB</code>：打印相关信息（<code>JDK9</code>不支持）</li>
<li><code>-XX:TLABSize</code>：设置<code>TLAB</code>区域大小</li>
<li><code>-XX:+ResizeTLAB</code>：自动调整<code>TLAB</code>大小</li>
</ul>
<h2 id="96-其他参数">9.6 其他参数</h2>
<ul>
<li><code>-XX:+DisableExplicitGC</code>：禁用显式<code>GC</code></li>
<li><code>-XX:+ExplicitGCInvokesConcurrent</code>：使用并发方式处理显式<code>GC</code></li>
</ul>
<h1 id="10-参考">10 参考</h1>
<ul>
<li><a href="https://juejin.cn/post/6844903970142421005">掘金-JVM原理之GC垃圾回收器CMS详解</a></li>
<li><a href="https://sematext.com/blog/java-garbage-collection-logs/">Understanding Java Garbage Collection Logging: What Are GC Logs and How To Analyze Them</a></li>
</ul>
]]></content>
    </entry>
</feed>