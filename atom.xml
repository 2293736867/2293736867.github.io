<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://2293736867.github.io</id>
    <title>氷泠&apos;s blog</title>
    <updated>2021-03-23T05:24:01.296Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://2293736867.github.io"/>
    <link rel="self" href="https://2293736867.github.io/atom.xml"/>
    <subtitle>我配不上你，
纵然很努力。</subtitle>
    <logo>https://2293736867.github.io/images/avatar.png</logo>
    <icon>https://2293736867.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 氷泠&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[解决Github访问速度慢以及图片加载慢的问题]]></title>
        <id>https://2293736867.github.io/post/jie-jue-github-fang-wen-su-du-man-yi-ji-tu-pian-jia-zai-man-de-wen-ti/</id>
        <link href="https://2293736867.github.io/post/jie-jue-github-fang-wen-su-du-man-yi-ji-tu-pian-jia-zai-man-de-wen-ti/">
        </link>
        <updated>2021-03-23T04:28:44.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-前言">1 前言</h1>
<p><s>众所周知</s><code>Github</code>在国内的访问速度一直都不怎么样，主要的原因是<code>DNS</code>解析太慢了，也就是从<code>github.com</code>获取<code>IP</code>的过程太慢了，因此，一种最有效的办法是直接修改本地<code>Hosts</code>，饶过<code>DNS</code>解析。</p>
<p>这也是本文的出发点，虽然，这样的文章网上有很多，百度一搜出来基本上都是如下的套路：</p>
<ul>
<li>通过<code>IP</code>解析网站得到<code>github.com</code>的<code>IP</code>/直接给出某个<code>IP</code></li>
<li>修改本地<code>Hosts</code></li>
<li>刷新缓存</li>
</ul>
<p>当然，这样最大的一个坏处是当<code>IP</code>更新的时候每次都需要去修改<code>Hosts</code>，非常麻烦。受到<a href="https://github.com/521xueweihan/GitHub520">该仓库</a>的启发，本文提供了一种自动修改的方法，非常方便。</p>
<p>本文主要分成两个部分介绍：</p>
<ul>
<li>手动修改<code>Hosts</code></li>
<li>通过工具自动修改<code>Hosts</code></li>
</ul>
<p>首先看一下第一部分。</p>
<h1 id="2-手动修改hosts">2 手动修改<code>Hosts</code></h1>
<h2 id="21-修改hosts">2.1 修改<code>Hosts</code></h2>
<p>首先打开<a href="https://github.com/521xueweihan/GitHub520">该仓库</a>：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20210323104956954.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>复制其中的内容到<code>Hosts</code>文件中，各大平台<code>Hosts</code>文件位置如下：</p>
<ul>
<li><code>Windows</code>：<code>C:\Windows\System32\drivers\etc\hosts</code></li>
<li><code>Linux</code>：<code>/etc/hosts</code></li>
<li><code>Mac</code>：<code>/etc/hosts</code></li>
<li><code>Android</code>：<code>/system/etc/hosts</code></li>
<li><code>iOS</code>：<code>/etc/hosts</code></li>
</ul>
<p>根据对应平台修改上述的文件，添加内容到<code>Hosts</code>末尾即可。</p>
<h2 id="22-使hosts生效">2.2 使<code>Hosts</code>生效</h2>
<p>大部分情况下修改完<code>Hosts</code>文件后直接生效，如果不生效，可以尝试手动刷新<code>DNS</code>缓存，具体如下：</p>
<ul>
<li><code>Windows</code>：打开<code>cmd</code>，输入<code>ipconfig /flushdns</code></li>
<li><code>Linux</code>：<code>sudo rcnscd restart</code></li>
<li><code>Mac</code>：<code>sudo killall -HUP mDNSResponder</code></li>
</ul>
<p>如果不生效可以尝试重启机器。</p>
<h1 id="3-自动方式推荐">3 自动方式（推荐）</h1>
<p>上面的方式需要手动修改<code>Hosts</code>文件，非常麻烦，这里推荐一种自动修改的方式。</p>
<p>在此之前需要一个工具：<code>SwitchHosts</code>。</p>
<h2 id="31-switchhosts安装">3.1 <code>SwitchHosts</code>安装</h2>
<p>官方仓库在<a href="https://github.com/oldj/SwitchHosts">此处</a>，直接到<code>Release</code>下载即可。</p>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20210323105839503.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>或者从软件包仓库安装，以笔者的<code>Manjaro</code>为例：</p>
<pre><code class="language-bash">paru -S switchhosts-bin
</code></pre>
<h2 id="32-配置">3.2 配置</h2>
<p>打开后，点击左下角的加号按钮，添加一个新的规则：</p>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20210323110926924.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>内容如下：</p>
<ul>
<li>标题：随便</li>
<li>类型：<code>Remote</code></li>
<li><code>URL</code>：<code>https://cdn.jsdelivr.net/gh/521xueweihan/GitHub520@main/hosts</code></li>
<li>自动刷新时间：第一次添加可以先选择<code>1 minute</code>，有了规则以后，就可以选择<code>1 hour</code></li>
</ul>
<p>配置好后就可以看到了：</p>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20210323111137241.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="33-一个小问题">3.3 一个小问题</h2>
<p>笔者在实测的时候发现如果直接通过启动菜单启动<code>SwitchHosts</code>，添加新的规则老是失败：</p>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/20210323111256850.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>无论输入的是用户的密码还是<code>root</code>的密码都不行。</p>
<p>于是笔者找了一下启动命令，直接<code>sudo</code>启动：</p>
<pre><code class="language-bash">sudo switchhosts
</code></pre>
<figure data-type="image" tabindex="6"><img src="https://img-blog.csdnimg.cn/2021032311140535.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>启动失败，按照提示加上<code>--no-sandbox</code>（这是一个<code>eletron</code>的参数）：</p>
<pre><code class="language-bash">sudo switchhosts --no-sandbox
</code></pre>
<p>需要注意在启动之前需要把原来普通模式启动的<code>SwitchHosts</code>先退出了，不然会提示端口占用：</p>
<figure data-type="image" tabindex="7"><img src="https://img-blog.csdnimg.cn/20210323111606707.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>启动之后就可以直接修改<code>Hosts</code>而不需要密码了。</p>
<p>另外这里有一个小细节就是两种模式下（普通模式/<code>sudo</code>模式）启动的图标不一样：</p>
<figure data-type="image" tabindex="8"><img src="https://img-blog.csdnimg.cn/20210323111626701.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="9"><img src="https://img-blog.csdnimg.cn/20210323111748541.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="4-效果">4 效果</h1>
<p>配置好<code>DNS</code>后应该能正常访问<code>Github</code>上的图片了：</p>
<figure data-type="image" tabindex="10"><img src="https://img-blog.csdnimg.cn/2021032312153795.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="5-后记">5 后记</h1>
<p>通过上面的配置<code>DNS</code>方法应该就可以顺利访问<code>Github</code>了，此外，该仓库还介绍了另一种自动配置<code>DNS</code>的方式：<code>AdGuard Home</code>：</p>
<figure data-type="image" tabindex="11"><img src="https://img-blog.csdnimg.cn/20210323121702657.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>由于笔者没有用过就不说这个了。最后，该仓库还有一个<code>TODO</code>：</p>
<figure data-type="image" tabindex="12"><img src="https://img-blog.csdnimg.cn/20210323121802315.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>希望最后一项内容尽快完成吧。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第282期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-282-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-282-qi/">
        </link>
        <updated>2021-03-22T23:14:02.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>海底捞的服务是真心好，上次我吃饭没带钱，还是服务员帮我报的警。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>晓日压重檐，斗帐春寒起来忺。<br>
——孙道绚《南乡子·春闺》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>我讨厌一会充满希望一会变成绝望，我们已经受够了期待落空了。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第281期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-281-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-281-qi/">
        </link>
        <updated>2021-03-22T14:14:13.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>人生和骑自行车不同，就算走下坡路，也不会轻松。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>春蚕食叶响回廊，禹门已准桃花浪，月殿先收桂子香。<br>
——辛弃疾《鹧鸪天·送廓之秋试》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>身为冒险者，如果安静的老死在床上，那简直就是耻辱！</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第280期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-280-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-280-qi/">
        </link>
        <updated>2021-03-21T02:58:36.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>我不骂人，那是因为我，动手能力比较强。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>风急桃花也似愁，点点飞红雨。<br>
——如晦《楚天遥过清江引·有意送春归》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>既不回头，何必不忘；既然无缘，何必誓言；今日种种，似水无痕。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第279期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-279-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-279-qi/">
        </link>
        <updated>2021-03-20T12:54:32.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>生活中很多人喜欢小题大做，其实真的没有什么必要，要想想大题怎么办？</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>正护月云轻，嫩冰犹薄。<br>
——辛弃疾《瑞鹤仙·赋梅》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>一直在躲雨，你有考虑过雨的感受吗？</p>
</blockquote>
<h1 id="神奇的随机函数">神奇的随机函数</h1>
<p>神奇的<code>Math.random()</code>随机函数居然能帮我直接<code>AC</code>？？？？</p>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1616245050254.png" alt="" loading="lazy"></figure>
<p>好家伙。。。</p>
<h1 id="音乐推荐">音乐推荐</h1>
<blockquote>
<p><a href="https://music.163.com/#/song?id=1815105886">狐狸的童话——Santa_SA / 马也_Crabbit</a></p>
</blockquote>
<blockquote>
<p>冬天的记忆<br>
小巷里吹过晚风<br>
心里的秘密<br>
要用童话去缓冲<br>
魔法的世界真的存在<br>
汽车被白马替代<br>
最美丽的梦不应该存在别人口中</p>
</blockquote>
<blockquote>
<p>我还是以前一样无法长大的幼稚<br>
我还是以前一样喜欢城堡和骑士<br>
我还是以前一样喜欢梦想当做旗帜<br>
我还是以前一样心里都是奇妙的文字</p>
</blockquote>
<blockquote>
<p>我用生活经历写一本故事书<br>
有小红帽的森林<br>
糖果做的小屋<br>
我不甘心与你只做普通朋友<br>
嘿我的公主<br>
请让童话将你守护</p>
</blockquote>
<blockquote>
<p>冬天的记忆<br>
小巷里面吹过晚风<br>
心里的秘密<br>
要用童话去做缓冲<br>
魔法的世界真的存在<br>
汽车被白马代替<br>
最美丽的梦<br>
不应该存在别人口中<br>
我已经不一样了<br>
开始学会长大<br>
没有城堡和其实那也不会再害怕<br>
守护梦想的旗帜披上盔甲骑白马<br>
心里那奇妙的文字它消失变成了童话<br>
我们用生活的经历区写本故事书</p>
</blockquote>
<blockquote>
<p>门后的世界是属于你的糖果屋<br>
加点魔法吧努力过那就不算输<br>
油锅里熬的汤药只要微笑不要哭<br>
把世界最美好的事情都装进晚风<br>
一整天的好心情全都放进碗中<br>
定下的约定去追吧那就往前冲<br>
会成功的足迹会遍布南北西东<br>
成为最想成为的人做最想完成的事<br>
功成名就一定能要去写最美的字<br>
那就加油吧<br>
别怕输了几次<br>
那就加油吧<br>
别怕输了几次</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第278期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-278-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-278-qi/">
        </link>
        <updated>2021-03-19T09:06:59.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>钱虽然难赚，但是容易花啊。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>想得寻春，依旧当年路。<br>
——杨炎正《蝶恋花·别范南伯》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>世界上所有的不利情况都是因为当事者能力不足造成的。</p>
</blockquote>
<h1 id="两个实用工具">两个实用工具</h1>
<p>今天发现了两个比较实用的工具：</p>
<ul>
<li><code>ShellCheck</code>：可以检查脚本是否写正确</li>
<li><code>rhit</code>：<code>Rust</code>写的查看<code>Nginx</code>日志工具</li>
</ul>
<p>具体就直接去<code>Github</code>查吧，就不放链接了。</p>
<h1 id="奇怪的游戏">奇怪的游戏</h1>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1616145118629.png" alt="" loading="lazy"></figure>
<p>不放链接了，直接上<code>Github</code>查吧。</p>
<p>试玩了一下，虽然纯文字不怎么占内存，但是不太会玩，2800个角色，人直接懵掉。。。</p>
<p>一周目发现所有的角色不知道为什么都die了。。。</p>
<p>二周目挑了个女生，聊了一会天居然直接。。直接die。。。？？？</p>
<p>好家伙。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[实用工具+好玩工具合集（持续更新中）]]></title>
        <id>https://2293736867.github.io/post/linux-shi-yong-gong-ju-he-ji-chi-xu-geng-xin-zhong/</id>
        <link href="https://2293736867.github.io/post/linux-shi-yong-gong-ju-he-ji-chi-xu-geng-xin-zhong/">
        </link>
        <updated>2021-03-19T09:00:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="2021323-更新">2021.3.23 更新</h1>
<h1 id="1-linux-系列">1 Linux 系列</h1>
<h2 id="11-实用工具">1.1 实用工具</h2>
<ul>
<li><code>shellcheck</code>：<code>shell</code>检查工具</li>
<li><code>rhit</code>：<code>Nginx</code>日志检查工具</li>
<li><code>ranger</code>：资源管理器查看工具</li>
<li><code>gtop</code>/<code>htop</code>：进程查看工具，前者更加<code>GUI</code>化</li>
<li><code>Filelight</code>：图形界面的磁盘占用查看，饼状图的方式直观显示</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1616295127192.png" alt="" loading="lazy"></figure>
<ul>
<li><code>t-rec</code>：终端命令录制工具（准确来说可以录制任何窗口，指定即可）</li>
<li><code>Syncthing</code>：<code>Go</code>语言写的文件同步器，支持三大平台</li>
<li><code>Kooha</code>：<code>Gnome</code>下的录屏工具，笔者的<code>Xfce</code>不支持，遗憾了</li>
</ul>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1616467430932.png" alt="" loading="lazy"></figure>
<h2 id="12-好玩的东东">1.2 好玩的东东</h2>
<ul>
<li><code>cool-retro-term</code>：复古效果终端</li>
</ul>
<figure data-type="image" tabindex="3"><img src="https://2293736867.github.io/post-images/1616295464158.png" alt="" loading="lazy"></figure>
<ul>
<li><code>Ryujinx</code>：<code>C#</code>写的<code>Switch</code>模拟器，笔者<code>Manjaro</code>已尝试成功运行马里奥3D世界</li>
</ul>
<figure data-type="image" tabindex="4"><img src="https://2293736867.github.io/post-images/1616467565496.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="5"><img src="https://2293736867.github.io/post-images/1616467570236.png" alt="" loading="lazy"></figure>
<h1 id="2-android">2 Android</h1>
<h2 id="21-实用工具">2.1 实用工具</h2>
<ul>
<li><code>NewPipe</code>：第三方油管播放器，带下载功能</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第277期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-277-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-277-qi/">
        </link>
        <updated>2021-03-18T09:03:57.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>我能想到的最浪漫的事，就是看你一人慢慢变老。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>黄师塔前江水东，春光懒困倚微风。<br>
——杜甫《江畔独自寻花·其五》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>我今天就是要带她走，我看哪个敢拦我。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第276期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-276-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-276-qi/">
        </link>
        <updated>2021-03-17T05:47:47.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>群发的祝福和个位数的红包，都是没有灵魂的。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>白日丽飞甍，参差皆可见。<br>
——谢眺《晚登三山还望京邑》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>你的死亡让我的掉败更加沉重！</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[软件测试笔记（二）：软件测试流程]]></title>
        <id>https://2293736867.github.io/post/ruan-jian-ce-shi-bi-ji-er-ruan-jian-ce-shi-liu-cheng/</id>
        <link href="https://2293736867.github.io/post/ruan-jian-ce-shi-bi-ji-er-ruan-jian-ce-shi-liu-cheng/">
        </link>
        <updated>2021-03-17T05:46:50.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-测试流程概述">1 测试流程概述</h1>
<p>软件测试流程包括：</p>
<ul>
<li>测试计划：测试计划是指根据用户需求报告中关于功能要求和性能指标的规格说明书，定义相应的测试需求报告，使得随后所有的测试工作都围绕着测试需求来进行，同时适当选择测试内容，合理安排测试人员、测试时间和测试资源等</li>
<li>测试设计：测试设计是指将测试计划阶段制订的测试需求分解，细化为若干个可执行的测试过程，并为每个测试过程选择适当的测试用例，保证测试结果的有效性</li>
<li>测试开发：测试开发是指建立可重复使用的自动测试过程</li>
<li>测试执行：测试执行是指执行测试开发阶段建立的自动测试过程，并对所发现的缺陷进行跟踪管理，一般有单元测试、集成测试、确认测试等步骤组成</li>
<li>测试评估：测试评估是指结合量化的测试覆盖域及缺陷跟踪报告，对应用软件的质量和开发团队的工作进度以及工作效率进行综合评价</li>
</ul>
<p>其中测试执行由以下步骤组成：</p>
<ul>
<li>单元测试：通过对每个最小的软件模块进行测试，对源代码的每一个程序单元实行测试，来检查各个程序模块是否正确地实现了规定的功能，确保其能正常工作</li>
<li>集成测试：对已测试过的模块进行组装集成，目的在于检验与软件设计相关的程序结构问题</li>
<li>确认测试：检验软件是否满足需求规格说明中的功能和性能需求，确定软件配置完全、正确，并检验软件产品能否与实际运行环境中整个系统的其他部分协调工作</li>
<li>验收测试：主要让用户对软件进行测试，并重新执行已经做过的测试的某个子集，保证没有引入新的错误</li>
</ul>
<h1 id="2-单元测试">2 单元测试</h1>
<h2 id="21-定义">2.1 定义</h2>
<p>单元测试用于判断一小段代码的某个特定条件或场景下某个特定函数的行为，主要测试软件设计的最小单元在语法、格式、逻辑等方面的缺陷以及是否符合功能、性能等需求，程序的多个模块可以并行地进行单元测试工作。</p>
<h2 id="22-内容">2.2 内容</h2>
<p>主要包括5个任务：</p>
<ul>
<li>模块接口测试：通过对被测试模块的数据流进行测试，检查进出模块的数据是否正确，因此必须对模块接口，包括参数表、调用子模块参数、全程数据、文件输入输出操作进行测试</li>
<li>局部数据结构测试：测试用例检查局部数据结构的完整性，如数据类型说明、初始化、缺省值等方面的问题</li>
<li>执行路径测试：对模块中重要的路径进行测试，对基本执行路径和循环进行测试往往可以发现大量路径错误，测试用例必须能够发现由于计算错误、不正确的判定或不正常的控制流而产生的错误</li>
<li>错误处理测试：检查模块的错误处理功能是否包含错误或者缺陷，例如，是否拒绝不合理的输入等</li>
<li>边界条件测试：必须采用边界值分析方法来设计测试用例，测试在为限制数据处理而设定的边界处，测试模块是否能够正常工作</li>
</ul>
<h2 id="23-步骤">2.3 步骤</h2>
<p>一般单元测试需要辅助模块去帮助完成测试，辅助模块分为两种：</p>
<ul>
<li>驱动模块：用来模拟被测试模块的上一级模块，相当于被测模块的主程序，用于接收测试数据，并把这些数据传送给被测模块，启动被测模块并输出结果</li>
<li>桩模块：用来模拟被测试模块工作过程中所调用的模块</li>
</ul>
<p>被测试模块、驱动模块和桩模块共同构成了一个测试环境去进行测试。</p>
<h1 id="3-集成测试">3 集成测试</h1>
<h2 id="31-定义">3.1 定义</h2>
<p>将经过单元测试的模块连接起来，组成所规定的软件系统的过程称为集成，集成测试就是针对这个过程，按模块之间的依赖接口的关系图进行测试。</p>
<h2 id="32-任务">3.2 任务</h2>
<p>主要任务是解决如下问题：</p>
<ul>
<li>将各模块连接起来，检查模块相互调用时，数据经过接口是否丢失</li>
<li>将各个子功能组合起来，检查能否到达预期要求的各项功能</li>
<li>一个模块的功能是否会对另一个模块的功能产生不利的影响</li>
<li>全局数据结构是否有问题，会不会被异常修改</li>
<li>单个模块的误差积累起来，是否被放大，从而达到不可接受的程度</li>
</ul>
<h2 id="33-方法">3.3 方法</h2>
<p>集成测试的方法，包括：</p>
<ul>
<li>非增量式集成测试方法</li>
<li>增量式集成测试方法</li>
</ul>
<h3 id="331-非增量式集成测试方法">3.3.1 非增量式集成测试方法</h3>
<p>非增量式集成测试方法采用一步到位的方法来进行测试，对所有模块单元进行个别的单元测试后，按程序结构图将各模块连接起来，把连接后的程序当作一个整体进行测试。</p>
<h3 id="332-增量式集成测试方法">3.3.2 增量式集成测试方法</h3>
<p>增量式测试集成方法可以分为：</p>
<ul>
<li>自顶向下增量式测试</li>
<li>自底向上增量式测试</li>
<li>三明治集成测试</li>
</ul>
<h4 id="3321-自顶向下增量式测试">3.3.2.1 自顶向下增量式测试</h4>
<p>自顶向下增量式测试按照结构图自上而下逐步集成和逐步测试，模块集成的顺序首先是集成主控模块（主程序），然后按照软件控制层次结构向下进行集成，集成策略可以选择广度优先或深度优先。</p>
<p>优点包括：</p>
<ul>
<li>在测试过程中较早地验证主要的控制点</li>
<li>功能性的模块测试可以较早地得到证实</li>
<li>最多只需要一个驱动模块就可以进行测试</li>
<li>支持缺陷故障隔离</li>
</ul>
<p>缺点：</p>
<ul>
<li>随着底层模块不断增加，会导致底层模块的测试不充分</li>
<li>每次组装都需要提供桩，导致桩的数据急剧增加，从而维护桩的成本会快速上升</li>
</ul>
<h4 id="3322-自底向上增量式测试">3.3.2.2 自底向上增量式测试</h4>
<p>从原子模块（软件结构中最底层的模块）开始，按结构图从下而上逐步进行集成和测试。</p>
<p>优点：</p>
<ul>
<li>总体上减少了桩模块的工作量</li>
<li>允许对底层模块行为进行早期验证</li>
<li>测试初期可以并行集成</li>
</ul>
<p>缺点：</p>
<ul>
<li>随着集成到顶层，整个系统变得越来越复杂，对于底层的一些模块很难覆盖</li>
<li>驱动模块的开发工作量大</li>
</ul>
<h4 id="3323-三明治集成测试">3.3.2.3 三明治集成测试</h4>
<p>也叫混合集成，将自顶向下和自底向上的优缺点集于一身，三明治集成就是把系统分为三层，中间一层为目标层，对目标层上层采用自顶向下的集成测试方式，对目标层下层采用自底向上集成策略，最后对目标层进行测试。</p>
<h1 id="4-确认测试">4 确认测试</h1>
<h2 id="41-定义">4.1 定义</h2>
<p>用于验证软件的有效性，也就是验证软件的功能和性能以及其他特性是否与用户要求一致。</p>
<h2 id="42-内容">4.2 内容</h2>
<p>内容包括：</p>
<ul>
<li>有效性测试：在模拟的环境下，运用黑盒测试的方法，验证被测试软件是否满足需求规格说明书列出的需求</li>
<li>软件配置审查：保证软件配置的所有成分，包括与实际运行环境中整个系统的支持环境都应齐全，各方面的质量都符合要求</li>
</ul>
<h1 id="5-验收测试">5 验收测试</h1>
<h2 id="51-定义">5.1 定义</h2>
<p>验收测试是以用户为主的测试，但是软件开发人员和质量保证人员也需要参加。由用户参加设计测试用例，通过用户界面输入测试数据，分析测试的输出结构。</p>
<h2 id="52-内容">5.2 内容</h2>
<p>内容包括：</p>
<ul>
<li><code>alpha</code>测试</li>
<li><code>beta</code>测试</li>
<li>回归测试</li>
</ul>
<h3 id="521-alpha测试">5.2.1 <code>alpha</code>测试</h3>
<p><code>alpha</code>测试是由一个用户在开发环境下的测试，也可以是公司内部用户在模拟实际操作环境下进行的测试。这是在受控制环境下进行的测试，目的是评价软件产品的功能、可使用性、可靠性、性能和支持，尤其注重产品的界面和特色。</p>
<h3 id="522-beta测试">5.2.2 <code>beta</code>测试</h3>
<p><code>beta</code>测试由软件的多个用户在一个或多个用户的实际使用环境下进行的测试，与<code>alpha</code>测试不同，开发者通常不在测试现场。在<code>beta</code>测试中，由用户记录遇到的所有问题，包括真实的以及主观认定的问题，定期向开发者报告，开发者综合用户的报告后做出修改。</p>
<h3 id="523-回归测试">5.2.3 回归测试</h3>
<h4 id="5231-定义">5.2.3.1 定义</h4>
<p>回归测试是一种验证已变更的系统的完整性与正确性的测试技术，是指重新执行已经做过的测试的某个子集，以保证修改没有引入新的错误或者发现由于更改而引起的之前未发现的错误。</p>
<h4 id="5232-实施前提">5.2.3.2 实施前提</h4>
<p>回归测试的实施前提包括：</p>
<ul>
<li>当软件中所含错误被发现时，如果错误跟踪和管理系统不够完善，可能会遗漏对这些错误的修改</li>
<li>开发者对错误的理解不够透彻，也可能导致所做的修改只修正了错误的外在表现，而没有修改错误本身</li>
<li>修改还有可能产生副作用，从而导致软件未被修改的部分产生新的问题</li>
</ul>
<h4 id="5233-回归测试的两个策略">5.2.3.3 回归测试的两个策略</h4>
<ul>
<li>完全重复测试：选择完全重复测试是指将所有的测试用例，全部再完全执行一遍，缺点是要把用例全部执行，会增加项目的成本以及影响项目的进度</li>
<li>选择性重复测试：选择一部分测试执行，以确认问题修改的正确性和修改后周边是否受到影响，常见的方法包括覆盖修改法、周边影响法、指标达成法、基于操作剖面、基于风险选择测试</li>
</ul>
<h4 id="5234-流程">5.2.3.4 流程</h4>
<ul>
<li>在测试策略指定阶段，制定回归测试策略</li>
<li>确定回归测试版本</li>
<li>回归测试版本发布，按照回归测试策略执行回归测试</li>
<li>回归测试通过，关闭缺陷跟踪单</li>
<li>回归测试不通过，缺陷单返回开发人员，重新修改后再次回归测试</li>
</ul>
]]></content>
    </entry>
</feed>