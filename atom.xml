<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://2293736867.github.io</id>
    <title>氷泠&apos;s blog</title>
    <updated>2020-06-28T21:01:30.452Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://2293736867.github.io"/>
    <link rel="self" href="https://2293736867.github.io/atom.xml"/>
    <subtitle>我配不上你，
纵然很努力。</subtitle>
    <logo>https://2293736867.github.io/images/avatar.png</logo>
    <icon>https://2293736867.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 氷泠&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[每日分享 第11期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-11-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-11-qi/">
        </link>
        <updated>2020-06-28T19:27:48.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200629044533948.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>做一天的好人并不难，难的是做一辈子有钱人。</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>女人更擅长辨别颜色的深浅，而男人更擅长追踪快速移动的物体并从远处识别细节。这些都是与人类狩猎采集历史相关的进化细节。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>莫辞盏酒十分劝，只恐风花一片飞。<br>
——程颢《郊行即事》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>所以我松开拳头用手握紧笔，作为自己作为人类也作为你。<br>
——贰拾</p>
</blockquote>
<h1 id="每日音乐">每日音乐</h1>
<blockquote>
<p><a href="https://music.163.com/#/song?id=244103">自己-黄伊汶</a></p>
</blockquote>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200629050016326.png" alt="在这里插入图片描述" loading="lazy"></figure>
<blockquote>
<p>人若活一次 多少苦都要试<br>
流泪或失意 有尽时<br>
恨他多少次 以后才懂确定<br>
变幻无常 人生必经</p>
</blockquote>
<blockquote>
<p>多珍惜都会走 无奈人善变<br>
多舍不得放手 也只有接受<br>
自尊心伤过太多次 眼泪流下了<br>
何必勉强自己</p>
</blockquote>
<blockquote>
<p>不甘心都要走 无奈留住你<br>
到最后换来是 白费心机<br>
伤心伤过这一次 会努力面对<br>
人总要靠自己</p>
</blockquote>
<blockquote>
<p>理想是坚守到白头 她很奋斗<br>
但最终是一切 背道而驰<br>
为他哭得呼天抢地 流干眼泪<br>
自怨又自艾 谁撑到你</p>
</blockquote>
<blockquote>
<p>多珍惜都会走 无奈人善变<br>
多舍不得放手 也只有接受<br>
自尊心伤过太多次 眼泪流下了<br>
何必勉强自己</p>
</blockquote>
<blockquote>
<p>不甘心都要走 无奈留住你<br>
到最后换来是 白费心机<br>
伤心伤过这一次 会努力面对<br>
人总要靠自己</p>
</blockquote>
<blockquote>
<p>很可惜他要走 无奈人善变<br>
多舍不得放手 也只有接受<br>
自尊心伤过太多次 眼泪流下了<br>
何必放弃自己</p>
</blockquote>
<blockquote>
<p>经得起这结果 其实跌低过<br>
到最后 任何事也会经过<br>
冷静下来便清楚<br>
前路得一个 得你爱自己</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CLion 2020.1.2 激活]]></title>
        <id>https://2293736867.github.io/post/clion-202012-ji-huo/</id>
        <link href="https://2293736867.github.io/post/clion-202012-ji-huo/">
        </link>
        <updated>2020-06-28T08:46:45.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-下载">1 下载</h1>
<p><a href="https://www.jetbrains.com/clion/">官网</a>。</p>
<h1 id="2-运行">2 运行</h1>
<p>解压安装并运行，选择Evaluate。<br>
<img src="https://img-blog.csdnimg.cn/20200628163736395.png" alt="在这里插入图片描述" loading="lazy"></p>
<h1 id="3-激活">3 激活</h1>
<p>来<a href="https://github.com/2293736867/JetBrainsActivation">这里</a>下载jar补丁，拖进去即可。<br>
<img src="https://img-blog.csdnimg.cn/20200628164613719.gif" alt="在这里插入图片描述" loading="lazy"></p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/2020062816445050.png" alt="在这里插入图片描述" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第10期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-10-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-10-qi/">
        </link>
        <updated>2020-06-28T08:07:58.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200628161105970.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>你得好好努力，才能配得上，被人利用。</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>有一些植物（如拟南芥）在感应到毛毛虫咀嚼的振动时能以释放毒素作为防御机制，哪怕咀嚼声是播放的录音。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>忧喜相寻，风雨过，一江春绿。<br>
——苏轼《满江红·忧喜相寻》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>值得获取的东西，就在风险的彼岸。</p>
</blockquote>
<h1 id="每日音乐">每日音乐</h1>
<blockquote>
<p><a href="https://music.163.com/#/song?id=316486">野孩子-杨千嬅</a></p>
</blockquote>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200628162315460.png" alt="在这里插入图片描述" loading="lazy"></figure>
<blockquote>
<p>就算只谈一场感情<br>
除外都是一时虚荣<br>
不等于在蜜月套房游玩过<br>
就可自入自出仙境<br>
情愿获得你的尊敬<br>
承受太高傲的罪名<br>
挤得进你臂弯 如情怀渐冷<br>
未算孤苦也伶仃</p>
</blockquote>
<blockquote>
<p>明知爱这种男孩子<br>
也许只能如此<br>
但我会成为你最牵挂的一个女子<br>
朝朝暮暮让你猜想如何驯服我<br>
若果亲手抱住<br>
或者不必如此<br>
许多旁人说我不太明了男孩子<br>
不受命令就是一种最坏名字<br>
笑我这个毫无办法管束的野孩子<br>
连没有幸福都不介意</p>
</blockquote>
<blockquote>
<p>若我依然坚持忠诚<br>
难道你又适合安定<br>
真可惜 说要吻我的还未吻<br>
自己就自梦中苏醒<br>
离场是否有点失敬<br>
还是更轰烈的剧情<br>
必需有这结果 才能怀念我<br>
让我于荒野中驰骋</p>
</blockquote>
<blockquote>
<p>明知爱这种男孩子<br>
也许只能如此<br>
但我会成为你最牵挂的一个女子<br>
朝朝暮暮让你猜想如何驯服我<br>
若果亲手抱住 或者不必如此<br>
许多旁人说我不太明了男孩子<br>
不受命令就是一种最坏名字<br>
笑我这个毫无办法管束的野孩子<br>
连没有幸福都不介意</p>
</blockquote>
<blockquote>
<p>明知爱这种男孩子<br>
也许只能如此<br>
但我会成为你最牵挂的一个女子<br>
朝朝暮暮让你猜想如何驯服我<br>
若果亲手抱住 或者不必如此<br>
许多旁人说我不太明了男孩子<br>
不受命令就是一种最坏名字<br>
我也笑我原来是个天生的野孩子<br>
连没有幸福都不介意</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第9期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-9-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-9-qi/">
        </link>
        <updated>2020-06-28T08:04:17.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200628113411417.jpg" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>虽然你长的丑，但是你想得美啊。</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>老式的&quot;高轮车&quot;也被称为&quot;便士法新&quot;,因为人们认为其车轮看上去像是最大（便士）和最小（法新）的英国硬币。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>杜鹃啼初，泪洒胭脂雨。<br>
—— 陈子龙《点绛唇·春日风雨有感》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>无论乌云有多厚，星星也一定还在，只是暂时看不到了而已。<br>
—— 电波女与青春男</p>
</blockquote>
<h1 id="每日音乐">每日音乐</h1>
<blockquote>
<p><a href="https://music.163.com/#/song?id=22690848">萤火虫之光-ホタルノヒカリ</a></p>
</blockquote>
<blockquote>
<p>SHA LA LA いつかきっと 僕は手にするんだ<br>
はかなき 胸に そっと ひかり 燃えていけ<br>
逢いたくなるの「衝動」 哭きたくなるの「純情」<br>
夏の火に飛び込んだ ホタルはかえらない<br>
あなたは何も言わず接吻(くちづけ)を残して<br>
火傷(きず)つくまま うなづいたね<br>
哀しいほど命 揺らめいていた</p>
</blockquote>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200626220820298.png" alt="在这里插入图片描述" loading="lazy"></figure>
<blockquote>
<p>SHA LA LA いつかきっと 僕は手にするんだ<br>
はかなき 胸に そっと ひかり 燃えていけ<br>
SHA LA LA 愛しきひと あなたもみえているの<br>
まばゆい 月が そっと 明日を照らして<br>
強く 強く 輝いて</p>
</blockquote>
<blockquote>
<p>風に吹かれるほど 烈しくなる心に<br>
はぐれそうな想い出が また優しく灯る<br>
夢中で駆けだしたら 触れられる気がした<br>
意志(おもむ)くまま 手を伸ばすよ<br>
切ないほど命 揺らめいていく</p>
</blockquote>
<blockquote>
<p>SHA LA LA 僕はずっと 唄いつづけていくよ<br>
ふるえる 胸に そっと ひかり 燃えていけ<br>
SHA LA LA 愛しきひと あなたに届くように<br>
はてない 空に そっと 想い つのらせて<br>
強く 強く 響かせて</p>
</blockquote>
<blockquote>
<p>SHA LA LA いつかきっと ホタルは燃え尽き散って<br>
きえゆく 胸に そっと 夢よ 輝いて<br>
SHA LA LA 愛しきひと あなたも忘れないで<br>
きらめく 夏に そっと 願いを重ねて<br>
SHA LA LA いつかきっと 僕は手にするんだ<br>
はかなき 胸に そっと ひかり 燃えていけ<br>
SHA LA LA 愛しきひと あなたもみえているの<br>
まばゆい 月が そっと 明日を照らして<br>
強く 強く 輝いて</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Kotlin学习笔记]]></title>
        <id>https://2293736867.github.io/post/kotlin-xue-xi-bi-ji/</id>
        <link href="https://2293736867.github.io/post/kotlin-xue-xi-bi-ji/">
        </link>
        <updated>2020-06-26T13:56:47.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-概述">1 概述</h1>
<p>这篇文章首先会介绍Kotlin的特点，接着介绍Kotlin与Java的语法比较。</p>
<h1 id="2-kotlin特点">2 Kotlin特点</h1>
<ul>
<li>一门现代化的编程语言</li>
<li>可开发跨平台应用，web，Socket，安卓，js，NativeApp等</li>
<li>静态编程语言，性能基本与原声Java相当</li>
<li>100%兼容Java（说是兼容但实际上有些坑，可以<a href="https://blog.hlyue.com/2018/05/03/Kotlin-and-springboot/">戳这里</a>看看）</li>
<li>简洁：跟Java相比真的是简洁很多，语法糖特别舒服</li>
<li>安全：彻底解决写Java基本上都会遇到的著名的NullPointerException问题，结合编译器可以在编译截断发现几乎所有可能存在NPE问题的代码</li>
<li>互操作性：基于JVM，可以直接拿现有的Java库用</li>
<li>工具友好：和JetBrains的IDE结合简直舒服得不要不要的</li>
<li>支持函数式编程：比如Lambda表达式</li>
<li>支持协程：协程像是非常轻量级的县城，协程将复杂性放入库来简化异步编程，逻辑可以在协程中顺序表达，底层库负责解决异步性，很重要的一点是协程挂起不会阻塞其他线程。官方一个demo是开启10w个协程：<br>
<img src="https://user-gold-cdn.xitu.io/2020/6/26/172f0e691032f67b?w=640&amp;h=191&amp;f=png&amp;s=39706" alt="在这里插入图片描述" loading="lazy"></li>
<li>支持扩展函数：类似C#，能够扩展一个类的新功能而无需继承类或者使用装饰者这样的设计模式，Kotlin支持扩展函数和扩展属性</li>
<li>泛型：当然Java也支持泛型，但是Kotlin比Java支持得更好</li>
<li>不依赖XML</li>
</ul>
<p>下面进入Kotlin的语法部分。</p>
<h1 id="3-基本语法">3 基本语法</h1>
<ul>
<li>无<code>;</code>结尾</li>
<li><code>println()</code>代替<code>System.out.println();</code></li>
<li>输出语句中使用<code>$变量名</code>代替Java中的<code>+变量名</code>，比如<code>println(&quot;age:$age&quot;)</code>而不是<code>System.out.println(&quot;age:&quot;+age)</code></li>
<li>三引号（三个双引号连在一起）中的字符串不会进行转义</li>
</ul>
<h1 id="4-变量与常量">4 变量与常量</h1>
<ul>
<li><code>var</code>声明变量</li>
<li><code>val</code>声明常量</li>
<li>可以在<code>var</code>/<code>val</code>后面加上类型，比如<code>val a:Int</code></li>
</ul>
<p><img src="https://user-gold-cdn.xitu.io/2020/6/26/172f0e6911d59e71?w=557&amp;h=281&amp;f=png&amp;s=119209" alt="在这里插入图片描述" loading="lazy"><br>
如上图提示<code>val</code>不能被赋值，提示改为<code>var</code>。<code>val</code>类似与Java中的<code>final</code>，虽然<code>val</code>引用自身不可变，但是指向的对象是可以改变的。</p>
<p><code>val</code>只能进行唯一一次初始化，如果编译器能确保只有唯一一条初始化语句被执行，可以根据条件进行不同的初始化操作：</p>
<pre><code class="language-kotlin">val a:Int
if (4&gt;3)
{
    a = 9
}
else
{
    a = 10
}
</code></pre>
<h1 id="5-表达式和语句">5 表达式和语句</h1>
<p>Java中所有的控制结构都是语句，在Kotlin中除了三大循环（<code>while</code>，<code>for</code>，<code>do while</code>）外，大多数控制结构都是表达式。比如<code>if</code>是表达式而不是语句。也就是说，<code>if</code>有值而不像Java里面一样没有值（语句）。<br>
例子：</p>
<pre><code class="language-kotlin">var a = if (3&gt;2) 3 else 2
</code></pre>
<pre><code class="language-kotlin">fun main()
{
    var a = max(4,9)
}

fun max(a:Int,b:Int): Int = if(a&gt;b) a else b
</code></pre>
<h1 id="6-枚举">6 枚举</h1>
<p>使用<code>enum class</code>而不是Java中的<code>enum</code>：</p>
<pre><code class="language-kotlin">fun main()
{
    val months = Months.May
    println(months.days)
}

enum class Months(val days:Int)
{
    May(31),
    Jun(30)
}
</code></pre>
<h1 id="7-when">7 when</h1>
<p><code>when</code>相当于Java中的<code>switch</code>：</p>
<pre><code class="language-kotlin">fun main()
{
    val months = Months.May
    when(months)
    {
        Months.May -&gt; print(&quot;May&quot;)
        Months.Jun -&gt; print(&quot;June&quot;)
    }
}

enum class Months(val days:Int)
{
    May(31),
    Jun(30),;
}
</code></pre>
<p>使用<code>-&gt;</code>进行了简化。</p>
<h1 id="8-循环">8 循环</h1>
<h2 id="81-while与do-while">8.1 while与do while</h2>
<p>与Java一样。</p>
<h2 id="82-for">8.2 for</h2>
<p>使用<code>..</code>表示区间，在<code>i</code>前面没有类型：</p>
<pre><code class="language-kotlin">for (i in 1..100)
	print(i)
</code></pre>
<p>注意区间是两边都包含的，也就是<code>1..100</code>表示<code>i</code>从1循环到100。</p>
<p>使用下标迭代：</p>
<pre><code class="language-kotlin">val arr = arrayListOf(&quot;1111&quot;,&quot;2222&quot;,&quot;333&quot;)
for ((i,e) in arr.withIndex())
	println(&quot;$i = $e&quot;)
</code></pre>
<p>输出：</p>
<pre><code class="language-bash">0 = 1111
1 = 2222
2 = 333
</code></pre>
<h1 id="9-类">9 类</h1>
<h2 id="91-构造方法">9.1 构造方法</h2>
<pre><code class="language-kotlin">class Person(val name:String)
</code></pre>
<p>不需要像Java一样<code>this.xxx=xxx</code>。</p>
<h2 id="92-gettersetter">9.2 getter/setter</h2>
<p>因为<code>val</code>代表常量，而<code>var</code>代表变量，setter是用于改变值的，因此，使用<code>var</code>声明的属性具有getter与setter，使用<code>val</code>声明的属性只有getter。<br>
Kotlin没有提供直接操纵getter与setter的方式，通过使用<code>.属性名</code>进行修改属性或者获取属性：</p>
<pre><code class="language-kotlin">class Person
{
	var name = &quot;&quot;
	val id = &quot;&quot;
}
var person = Person()
person.name=&quot;111&quot;
person.id=&quot;222&quot; //编译不通过，id为val不可变
</code></pre>
<h2 id="93-自定义gettersetter">9.3 自定义getter/setter</h2>
<p>在相应的属性后面加上<code>get</code>/<code>set</code>即可自定义getter/setter：</p>
<pre><code class="language-kotlin">class Person
{
	var name=&quot;&quot;
	get()
	{
		return &quot;name&quot;+field
	}
	var id=&quot;&quot;
	set(id)
	{
		field = id
	}
}
</code></pre>
<p>在<code>get</code>/<code>set</code>中使用<code>field</code>表示字段，比如在上面例子中的get中，<code>field</code>表示<code>name</code>，而在下面的<code>set</code>中，<code>field</code>表示自己的<code>id</code>，<code>=</code>后面是参数的<code>id</code>。</p>
<h1 id="10-异常">10 异常</h1>
<h2 id="101-抛出异常">10.1 抛出异常</h2>
<p>直接<code>throw</code>，无需<code>new</code>：</p>
<pre><code class="language-kotlin">val age = 300
if(age !in 1..100)
	throw IllegalArgumentException(&quot;Out of range:$age&quot;)
</code></pre>
<h2 id="102-trycatch">10.2 try/catch</h2>
<pre><code class="language-kotlin">try 
{
	throw Exception(&quot;exception&quot;)
}
catch (e:Exception)
{
	e.printStackTrace()
}
</code></pre>
<h2 id="103-受检异常与不受检异常">10.3 受检异常与不受检异常</h2>
<p>Java中的异常有两类：</p>
<ul>
<li><code>Unchecked Exception</code>：不受检异常，可以不进行<code>try/catch</code>处理，包括<code>Runtime Exception</code>及其子类</li>
<li><code>Checked Exception</code>：受检异常，必须进行<code>try/catch</code>处理或者声明需要抛出，不属于不受检异常的异常都属于受检异常</li>
</ul>
<p>Kotlin不区分两者，也就是对于Java的受检异常可以不处理，比如：</p>
<pre><code class="language-kotlin">fun main()
{
    throw IllegalArgumentException(&quot;333&quot;)
}
</code></pre>
<p>可通过编译，而Java中的</p>
<pre><code class="language-java">public class Test
{
	public static void main(String []args)
	{
		throw new Exception(&quot;111&quot;);
	}
}
</code></pre>
<p>则无法通过编译。</p>
<h1 id="11-集合类">11 集合类</h1>
<pre><code class="language-kotlin">val arrayList = ArrayList&lt;Int&gt;()
arrayList.add(3)
arrayList.add(9)
arrayList.forEach { t-&gt; println(t) }

val hashSet = hashSetOf&lt;String&gt;()
hashSet.add(&quot;2222&quot;)
hashSet.add(&quot;99999&quot;)
hashSet.forEach{t-&gt; println(t)}

val list = listOf(3,5,5)
list.forEach{t-&gt; println(t)}

val map = mapOf(&quot;a&quot; to 1,&quot;b&quot; to 2)
map.forEach{(k,v)-&gt; println(&quot;$k to $v&quot;)}
</code></pre>
<p>可以直接使用集合类或者<code>xxxOf</code>创建，遍历使用<code>forEach</code>与Lambda，Kotlin风格的Lambda使用<code>{}</code>。</p>
<h1 id="12-函数">12 函数</h1>
<h2 id="121-基本语法">12.1 基本语法</h2>
<pre><code class="language-kotlin">fun printStr(str:String)
{
    println(str)
}

fun add(a:Int):Int
{
	return a+3
}
</code></pre>
<ul>
<li><code>fun</code>声明函数</li>
<li>形参类型在形参名称后</li>
<li>返回类型放在最后，前面需要带<code>：</code></li>
<li>函数不强制放在类中</li>
</ul>
<h2 id="122-默认参数">12.2 默认参数</h2>
<p>Java里面没有默认参数，实现类似功能需要重载去解决，而Kotlin的函数可以具有默认参数：</p>
<pre><code class="language-kotlin">fun main()
{
    println(add())
    println(add(1))
    println(add(1,2))
}
fun add(a:Int = 3,b:Int = 4):Int = a+b
</code></pre>
<p>可以省略的只有在末尾的参数，也就是默认参数从末尾开始确定默认值。</p>
<h2 id="123-命名参数">12.3 命名参数</h2>
<p>类似Python，调用函数时使用形参名称与值的方式调用而不是仅仅通过值调用，同时可以结合默认参数省略部分值。</p>
<pre><code class="language-kotlin">fun main()
{
    println(add(b=1))
    println(add(b=5,a=9))
}

fun add(a:Int = 3,b:Int = 4):Int = a+b
</code></pre>
<h2 id="124-可变参数">12.4 可变参数</h2>
<p>使用<code>vararg</code>：</p>
<pre><code class="language-kotlin">fun main()
{
    println(add(1,2,3,4))
}

fun add(vararg a:Int):Int = a.sum()
</code></pre>
<h1 id="13-顶层函数与顶层属性">13 顶层函数与顶层属性</h1>
<h2 id="131-顶层函数">13.1 顶层函数</h2>
<p>Kotlin中可以将函数放在代码文件的顶层，不用附属于任何类，但仍然是包内作用域，包外需要<code>import</code>，作用类似Java中的静态函数。</p>
<pre><code class="language-kotlin">fun add(vararg a:Int):Int = a.sum()
fun main()
{
    println(add(1,2,3,4))
}
</code></pre>
<p>Java中调用顶层函数时可以使用默认的Kotlin文件名作为默认包去调用，也可以使用<code>@file:JvmName</code>修改调用的包名，比如上面的文件名为<code>Test.kt</code>，则Java中调用的代码如下：</p>
<pre><code class="language-java">TestKt.add()
</code></pre>
<p>使用注解后：</p>
<pre><code class="language-kotlin">@file:JvmName(&quot;Test&quot;)
fun add(vararg a:Int):Int = a.sum
fun main()
{
    println(add(1,2,3,4))
}
</code></pre>
<p>Java调用方式改变如下：</p>
<pre><code class="language-java">Test.add()
</code></pre>
<h2 id="132-顶层属性">13.2 顶层属性</h2>
<p>与Java中的静态属性类似，有点像全局变量或全局常量，可以使用<code>var</code>，<code>val</code>，<code>const val</code>修饰：</p>
<pre><code class="language-kotlin">var a = 0
val b = 0
const val c = 0

fun main()
{
    println(++a)
    println(&quot;$b\n$c&quot;)
    test()
}

fun test()
{
    println(&quot;$a\n$b\n$c&quot;)
}
</code></pre>
<p><code>val</code>与<code>const val</code>的主要区别是：</p>
<ul>
<li><code>val</code>实质上相当与Java中的<code>private final static</code></li>
<li><code>const val</code>实质上相当于Java中的<code>public final static</code></li>
<li><code>const</code>相当于<code>@JvmField</code>，也就是说<code>const val a = 0</code>与<code>@JvmField val a = 0</code>等价：</li>
</ul>
<h1 id="14-参考">14 参考</h1>
<p>1、<a href="http://www.jicker.cn/5777.html">Kotlin语言的特点和优劣势</a><br>
2、<a href="https://www.cnblogs.com/fzqm/p/6803680.html">Java受检异常与不受检异常</a><br>
3、<a href="https://blog.csdn.net/mjb00000/article/details/79174831">Kotlin中的getter与setter</a><br>
4、<a href="https://blog.csdn.net/wangjiang_qianmo/article/details/88756728#t9">Kotlin与Java的异同</a><br>
5、<a href="https://www.jianshu.com/p/01aac645d003">Kotlin之const val与val</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Kotlin Hello World]]></title>
        <id>https://2293736867.github.io/post/kotlin-hello-world/</id>
        <link href="https://2293736867.github.io/post/kotlin-hello-world/">
        </link>
        <updated>2020-06-26T13:42:56.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-kotlin">1 Kotlin</h1>
<p>Kotlin是一种在JVM上运行的静态类型编程语言，被称为Android界的Wsift，由JetBrains设计。Kotline可以编译成Java字节码，也可以编译成JavaScript，方便在没有JVM的设备上运行。Google宣布在Google I/O 2017上宣布Kotlin成为Android官方语言。</p>
<p>笔者不是专攻Android的，是做服务端的，尽管目前大部分都是使用Java做后端，但是也有一些Kotlin做后端的资料，比如Kotlin结合Spring Boot的也有不少文章，因此笔者决定使用Kotlin进行后端开发。</p>
<p>那么，先从Hello world开始。</p>
<h1 id="2-新建工程">2 新建工程</h1>
<p>IDE用的是IDEA，新建工程并选择Kotlin：<br>
<img src="https://img-blog.csdnimg.cn/20200625135417827.png" alt="在这里插入图片描述" loading="lazy"><br>
项目名：<br>
<img src="https://img-blog.csdnimg.cn/20200625135526234.png" alt="在这里插入图片描述" loading="lazy"><br>
结构应该长这样（居然连个Main都没有。。。）：<br>
<img src="https://img-blog.csdnimg.cn/20200625135620472.png" alt="在这里插入图片描述" loading="lazy"></p>
<h1 id="3-main">3 Main</h1>
<p>在src下新建一个<code>Main.kt</code>：<br>
<img src="https://img-blog.csdnimg.cn/20200625135833312.png" alt="在这里插入图片描述" loading="lazy"><br>
代码在图中就不再贴一次了。<br>
当然可能有人会问<code>Stirng [] args</code>去哪里了，那就把它加上：<br>
<img src="https://img-blog.csdnimg.cn/20200625142652470.png" alt="在这里插入图片描述" loading="lazy"><br>
IDEA提示从Kotlin1.3开始main参数不是必要的，因此把它去掉了。不过老实说Kotlin比起Java还真的简洁。</p>
<h1 id="4-添加运行配置">4 添加运行配置</h1>
<p>选择<code>Add Configuration</code>，接着选择<code>Kotlin</code>：<br>
<img src="https://img-blog.csdnimg.cn/20200625140005605.png" alt="在这里插入图片描述" loading="lazy"><br>
在<code>Main class:</code>处输入默认包<code>MainKt</code>：<br>
<img src="https://img-blog.csdnimg.cn/20200625140044779.png" alt="在这里插入图片描述" loading="lazy"></p>
<h1 id="5-运行">5 运行</h1>
<p><code>Shift+F10</code>或者点击绿色小箭头运行即可。<br>
<img src="https://img-blog.csdnimg.cn/20200625140237528.png" alt="在这里插入图片描述" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第8期 樱花树下特辑]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-8-qi-ying-hua-shu-xia-te-ji/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-8-qi-ying-hua-shu-xia-te-ji/">
        </link>
        <updated>2020-06-26T09:29:44.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200626172810954.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>老一辈的人常告诉我们，年轻的时候多吃点苦，这样老了才能习惯啊！</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>一项研究发现，帽贝齿由自然界中最强韧的生物材料制成。组成这种软体动物牙齿材料强度大约是蜘蛛丝的五倍（前最强韧生物材料头衔持有者）。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>空白处，寄幽怀。怕人猜。<br>
执轻罗扇，捕影追风，斜过香腮。<br>
—— 张维芬《诉衷情令 约茶樱花树下》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>窗外 那绛红色的茎叶上 长串的樱花 伸展着淡粉色的花瓣<br>
——《樱花树下》（外两首）</p>
</blockquote>
<h1 id="每日音乐">每日音乐</h1>
<blockquote>
<p><a href="https://music.163.com/#/song?id=188384">樱花树下</a></p>
</blockquote>
<blockquote>
<p>树荫有一只蝉<br>
跌落你身边<br>
惊慌到失足向前<br>
然后扑入我一双肩<br>
令你腼腆一脸<br>
像樱花万千<br>
怀念美好高中两年<br>
期望你的青春不变<br>
去到今天</p>
</blockquote>
<blockquote>
<p>还记得樱花正开<br>
还未懂跟你示爱<br>
初春来时 彼此约定过<br>
继续期待<br>
人置身这大时代<br>
投入几番竞技赛<br>
曾分开 曾相爱<br>
等待 花蕊又跌下来<br>
才洞悉这是恋爱</p>
</blockquote>
<blockquote>
<p>未有过的爱情<br>
但有种温馨<br>
归家那单车小径<br>
沿路细听你的歌声<br>
没法再三倾听<br>
你的感动昵称<br>
维系错的一番友情<br>
无奈已经不可纠正<br>
太过坚贞</p>
</blockquote>
<blockquote>
<p>还记得樱花正开<br>
还未懂跟你示爱<br>
初春来时 彼此闭着眼<br>
渴望未来<br>
人置身这大时代<br>
投入几番竞技赛<br>
曾分开 曾相爱<br>
等待 跟你未爱的爱<br>
你说悲不悲哀<br>
秒速之间变改  小小世界<br>
眷恋 也许走不过<br>
拆卸的街<br>
少女亦随年渐长<br>
走得多么快</p>
</blockquote>
<blockquote>
<p>如有天樱花再开<br>
期望可跟你示爱<br>
当天园林 今天已换上<br>
满地青苔<br>
如有天置地门外<br>
乘电车跨过大海<br>
匆匆 跟你 相望一眼 没理睬<br>
明日花 昨日已开</p>
</blockquote>
<h1 id="樱花树下">《樱花树下》</h1>
<p>这里说的是渡边淳一的小说《樱花树下》，笔者看过这本书，最近有回想了起来，记录一下感悟。</p>
<figure data-type="image" tabindex="2"><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyMDIwLmNuYmxvZ3MuY29tL2Jsb2cvMjAwODk2My8yMDIwMDYvMjAwODk2My0yMDIwMDYyMjE1MzcwNzk5NS0xNjU1MzYxMDIucG5n?x-oss-process=image/format,png" alt="" loading="lazy"></figure>
<p>首先介绍一下渡边淳一吧，1933-2014，出生于北海道上砂川町，日本当代作家，1963年获得医学博士学位。1969年35岁的渡边淳一弃医从文，1989年发表《樱花树下》，获得过的奖项包括同人杂志奖，芥川奖，直木文学奖，吉川英治文学奖，文艺春秋读者奖。</p>
<p>《樱花树下》与渡边淳一的其他情爱作品类似，下面是摘自<a href="https://www.zhihu.com/question/274758755/answer/377570747">知乎</a>的原话：</p>
<blockquote>
<p>《失乐园》“清纯而又冶艳的少妇”爱上了已婚的中老年编辑<br>
《泡沫》“清纯而又冶艳的少妇”爱上了中老年作家<br>
《雁来红》“清纯而又冶艳的少女”爱上了已婚的中老年医生<br>
《为何不分手》“清纯而又冶艳的年轻医生”爱上了已婚的中老年医生<br>
《樱花树下》“清纯而又冶艳的母女俩”同时爱上了已婚的中老年出版社社长<br>
《一片雪》“清纯而又冶艳的富婆、少女、少妇”同时爱上了已婚的中老年设计师<br>
。。。</p>
</blockquote>
<p>小说有写到：</p>
<blockquote>
<p>“樱花这么美，你知道是为什么吗？”<br>
“因为，樱花树下埋着尸体。”<br>
“真的吗？埋了尸体，樱花就能开得更盛吗？”<br>
“也许是把人的血肉当养分吸收了。”</p>
</blockquote>
<p>樱花贯穿始终，无论是作为环境的描写还是场景的过渡，给人的感觉就是有一种神秘的色彩。小说里面介绍了两种樱花：</p>
<ul>
<li>一种是开得鲜艳、娇滴滴的垂枝樱</li>
<li>一种是开得妩媚又有些悲哀的染井吉野</li>
</ul>
<p>下面是染井吉野的图：</p>
<figure data-type="image" tabindex="3"><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyMDIwLmNuYmxvZ3MuY29tL2Jsb2cvMjAwODk2My8yMDIwMDYvMjAwODk2My0yMDIwMDYyMjE1MTgyMDYwMC0yMDU2Mjc5ODQzLnBuZw?x-oss-process=image/format,png" alt="" loading="lazy"></figure>
<p>染井吉野是一种花期只有一周的花，谢幕的时候花瓣会坠落成“樱花雨”：</p>
<figure data-type="image" tabindex="4"><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyMDIwLmNuYmxvZ3MuY29tL2Jsb2cvMjAwODk2My8yMDIwMDYvMjAwODk2My0yMDIwMDYyMjE1MTc1MTUxOS00ODg0MzU4ODEucG5n?x-oss-process=image/format,png" alt="" loading="lazy"></figure>
<p>染井吉野给人一种美得妖艳的感觉，这种谢幕的场景给笔者的感觉是确实很美但是会感到一丝凉意。在作品中，樱花仿佛是一个具有灵气的妖孽，从开幕的赏樱花到最后的菊乃躺在樱花树下，始终充满了迷幻的色彩。尽管作者没有大段大段的描写过樱花，但是寥寥几笔就能让读者“想入非非”，感受到了樱花的美。</p>
<p>垂枝樱和染井吉野代指了凉子与菊乃，暗示着凉子就是开得诱人鲜艳的垂枝樱，而菊乃就是妩媚但悲哀的染井吉野。或许正是由于染井吉野的妖艳，菊乃迎来的最后结局注定是悲惨的。尽管小说没有写到菊乃是自杀还是不小心坠落致死，不过给笔者的感觉就是自杀死亡的。试想，女儿怀孕了，但是造成这结果的人确实自己心爱的男人，这样的事实又能有多少正常女性可以接受？</p>
<p>菊乃死后埋在樱花树下，与“樱花树下埋着尸体”对应了起来：</p>
<blockquote>
<p>去年赏樱的时候，你说过，樱花树下埋着尸体。凉子和游佐并肩而立，抬头看着樱花说道。<br>
“妈妈现在真的在这棵樱花树下长眠了。”<br>
“听到那句话的时候我就有不详的预感。”<br>
“我说的时候，并不是有心的。”<br>
“但是，确实就像真的一样，很可怕。”<br>
“虽然觉得可怕，还是被你深深吸引。”</p>
</blockquote>
<p>最后凉子离开游佐，宣告了故事的结束，就这样两种不同的“樱花”，仿佛就是游佐生命的过客，来得安静，也走得安静。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第7期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-7-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-7-qi/">
        </link>
        <updated>2020-06-25T07:53:57.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://img2020.cnblogs.com/blog/2008963/202006/2008963-20200625155336500-714160599.png" alt="" loading="lazy"></figure>
<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>吃货一般都比较善良，因为每天都只想着吃，没有时间去算计别人。</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>在1937年之前的美国，男性裸露上半身（即使在海滩上）是非法的。如果在纽约市或其市政海滩被当场抓获，则将被罚款1美元。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>荷风送香气，竹露滴清响。<br>
——孟浩然《夏日南亭怀辛大》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>希望你可以记住我，记住我这样活过，这样在你身边呆过<br>
——《挪威的森林》</p>
</blockquote>
<h1 id="每日音乐">每日音乐</h1>
<blockquote>
<p><a href="https://music.163.com/#/song?id=1362125019">广寒宫-丸子呦</a></p>
</blockquote>
<figure data-type="image" tabindex="2"><img src="https://img2020.cnblogs.com/blog/2008963/202006/2008963-20200622141703421-2074850564.png" alt="" loading="lazy"></figure>
<blockquote>
<p>午夜时分月上枝头谁为谁心疼<br>
一杯浊酒浇在心头谁让谁心冷<br>
置身囫囵唯唯诺诺还诚惶诚恐<br>
阴错阳差天地分别谁成了英雄</p>
</blockquote>
<blockquote>
<p>广寒宫阙之中<br>
锁着她的寂寞<br>
桂树花印霓虹<br>
管他雕梁画栋<br>
只愿晨鼓暮钟<br>
化作一丝温柔<br>
云涛翻涌苍穹<br>
是她遗恨相思愁</p>
</blockquote>
<blockquote>
<p>云母屏风花烛映影深<br>
幻影成茧奈何奴身不由己几分<br>
长河渐落破晓韵星沉<br>
玉兔金蟾助我药成再伴吾君身</p>
</blockquote>
<blockquote>
<p>午夜时分月上枝头谁为谁心疼<br>
一杯浊酒浇在心头谁让谁心冷<br>
置身混沌唯唯诺诺还诚惶诚恐<br>
阴差阳错天地分别谁成了英雄</p>
</blockquote>
<figure data-type="image" tabindex="3"><img src="https://img2020.cnblogs.com/blog/2008963/202006/2008963-20200622141711626-1584581442.png" alt="" loading="lazy"></figure>
<blockquote>
<p>广寒宫阙之中<br>
锁着她的寂寞<br>
桂树花印霓虹<br>
管他雕梁画栋<br>
只愿晨鼓暮钟<br>
化作一丝温柔<br>
云涛翻涌苍穹<br>
是她遗恨相思愁</p>
</blockquote>
<blockquote>
<p>云母屏风花烛映影深<br>
幻影成茧奈何奴身不由己几分<br>
长河渐落破晓陨星沉<br>
玉兔金蟾在伴吾君身</p>
</blockquote>
<blockquote>
<p>云母屏风花烛映影深<br>
幻影成茧奈何奴身不由己几分<br>
长河渐落破晓陨星沉<br>
玉兔金蟾在伴吾君身</p>
</blockquote>
<h1 id="有关ociq">有关OCIQ</h1>
<blockquote>
<p>打开了OICQ，聊天记录停步去年的深秋<br>
——许嵩《灰色头像》</p>
</blockquote>
<p>这首歌应该很多人听过吧，那么里面的OICQ到底是什么呢？</p>
<p>今天笔者有空去查了一下，资料整理如下：<br>
腾讯开始搞即时聊天工具的时候，就是模仿国外的聊天软件ICQ，ICQ是I seek you的缩写，O是opening的缩写，OICQ就是开放的ICQ，之后为了避免与ICQ发生法律冲突，就改成了QQ。</p>
<figure data-type="image" tabindex="4"><img src="https://img2020.cnblogs.com/blog/2008963/202006/2008963-20200622135002372-1131684411.png" alt="" loading="lazy"></figure>
<p>想当年，最火的互联网沟通方式还是聊天室，当时使用聊天工具的人并不是主流用户，大多数用户仍在使用网易聊天室等网页版的同城聊天室。但是这种公共聊天室无法建立点对点的个人联系，而腾讯公司推出的OICQ是第一款点对点，一对多的聊天软件，又叫网络寻呼机。集合了聊天、公共聊天室、单点传输文件的功能。</p>
<figure data-type="image" tabindex="5"><img src="https://img2020.cnblogs.com/blog/2008963/202006/2008963-20200622135017942-761087183.png" alt="" loading="lazy"></figure>
<p>下面是OICQ的一些头像：</p>
<figure data-type="image" tabindex="6"><img src="https://img2020.cnblogs.com/blog/2008963/202006/2008963-20200622135137255-1642755552.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[IDEA 2020.1 激活]]></title>
        <id>https://2293736867.github.io/post/20201-idea-ji-huo/</id>
        <link href="https://2293736867.github.io/post/20201-idea-ji-huo/">
        </link>
        <updated>2020-06-24T07:15:13.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-下载安装">1 下载安装</h1>
<p>平台windows,官网<a href="https://www.jetbrains.com/idea/">这里</a>.<br>
<img src="https://img-blog.csdnimg.cn/20200424151923569.png" alt="在这里插入图片描述" loading="lazy"><br>
选位置之后:<br>
<img src="https://img-blog.csdnimg.cn/20200424152130752.png" alt="在这里插入图片描述" loading="lazy"><br>
选项分别是创建32/64位的快捷方式,把运行目录添加到PATH环境变量,添加右键菜单&quot;打开文件夹作为工程&quot;,添加java/groovy/kt/kts的文件关联,下载安装32位JetBrains运行库.按需要勾选即可.</p>
<h1 id="2-启动">2 启动</h1>
<p><img src="https://img-blog.csdnimg.cn/20200424153033594.png" alt="在这里插入图片描述" loading="lazy"><br>
当然是黑色的主题:<br>
<img src="https://img-blog.csdnimg.cn/20200424153137805.png" alt="在这里插入图片描述" loading="lazy"><br>
这里根据需要选择插件.<br>
<img src="https://img-blog.csdnimg.cn/20200424153212557.png" alt="在这里插入图片描述" loading="lazy"><br>
选好插件后,选择Evaluate:<br>
<img src="https://img-blog.csdnimg.cn/20200424153754904.png" alt="在这里插入图片描述" loading="lazy"></p>
<h1 id="3-创建工程进入">3 创建工程进入</h1>
<p><img src="https://img-blog.csdnimg.cn/20200424153840765.png" alt="在这里插入图片描述" loading="lazy"><br>
默认即可.<br>
<img src="https://img-blog.csdnimg.cn/20200424154016730.png" alt="在这里插入图片描述" loading="lazy"><br>
如果没有JDK可以利用新版本自带的下载JDK的功能:<br>
<img src="https://img-blog.csdnimg.cn/20200424154058905.png" alt="在这里插入图片描述" loading="lazy"></p>
<p><img src="https://img-blog.csdnimg.cn/20200424154106911.png" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200424154122396.png" alt="在这里插入图片描述" loading="lazy"></p>
<h1 id="4-修改vm-options">4 修改VM options</h1>
<p><img src="https://img-blog.csdnimg.cn/2020042415460879.png" alt="在这里插入图片描述" loading="lazy"><br>
末尾加上:</p>
<pre><code class="language-bash">-javaagent:\xxx\xxx\xxx\xxx\xxx.jar
</code></pre>
<p>其中jetbrains-agent.jar和激活码可以从<a href="https://github.com/2293736867/JetBrainsActivation">这里</a>下载.<br>
这里把jetbrains-agent.jar放到IDEA的lib下面.<br>
<img src="https://img-blog.csdnimg.cn/20200424155159335.png" alt="在这里插入图片描述" loading="lazy"></p>
<h1 id="5-重启输入注册码激活">5 重启输入注册码激活</h1>
<p><img src="https://img-blog.csdnimg.cn/20200424155302664.png" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200424155319490.png" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200424155331154.png" alt="在这里插入图片描述" loading="lazy"><br>
成功!</p>
<h1 id="6-声明仅个人开发学习使用请不要用作商业用途">6 声明:仅个人开发学习使用,请不要用作商业用途.</h1>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[PyCharm 2020.1.1 激活]]></title>
        <id>https://2293736867.github.io/post/pycharm-202011-ji-huo/</id>
        <link href="https://2293736867.github.io/post/pycharm-202011-ji-huo/">
        </link>
        <updated>2020-06-24T07:10:37.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-下载安装">1 下载安装</h1>
<p>平台windows,<a href="https://www.jetbrains.com/pycharm/">官网</a>:<br>
<img src="https://img-blog.csdnimg.cn/20200424161647692.png" alt="在这里插入图片描述" loading="lazy"><br>
选路径后,<br>
<img src="https://img-blog.csdnimg.cn/20200424161706469.png" alt="在这里插入图片描述" loading="lazy"><br>
选项分别是64位的快捷方式,添加运行目录到环境变量PATH,添加右键菜单&quot;打开文件夹作为一个工程&quot;,python文件关联,按需要勾选即可.</p>
<h1 id="2-启动">2 启动</h1>
<p><img src="https://img-blog.csdnimg.cn/20200424162635336.png" alt="在这里插入图片描述" loading="lazy"><br>
选UI,肯定黑色的.<br>
<img src="https://img-blog.csdnimg.cn/20200424162648634.png" alt="在这里插入图片描述" loading="lazy"><br>
插件,建议IdeaVim.<br>
<img src="https://img-blog.csdnimg.cn/20200424162703672.png" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200424162755401.png" alt="在这里插入图片描述" loading="lazy"></p>
<h1 id="3-安装补丁">3 安装补丁</h1>
<p>进入启动界面,把jar补丁(下载链接<a href="https://github.com/2293736867/JetBrainsActivation">这里</a>)拖到界面去,提示重启:<br>
<img src="https://img-blog.csdnimg.cn/20200424174231717.png" alt="在这里插入图片描述" loading="lazy"><br>
默认即可.<br>
<img src="https://img-blog.csdnimg.cn/20200424174305575.png" alt="在这里插入图片描述" loading="lazy"><br>
选择是:<br>
<img src="https://img-blog.csdnimg.cn/20200424174317589.png" alt="在这里插入图片描述" loading="lazy"><br>
然后重启之后,激活成功.<br>
<img src="https://img-blog.csdnimg.cn/20200424174443190.png" alt="在这里插入图片描述" loading="lazy"></p>
<h1 id="4-声明仅个人开发学习使用请不要用作商业用途">4 声明:仅个人开发学习使用,请不要用作商业用途.</h1>
]]></content>
    </entry>
</feed>