<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://2293736867.github.io</id>
    <title>氷泠&apos;s blog</title>
    <updated>2021-04-12T07:32:15.692Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://2293736867.github.io"/>
    <link rel="self" href="https://2293736867.github.io/atom.xml"/>
    <subtitle>我配不上你，
纵然很努力。</subtitle>
    <logo>https://2293736867.github.io/images/avatar.png</logo>
    <icon>https://2293736867.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 氷泠&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[每日分享 第302期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-302-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-302-qi/">
        </link>
        <updated>2021-04-12T07:01:43.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>不想恋爱是假的，没人要是真的。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>乱条犹未变初黄，倚得东风势便狂。<br>
——曾巩《咏柳》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>我会穿越那七大海洋，去和你相见。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1618211166749.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>其实就是一个简单的排序，规则是<code>x+y</code>与<code>y+x</code>的较大值（<code>compareTo</code>比较，且这里的加号表示拼接，而不是两个数字相加）：</p>
<pre><code class="language-java">import java.util.Arrays;

public class Solution {
    public String largestNumber(int[] nums) {
        StringBuilder ans = new StringBuilder();
        int n = nums.length;
        String [] num = new String[n];
        for (int i = 0; i &lt; n; i++) {
            num[i] = String.valueOf(nums[i]);
        }
        Arrays.sort(num,(x,y)-&gt; (y+x).compareTo(x+y));
        if(num[0].charAt(0) == '0'){
            return &quot;0&quot;;
        }
        for (int i = 0; i &lt; n; i++) {
            ans.append(num[i]);
        }
        return ans.toString();
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1618211176806.png" alt="" loading="lazy"></figure>
<p>题解区看到有一个手写快排的，完爆<code>compareTo</code>：</p>
<figure data-type="image" tabindex="3"><img src="https://2293736867.github.io/post-images/1618211580134.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="4"><img src="https://2293736867.github.io/post-images/1618211592176.png" alt="" loading="lazy"></figure>
<h1 id="关于笔者的笔记本">关于笔者的笔记本</h1>
<p>最近笔记本出了点问题，拿去实体店维修了一下。是显卡风扇的问题，老是“咔咔咔”的响，跑了几家，第一家说风扇可能上下摆动不平衡，碰到某些东西了，然后本来想换风扇的，给了定金后他说没货，于是又跑了一家，那个老板说“我99年就开始帮别人装<code>Win98</code>了”。。。</p>
<p>然后亲眼看见了自己电脑被“肢解”的过程，蓝天的模具，只要拧开五颗螺丝就可以打开D面的盖板了，然后很熟练的把螺丝全拧开，整个散热铜管拿了出来，再把风扇拿出去清灰。清完灰后就上了硅胶装回去了。</p>
<p>期间还发现了一个隐藏功能，按下<code>Fn+数字1</code>居然可以把风扇全开？？？好家伙这个真不知道。。。</p>
<h1 id="关于昨天的字节笔试">关于昨天的字节笔试</h1>
<p>上个月月底投了字节，然后昨天笔试（本来昨天应该写的但是并没有太累了），感觉发挥不是特别好（准确来说是特别不好），因为下午还有一个<code>CSP</code>，晚上又笔试。。。</p>
<h1 id="音乐推荐">音乐推荐</h1>
<blockquote>
<p>歌曲：还是会想你<br>
歌手：林达浪/h3R3</p>
</blockquote>
<blockquote>
<p>还是会想你<br>
还是会怪你<br>
怪你轻而易举潇洒抽离<br>
还是爱着你<br>
想走进你心里<br>
拨开迷雾抓住你的声音</p>
</blockquote>
<blockquote>
<p>几百遍<br>
重复了几百遍<br>
重复的情绪重复的熬过想你的夜<br>
这思念难道直到感受不到痛为止<br>
可这过程我怎么可能装作没事<br>
你教会我怎么爱你你却没教会遗忘<br>
随意的举动撕碎我所有的立场<br>
我心知肚明不愿戳穿你的另一面<br>
却没想到如今变成我的nightmare</p>
</blockquote>
<blockquote>
<p>昏黄的路灯照不亮整条街<br>
我怎么用力也走不到你心里<br>
倾盘的雨下了一整夜<br>
我们离得这么近你却看不清我的泪滴<br>
我知道我可以随时被代替<br>
却还是接受不了这种落差<br>
我们的爱就像是流星落下<br>
随烟火消失的火花</p>
</blockquote>
<blockquote>
<p>还是会想你<br>
还是会怪你<br>
怪你轻而易举潇洒抽离<br>
还是爱着你<br>
想走进你心里<br>
拨开迷雾抓住你的声音</p>
</blockquote>
<blockquote>
<p>曾在我怀里看着我撒娇的你<br>
慢一秒接电话都会生气的你<br>
那场在公交站台下不停的雨<br>
每一次许的愿望都会关于你<br>
im liar<br>
世界最大的liar<br>
说过最痛的慌是绝对不会放开你<br>
like fire we burning like fire<br>
我们从3000 degrees骤降到零下<br>
你说你早都放下了任何猜疑<br>
这份牵挂只会让你崩溃<br>
由始至终的选择权都在你<br>
我早都流够了只属于你的泪</p>
</blockquote>
<blockquote>
<p>这份爱最好的结尾用这段文字来作纪念<br>
放下了所有的偏执放下你有没有时间来限制<br>
伪装住这份情绪你不懂有多累<br>
shawty its so freaking heartache</p>
</blockquote>
<blockquote>
<p>还是会想你<br>
还是会怪你<br>
怪你轻而易举潇洒抽离<br>
还是爱着你<br>
想走进你心里<br>
拨开迷雾抓住你的声音</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第301期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-301-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-301-qi/">
        </link>
        <updated>2021-04-11T00:35:14.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>由于性格太内向，一直做不出，抢着结账这种事。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>桃花仙人种桃树，又折花枝当酒钱。<br>
——唐寅《桃花庵歌》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>如果最开始我没欺骗你，我们会怎样？</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1618101450341.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>动态规划：</p>
<pre><code class="language-java">public class Solution {
    public int nthUglyNumber(int n) {
        int [] dp = new int[n+1];
        dp[1] = 1;
        int p2 = 1;
        int p3 = 1;
        int p5 = 1;
        for (int t = 2; t &lt;= n;++t ) {
            int a = dp[p2] * 2;
            int b = dp[p3] * 3;
            int c = dp[p5] * 5;
            dp[t] = Math.min(Math.min(a,b),c);
            if(dp[t] == a){
                ++p2;
            }
            if(dp[t] == b){
                ++p3;
            }
            if(dp[t] == c){
                ++p5;
            }
        }
        return dp[n];
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1618101473806.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java中的绑定]]></title>
        <id>https://2293736867.github.io/post/java-zhong-de-bang-ding/</id>
        <link href="https://2293736867.github.io/post/java-zhong-de-bang-ding/">
        </link>
        <updated>2021-04-10T14:58:57.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-前言">1 前言</h1>
<p>做了一次笔试题，发现了一题问答题，是关于<code>Java</code>绑定的：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20210410200801611.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>当时做的时候是完全不会的。。。</p>
<p>于是这里补上一篇<code>Java</code>绑定的文章。</p>
<h1 id="2-绑定">2 绑定</h1>
<p>首先来了解一下绑定的概念。绑定是指<strong>一个方法的调用与方法所在的类关联起来</strong>。</p>
<p>很抽象吧，举个例子，如果父类与子类存在同名方法，子类对父类方法进行了重写，那么就需要绑定来区分调用的到底是父类的方法还是子类的方法。相对简单的一种理解是，绑定是一个方法的调用与调用这个方法的类连接在一起的过程。</p>
<p>而绑定具体又可以分为：</p>
<ul>
<li>静态绑定：就是程序执行前，方法已经被绑定，可以简单理解成编译期绑定</li>
<li>动态绑定：在运行时根据具体对象的类型进行绑定，通过一些机制去运行时判断对象的类型，并分别调用适当的方法</li>
</ul>
<h1 id="3-静态绑定">3 静态绑定</h1>
<p>静态绑定也叫前期绑定、编译期绑定，在程序运行之前，也就是编译时期<code>JVM</code>能够确认方法由谁调用，这种机制就叫静态绑定。</p>
<p>如果一个方法由<code>private</code>、<code>static</code>、<code>final</code>任意一个关键字修饰，那么这个方法就是静态绑定的，原因很简单，因为：</p>
<ul>
<li><code>private</code>修饰的方法，无法由本类以外的类调用，也就是调用者只能是该类</li>
<li><code>static</code>修饰的方法，通过<code>类名.方法名</code>进行调用，也可以唯一确定了调用的类</li>
<li><code>final</code>修饰的方法，不能被子类进行重写，在编译期就能确定了调用的类</li>
</ul>
<p>这三个关键字修饰的方法，都可以在编译时期就能唯一确定了调用的类，不存在子类调用的问题，因此使用静态绑定，而不是动态绑定。</p>
<h1 id="4-动态绑定">4 动态绑定</h1>
<p>动态绑定就是运行时根据对象的类型进行绑定，简单来说，<code>JVM</code>在运行时期决定由哪个对象调用的过程称为动态绑定。</p>
<p>比如：</p>
<pre><code class="language-java">public class Main {
    public static void main(String[] args){
        A b = new B();
        b.print();
    }
}

class A{
    public void print(){
        System.out.println(&quot;A&quot;);
    }
}

class B extends A{
    @Override
    public void print(){
        System.out.println(&quot;B&quot;);
    }
}
</code></pre>
<p>由于B类继承了A类，因此创建对象的时候：</p>
<pre><code class="language-java">A b = new B();
</code></pre>
<p>编译期并不知道b真正引用的是A类还是B类，在运行的时候才知道b是一个A类对象，但是指向了B类的引用。</p>
<p>在<code>Java</code>中，所有的非<code>final</code>、<code>private</code>、<code>static</code>的方法都是动态绑定的，因为只要继承了就能重写。</p>
<h1 id="5-区别">5 区别</h1>
<ul>
<li>发生时期：静态绑定发生在编译时期，动态绑定发生在运行时期</li>
<li>灵活性：动态绑定的灵活性要比静态绑定高，因为静态绑定在编译的时期就确定了，而动态绑定在编译的时候并不知道是调用哪一个类的方法</li>
<li>速度：静态绑定调用方法的速度要快于动态绑定，因为静态绑定可以直接调用，而动态绑定需要去搜索方法表</li>
</ul>
<h1 id="6-动态绑定的过程">6 动态绑定的过程</h1>
<p>在了解动态绑定的过程之前，先了解一些前置知识。</p>
<h2 id="61-方法调用">6.1 方法调用</h2>
<p><code>Java</code>中的方法调用有两类：</p>
<ul>
<li>静态方法调用</li>
<li>动态方法调用</li>
</ul>
<p>而方法调用的指令有四个，分别是：</p>
<ul>
<li><code>invokestatic</code></li>
<li><code>invokespecial</code></li>
<li><code>invokevirtual</code></li>
<li><code>invokeinterface</code></li>
</ul>
<p>前两个是静态绑定的，而后两个是动态绑定的。</p>
<h2 id="62-方法表">6.2 方法表</h2>
<p>方法表是字节码文件的一部分，每个类都有一个方法表，方法表是为<code>invokevirtual</code>以及<code>invokeinterface</code>指令服务的。由于<code>Java</code>中的类都继承于<code>Object</code>，因此，在默认情况下，所有类的方法表中都有<code>Object</code>的方法，如果重写了其中的方法，就会改变其中的描述符。比如，<code>Object</code>类的方法表可以简单理解如下：</p>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20210410220749370.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>而加载了A类的字节码后，因为A类并没有重写任何的<code>Object</code>方法，因此只是添加了A类本身的方法：</p>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20210410220926793.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>而加载了B类的字节码后，因为重写了<code>print()</code>，因此方法表如下：</p>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20210410221217622.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="63-具体过程">6.3 具体过程</h2>
<p>了解了前置知识后看具体过程就会相对简单一点了，动态绑定的过程可以分为三步：</p>
<ul>
<li>虚拟机提取对象实际类型的方法表：<code>JVM</code>获取到对象的实际类型后，再获取该类型的方法表</li>
<li>虚拟机搜索方法签名：当调用<code>b.print()</code>时，通过方法表发现实际方法是<code>B.print()</code></li>
<li>调用方法：调用<code>B.print()</code></li>
</ul>
<h1 id="7-参考">7 参考</h1>
<ul>
<li><a href="https://stackoverflow.com/questions/18082651/how-does-dynamic-binding-happens-in-jvm">StackOverflow-How does dynamic binding happens in JVM?</a></li>
<li><a href="https://www.cnblogs.com/kaleidoscope/p/9790766.html">博客园-Java多态实现原理</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第300期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-300-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-300-qi/">
        </link>
        <updated>2021-04-10T02:23:10.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>你认真的样子，就像天桥上贴膜的。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>白日放歌须纵酒，青春作伴好还乡。<br>
——杜甫《闻官军收河南河北》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>猎人永不孤单。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1618021493011.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>负数全都不是丑数，0也不是，直接从正整数开始判断。</p>
<pre><code class="language-java">class Solution {
    public boolean isUgly(int n) {
        if(n &gt; 0){
            while(n &gt; 1){
                if(n % 5 == 0){
                    n /= 5;
                }else if(n % 3 == 0){
                    n /= 3;
                }else if(n % 2 == 0){
                    n /= 2;
                }else{
                    break;
                }
            }
            return n == 1;
        }
        return false;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1618021543005.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第299期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-299-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-299-qi/">
        </link>
        <updated>2021-04-09T00:33:33.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>凡是不赚钱的，都说自己在创业。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>春水碧于天，画船听雨眠。<br>
——韦庄《菩萨蛮·人人尽说江南好》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>和绝望，和睦相处。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1617928474795.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>二分，中间值与右边值比较：</p>
<ul>
<li>如果中间值小于右边值，则忽略右半区间</li>
<li>如果中间值大于右边值，则忽略左半区间</li>
<li>如果中间值等于右边值，因为允许重复值的存在，不能判断忽略哪一边的区间，只能将右指针减1，并继续循环</li>
</ul>
<pre><code class="language-java">class Solution {
    public int findMin(int[] nums) {
        int n = nums.length;
        int l = 0;
        int r = n-1;
        while(l&lt;r){
            int m = (l+r)/2;
            if(nums[m] &gt; nums[r]){
                l = m+1;
            }else if(nums[m] &lt; nums[r]){
                r = m;
            }else{
                --r;
            }
        }
        return nums[l];
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1617928450436.png" alt="" loading="lazy"></figure>
<h1 id="蚂蚁电话面">蚂蚁电话面</h1>
<p>昨天晚上电话面了蚂蚁，感觉自己有很多答不上来，或者说答上来的不怎么全面，比如，问了一下<code>JVM</code>，然后答了方法区、直接内存、堆区、栈区、本地方法区、<code>PC</code>寄存器。</p>
<p>然后就问了里面有什么。</p>
<p>好吧只是看过不记得了，怎么就不问堆组成，<code>GC</code>算法，<code>G1</code>回收器，类加载器，，，，，，</p>
<p><s>太菜了太菜了，，，，</s></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第298期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-298-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-298-qi/">
        </link>
        <updated>2021-04-08T11:52:56.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>以前我每天都会买彩票，终于有一天，我连彩票也买不起了。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>唯有相思似春色，江南江北送君归。<br>
——王维《送沈子归江东》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>爸爸我也不是一生下来就是爸爸，爸爸也是头一次当爸爸。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1617841682575.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<pre><code class="language-java">class Solution {
    public int findMin(int[] nums) {
        int n = nums.length;
        if(n == 1){
            return nums[0];
        }
        int l = 0;
        int r = n-1;
        int m = (l+r)/2;
        while(l&lt;r){
            if(nums[m] &gt; nums[r]){
                l = m+1;
            }else{
                r = m;
            }
            m = (l+r)/2;
        }
        return nums[l];
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1617841475684.png" alt="" loading="lazy"></figure>
<h1 id="关于一些一行代码ac的题目">关于一些一行代码AC的题目</h1>
<figure data-type="image" tabindex="3"><img src="https://2293736867.github.io/post-images/1617796838448.png" alt="" loading="lazy"></figure>
<pre><code class="language-java">class Solution {
    public int maximumWealth(int[][] accounts) {
        return Arrays.stream(accounts).mapToInt(t -&gt; Arrays.stream(t).sum()).max().orElse(0);
    }
}
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://2293736867.github.io/post-images/1617797331792.png" alt="" loading="lazy"></figure>
<pre><code class="language-java">class Solution {
    public int maximum(int a, int b) {
        return (int)(((long) a + (long) b +Math.abs((long) a - (long) b))/2);
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux pgrep命令]]></title>
        <id>https://2293736867.github.io/post/linux-pgrep-ming-ling/</id>
        <link href="https://2293736867.github.io/post/linux-pgrep-ming-ling/">
        </link>
        <updated>2021-04-07T04:07:28.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-pgrep">1 <code>pgrep</code></h1>
<p><code>pgrep</code>是一个根据名称查找进程<code>ID</code>的命令，返回的是进程<code>ID</code>，若存在当个进程，则分为不同的行返回<code>ID</code>（默认实现）。</p>
<h1 id="2-示例">2 示例</h1>
<p>查找<code>java</code>进程：</p>
<pre><code class="language-bash">pgrep java
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20210407110625110.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>上图还显示了<code>ps</code>与<code>pgrep</code>的区别，简单来说：</p>
<pre><code class="language-bash">pgrep name
等价于
ps -e | grep name | awk '{print $1}'
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20210407110833970.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="3-常用参数">3 常用参数</h1>
<ul>
<li><code>-l</code>：显示<code>PID</code>和进程名称</li>
<li><code>-a</code>：显示详细信息</li>
<li><code>-c</code>：计算进程数量</li>
<li><code>-n/-o</code>：显示进程号最大与最小的进程</li>
</ul>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20210407111454587.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="4-与其他命令配合">4 与其他命令配合</h1>
<p>一般<code>pgrep</code>需要和其他命令配合使用，最常见的是<code>kill</code>：</p>
<pre><code class="language-bash">pgrep name | xargs kill -15
</code></pre>
<p>注意需要使用<code>xargs</code>传递参数，而不能只使用管道，这样是话会提示<code>not enough arguments</code>：</p>
<pre><code class="language-bash">pgrep name | kill -15
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20210407111927228.png" alt="在这里插入图片描述" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第297期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-297-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-297-qi/">
        </link>
        <updated>2021-04-06T23:53:08.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>你坐过的最挤的公交车是什么？只是路过，却被挤上了车。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>为近都门多送别，长条折尽减春风。<br>
——白居易《青门柳》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>我会一直喜欢到你不再需要我喜欢你为止。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1617753264984.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>二分查找（<code>O(n)</code>时间）：</p>
<pre><code class="language-java">import java.util.*;

class Solution {
    public boolean search(int[] nums, int target) {
        int n = nums.length;
        if(n == 1){
            return nums[0] == target;
        }
        int l = 0;
        int r = n-1;
        if(nums[l] == target || nums[r] == target){
            return true;
        }
        int m = 1;
        for(;m&lt;n &amp;&amp; nums[m] &gt;= nums[m-1];++m){
            if(nums[m-1] == target){
                return true;
            }
        }
        if(m == n){
            m = (l+r) / 2;
        }
        if(nums[m] == target){
            return true;
        }
        if(nums[m] &gt; target){
            return false;
        }
        if(nums[r] &gt; target){
            l = m;
        }else{
            r = m;
        }
        for(m = (l+r)/2;l&lt;r;m = (l+r)/2){
            if(nums[m] == target){
                return true;
            }
            if(nums[m] &gt; target){
                r = m-1;
            }else{
                l = m+1;
            }
        }
        return false;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1617753310280.png" alt="" loading="lazy"></figure>
<h1 id="太菜了太菜了完犊子完犊子"><s>太菜了太菜了完犊子完犊子</s></h1>
<p>这是另外做的，特地挑了条困难的做，不出所料果然不会做：</p>
<figure data-type="image" tabindex="3"><img src="https://2293736867.github.io/post-images/1617763682944.png" alt="" loading="lazy"></figure>
<p>题目描述很简单，就是找到最长的有效括号子串。</p>
<p><s>但众所周知题目越短难度越高。</s></p>
<p>一开始尝试动态规划，从一个dp数组变为一个dpl数组加一个dpr数组，好像发现不行，样例都过不了，反正是找不出转移方程，看了题解才知道转移方程还能是这样的：</p>
<figure data-type="image" tabindex="4"><img src="https://2293736867.github.io/post-images/1617763826310.png" alt="" loading="lazy"></figure>
<p>dp原来还可以在下标里面，，，</p>
<p><s>怪我太菜了，，，</s></p>
<p>另外当时一开始做的时候想到用栈，但是这种最长的，用栈需要遍历每一个位置，<code>O(n^3)</code>，看了一下题解的优化，原来栈存的是下标，这样就可以保存之前计算过的结果，可以降到<code>O(n)</code>：</p>
<figure data-type="image" tabindex="5"><img src="https://2293736867.github.io/post-images/1617764010014.png" alt="" loading="lazy"></figure>
<p><s>怪我太菜了，，，</s></p>
<p>最后一种方法是使用两个计数器（<code>left</code>+<code>right</code>，<code>left</code>保存当前的左括号数量，<code>right</code>保存当前的右括号数量）+正向遍历+反向遍历，当两个计数器大小一样时，计算它们的和并与最大值比较。正向遍历时，<code>right&gt;left</code>时清空两个计数器，反向遍历时，<code>left&gt;right</code>时清空两个计数器：</p>
<figure data-type="image" tabindex="6"><img src="https://2293736867.github.io/post-images/1617764234183.png" alt="" loading="lazy"></figure>
<p>最后。。。</p>
<pre><code class="language-java">import java.util.*;

class Solution {
    public int longestValidParentheses(String s) {
        int n = s.length();
        if(n &lt;= 1){
            return 0;
        }
        char[] c = s.toCharArray();
        int l = 0;
        int r = 0;
        int max = 0;
        for (int i = 0; i &lt; n; i++) {
            if(c[i] == '('){
                ++l;
            }else{
                ++r;
            }
            if(l == r &amp;&amp; l+r &gt; max){
                max = l+r;
            }
            if(r &gt; l){
                r = l = 0;
            }
        }
        l = r = 0;
        for (int i = n-1; i &gt;= 0; --i) {
            if(c[i] == '('){
                ++l;
            }else{
                ++r;
            }
            if(l == r &amp;&amp; l+r &gt; max){
                max = l+r;
            }
            if(l &gt; r){
                l = r = 0;
            }
        }
        return max;
    }
}
</code></pre>
<p>好吧我是fw。。。</p>
<figure data-type="image" tabindex="7"><img src="https://2293736867.github.io/post-images/1617764293834.png" alt="" loading="lazy"></figure>
<p><s>fwfwfwfwfw。。。。</s></p>
<p><s>完犊子完犊子</s></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第296期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-296-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-296-qi/">
        </link>
        <updated>2021-04-06T02:08:46.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>为什么要吵架呢？就不能心平气和的坐下来，打对方几巴掌吗？</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>可堪孤馆闭春寒，杜鹃声里长门暮。<br>
——秦观《踏莎行·郴州旅舍》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>鞭炮再想，可哪有我想你那么想。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1617674981156.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>版本1：</p>
<pre><code class="language-java">class Solution {
    public int removeDuplicates(int[] nums) {
        int n = nums.length;
        for (int i = 0; i &lt; n; i++) {
            int j = i+1;
            while(j &lt; n &amp;&amp; nums[i] == nums[j]){
                ++j;
            }
            if(j-i &gt; 2){
                for (int k = 2; j+k-2 &lt; n; k++) {
                    nums[i+k] = nums[j+k-2];
                }
                n -= (j-i-2);
                ++i;
            }
        }
        return n;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1617675025921.png" alt="" loading="lazy"></figure>
<p>版本2：</p>
<pre><code class="language-java">class Solution {
    public int removeDuplicates(int[] nums) {
        int n = nums.length;
        if(n &lt;= 2){
            return n;
        }
        int s = 2;
        for (int f = 2; f &lt; n; ++f) {
            if(nums[f] != nums[s-2]){
                nums[s++] = nums[f];
            }
        }
        return s;
    }
}
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://2293736867.github.io/post-images/1617675575565.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第295期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-295-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-295-qi/">
        </link>
        <updated>2021-04-05T05:17:07.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>做好人没希望，做坏人不擅长。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>庄生晓梦迷蝴蝶，望帝春心托杜鹃。<br>
——李商隐《锦瑟》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>人们总是在意得不到的，从而忘记已经拥有的。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<p>从今天起，这里会多一个栏目叫每日力扣，记录一些力扣每日一题的过程。</p>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1617599905888.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>版本1：</p>
<pre><code class="language-java">import java.util.*;

public class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int i = 0;
        int i1 = 0;
        int i2 = 0;
        int [] numTemp = Arrays.copyOfRange(nums1,0,m);
        while(i1 &lt; m &amp;&amp; i2&lt;n){
            nums1[i++] = (numTemp[i1] &gt; nums2[i2] ? nums2[i2++] : numTemp[i1++]);
        }
        while(i1 &lt; m){
            nums1[i++] = numTemp[i1++];
        }
        while (i2 &lt; n) {
            nums1[i++] = nums2[i2++];
        }
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1617599921496.png" alt="" loading="lazy"></figure>
<p>版本2：</p>
<pre><code class="language-java">public class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int i = m+n-1;
        int i1 = m-1;
        int i2 = n-1;
        while(i1 &gt;= 0 &amp;&amp; i2 &gt;= 0){
            nums1[i--] = (nums1[i1] &lt; nums2[i2] ? nums2[i2--] : nums1[i1--]);
        }
        while(i1 &gt;= 0){
            nums1[i--] = nums1[i1--];
        }
        while (i2 &gt;= 0) {
            nums1[i--] = nums2[i2--];
        }
    }
}
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://2293736867.github.io/post-images/1617600091781.png" alt="" loading="lazy"></figure>
<p>理论上来说版本2比版本1少了<code>O(m)</code>的空间，但是内存消耗还是差不多。。。可能是<code>m</code>值太低了。</p>
<p>看了一下内存占用的排名，好家伙第一名的代码也是额外的三个变量？？？</p>
<figure data-type="image" tabindex="4"><img src="https://2293736867.github.io/post-images/1617600241916.png" alt="" loading="lazy"></figure>
<p>？？？？？</p>
<p>直呼好家伙？？？</p>
<p>为什么空间占用差这么多？？？？</p>
<p>。。。。</p>
]]></content>
    </entry>
</feed>