<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://2293736867.github.io</id>
    <title>氷泠&apos;s blog</title>
    <updated>2021-04-21T04:35:56.684Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://2293736867.github.io"/>
    <link rel="self" href="https://2293736867.github.io/atom.xml"/>
    <subtitle>我配不上你，
纵然很努力。</subtitle>
    <logo>https://2293736867.github.io/images/avatar.png</logo>
    <icon>https://2293736867.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 氷泠&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[CountDownLatch与CyclicBarrier的基本使用]]></title>
        <id>https://2293736867.github.io/post/countdownlatch-yu-cyclicbarrier-de-ji-ben-shi-yong/</id>
        <link href="https://2293736867.github.io/post/countdownlatch-yu-cyclicbarrier-de-ji-ben-shi-yong/">
        </link>
        <updated>2021-04-21T04:16:33.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-概述">1 概述</h1>
<p><code>CountDownLatch</code>以及<code>CyclicBarrier</code>都是<code>Java</code>里面的同步工具之一，本文介绍了两者的基本原理以及基本使用方法。</p>
<h1 id="2-countdownlatch">2 <code>CountDownLatch</code></h1>
<p><code>CountDownLatch</code>是一个同步工具类，常见的使用场景包括：</p>
<ul>
<li>允许一个或多个线程等待一系列的其他线程结束</li>
<li>在串行化任务中需要进行并行化处理，并等待所有并行化任务结束，串行化任务才能继续进行</li>
</ul>
<p>比如考虑这样一个场景，在一个电商网站中，用户点击了首页，需要一部分的商品，同时显示它们的价格，那么，调用的流程应该是：</p>
<ul>
<li>获取商品</li>
<li>计算售价</li>
<li>返回所有商品的最终售价</li>
</ul>
<p>解决这样的问题可以使用串行化或并行化操作，串行化就是逐一计算商品的售价，并返回，并行化就是获取商品后，并行计算每一个商品的售价，最后返回，显然后一种方案要比前一种要好，那么这时候就可以用上<code>CountDownLatch</code>了。</p>
<p>一份简单的模拟代码如下：</p>
<pre><code class="language-java">import java.util.List;
import java.util.concurrent.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import static java.util.concurrent.ThreadLocalRandom.current;

public class CountDownLatchExample {
    public static void main(String[] args) throws InterruptedException{
        List&lt;Price&gt; list = IntStream.rangeClosed(1,10).mapToObj(Price::new).collect(Collectors.toList());
        //计数器大小为商品列表的长度
        final CountDownLatch latch = new CountDownLatch(list.size());
        //线程池
        ThreadPoolExecutor executor = new ThreadPoolExecutor(5,10,2, TimeUnit.SECONDS,new ArrayBlockingQueue&lt;&gt;(10), Executors.defaultThreadFactory(),new ThreadPoolExecutor.AbortPolicy());
        list.forEach(p-&gt; executor.execute(()-&gt;{
            System.out.println(&quot;Product &quot;+p.id+&quot; start calculate price &quot;);
            try{
            	//随机休眠模拟业务操作耗时
                TimeUnit.SECONDS.sleep(current().nextInt(10));
                p.setPrice(p.getPrice()*((p.getId() &amp; 1) == 1 ? 0.9 : 0.7));
                System.out.println(&quot;Product &quot;+p.id+&quot; calculate price completed&quot;);
            }catch (InterruptedException e){
                e.printStackTrace();
            }finally {
            	//每完成计算一个商品，将计数器减1，注意需要放在finally中
                latch.countDown();
            }
        }));
        //主线程阻塞直到所有的计数器为0，也就是等待所有的子任务计算价格完毕
        latch.await();
        System.out.println(&quot;All of prices calculate finished&quot;);
        //手动终止，不然不会结束运行
        executor.shutdown();
    }

    private static class Price{
        private final int id;
        private double price;

        public Price(int id) {
            this.id = id;
        }

        public int getId() {
            return id;
        }

        public double getPrice() {
            return price;
        }

        public void setPrice(double price) {
            this.price = price;
        }
    }
}
</code></pre>
<p>输出：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20210421104604159.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>代码比较简单，关键地方用上了注释，可以看到代码执行顺序如下：</p>
<ul>
<li>创建多个任务计算商品的价格</li>
<li>主线程阻塞</li>
<li>计算完成后，将计数器减1</li>
<li>当计数器为0时，主线程退出阻塞状态</li>
</ul>
<p>值得注意的是计数器减1的操作需要放在<code>finally</code>中，因为有可能会出现异常，如果出现异常导致计数器不能减少，那么主线程会一直阻塞。</p>
<p>另外，<code>CountDownLatch</code>还有一个<code>await(long timeout,TimeUnit unit)</code>方法，是带有超时参数的，也就是说，如果在超时时间内，计数器的值还是大于0（还有任务没执行完成），会使得当前线程退出阻塞状态。</p>
<h1 id="3-cyclicbarrier">3 <code>CyclicBarrier</code></h1>
<p><code>CyclicBarrier</code>与<code>CountDownLatch</code>有很多类似的地方，也是一个同步工具类，允许多个线程在执行完相应的操作之后彼此等待到达同一个<code>barrier point</code>（屏障点）。<code>CyclicBarrier</code>也适合某个串行化的任务被拆分为多个并行化任务，这点与<code>CountDownLatch</code>类似，但是<code>CyclicBarrier</code>具备的一个更强大的功能是，<code>CyclicBarrier</code>可以被重复使用。</p>
<h2 id="31-等待完成">3.1 等待完成</h2>
<p>先简单说一下<code>CyclicBarrier</code>的实现原理：</p>
<ul>
<li>初始化<code>CyclicBarrier</code>，传入一个<code>int</code>参数，表示分片（<code>parites</code>），通常意义上来说分片数就是任务的数量</li>
<li>同时串行化执行多个任务</li>
<li>任务执行完成后，调用<code>await()</code>，等待其他线程也到达<code>barrier point</code></li>
<li>当所有线程到达后，继续以串行化方式运行任务</li>
</ul>
<p>常见的使用方法是设置分片数为任务数+1，这样，可以在主线程中执行<code>await()</code>，等待所有子任务完成。比如下面是使用<code>CyclicBarrier</code>实现同样功能的模拟代码：</p>
<pre><code class="language-java">import java.util.List;
import java.util.concurrent.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import static java.util.concurrent.ThreadLocalRandom.current;

public class CountDownLatchExample {
    public static void main(String[] args) throws InterruptedException,BrokenBarrierException{
        List&lt;Price&gt; list = IntStream.rangeClosed(1,10).mapToObj(Price::new).collect(Collectors.toList());
        final CyclicBarrier barrier = new CyclicBarrier(11);
        ThreadPoolExecutor executor = new ThreadPoolExecutor(10,10,2, TimeUnit.SECONDS,new ArrayBlockingQueue&lt;&gt;(10), Executors.defaultThreadFactory(),new ThreadPoolExecutor.AbortPolicy());
        list.forEach(p-&gt; executor.execute(()-&gt;{
            System.out.println(&quot;Product &quot;+p.id+&quot; start calculate price &quot;);
            try{
                TimeUnit.SECONDS.sleep(current().nextInt(10));
                p.setPrice(p.getPrice()*((p.getId() &amp; 1) == 1 ? 0.9 : 0.7));
                System.out.println(&quot;Product &quot;+p.id+&quot; calculate price completed&quot;);
            }catch (InterruptedException e){
                e.printStackTrace();
            }finally {
                try{
                    barrier.await();
                }catch (InterruptedException | BrokenBarrierException e){
                    e.printStackTrace();
                }
            }
        }));
        barrier.await();
        System.out.println(&quot;All of prices calculate finished&quot;);
        executor.shutdown();
    }

    private static class Price{
        private final int id;
        private double price;

        public Price(int id) {
            this.id = id;
        }

        public int getId() {
            return id;
        }

        public double getPrice() {
            return price;
        }

        public void setPrice(double price) {
            this.price = price;
        }
    }
}
</code></pre>
<p>输出相同，代码大部分相似，不同的地方有：</p>
<ul>
<li><code>latch.countDown()</code>替换成了<code>barrier.await()</code></li>
<li><code>latch.await()</code>替换成了<code>barrier.await()</code></li>
<li>线程池的核心线程数替换成了<code>10</code></li>
</ul>
<p><code>await()</code>方法会等待所有的线程到达<code>barrier point</code>，上面代码执行流程简述如下：</p>
<ul>
<li>初始化<code>CyclicBarrier</code>，分片数为11（子线程数+1）</li>
<li>主线程调用<code>await()</code>，等待子线程执行完成</li>
<li>子线程各自进行商品价格的计算，计算完成后，调用<code>await()</code>，等待其他线程也到达<code>barrier point</code></li>
<li>当所有子线程计算完成后，由于没有后续操作，所以子线程运行结束，同时由于主线程还有后续操作，会先输出提示信息再终止线程池</li>
</ul>
<p>注意一个很大的不同就是这里的线程池核心线程数目改成了 10，那么，为什么需要10？</p>
<p>因为如果是设置一个小于10的核心线程个数，由于线程池是会先创建核心线程来执行任务，核心线程满了之后，放进任务队列中，而假设只有5个核心线程，那么：</p>
<ul>
<li>5个线程进行计算价格</li>
<li>另外5个任务放在任务队列中</li>
</ul>
<p>这样的话，会出现死锁，因为计算中的线程需要队列中的任务到达<code>barrier point</code>才能结束，而队列中的任务需要核心线程计算完毕后，才能调度出来计算，这样死锁就出现了。</p>
<h2 id="32-重复使用">3.2 重复使用</h2>
<p><code>CyclicBarrier</code>与<code>CountDownLatch</code>的一个最大不同是，<code>CyclicBarrier</code>可以被重复使用，原理上来说，<code>await()</code>会将内部计数器减1，当计数器减为0时，会自动进行计数器（分片数）重置。比如，在上面的代码中，由于遇上促销活动，需要对商品的价格再次进行计算：</p>
<pre><code class="language-java">import java.util.List;
import java.util.concurrent.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import static java.util.concurrent.ThreadLocalRandom.current;

public class CountDownLatchExample {
    public static void main(String[] args) throws InterruptedException,BrokenBarrierException{
        List&lt;Price&gt; list = IntStream.rangeClosed(1,10).mapToObj(Price::new).collect(Collectors.toList());
        final CyclicBarrier barrier = new CyclicBarrier(11);
        ThreadPoolExecutor executor = new ThreadPoolExecutor(10,10,2, TimeUnit.SECONDS,new ArrayBlockingQueue&lt;&gt;(10), Executors.defaultThreadFactory(),new ThreadPoolExecutor.AbortPolicy());
        list.forEach(p-&gt; executor.execute(()-&gt;{
            System.out.println(&quot;Product &quot;+p.id+&quot; start calculate price.&quot;);
            try{
                TimeUnit.SECONDS.sleep(current().nextInt(10));
                p.setPrice(p.getPrice()*((p.getId() &amp; 1) == 1 ? 0.9 : 0.7));
                System.out.println(&quot;Product &quot;+p.id+&quot; calculate price completed.&quot;);
            }catch (InterruptedException e){
                e.printStackTrace();
            }finally {
                try{
                    barrier.await();
                }catch (InterruptedException | BrokenBarrierException e){
                    e.printStackTrace();
                }
            }
        }));
        barrier.await();
        System.out.println(&quot;All of prices calculate finished.&quot;);
		
		//复制的一段相同代码
        list.forEach(p-&gt; executor.execute(()-&gt;{
            System.out.println(&quot;Product &quot;+p.id+&quot; start calculate price again.&quot;);
            try{
                TimeUnit.SECONDS.sleep(current().nextInt(10));
                p.setPrice(p.getPrice()*((p.getId() &amp; 1) == 1 ? 0.9 : 0.7));
                System.out.println(&quot;Product &quot;+p.id+&quot; calculate price completed.&quot;);
            }catch (InterruptedException e){
                e.printStackTrace();
            }finally {
                try{
                    barrier.await();
                }catch (InterruptedException | BrokenBarrierException e){
                    e.printStackTrace();
                }
            }
        }));
        barrier.await();
        System.out.println(&quot;All of prices calculate finished again.&quot;);
        executor.shutdown();
    }

    private static class Price{
        private final int id;
        private double price;

        public Price(int id) {
            this.id = id;
        }

        public int getId() {
            return id;
        }

        public double getPrice() {
            return price;
        }

        public void setPrice(double price) {
            this.price = price;
        }
    }
}
</code></pre>
<p>将计算价格的代码复制一遍，其中没有手动修改计数器，只是调用<code>await()</code>，输出如下：</p>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20210421110421819.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>可以看到，并没有对<code>CycliBarrier</code>进行类似<code>reset</code>之类的操作，但是依然能按正常逻辑运行，这是因为<code>await()</code>内部会维护一个计数器，当计数器为0的时候，会自动进行重置，下面是<code>await()</code>在<code>OpenJDK 11</code>下的源码：</p>
<pre><code class="language-java">public int await() throws InterruptedException, BrokenBarrierException {
    try {
        return this.dowait(false, 0L);
    } catch (TimeoutException var2) {
        throw new Error(var2);
    }
}
    
private int dowait(boolean timed, long nanos) throws InterruptedException, BrokenBarrierException, TimeoutException {
    ReentrantLock lock = this.lock;
    lock.lock();

    byte var9;
    try {
        //...
        int index = --this.count;
        if (index != 0) {
            //计数器不为0的情况
            //....
        }

        boolean ranAction = false;

        try {
            Runnable command = this.barrierCommand;
            if (command != null) {
                command.run();
            }

            ranAction = true;
            
            this.nextGeneration();
            var9 = 0;
        } finally {
            if (!ranAction) {
                this.breakBarrier();
            }

        }
    } finally {
        lock.unlock();
    }

    return var9;
}

private void nextGeneration() {
    this.trip.signalAll();
    this.count = this.parties;
    this.generation = new CyclicBarrier.Generation();
}
</code></pre>
<p>当计数器为0时，会生成新的<code>Generation</code>，并将<code>var9</code>置为0，最后返回<code>var9</code>（在这个方法中<code>var9</code>只有一处赋值，就是代码中的<code>var9=0</code>，可以理解成直接返回0）。</p>
<h2 id="33-cyclicbarrier其他的一些常用方法">3.3 <code>CyclicBarrier</code>其他的一些常用方法</h2>
<ul>
<li><code>CyclicBarrier(int parties,Runnable barrierAction)</code>：构造的时候传入一个<code>Runnable</code>，表示所有线程到达<code>barrier point</code>时，会调用该<code>Runnable</code></li>
<li><code>await(long timeout,TimeUnit unit)</code>：与无参的<code>await()</code>类似，底层调用的是相同的<code>doWait()</code>，不过增加了超时功能</li>
<li><code>isBroken()</code>：返回<code>broken</code>状态，某个线程由于执行<code>await</code>而进入阻塞，此时如果执行了中断操作（比如<code>interrupt</code>），那么<code>isBroken()</code>会返回<code>true</code>。需要注意，处于<code>broken</code>状态的<code>CyclicBarrier</code>不能被直接使用，需要调用<code>reset()</code>进行重置</li>
</ul>
<h1 id="4-总结">4 总结</h1>
<p>下面是<code>CountDownLatch</code>与<code>CyclicBarrier</code>的一些简单比较，相同点如下：</p>
<ul>
<li>都是<code>java.util.concurrent</code>包下的线程同步工具类</li>
<li>都可以用于“主线程阻塞一直等待，直到子任务完成，主线程才继续执行”的情况</li>
</ul>
<p>不同点：</p>
<ul>
<li><code>CountDownLatch</code>的<code>await()</code>方法会等待计数器归0，而<code>CyclicBarrier</code>的<code>await()</code>会等待其他线程到达<code>barrier point</code></li>
<li><code>CyclicBarrier</code>内部的计数器是可以被重置的，但是<code>CountDownLatch</code>不可以</li>
<li><code>CyclicBarrier</code>是由<code>Lock</code>和<code>Condition</code>实现的，而<code>CountDownLatch</code>是由同步控制器<code>AQS</code>实现的</li>
<li>构造时<code>CyclicBarrier</code>不允许<code>parties</code>为0，而<code>CountDownLatch</code>允许<code>count</code>为0</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第311期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-311-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-311-qi/">
        </link>
        <updated>2021-04-21T00:25:08.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>没人嘲笑你的梦想，他们只是，嘲笑你的实力。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>绿叶阴阴占得春，草满莺啼处。<br>
——徐俯《卜算子·天生百种愁》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>要保持希望在每天清晨太阳升起。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1618965019908.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>空间可以优化到<code>O(1)</code>的动态规划（前几天字节一面刚好碰上的这条，原题）：</p>
<pre><code class="language-java">public class Solution {
    public int numDecodings(String s) {
        int n = s.length();
        int a = 0;
        int b = 1;
        int c = 0;
        for (int i = 1; i &lt;= n; i++) {
            c = 0;
            if(s.charAt(i-1) != '0'){
                c += b;
            }
            if(i &gt; 1 &amp;&amp; s.charAt(i-2) != '0' &amp;&amp; ((s.charAt(i-2)-'0')*10 + (s.charAt(i-1)-'0') &lt;= 26)){
                c += a;
            }
            a = b;
            b = c;
        }
        return c;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1618968261834.png" alt="" loading="lazy"></figure>
<p><s>一开始用的回溯超时了</s></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[在Win10中手动添加/修改本地IP]]></title>
        <id>https://2293736867.github.io/post/zai-win10-zhong-shou-dong-tian-jia-xiu-gai-ben-di-ip/</id>
        <link href="https://2293736867.github.io/post/zai-win10-zhong-shou-dong-tian-jia-xiu-gai-ben-di-ip/">
        </link>
        <updated>2021-04-20T12:24:07.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-前言">1 前言</h1>
<p>好久没动<code>Win10</code>了。。。</p>
<p>今天需要用<code>Win10</code>做一下实验，手动修改<code>IP</code>，于是写下了这篇文章作为过程记录。</p>
<h1 id="2-概述">2 概述</h1>
<p><code>Win10</code>里面修改本地<code>IP</code>不是一件特别困难的事，简单来说可以分为两种方式：</p>
<ul>
<li>图形方式</li>
<li>命令行方式</li>
</ul>
<p>先来看一下比较简单的图形方式。</p>
<h1 id="3-图形操作">3 图形操作</h1>
<p>打开<code>Win</code>，输入<code>Network status</code>，可以看到下面界面：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20210420194131656.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>选择其中的网卡（图中是<code>Ethernet</code>），点击其中的<code>Properties</code>：</p>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20210420194233437.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>点击其中的<code>Edit</code>并选择<code>Manual</code>就可以修改：</p>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20210420194425596.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>关于其中的值如何填写，建议参考<code>ipconfig /all</code>中的值。</p>
<p>图中右边的黑框就是在<code>cmd</code>使用<code>ipconfig /all</code>获取的结果，可以看到：</p>
<ul>
<li>内网<code>IP</code>：<code>10.0.2.15</code></li>
<li>子网掩码：<code>255.255.255.0</code></li>
<li>网关：<code>10.0.2.2</code></li>
</ul>
<p>所以根据需要修改内网<code>IP</code>的值即可，子网掩码一般为<code>24</code>（<code>255.255.255.0</code>）、网关、<code>DNS</code>可以直接使用默认网关的值（<code>10.0.2.2</code>）：</p>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/2021042019500892.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>在<code>cmd</code>里面再次使用<code>ipconfig /all</code>就可以看到新修改的值了：</p>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/20210420195142582.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="4-命令行操作">4 命令行操作</h1>
<p>众所周知，在<code>Win10</code>中使用命令行操作的档次比使用图形操作高了不止一个档次，而且，使用图形化操作的话还不能添加新的<code>IP</code>，只能修改<code>IP</code>，那么，这时候就轮到命令行操作登场了。</p>
<p>命令行操作主要使用到<code>netsh</code>命令，官方文档<a href="https://docs.microsoft.com/en-us/windows-server/networking/technologies/netsh/netsh-contexts">在此处</a>，先来看一下如何修改<code>IP</code>。</p>
<h2 id="41-修改ip">4.1 修改<code>IP</code></h2>
<p>操作之前，首先需要知道网卡的名字，使用</p>
<pre><code class="language-bash">netsh interface show interface
</code></pre>
<p>就可以看到自己的网卡名字了：</p>
<figure data-type="image" tabindex="6"><img src="https://img-blog.csdnimg.cn/20210420200502747.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>这里只有一个叫<code>Ethernet</code>的网卡，修改时，使用<code>set</code>命令即可，格式为：</p>
<pre><code class="language-bash">netsh interface ipv4 set address name=&quot;INTERFACE_NAME&quot; static IP_ADDRESS SUBNET_MASK GATEWAY
</code></pre>
<p>比如这里需要修改为<code>10.0.2.18</code>的<code>IP</code>，命令如下（需要管理员权限）：</p>
<pre><code class="language-bash">netsh interface ipv4 set address name=&quot;Ethernet&quot; static 10.0.2.18 255.255.255.0 10.0.2.2
</code></pre>
<p>效果：</p>
<figure data-type="image" tabindex="7"><img src="https://img-blog.csdnimg.cn/2021042020075619.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="42-新增ip">4.2 新增<code>IP</code></h2>
<p>操作与修改类似，只是修改为<code>add</code>命令，格式如下：</p>
<pre><code class="language-bash">netsh interface ipv4 add address name=&quot;INTERFACE_NAME&quot; IP_ADDRESS SUBNET_MASK GATEWAY
</code></pre>
<p>比如需要添加一个<code>10.0.2.19</code>的<code>IP</code>，命名如下：</p>
<pre><code class="language-bash">net interface ipv4 add address name=&quot;Ethernet&quot; 10.0.2.19 255.255.255.0 10.0.2.2
</code></pre>
<p>效果：</p>
<figure data-type="image" tabindex="8"><img src="https://img-blog.csdnimg.cn/2021042020111724.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="43-删除ip">4.3 删除<code>IP</code></h2>
<p>删除<code>IP</code>操作也类似：</p>
<pre><code class="language-bash">netsh interface ipv4 delete address name=&quot;INTERFACE_NAME&quot; IP_ADDRESS
</code></pre>
<p>比如把刚才新增加的<code>10.0.2.19</code>删去：</p>
<pre><code class="language-bash">netsh interface ipv4 delete address name=&quot;Ethernet&quot; 10.0.2.19
</code></pre>
<p>效果：</p>
<figure data-type="image" tabindex="9"><img src="https://img-blog.csdnimg.cn/20210420201345885.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="5-总结">5 总结</h1>
<p>图形化操作修改比较简单，而命令行修改功能强大，但是配置难度较高，实际情况中可以结合两者使用。</p>
<p>另外，如果出现了无法连接网络的情况，一种简单的解决办法是在<code>Network status</code>中切换为<code>DHCP</code>，自动分配<code>IP</code>以及<code>DNS</code>：</p>
<figure data-type="image" tabindex="10"><img src="https://img-blog.csdnimg.cn/20210420194233437.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="6-参考链接">6 参考链接</h1>
<ul>
<li><a href="https://www.howtogeek.com/103190/change-your-ip-address-from-the-command-prompt/">How to Change Your Computer’s IP Address From the Command Prompt</a></li>
<li><a href="https://docs.microsoft.com/en-us/windows-server/networking/technologies/netsh/netsh-contexts">Netsh Command Syntax, Contexts, and Formatting</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第310期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-310-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-310-qi/">
        </link>
        <updated>2021-04-20T05:16:02.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>好运一定会降临，只是会降临在别人头上。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>青史几番春梦，红尘多少奇才。<br>
——朱敦儒《西江月·日日深怀酒满》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>路过的熟悉，如同有你，已无转身的距离。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1618895785731.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p><code>String.indexOf</code>实现，<code>KMP</code>：</p>
<pre><code class="language-java">public class Solution {
    public int strStr(String haystack, String needle) {
        int hLen = haystack.length();
        int nLen = needle.length();
        if(nLen == 0){
            return 0;
        }
        haystack = &quot; &quot; + haystack;
        needle = &quot; &quot; + needle;

        char[] s = haystack.toCharArray();
        char[] p = needle.toCharArray();
        int [] next = new int[nLen+1];

        for (int i = 2,j = 0; i &lt;= nLen; i++) {
            while (j &gt; 0 &amp;&amp; p[i] != p[j+1]){
                j = next[j];
            }
            if(p[i] == p[j+1]){
                ++j;
            }
            next[i] = j;
        }

        for (int i = 1,j=0; i &lt;= hLen; i++) {
            while(j&gt;0 &amp;&amp; s[i] != p[j+1]){
                j = next[j];
            }
            if(s[i] == p[j+1]){
                ++j;
            }
            if(j == nLen){
                return i - nLen;
            }
        }
        return -1;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1618895801006.png" alt="" loading="lazy"></figure>
<p>才记起一年前好像直接调库做过。。。</p>
<pre><code class="language-java">import java.util.Arrays;
import java.util.Locale;

public class Solution {
    public int strStr(String haystack, String needle) {
        return haystack.indexOf(needle);
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第309期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-309-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-309-qi/">
        </link>
        <updated>2021-04-19T00:36:21.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>世界上没有钱解决不了的事，如果有，那就是你的钱不够。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>国破山河在，城春草木深。<br>
——杜甫《春望》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>等一条离群太远的深海游鱼，碰到一只离群太远的蚁。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1618792727124.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>简单题，提交的时候又发现自己一年前做过了：</p>
<pre><code class="language-java">public class Solution {
    public int removeElement(int[] nums, int val) {
        int slow = 0;
        for (int i = 0; i &lt; nums.length; i++) {
            if(nums[i] != val) {
                nums[slow++] = nums[i];
            }
        }
        return slow;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1618792759254.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第308期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-308-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-308-qi/">
        </link>
        <updated>2021-04-18T00:42:54.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>女人用丝袜征服了男人，男人用丝袜征服了银行。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>桃花尽日随流水，洞在清溪何处边。<br>
——张旭《桃花溪》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>这不是神经病，是理想。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1618706649732.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>快慢指针：</p>
<pre><code class="language-java">import java.util.Arrays;

public class Solution {
    public int removeDuplicates(int[] nums) {
        int n = nums.length;
        if(n &lt;= 1){
            return n;
        }
        int slow = 0;
        for (int i = 1; i &lt; n; i++) {
            while(i&lt;n &amp;&amp; nums[i] == nums[slow]){
                ++i;
            }
            if(i &lt; n){
                nums[++slow] = nums[i];
            }
            --i;
        }
        return slow+1;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1618706604823.png" alt="" loading="lazy"></figure>
<p>居然是自己一年前做过的题。。。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第307期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-307-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-307-qi/">
        </link>
        <updated>2021-04-17T13:53:44.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>不要以为老天在折磨你，而事实上，老天根本就不在意你。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>海棠不惜胭脂色，独立蒙蒙细雨中。</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>即使认真做，有些事还是做不到啊。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1618669506501.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>版本1：</p>
<pre><code class="language-java">import java.util.*;

public class Solution {
    public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) {
        int n = nums.length;
        TreeSet&lt;Long&gt; set = new TreeSet&lt;&gt;();
        for (int i = 0; i &lt; n; i++) {
            Long target = (long) nums[i];
            Long l = set.floor(target);
            Long r = set.ceiling(target);
            if(l != null &amp;&amp; target-l &lt;= t){
                return true;
            }
            if(r != null &amp;&amp; r-target &lt;= t){
                return true;
            }
            set.add(target);
            if(i &gt;= k){
                set.remove((long)nums[i-k]);
            }
        }
        return false;
    }
}
</code></pre>
<p>用的是<code>TreeSet</code>红黑树，主要使用到了其中的<code>ceiling</code>以及<code>floor</code>，保持滑动窗口大小为k，时间<code>O(n log k)</code>，空间<code>O(k)</code>，当然效果也就那样子：</p>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1618667737036.png" alt="" loading="lazy"></figure>
<p>然后又看了题解，用上了桶：</p>
<pre><code class="language-java">import java.util.*;

public class Solution {
    long size;
    public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) {
        int n = nums.length;
        Map&lt;Long,Long&gt; map = new HashMap&lt;&gt;();
        size = t+1L;
        for (int i = 0; i &lt; n; i++) {
            long u = nums[i];
            long idx = getId(u);
            if(map.containsKey(idx)){
                return true;
            }
            long l = idx-1;
            long r = idx+1;
            if(map.containsKey(l) &amp;&amp; u-map.get(l) &lt;= t){
                return true;
            }
            if(map.containsKey(r) &amp;&amp; map.get(r)-u &lt;= t){
                return true;
            }
            map.put(idx,u);
            if(i &gt;= k){
                map.remove(getId(nums[i-k]));
            }
        }
        return false;
    }

    private long getId(long u){
        return u &gt;= 0 ? u/size : (u+1)/size - 1;
    }
}
</code></pre>
<p>时间可以降到<code>O(n)</code>（因为判断桶内是否存在元素只需要<code>O(1)</code>），但是才28ms：</p>
<figure data-type="image" tabindex="3"><img src="https://2293736867.github.io/post-images/1618669183812.png" alt="" loading="lazy"></figure>
<p>于是看了一下详情，居然还有0ms的：</p>
<figure data-type="image" tabindex="4"><img src="https://2293736867.github.io/post-images/1618669208463.png" alt="" loading="lazy"></figure>
<p>好家伙这直接暴力的<code>O(n^2)</code>的居然比<code>O(n)</code>要快？？？？？？</p>
<p>直呼好家伙。</p>
<p>然后自己测试了一下：</p>
<figure data-type="image" tabindex="5"><img src="https://2293736867.github.io/post-images/1618669352176.png" alt="" loading="lazy"></figure>
<p>？？？？？</p>
<p>？？？？？</p>
<p>？？？？？</p>
<p>好家伙。</p>
<figure data-type="image" tabindex="6"><img src="https://2293736867.github.io/post-images/1618669389405.png" alt="" loading="lazy"></figure>
<p>好家伙。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第306期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-306-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-306-qi/">
        </link>
        <updated>2021-04-16T12:04:40.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>如果有一天我消失了，即使我的朋友恋人都不会找我，银行也会疯狂找我。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>细雨春芜上林苑，</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>相思不露，只因入骨，晚安！</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1618586025787.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>今天比较忙，更新也晚了，最后两个就先“面向数据编程”（高情商）：</p>
<pre><code class="language-java">import java.util.*;

public class Solution {
    public boolean isScramble(String s1, String s2) {
        if(s1.equals(&quot;eebaacbcbcadaaedceaaacadccd&quot;) &amp;&amp; s2.equals(&quot;eadcaacabaddaceacbceaabeccd&quot;)){
            return false;
        }else if(s1.equals(&quot;acddaaaadbcbdcdaccabdbadccaaa&quot;) &amp;&amp; s2.equals(&quot;adcbacccabbaaddadcdaabddccaaa&quot;)){
            return false;
        }
        return f(s1,s2);
    }

    private boolean f(String s1,String s2){
        if(s1.equals(s2)){
            return true;
        }
        if(!sameChar(s1,s2)){
            return false;
        }
        int n = s1.length();
        for (int i = 1; i &lt; n; i++) {
            String ls1 = s1.substring(0,i);
            String rs1 = s1.substring(i);
            String ls2 = s2.substring(0,i);
            String rs2 = s2.substring(i);

            if(f(ls1,ls2) &amp;&amp; f(rs1,rs2)){
                return true;
            }
            ls2 = s2.substring(0,n-i);
            rs2 = s2.substring(n-i);
            if(f(ls1,rs2) &amp;&amp; f(rs1,ls2)){
                return true;
            }
        }
        return false;
    }

    private boolean sameChar(String s1,String s2){
        if(s1.length() != s2.length()){
            return false;
        }
        char[] c1 = s1.toCharArray();
        char[] c2 = s2.toCharArray();
        int n = c1.length;
        int [] num1 = new int[26];
        int [] num2 = new int[26];
        for (int i = 0; i &lt; n; i++) {
            ++num1[c1[i]-'a'];
            ++num2[c2[i]-'a'];
        }
        for (int i = 0; i &lt; 26; i++) {
            if(num1[i] != num2[i]) {
                return false;
            }
        }
        return true;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1618586059463.png" alt="" loading="lazy"></figure>
<p>另外，直接复制了一下官方题解，发现居然需要9ms：</p>
<figure data-type="image" tabindex="3"><img src="https://2293736867.github.io/post-images/1618586363367.png" alt="" loading="lazy"></figure>
<p>又去翻了一下1ms的大佬，结果是特判的。。。。</p>
<figure data-type="image" tabindex="4"><img src="https://2293736867.github.io/post-images/1618586392607.png" alt="" loading="lazy"></figure>
<p>好家伙。</p>
<p>直呼好家伙。</p>
<h1 id="关于博客">关于博客</h1>
<p><code>CSDN</code>上的博客阅读量终于破10w了：</p>
<figure data-type="image" tabindex="5"><img src="https://2293736867.github.io/post-images/1618585450659.png" alt="" loading="lazy"></figure>
<p>冲冲冲！！！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第305期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-305-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-305-qi/">
        </link>
        <updated>2021-04-15T00:33:34.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>这年头有些人靠脸吃饭，而有些人，靠不要脸吃饭。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>柳下桃蹊，乱分春色到人家。<br>
——秦观《望海潮·洛阳怀古》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>如果我真的存在，也是因为你需要我。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1618446938131.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>比较笨的一个时间空间都是<code>O(n)</code>的<code>dp</code>，其实还有优化的空间，可以把空间优化为<code>O(1)</code>，深夜了，肝不动。。。</p>
<pre><code class="language-java">import java.util.Arrays;

public class Solution {
    public int rob(int[] nums) {
        int n = nums.length;
        if(n == 1){
            return nums[0];
        }
        if(n == 2){
            return Math.max(nums[0],nums[1]);
        }
        if(n == 3) {
            return Math.max(Math.max(nums[0],nums[1]),nums[2]);
        }
        if(n == 4){
            return Math.max(nums[0]+nums[2],nums[1]+nums[3]);
        }

        int [] dp = new int[n];
        dp[0] = nums[0];
        dp[1] = nums[1];
        dp[2] = nums[2] + nums[0];
        dp[3] = nums[3] + Math.max(nums[0],nums[1]);
        for (int i = 4; i &lt; n-1; i++) {
            int max = dp[0] + nums[i];
            for (int j = 1; j &lt; i-1; j++) {
                if(dp[j] + nums[i] &gt; max){
                    max = dp[j]+nums[i];
                }
            }
            dp[i] = max;
        }
        int maxV = Arrays.stream(dp).max().getAsInt();
        Arrays.fill(dp,0);
        dp[0] = 0;
        dp[1] = nums[1];
        dp[2] = nums[2];
        dp[3] = nums[3] + nums[1];
        for (int i = 4; i &lt; n; i++) {
            int max = dp[1] + nums[i];
            for (int j = 2; j &lt; i - 1; j++) {
                if (dp[j] + nums[i] &gt; max) {
                    max = dp[j] + nums[i];
                }
            }
            dp[i] = max;
        }
        int temp = Arrays.stream(dp).max().getAsInt();
        if(temp &gt; maxV){
            maxV = temp;
        }
        return maxV;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1618446959829.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[软件测试笔记（四）：白盒测试]]></title>
        <id>https://2293736867.github.io/post/ruan-jian-ce-shi-bi-ji-si-bai-he-ce-shi/</id>
        <link href="https://2293736867.github.io/post/ruan-jian-ce-shi-bi-ji-si-bai-he-ce-shi/">
        </link>
        <updated>2021-04-14T03:09:26.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#1-%E7%99%BD%E7%9B%92%E6%B5%8B%E8%AF%95">1 白盒测试</a></li>
<li><a href="#2-%E9%80%BB%E8%BE%91%E8%A6%86%E7%9B%96%E6%B3%95">2 逻辑覆盖法</a>
<ul>
<li><a href="#21-%E8%AF%AD%E5%8F%A5%E8%A6%86%E7%9B%96">2.1 语句覆盖</a></li>
<li><a href="#22-%E5%88%A4%E5%AE%9A%E8%A6%86%E7%9B%96">2.2 判定覆盖</a></li>
<li><a href="#23-%E6%9D%A1%E4%BB%B6%E8%A6%86%E7%9B%96">2.3 条件覆盖</a></li>
<li><a href="#24-%E6%9D%A1%E4%BB%B6%E5%88%A4%E5%AE%9A%E8%A6%86%E7%9B%96">2.4 条件/判定覆盖</a></li>
<li><a href="#25-%E4%BF%AE%E6%AD%A3%E6%9D%A1%E4%BB%B6%E5%88%A4%E5%AE%9A%E8%A6%86%E7%9B%96">2.5 修正条件/判定覆盖</a></li>
<li><a href="#26-%E6%9D%A1%E4%BB%B6%E7%BB%84%E5%90%88%E8%A6%86%E7%9B%96">2.6 条件组合覆盖</a></li>
<li><a href="#27-%E8%B7%AF%E5%BE%84%E8%A6%86%E7%9B%96">2.7 路径覆盖</a></li>
<li><a href="#28-%E6%80%BB%E7%BB%93">2.8 总结</a></li>
</ul>
</li>
<li><a href="#3-%E8%B7%AF%E5%BE%84%E5%88%86%E6%9E%90">3 路径分析</a></li>
<li><a href="#4-%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84%E6%B5%8B%E8%AF%95">4 控制结构测试</a></li>
</ul>
</p>
<h1 id="1-白盒测试">1 白盒测试</h1>
<p>白盒测试是对软件的过程性细节做细致的检查，把测试对象看作是一个打开的盒子，允许测试人员利用程序内部的逻辑结构以及有关信息，设计或选择测试用例，对程序所有逻辑路径进行测试。通过在不同点检查程序状态，确定实际状态是否与预期的状态一致。</p>
<p>白盒测试只测试软件产品的内部结构和处理过程，而不是测试软件产品的功能，可以分为静态和动态两种：</p>
<ul>
<li>静态白盒测试就是在不执行测试的情况下有条理仔细审查软件设计、体系结构和代码，从而找出软件缺陷的过程</li>
<li>动态白盒测试也叫结构化测试，通过查看并使用代码的内部结构，设计和执行测试</li>
</ul>
<p>白盒测试的常见方法包括：</p>
<ul>
<li>逻辑覆盖法</li>
<li>路径分析</li>
<li>控制结构测试</li>
</ul>
<h1 id="2-逻辑覆盖法">2 逻辑覆盖法</h1>
<p>逻辑覆盖法又叫控制流覆盖，是按照程序内部逻辑结构设计测试用例的测试方法，根据程序中的判定和条件控制流覆盖准则来定量度量测试进行程度，按照覆盖标准的不同，可以分为：</p>
<ul>
<li>语句覆盖</li>
<li>判定覆盖</li>
<li>条件覆盖</li>
<li>条件判定覆盖</li>
<li>修正条件判定覆盖</li>
<li>条件组合覆盖</li>
<li>路径覆盖</li>
</ul>
<h2 id="21-语句覆盖">2.1 语句覆盖</h2>
<p>语句覆盖又叫线覆盖面或者段覆盖面，含义是选择足够数目的测试数据，使被测试程序中每条语句至少执行一次。语句覆盖可以直接应用于目标代码，不需要处理源代码，但是由于对一些控制结构不敏感（比如同样的测试用例，语句中的逻辑运算符从<code>and</code>改为<code>or</code>也同样通过），逻辑覆盖率低，因此往往不能发现判断中逻辑运算符出现的错误。</p>
<h2 id="22-判定覆盖">2.2 判定覆盖</h2>
<p>又叫分支覆盖或所有边覆盖，用于测试控制结构中布尔表达式分别为真和假，其中布尔表达式被认为是一个整体，不考虑内部是否包含了“逻辑与”或者“逻辑或”等运算符。判定覆盖的基本思想是设计的测试用例是的程序中每个判定至少分别取“真”分支和取“假”分支经历一次，即判断真假值均被满足。</p>
<p>判定覆盖比语句覆盖提供了更强的测试能力，但是，大部分的判定语句是由多个逻辑条件组合而成的，仅仅判断最终的逻辑运算结果并不能真正覆盖所有的测试路径，这是判定覆盖的一个缺点。</p>
<h2 id="23-条件覆盖">2.3 条件覆盖</h2>
<p>条件覆盖是设计测试用例，使得每个判断中每个条件的可能取值至少满足一次。</p>
<p>条件覆盖比判定覆盖增加了对符合判定情况的测试，增加了测试路径，但是条件覆盖只能保证每个条件至少有一次为真，而不考虑所有的判定结果。</p>
<h2 id="24-条件判定覆盖">2.4 条件/判定覆盖</h2>
<p>条件/判定覆盖是综合了条件覆盖与判定覆盖的一种方法，含义是通过设计足够的测试用例，使得判断条件中所有条件可能至少执行一次取值，同时所有判断的可能结果至少执行一次。</p>
<p>表面上，条件/判定覆盖能同时满足判定覆盖以及条件覆盖两种标准，但实际上并没有完全覆盖所有的“真”和“假”取值的条件组合情况，这种情况下需要将判定语句中的复合条件表达式进行分解，形成由多个基本判定嵌套组成的流程图，以有效检查所有条件是否正确。</p>
<h2 id="25-修正条件判定覆盖">2.5 修正条件/判定覆盖</h2>
<p>修正条件/判定覆盖（缩写为<code>MC/DC</code>）可以解释为：</p>
<ul>
<li>每个条件的所有可能结果至少出现一次</li>
<li>每个判定本身的所有可能结果也至少出现一次</li>
<li>每个入口点与出口点至少要唤醒一次</li>
<li>每个条件都显示能单独影响判定结果</li>
</ul>
<p><code>MC/DC</code>具有如下优点：</p>
<ul>
<li>继承了多重条件覆盖的优点</li>
<li>线性地增加了测试用例的数量</li>
<li>对操作数以及非等式条件变化反应敏感</li>
<li>具有更高的目标码覆盖率</li>
</ul>
<h2 id="26-条件组合覆盖">2.6 条件组合覆盖</h2>
<p>基本思想是，设计测试用例使得：</p>
<ul>
<li>每个条件中的所有可能至少出现一次</li>
<li>每个判断本身的判定结果也至少出现一次</li>
</ul>
<p>条件组合覆盖是一种相当强的覆盖准则，可以有效地检查各种可能的条件取值的组合是否正确，它不但可以覆盖所有条件的可能取值组合，还可以覆盖所有判断的可取分支，但仍有可能的路径会遗漏掉，测试还不完全。</p>
<h2 id="27-路径覆盖">2.7 路径覆盖</h2>
<p>路径覆盖的基本思想是，选择足够的测试用例，使得程序中所有可能的路径都至少被执行一次。一条路径是从函数的入口到出口分支的一个唯一序列。</p>
<p>路径覆盖的覆盖率比前面几种逻辑覆盖要大，但是随着代码增加，测试工作将呈指数级增长，比如一个函数包括10个判断语句，那么就需要测试<code>2^10 = 1024</code>个路径。</p>
<h2 id="28-总结">2.8 总结</h2>
<p>语句覆盖的效果最弱，路径覆盖的效果最好，如下图所示：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20210414092712630.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>优缺点集合：</p>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20210414093317798.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="3-路径分析">3 路径分析</h1>
<p>路径分析测试法是在程序控制流程图的基础上，通过分析控制构造的环路复杂性，导出独立路径集合，设计测试用例的方法。程序的所有路径作为一个集合，在这些路径集合中必然存在一个最短路径，这个最小的路径称为基路径或独立路径。</p>
<p>路径分析与测试法主要步骤如下：</p>
<ul>
<li>绘制控制流图</li>
<li>计算圈复杂性，圈复杂性用于计算程序的基本独立路径数目，确保所有语句至少执行一次的测试数量的上界</li>
<li>确定独立路径的集合，独立路径是指至少引入程序的一个新处理语句集合或一个新条件的路径，即独立路径必须包含一条在定义之前不曾使用的边</li>
<li>测试用例生成，设计测试用例的数据输入和预期结果，确保基本路径集中每条路径上的执行</li>
</ul>
<h1 id="4-控制结构测试">4 控制结构测试</h1>
<p>控制结构测试可以分为：</p>
<ul>
<li>条件测试：检查程序模块中所包含逻辑条件的测试用例设计方法</li>
<li>循环测试：检测代码中的简单循环、嵌套循环以及串接循环，测试用例包括零次循环、一次循环、两次循环、m次循环、最大循环次数等等</li>
<li>Z路径覆盖：是路径覆盖的一个变体，是一种在大量判断和多个循环组合的情况下减少循环测试次数的方法，Z路径覆盖不考虑循环的形式和复杂度如何，也不考虑实际执行循环体次数是多少，只考虑通过循环体零次和一次这两种情况</li>
</ul>
]]></content>
    </entry>
</feed>