<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://2293736867.github.io</id>
    <title>氷泠&apos;s blog</title>
    <updated>2021-06-25T12:16:41.594Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://2293736867.github.io"/>
    <link rel="self" href="https://2293736867.github.io/atom.xml"/>
    <subtitle>几百遍，重复了几百遍
重复的情绪重复的熬过想你的夜</subtitle>
    <logo>https://2293736867.github.io/images/avatar.png</logo>
    <icon>https://2293736867.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 氷泠&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[每日分享 第375期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-375-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-375-qi/">
        </link>
        <updated>2021-06-25T10:55:31.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>同甘共苦你不陪，荣华富贵你是谁？</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>问何人又卸，片帆沙岸，系斜阳缆？<br>
——辛弃疾《水龙吟·过南剑双溪楼》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>风筝的线你随时可以放开，只是别盼望我会回来。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1624618691721.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>广搜：</p>
<pre><code class="language-java">import java.util.*;

public class Solution {
    private static final String ZERO = &quot;0000&quot;;

    public int openLock(String[] deadends, String target) {
        if(target.equals(ZERO)) {
            return 0;
        }

        final Set&lt;String&gt; dead = new HashSet&lt;&gt;();
        for(String s:deadends){
            dead.add(s);
            if(s.equals(ZERO)){
                return -1;
            }
        }

        int res = 0;
        Queue&lt;String&gt; queue = new LinkedList&lt;&gt;();
        queue.add(ZERO);
        Set&lt;String&gt; visit = new HashSet&lt;&gt;();
        visit.add(ZERO);

        while (!queue.isEmpty()){
            ++res;
            int size = queue.size();
            for (int i = 0; i &lt; size; i++) {
                String str = queue.remove();
                for(String s:get(str)){
                    if(!dead.contains(s) &amp;&amp; !visit.contains(s)){
                        if(s.equals(target)){
                            return res;
                        }
                        queue.offer(s) ;
                        visit.add(s);
                    }
                }
            }
        }
        return -1;
    }

    public char numPrev(char x) {
        return x == '0' ? '9' : (char) (x - 1);
    }

    public char numSucc(char x) {
        return x == '9' ? '0' : (char) (x + 1);
    }

    public List&lt;String&gt; get(String status) {
        List&lt;String&gt; ret = new ArrayList&lt;String&gt;();
        char[] array = status.toCharArray();
        for (int i = 0; i &lt; 4; ++i) {
            char num = array[i];
            array[i] = numPrev(num);
            ret.add(new String(array));
            array[i] = numSucc(num);
            ret.add(new String(array));
            array[i] = num;
        }
        return ret;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1624623354233.png" alt="" loading="lazy"></figure>
<p>就是不是十分服气下面的超时怎么来的，命名单独把样例拿出来跑就不会超时。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Spring Boot demo系列（十二）：ShardingSphere + MyBatisPlus 读写分离 + 主从复制]]></title>
        <id>https://2293736867.github.io/post/spring-boot-demo-xi-lie-shi-er-shardingsphere-mybatisplus-du-xie-fen-chi-zhu-cong-fu-zhi/</id>
        <link href="https://2293736867.github.io/post/spring-boot-demo-xi-lie-shi-er-shardingsphere-mybatisplus-du-xie-fen-chi-zhu-cong-fu-zhi/">
        </link>
        <updated>2021-06-25T10:42:51.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#1-%E6%A6%82%E8%BF%B0">1 概述</a></li>
<li><a href="#2-%E7%8E%AF%E5%A2%83">2 环境</a></li>
<li><a href="#3-%E4%B8%80%E4%BA%9B%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA">3 一些基础理论</a>
<ul>
<li><a href="#31-%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB">3.1 读写分离</a></li>
<li><a href="#32-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6">3.2 主从复制</a></li>
<li><a href="#33-%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%AE%80%E4%BB%8B">3.3 数据库中间件简介</a></li>
</ul>
</li>
<li><a href="#4-mysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87">4 <code>MySQL</code>主从复制环境准备</a>
<ul>
<li><a href="#41-%E4%B8%BB%E5%BA%93%E6%93%8D%E4%BD%9C">4.1 主库操作</a>
<ul>
<li><a href="#411-%E6%8B%89%E5%8F%96%E9%95%9C%E5%83%8F%E5%B9%B6%E5%88%9B%E5%BB%BA%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8C">4.1.1 拉取镜像并创建容器运行</a></li>
<li><a href="#412-%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">4.1.2 修改配置文件</a></li>
<li><a href="#413-%E5%87%86%E5%A4%87%E6%95%B0%E6%8D%AE%E6%BA%90">4.1.3 准备数据源</a></li>
<li><a href="#414-%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%A4%8D%E5%88%B6%E6%93%8D%E4%BD%9C%E7%9A%84%E7%94%A8%E6%88%B7%E5%8F%AF%E9%80%89%E4%BD%86%E6%8E%A8%E8%8D%90">4.1.4 创建一个复制操作的用户（可选但推荐）</a></li>
<li><a href="#415-%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E5%8F%AF%E9%80%89">4.1.5 数据备份（可选）</a></li>
<li><a href="#416-%E6%9F%A5%E7%9C%8B%E4%B8%BB%E5%BA%93%E7%8A%B6%E6%80%81">4.1.6 查看主库状态</a></li>
</ul>
</li>
<li><a href="#42-%E4%BB%8E%E5%BA%93%E6%93%8D%E4%BD%9C">4.2 从库操作</a>
<ul>
<li><a href="#421-%E6%8B%89%E5%8F%96%E9%95%9C%E5%83%8F%E5%B9%B6%E5%88%9B%E5%BB%BA%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8C">4.2.1 拉取镜像并创建容器运行</a></li>
<li><a href="#422-%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">4.2.2 修改配置文件</a></li>
<li><a href="#423-%E6%9F%A5%E7%9C%8Bip%E5%9C%B0%E5%9D%80">4.2.3 查看<code>ip</code>地址</a></li>
<li><a href="#424-%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E5%8F%AF%E9%80%89">4.2.4 导入数据（可选）</a></li>
<li><a href="#425-%E5%87%86%E5%A4%87%E6%95%B0%E6%8D%AE%E6%BA%90">4.2.5 准备数据源</a></li>
<li><a href="#426-%E8%AE%BE%E7%BD%AE%E4%B8%BB%E5%BA%93">4.2.6 设置主库</a></li>
<li><a href="#427-%E5%BC%80%E5%90%AF%E4%BB%8E%E5%BA%93">4.2.7 开启从库</a></li>
</ul>
</li>
<li><a href="#43-%E6%B5%8B%E8%AF%95">4.3 测试</a></li>
</ul>
</li>
<li><a href="#5-%E6%90%AD%E5%BB%BAspring-boot%E7%8E%AF%E5%A2%83">5 搭建<code>Spring Boot</code>环境</a>
<ul>
<li><a href="#51-%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE%E5%B9%B6%E5%BC%95%E5%85%A5%E4%BE%9D%E8%B5%96">5.1 新建项目并引入依赖</a></li>
<li><a href="#52-%E4%BD%BF%E7%94%A8%E7%94%9F%E6%88%90%E5%99%A8">5.2 使用生成器</a></li>
<li><a href="#53-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">5.3 配置文件</a></li>
<li><a href="#54-%E5%87%86%E5%A4%87controller">5.4 准备<code>Controller</code></a></li>
</ul>
</li>
<li><a href="#6-%E6%B5%8B%E8%AF%95">6 测试</a></li>
<li><a href="#7-%E5%8F%82%E8%80%83%E6%BA%90%E7%A0%81">7 参考源码</a></li>
<li><a href="#8-%E5%8F%82%E8%80%83">8 参考</a></li>
</ul>
</p>
<h1 id="1-概述">1 概述</h1>
<p>本文讲述了如何使用<code>MyBatisPlus</code>+<code>ShardingSphere</code>进行读写分离，以及利用<code>MySQL</code>进行一主一从的主从复制。</p>
<p>具体步骤包括：</p>
<ul>
<li><code>MySQL</code>主从复制环境准备（<code>Docker</code>）</li>
<li>搭建<code>ShardingShpere</code>+<code>MyBatisPlus</code>+<code>Druid</code>环境</li>
<li>测试</li>
</ul>
<h1 id="2-环境">2 环境</h1>
<ul>
<li><code>OpenJDK 11.0.11</code></li>
<li><code>Spring Boot 2.5.1</code></li>
<li><code>MyBatis Plus 3.4.3.1</code></li>
<li><code>MyBatis Plus Generator 3.5.0</code></li>
<li><code>Druid 1.2.6</code></li>
<li><code>ShardingSphere 4.1.1</code></li>
<li><code>MySQL 8.0.25</code></li>
</ul>
<h1 id="3-一些基础理论">3 一些基础理论</h1>
<h2 id="31-读写分离">3.1 读写分离</h2>
<p>读写分离，顾名思义就是读和写分开，更具体来说，就是：</p>
<ul>
<li>写操作在主数据库进行</li>
<li>读操作在从数据库进行</li>
</ul>
<p>使用读写分离的根本目的就是为了提高并发性能，如果读写都在同一台<code>MySQL</code>上实现，相信会不如一台<code>MySQL</code>写，另外两台<code>MySQL</code>读这样的配置性能高。另一方面，在很多时候都是读操作的请求要远远高于写操作，这样就显得读写分离非常有必要了。</p>
<h2 id="32-主从复制">3.2 主从复制</h2>
<p>主从复制，顾名思义就是把主库的数据复制到从库中，因为读写分离之后，写操作都在主库进行，但是读操作是在从库进行的，也就是说，主库上的数据如果不能复制到从库中，那么从库就不会读到主库中的数据。严格意义上说，读写分离并不要求主从复制，只需要在主库写从库读即可，但是如果没有了主从复制，读写分离将失去了它的意义。因此读写分离通常与主从复制配合使用。</p>
<p>因为本示例使用的是<code>MySQL</code>，这里就说一下<code>MySQL</code>主从复制的原理，如下图所示：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20210625140216782.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>工作流程如下：</p>
<ul>
<li>主库修改数据后，将修改日志写入<code>binlog</code></li>
<li>从库的<code>I/O</code>线程读取主库的<code>binlog</code>，并拷贝到从库本地的<code>binlog</code>中</li>
<li>从库本地的<code>binlog</code>被<code>SQL</code>线程读取，执行其中的内容并同步到从库中</li>
</ul>
<h2 id="33-数据库中间件简介">3.3 数据库中间件简介</h2>
<p>数据库中间件可以简化对读写分离以及分库分表的操作，并隐藏底层实现细节，可以像操作单库单表那样操作多库多表，主流的设计方案主要有两种：</p>
<ul>
<li>服务端代理：需要独立部署一个代理服务，该代理服务后面管理多个数据库实例，在应用中通过一个数据源与该代理服务器建立连接，由该代理去操作底层数据库，并返回相应结果。优点是支持多语言，对业务透明，缺点是实现复杂，实现难度大，同时代理需要确保自身高可用</li>
<li>客户端代理：在连接池或数据库驱动上进行一层封装，内部与不同的数据库建立连接，并对<code>SQL</code>进行必要的操作，比如读写分离选择走主库还是从库，分库分表<code>select</code>后如何聚合结果。优点是实现简单，天然去中心化，缺点是支持语言较少，版本升级困难</li>
</ul>
<p>一些常见的数据库中间件如下：</p>
<ul>
<li><code>Cobar</code>：阿里开源的关系型数据库分布式服务中间件，已停更</li>
<li><code>DRDS</code>：脱胎于<code>Cobar</code>，全称<code>分布式关系型数据库服务</code></li>
<li><code>MyCat</code>：开源数据库中间件，目前更新了<code>MyCat2</code>版本</li>
<li><code>Atlas</code>：<code>Qihoo 360</code>公司<code>Web</code>平台部基础架构团队开发维护的一个基于<code>MySQL</code>协议的数据中间层项目，同时还有一个<code>NoSQL</code>的版本，叫<code>Pika</code></li>
<li><code>tddl</code>：阿里巴巴自主研发的分布式数据库服务</li>
<li><code>Sharding-JDBC</code>：<code>ShardingShpere</code>的一个子产品，一个轻量级<code>Java</code>框架</li>
</ul>
<h1 id="4-mysql主从复制环境准备">4 <code>MySQL</code>主从复制环境准备</h1>
<p>看完了一些基础理论就可以进行动手了，本小节先准备好<code>MySQL</code>主从复制的环境，基于<code>Docker</code>+<code>MySQL</code>官方文档搭建。</p>
<h2 id="41-主库操作">4.1 主库操作</h2>
<h3 id="411-拉取镜像并创建容器运行">4.1.1 拉取镜像并创建容器运行</h3>
<pre><code class="language-bash">docker pull mysql
docker run -itd -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 --name mysql-master mysql
docker exec -it mysql-master /bin/bash
</code></pre>
<p>在主库中进行更新镜像源，安装<code>vim</code>以及<code>net-tools</code>的操作：</p>
<pre><code class="language-bash">cd /etc/apt
echo deb http://mirrors.aliyun.com/debian/ buster main non-free contrib deb-src http://mirrors.aliyun.com/debian/ buster main non-free contrib deb http://mirrors.aliyun.com/debian-security buster/updates main deb-src http://mirrors.aliyun.com/debian-security buster/updates main deb http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib deb-src http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib deb http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib deb-src http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib &gt; sources.list
apt update &amp;&amp; apt upgrade
apt install vim net-tools
</code></pre>
<h3 id="412-修改配置文件">4.1.2 修改配置文件</h3>
<pre><code class="language-bash">vim /etc/mysql/my.cnf
</code></pre>
<p>添加下面两行数据：</p>
<pre><code class="language-bash">[mysqld]
server-id=1                # 全局唯一，取值[1,2^32-1]，默认为1
binlog-do-db=test          # 表示需要复制的是哪个库
</code></pre>
<p>修改完成后重启。</p>
<h3 id="413-准备数据源">4.1.3 准备数据源</h3>
<pre><code class="language-sql">create database test;
use test;
create table user(
	id int primary key auto_increment,
	name varchar(30) not null,
	age int not null
);
</code></pre>
<h3 id="414-创建一个复制操作的用户可选但推荐">4.1.4 创建一个复制操作的用户（可选但推荐）</h3>
<p>注意创建用户需要加上<code>mysql_native_password</code>，否则会导致从库一直处于连接状态：</p>
<pre><code class="language-sql">create user 'repl'@'172.17.0.3' identified with mysql_native_password by '123456';
grant replication slave on *.* to 'repl'@'172.17.0.3';
</code></pre>
<p>具体的地址请根据从库的地址修改，可以先看后面的从库配置部分。</p>
<h3 id="415-数据备份可选">4.1.5 数据备份（可选）</h3>
<p>如果原来的主库中是有数据的，那么这部分数据需要手动同步到从库中：</p>
<pre><code class="language-sql">flush tables with read lock;
</code></pre>
<p>开启主库的另一个终端，使用<code>mysqldump</code>导出：</p>
<pre><code class="language-bash">mysqldump -u root -p --all-databases --master-data &gt; dbdump.db
</code></pre>
<p>导出完成后，解除读锁：</p>
<pre><code class="language-sql">unlock tables;
</code></pre>
<h3 id="416-查看主库状态">4.1.6 查看主库状态</h3>
<pre><code class="language-sql">show master status;
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20210625161550759.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>需要把<code>File</code>以及<code>Position</code>记录下来，后面从库的配置需要用到。</p>
<h2 id="42-从库操作">4.2 从库操作</h2>
<h3 id="421-拉取镜像并创建容器运行">4.2.1 拉取镜像并创建容器运行</h3>
<pre><code class="language-bash">docker pull mysql
docker run -itd -p 3307:3306 -p 33061:33060 -e MYSQL_ROOT_PASSWORD=123456 --name mysql-slave mysql
docker exec -it mysql-slave /bin/bash
</code></pre>
<p>进入容器后，像主库一样更新源然后安装<code>vim</code>和<code>net-tools</code>：</p>
<pre><code class="language-bash">cd /etc/apt
echo deb http://mirrors.aliyun.com/debian/ buster main non-free contrib deb-src http://mirrors.aliyun.com/debian/ buster main non-free contrib deb http://mirrors.aliyun.com/debian-security buster/updates main deb-src http://mirrors.aliyun.com/debian-security buster/updates main deb http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib deb-src http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib deb http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib deb-src http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib &gt; sources.list
apt update &amp;&amp; apt upgrade
apt install vim net-tools
</code></pre>
<h3 id="422-修改配置文件">4.2.2 修改配置文件</h3>
<pre><code class="language-bash">vim /etc/mysql/my.cnf
</code></pre>
<p>添加如下两行：</p>
<pre><code class="language-bash">server-id=2            # 全局唯一，不能与主库相同
replicate-do-db=test   # 与主库相同，表示对该库进行复制
</code></pre>
<p>修改完成后重启。</p>
<h3 id="423-查看ip地址">4.2.3 查看<code>ip</code>地址</h3>
<p>查看从库的<code>ip</code>地址，用于给主库设置同步的用户：</p>
<pre><code class="language-bash">ifconfig
</code></pre>
<p>输出：</p>
<pre><code class="language-bash">inet 172.17.0.3  netmask 255.255.0.0  broadcast 172.17.255.255
</code></pre>
<p>那么主库中用于复制的用户就可以是<code>repl@172.17.0.3</code>。</p>
<h3 id="424-导入数据可选">4.2.4 导入数据（可选）</h3>
<p>如果主库有数据可以先导入到从库：</p>
<pre><code class="language-bash">mysqldump -u root -p --all-databases &lt; dbdump.db
</code></pre>
<h3 id="425-准备数据源">4.2.5 准备数据源</h3>
<pre><code class="language-sql">create database test;
use test;
create table user(
	id int primary key auto_increment,
	name varchar(30) not null,
	age int not null
);
</code></pre>
<h3 id="426-设置主库">4.2.6 设置主库</h3>
<p>可以使用<code>change master to</code>/<code>change replication source to</code>（<code>8.0.23+</code>）命令：</p>
<pre><code class="language-sql">change replication source to 
source_host='172.17.0.2',                   # 可以使用ifconfig查看主库ip
source_user='repl',                         # 之前主库创建的用户
source_password='123456',                   # 密码
source_log_file='binlog.000003',            # 之前在主库上使用show master status查看的日志文件
source_log_pos=594;                         # 同样使用show master status查看
</code></pre>
<h3 id="427-开启从库">4.2.7 开启从库</h3>
<pre><code class="language-sql">start slave;
show slave status\G
</code></pre>
<p>新版本（<code>8.0.22+</code>）可使用：</p>
<pre><code class="language-sql">start replica;
show replica status\G
</code></pre>
<p>需要<code>IO</code>和<code>SQL</code>线程显示<code>Yes</code>才算成功：</p>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20210625163911765.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="43-测试">4.3 测试</h2>
<p>主库选择插入一条数据：</p>
<pre><code class="language-sql">insert into user values(1,&quot;name&quot;,3);
</code></pre>
<p>然后从库就能<code>select</code>到了：</p>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20210625165315257.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="5-搭建spring-boot环境">5 搭建<code>Spring Boot</code>环境</h1>
<h2 id="51-新建项目并引入依赖">5.1 新建项目并引入依赖</h2>
<p>新建<code>Spring Boot</code>项目，并引入如下依赖：</p>
<pre><code class="language-bash">implementation 'com.baomidou:mybatis-plus-boot-starter:3.4.3.1'
implementation 'com.baomidou:mybatis-plus-generator:3.5.0'
implementation 'org.apache.velocity:velocity-engine-core:2.3'
implementation 'org.realityforge.org.jetbrains.annotations:org.jetbrains.annotations:1.7.0'
implementation 'com.alibaba:druid:1.2.6' # 注意不能使用druid的starter依赖，会出现模板找不到的问题
implementation 'org.apache.shardingsphere:sharding-jdbc-spring-boot-starter:4.1.1'
</code></pre>
<p><code>Maven</code>版本：</p>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;
    &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;
    &lt;version&gt;3.4.3.1&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;
    &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt;
    &lt;version&gt;3.5.0&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;
    &lt;artifactId&gt;velocity-engine-core&lt;/artifactId&gt;
    &lt;version&gt;2.3&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.realityforge.org.jetbrains.annotations&lt;/groupId&gt;
    &lt;artifactId&gt;org.jetbrains.annotations&lt;/artifactId&gt;
    &lt;version&gt;1.7.0&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;
    &lt;artifactId&gt;druid&lt;/artifactId&gt;
    &lt;version&gt;1.2.6&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.apache.shardingsphere&lt;/groupId&gt;
    &lt;artifactId&gt;sharding-jdbc-spring-boot-starter&lt;/artifactId&gt;
    &lt;version&gt;4.1.1&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<h2 id="52-使用生成器">5.2 使用生成器</h2>
<pre><code class="language-java">import com.baomidou.mybatisplus.generator.AutoGenerator;
import com.baomidou.mybatisplus.generator.config.*;

public class MyBatisPlusGenerator {
    public static void main(String[] args) {
        DataSourceConfig dataSourceConfig = new DataSourceConfig.Builder(&quot;jdbc:mysql://localhost:3306/test&quot;,&quot;root&quot;,&quot;123456&quot;).build();
        String projectPath = System.getProperty(&quot;user.dir&quot;);
        GlobalConfig globalConfig = new GlobalConfig.Builder().outputDir(projectPath+&quot;/src/main/java&quot;).openDir(false).build();
        PackageConfig packageConfig = new PackageConfig.Builder().moduleName(&quot;test&quot;).parent(&quot;com.example.demo&quot;).build();
        AutoGenerator autoGenerator = new AutoGenerator(dataSourceConfig);
        autoGenerator.global(globalConfig).packageInfo(packageConfig);
        autoGenerator.execute();
    }
}
</code></pre>
<p>直接运行<code>main</code>方法即可生成代码，配置请根据个人需要进行更改，更详细的配置可以参考笔者的<a href="https://blog.csdn.net/qq_27525611/article/details/118197154">另一篇文章</a>。</p>
<h2 id="53-配置文件">5.3 配置文件</h2>
<pre><code class="language-yml">spring:
  datasource:
    url: jdbc:mysql://localhost:3306/test
    username: root
    password: 123456
  shardingsphere:
    datasource:
      names: master,slave                                   # 数据源名字
      master:
        type: com.alibaba.druid.pool.DruidDataSource        # 连接池
        url: jdbc:mysql://127.0.0.1:3306/test               # 主库地址
        username: root                                      # 主库用户名
        password: 123456                                    # 主库密码
      slave:
        type: com.alibaba.druid.pool.DruidDataSource        # 连接池
        url: jdbc:mysql://127.0.0.1:3307/test               # 从库地址
        username: root
        password: 123456
    masterslave:
      load-balance-algorithm-type: round_robin              # 负载均衡算法，
      name: ms
      master-data-source-name: master                       # 主库数据源名字
      slave-data-source-names: slave                        # 从库数据源名字
    props:
      sql:
        show: true                                          # 打印SQL
</code></pre>
<p>关于负载均衡算法，目前只支持两种：</p>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/20210625171008182.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="54-准备controller">5.4 准备<code>Controller</code></h2>
<pre><code class="language-java">@RestController
@RequestMapping(&quot;/test/user&quot;)
@AllArgsConstructor(onConstructor = @__(@Autowired))
public class UserController {
    private final UserServiceImpl userService;
    @GetMapping(&quot;/write&quot;)
    public boolean write(){
        return userService.save(User.builder().age(3).name(&quot;234&quot;).build());
    }

    @GetMapping(&quot;/read&quot;)
    public User read(){
        return userService.getById(1);
    }
}
</code></pre>
<h1 id="6-测试">6 测试</h1>
<p>访问<code>http://localhost:8080/test/user/write</code>，可以看到写操作在主库进行：</p>
<figure data-type="image" tabindex="6"><img src="https://img-blog.csdnimg.cn/20210625175333981.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>访问<code>http://localhost:8080/test/user/read</code>，可以看到读操作在从库进行：</p>
<figure data-type="image" tabindex="7"><img src="https://img-blog.csdnimg.cn/20210625175408912.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>这样读写分离就算是可以了。</p>
<h1 id="7-参考源码">7 参考源码</h1>
<p><code>Java</code>版：</p>
<ul>
<li><a href="https://github.com/2293736867/SpringBootDemoJava/tree/main/ShardingSphereMyBaitsPlusMySQLMasterSlave">Github</a></li>
<li><a href="https://gitee.com/u6b7b5fc3/SpringBootDemoJava/tree/main/ShardingSphereMyBaitsPlusMySQLMasterSlave">码云</a></li>
<li><a href="https://codechina.csdn.net/qq_27525611/SpringBootDemoJava/-/tree/main/ShardingSphereMyBaitsPlusMySQLMasterSlave">CODE CHINA</a></li>
</ul>
<p><code>Kotlin</code>版：</p>
<ul>
<li><a href="https://github.com/2293736867/SpringBootDemoKotlin/tree/main/ShardingSphereMyBaitsPlusMySQLMasterSlave">Github</a></li>
<li><a href="https://gitee.com/u6b7b5fc3/SpringBootDemoKotlin/tree/main/ShardingSphereMyBaitsPlusMySQLMasterSlave">码云</a></li>
<li><a href="https://codechina.csdn.net/qq_27525611/SpringBootDemoKotlin/-/tree/main/ShardingSphereMyBaitsPlusMySQLMasterSlave">CODE CHINA</a></li>
</ul>
<h1 id="8-参考">8 参考</h1>
<ul>
<li><a href="https://dev.mysql.com/doc/refman/8.0/en/replication-configuration.html">MySQL 官方文档</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1457281">腾讯云-面试题:你们有没有做 MySQL 读写分离？如何实现 MySQL 的读写分离？</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/87144535">知乎-数据库中间件详解（精品长文）</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Spring Boot demo系列（十一）：MyBatis Plus Generator代码生成]]></title>
        <id>https://2293736867.github.io/post/spring-boot-demo-xi-lie-shi-yi-mybatis-plus-generator-dai-ma-sheng-cheng/</id>
        <link href="https://2293736867.github.io/post/spring-boot-demo-xi-lie-shi-yi-mybatis-plus-generator-dai-ma-sheng-cheng/">
        </link>
        <updated>2021-06-24T16:49:02.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#1-%E5%89%8D%E8%A8%80">1 前言</a></li>
<li><a href="#2-%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8">2 为什么需要代码生成器</a></li>
<li><a href="#3-%E7%8E%AF%E5%A2%83">3 环境</a></li>
<li><a href="#4-%E5%87%86%E5%A4%87%E6%95%B0%E6%8D%AE%E8%A1%A8">4 准备数据表</a></li>
<li><a href="#5-%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E5%B9%B6%E5%AF%BC%E5%85%A5%E4%BE%9D%E8%B5%96">5 创建项目并导入依赖</a></li>
<li><a href="#6-%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%94%9F%E6%88%90%E5%99%A8%E7%B1%BB">6 新建一个生成器类</a></li>
<li><a href="#7-%E6%B5%8B%E8%AF%95%E8%BF%90%E8%A1%8C">7 测试运行</a></li>
<li><a href="#8-%E5%85%B6%E4%BB%96%E9%85%8D%E7%BD%AE">8 其他配置</a></li>
<li><a href="#9-%E6%BA%90%E7%A0%81">9 源码</a></li>
<li><a href="#10-%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5">10 参考链接</a></li>
</ul>
</p>
<h1 id="1-前言">1 前言</h1>
<p><code>MyBatis Plus starter</code>最近更新了<code>3.4.3.1</code>版本，而<code>MyBatis Plug Generator</code>更新到了<code>3.5.0</code>版本，但是官方文档还没有更新生成器的代码，另外在之前的文章里介绍过<code>MyBatis Plus</code>的使用，因此这里补上一篇文章结合<code>Spring Boot</code>介绍代码生成器的使用。</p>
<h1 id="2-为什么需要代码生成器">2 为什么需要代码生成器</h1>
<p>使用代码生成器可以生成一些固定模板的代码，比如：</p>
<ul>
<li><code>Controller</code>层代码</li>
<li><code>Service</code>层代码</li>
<li><code>mapper</code></li>
<li>实体类</li>
</ul>
<p>比如一个<code>User</code>类可以生成如下代码：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20210624215503193.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="3-环境">3 环境</h1>
<p>本次示例使用的环境如下：</p>
<ul>
<li><code>Spring Boot 2.5.1</code></li>
<li><code>MyBaits Plus 3.4.3.1</code></li>
<li><code>MyBatis Plus Generator 3.5.0</code></li>
</ul>
<h1 id="4-准备数据表">4 准备数据表</h1>
<p>这里为了方便使用<code>Workbench</code>创建一个用户表<code>User</code>：</p>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20210624220414906.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="5-创建项目并导入依赖">5 创建项目并导入依赖</h1>
<p>创建一个新的<code>Spring Boot</code>项目，然后导入如下依赖：</p>
<pre><code class="language-bash">implementation 'com.baomidou:mybatis-plus-boot-starter:3.4.3.1' 
implementation 'com.baomidou:mybatis-plus-generator:3.5.0'
implementation 'org.apache.velocity:velocity-engine-core:2.3'
implementation 'org.realityforge.org.jetbrains.annotations:org.jetbrains.annotations:1.7.0'
</code></pre>
<p>除了<code>starter</code>和<code>generator</code>后，还需要一个模板引擎（可选<code>Velocity</code>、<code>Freemarker</code>、<code>Beetl</code>，默认<code>Velocity</code>）和一个注解依赖（<code>jetbrains.annotations</code>）。</p>
<p><code>Maven</code>版本如下：</p>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;
    &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;
    &lt;version&gt;3.4.3.1&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;
    &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt;
    &lt;version&gt;3.5.0&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;
    &lt;artifactId&gt;velocity-engine-core&lt;/artifactId&gt;
    &lt;version&gt;2.3&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.realityforge.org.jetbrains.annotations&lt;/groupId&gt;
    &lt;artifactId&gt;org.jetbrains.annotations&lt;/artifactId&gt;
    &lt;version&gt;1.7.0&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<h1 id="6-新建一个生成器类">6 新建一个生成器类</h1>
<p>该类用于进行代码生成的配置：</p>
<pre><code class="language-java">import com.baomidou.mybatisplus.generator.AutoGenerator;
import com.baomidou.mybatisplus.generator.config.*;

public class MyBatisPlusGenerator {
    public static void main(String[] args) {
        DataSourceConfig dataSourceConfig = new DataSourceConfig.Builder(&quot;jdbc:mysql://localhost:3306/test&quot;,&quot;root&quot;,&quot;123456&quot;).build();
        String projectPath = System.getProperty(&quot;user.dir&quot;);
        GlobalConfig globalConfig = new GlobalConfig.Builder().outputDir(projectPath+&quot;/src/main/java&quot;).openDir(false).build();
        PackageConfig packageConfig = new PackageConfig.Builder().moduleName(&quot;test&quot;).parent(&quot;com.example.test&quot;).build();
        AutoGenerator autoGenerator = new AutoGenerator(dataSourceConfig);
        autoGenerator.global(globalConfig).packageInfo(packageConfig);
        autoGenerator.execute();
    }
}
</code></pre>
<p>代码生成器配置相比起之前的版本，使用了<code>Builder</code>模式代替了原来的<code>setter</code>模式：</p>
<pre><code class="language-java">DataSourceConfig dataSourceConfig = new DataSourceConfig(); // 3.5.0版本中默认构造方法变成私有，无法编译通过
dataSourceConfig.setUrl(&quot;jdbc:mysql://localhost:3306/ant?useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf8&quot;);
dataSourceConfig.setDriverName(&quot;com.mysql.jdbc.Driver&quot;);
dataSourceConfig.setUsername(&quot;root&quot;);
dataSourceConfig.setPassword(&quot;password&quot;);
</code></pre>
<p>上面的代码中设置了数据源、输出的代码路径以及输出的包名，根据需要进行修改即可：</p>
<pre><code class="language-java">DataSourceConfig dataSourceConfig = new DataSourceConfig.Builder(&quot;jdbc:mysql://localhost:3306/test&quot;,&quot;root&quot;,&quot;123456&quot;).build();
String projectPath = System.getProperty(&quot;user.dir&quot;);
GlobalConfig globalConfig = new GlobalConfig.Builder().outputDir(projectPath+&quot;/src/main/java&quot;).openDir(false).build();
PackageConfig packageConfig = new PackageConfig.Builder().moduleName(&quot;test&quot;).parent(&quot;com.example.test&quot;).build();
</code></pre>
<p>准备好以后直接运行<code>main</code>，就会在<code>src/main/java</code>下生成一个<code>test</code>文件夹：</p>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20210624221013305.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="7-测试运行">7 测试运行</h1>
<p>首先修改一下配置文件，添加数据源：</p>
<pre><code class="language-yml">spring:
  datasource:
    url: jdbc:mysql://localhost:3306/test
    username: root
    password: 123456
</code></pre>
<p>修改<code>UserController</code>如下，添加一个测试方法：</p>
<pre><code class="language-java">@RestController
@RequestMapping(&quot;/test/user&quot;)
public class UserController {
    @Resource
    private UserServiceImpl userService;
    @GetMapping(&quot;/&quot;)
    public String test() {
        return userService.getById(1).toString();
    }
}
</code></pre>
<p>此时如果直接尝试运行<code>main</code>方法，会报错如下：</p>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20210624221324562.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>找不到<code>UserMapper</code>这个<code>Bean</code>，解决方法就是在<code>UserMapper</code>加上一个<code>@Mapper</code>即可：</p>
<pre><code class="language-java">@Mapper
public interface UserMapper extends BaseMapper&lt;User&gt; {
}
</code></pre>
<p>或者在<code>main</code>类加上一个<code>@MapperScan</code>，加上<code>mapper</code>所在的全限定路径：</p>
<pre><code class="language-java">@SpringBootApplication
@MapperScan(&quot;com.example.test.test.mapper&quot;)
public class TestApplication {
    public static void main(String[] args) {
        SpringApplication.run(TestApplication.class, args);
    }
}
</code></pre>
<p>这样访问<code>localhost:8080/test/user/</code>就可以访问到<code>id=1</code>的用户了：</p>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/20210624221704290.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="8-其他配置">8 其他配置</h1>
<p>上面只是介绍了最简单的生成器配置，实际上完整的代码生成器配置如下：</p>
<ul>
<li><code>DataSourceConfig</code>：数据源配置，包括数据库类型、驱动、连接<code>URL</code>、用户名、密码等</li>
<li><code>StrategyConfig</code>：数据库表配置（但是这个命名确实看不出来），可以指定对哪些表生成代码或者排除哪些表不生成代码，同时可以设置生成的字段前缀，还可以支持模糊匹配表名（排除或包含）等</li>
<li><code>PackageConfig</code>：包配置，指定代码生成的模块名、包名、<code>mapper</code>命名、<code>service</code>命名、<code>controller</code>命名等</li>
<li><code>TemplateConfig</code>：模板配置，可以自定义生成的模板，包括实体类模板、<code>service</code>模板、<code>controller</code>模板、<code>mapper</code>模板、<code>mapper xml</code>模板等</li>
<li><code>GlobalConfig</code>：全局配置，可以指定输出的代码目录、是否覆盖文件等配置，同时支持<code>Kotlin</code>和<code>Swagger2</code></li>
<li><code>InjectionConfig</code>：注入配置，可以自定义配置<code>Map</code>对象等</li>
</ul>
<p>详细请查看<a href="https://mybatis.plus/config/generator-config.html#%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE">官方文档</a>。</p>
<h1 id="9-源码">9 源码</h1>
<p>参考源码，<code>Java</code>版：</p>
<ul>
<li><a href="https://github.com/2293736867/SpringBootDemoJava/tree/main/MyBatisPlusGenerator">Github</a></li>
<li><a href="https://gitee.com/u6b7b5fc3/SpringBootDemoJava/tree/main/MyBatisPlusGenerator">码云</a></li>
</ul>
<h1 id="10-参考链接">10 参考链接</h1>
<ul>
<li><a href="https://mybatis.plus/guide/generator.html#%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B">MyBatis Plus官方文档</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第374期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-374-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-374-qi/">
        </link>
        <updated>2021-06-24T04:41:20.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>我只想和你叙叙旧，你却问我要不要代购。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>清晨入古寺，初日照高林。<br>
——常建《题破山寺后禅院》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>为什么要把眼影涂得那么红——可能是原来的样子太亲切了吧。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1624510127970.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>难道不是很难，套一个哈希表就行了：</p>
<pre><code class="language-java">import java.util.*;

public class Solution {
    public int maxPoints(int[][] points) {
        int n = points.length;
        if (n &lt;= 2) {
            return n;
        }
        int max = 2;
        Map&lt;Line, Node&gt; map = new HashMap&lt;&gt;();
        for (int i = 0; i &lt; n; i++) {
            for (int j = i + 1; j &lt; n; j++) {
                Point point1 = new Point(points[i][0], points[i][1]);
                Point point2 = new Point(points[j][0], points[j][1]);
                Line line = new Line(point1, point2);
                if (map.containsKey(line)) {
                    Node node = map.get(line);
                    node.addIgnoreRepeated(point2);
                    if (node.count &gt; max) {
                        max = node.count;
                    }
                } else {
                    map.put(line, new Node(point1,point2));
                }
            }
        }
        return max;
    }

    private static class Point {
        private final int x;
        private final int y;

        public Point(int x, int y) {
            this.x = x;
            this.y = y;
        }

        @Override
        public boolean equals(Object obj) {
            if (!(obj instanceof Point)) {
                return false;
            }
            Point point = (Point) obj;
            return x == point.x &amp;&amp; y == point.y;
        }

        @Override
        public int hashCode() {
            return Objects.hash(x, y);
        }
    }

    private static class Node {
        private final Set&lt;Point&gt; set;
        private int count;

        public Node(Point point1, Point point2) {
            set = new HashSet&lt;&gt;();
            set.add(point1);
            set.add(point2);
            count = 2;
        }

        public void addIgnoreRepeated(Point point) {
            if (!set.contains(point)) {
                set.add(point);
                ++count;
            }
        }
    }

    private static class Line {
        double k;
        double b;

        public Line(Point point1, Point point2) {
            if (point1.x == point2.x) {
                k = 10_0000.0;
                b = point1.x;
            } else {
                k = (point1.y - point2.y) / ((double) point1.x - point2.x);
                if (Math.abs(k) &lt; 1e-6) {
                    k = 0.0;
                }
                b = k * point1.x - point1.y;
            }
        }

        @Override
        public boolean equals(Object obj) {
            if (!(obj instanceof Line)) {
                return false;
            }
            Line line = (Line) obj;
            return Math.abs(k - line.k) &lt; 1e-6 &amp;&amp; Math.abs(b - line.b) &lt; 1e-6;
        }

        @Override
        public int hashCode() {
            return Objects.hash(k, b);
        }
    }
}
</code></pre>
<p>只不过真的不会优化，尽力了，只能11ms：</p>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1624509835847.png" alt="" loading="lazy"></figure>
<p><s>裂开</s></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第373期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-373-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-373-qi/">
        </link>
        <updated>2021-06-23T01:09:59.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>一个成年人是不会挑食的，他们会说，我对这个过敏。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>若耶溪傍采莲女，笑隔荷花共人语。<br>
——李白《采莲曲》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>与其诅咒黑暗，不如点亮烛光。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1624410676989.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>今天还是剑指的题啊。</p>
<p>顺便提一下<code>LeetCode</code>改版了，<code>cn</code>版更加接近了国际版。</p>
<p>今天的每日一题比较简单，可以直接右移32次计算：</p>
<pre><code class="language-java">public class Solution {
    public int hammingWeight(int n) {
        int ans = 0;
        for (int i = 0; i &lt; 32; i++)
            ans += (n &gt;&gt;&gt; i) &amp; 1;
        return ans;
    }
}
</code></pre>
<p>右移<code>i</code>位后与<code>1</code>相与，如果为<code>1</code>表示对应的位为<code>1</code>，累加到结果处即可。</p>
<p>当然更快的方法是直接将最右边的一位<code>1</code>置为<code>0</code>，公式就是：</p>
<pre><code class="language-java">n = ( n &amp; (n-1) );
</code></pre>
<p>应用公式后循环的次数会小于等于32：</p>
<pre><code class="language-java">public class Solution {
    public int hammingWeight(int n) {
        int ans = 0;
        while(n != 0){
            n = (n &amp; (n-1));
            ++ans;
        }
        return ans;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1624410660717.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第372期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-372-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-372-qi/">
        </link>
        <updated>2021-06-21T18:51:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>一见钟情就是好看，深思熟虑就是没钱。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>夜来南风起，小麦覆陇黄。<br>
——白居易《观刈麦》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>时间就是一个饥饿的怪物，稍有不慎便会被它吃掉。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1624301749763.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>今天居然出剑指的题了，好家伙：</p>
<pre><code class="language-java">import java.util.*;

public class Solution {
    private final List&lt;String&gt; list = new ArrayList&lt;&gt;(40320);
    public String[] permutation(String s) {
        dfs(s.toCharArray(),0,s.length());
        return list.toArray(new String[0]);
    }

    private void dfs(char[]ch,int start,int n){
        if(start == n-1){
            list.add(new String(ch));
            return;
        }
        for (int i = start; i &lt; n; i++) {
            if(i == start){
                dfs(ch,start+1,n);
                continue;
            }
            int j = i-1;
            while(j &gt;= start){
                if(ch[j] == ch[i]){
                    break;
                }
                --j;
            }
            if(j + 1 != start){
                continue;
            }

            char c = ch[start];
            ch[start] = ch[i];
            ch[i] = c;

            dfs(ch,start+1,n);

            c = ch[i];
            ch[i] = ch[start];
            ch[start] = c;
        }
    }
}
</code></pre>
<p>这是交换字符做的，官方题解给的是一个回溯还有下一个排列那个算法。</p>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1624301912454.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第371期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-371-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-371-qi/">
        </link>
        <updated>2021-06-21T00:06:19.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>有钱能买来幸福吗？不能，有钱本身就是幸福！</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>惟有绿荷红菡萏，卷舒开合任天真。<br>
——李商隐《赠荷花》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>早知如此绊人心，何如当初莫相识。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1624234354250.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>手动排列组合：</p>
<pre><code class="language-java">import java.util.ArrayList;
import java.util.List;

public class Solution {
    public List&lt;String&gt; readBinaryWatch(int turnedOn) {
        if (turnedOn == 0) {
            return List.of(&quot;0:00&quot;);
        }
        List&lt;String&gt; ans = new ArrayList&lt;&gt;(500);
        String[][] hour = new String[4][];
        String[][] minute = new String[5][];

        hour[0] = new String[]{&quot;1&quot;, &quot;2&quot;, &quot;4&quot;, &quot;8&quot;};
        hour[1] = new String[]{&quot;3&quot;, &quot;5&quot;, &quot;6&quot;, &quot;9&quot;, &quot;10&quot;};
        hour[2] = new String[]{&quot;7&quot;, &quot;11&quot;};

        minute[0] = new String[]{&quot;01&quot;, &quot;02&quot;, &quot;04&quot;, &quot;08&quot;, &quot;16&quot;, &quot;32&quot;};
        minute[1] = new String[]{&quot;03&quot;, &quot;05&quot;, &quot;09&quot;, &quot;17&quot;, &quot;33&quot;, &quot;06&quot;, &quot;10&quot;, &quot;18&quot;, &quot;34&quot;, &quot;12&quot;, &quot;20&quot;, &quot;36&quot;, &quot;24&quot;, &quot;40&quot;, &quot;48&quot;};
        minute[2] = new String[]{&quot;07&quot;, &quot;11&quot;, &quot;19&quot;, &quot;35&quot;, &quot;13&quot;, &quot;21&quot;, &quot;37&quot;, &quot;25&quot;, &quot;41&quot;, &quot;49&quot;, &quot;14&quot;, &quot;22&quot;, &quot;38&quot;, &quot;26&quot;, &quot;42&quot;, &quot;50&quot;, &quot;28&quot;, &quot;44&quot;, &quot;52&quot;, &quot;56&quot;};
        minute[3] = new String[]{&quot;15&quot;, &quot;23&quot;, &quot;39&quot;, &quot;27&quot;, &quot;43&quot;, &quot;51&quot;, &quot;29&quot;, &quot;45&quot;, &quot;53&quot;, &quot;57&quot;, &quot;30&quot;, &quot;46&quot;, &quot;54&quot;, &quot;58&quot;};
        minute[4] = new String[]{&quot;31&quot;, &quot;47&quot;, &quot;55&quot;, &quot;59&quot;};

        for (int m = 0; m &lt;= turnedOn; m++) {
            int h = turnedOn - m;
            if(m &lt;= 3 &amp;&amp; h &lt;= 5){

            }
            if (m == 0 &amp;&amp; h &lt;= 3) {
                for (String s : hour[h - 1]) {
                    ans.add(s + &quot;:00&quot;);
                }
            } else if (h == 0 &amp;&amp; m &lt;= 5) {
                for (String s : minute[m - 1]) {
                    ans.add(&quot;0:&quot; + s);
                }
            } else if (h &lt;= 3 &amp;&amp; m &lt;= 5) {
                for (String hh : hour[h - 1]) {
                    for (String mm : minute[m - 1]) {
                        ans.add(hh + &quot;:&quot; + mm);
                    }
                }
            }
        }
        return ans;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1624234391625.png" alt="" loading="lazy"></figure>
<p>当然肯定不够大佬的回溯剪枝快：</p>
<pre><code class="language-java">class Solution {

    // 直接把二进制的问题转换为数组累加问题
    int[] hours = new int[]{1,2,4,8,0,0,0,0,0,0};
    int[] minutes = new int[]{0,0,0,0,1,2,4,8,16,32};
    List&lt;String&gt; res = new ArrayList&lt;&gt;();

    public List&lt;String&gt; readBinaryWatch(int turnedOn) {
        // 方法二：采用回溯法
        backTrack(turnedOn,0,0,0);
        return res;

    }

    // 回溯的参数：num(需要点亮的灯，初始为turnedOn),index(点亮的下标)
    // hour(小时数)minute(分钟数)
    public void backTrack(int num,int index,int hour,int minute){
        // 剪枝操作
        if(hour &gt; 11  || minute &gt; 59){
            return;
        }
        // 递归出口,当点亮到第0栈灯的时候，那么回溯所有数据
        if(num == 0){
            // 进行字符串拼接
            StringBuilder sb = new StringBuilder();
            sb.append(hour).append(':');
            if(minute &lt; 10){
                sb.append('0');
            }
            sb.append(minute);z
            res.add(sb.toString());
            //记得return终止掉
            return;
        }
        // 这里是从下标开始递归遍历
        for(int i = index; i &lt; 10; i++){
            backTrack(num - 1, i+1,hour+hours[i],minute+minutes[i]);
        }
    }
}
</code></pre>
<p>看做01序列分别对分钟和小时进行取值，强。</p>
<figure data-type="image" tabindex="3"><img src="https://2293736867.github.io/post-images/1624234527631.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第370期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-370-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-370-qi/">
        </link>
        <updated>2021-06-19T19:03:28.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>你的晚安，只是想让我闭嘴。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>初月未终夕，边烽不过秦。<br>
——贾岛《暮过山村》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>人总是贪婪的，就像是最开始，我也只是想知道你的名字。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1624129533522.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>使用一种树的思想，一个节点有两个指针：</p>
<ul>
<li>兄弟指针：指向兄弟</li>
<li>孩子指针：指向孩子</li>
</ul>
<p>题目中的<code>birth</code>实际上是添加节点操作，通过哈希表找到对应的<code>parent</code>后，首先判断它的孩子是否为空，如果为空直接添加孩子，如果不为空，拿到孩子节点，并把新节点添加到最后的兄弟节点。</p>
<p>另外需要注意的一个操作是获取操作，本质上是树的遍历，利用了栈，每次遍历某节点的时候：</p>
<ul>
<li>遍历该节点，如果不是死亡状态，添加到列表中</li>
<li>如果该节点的兄弟节点不为空，添加兄弟节点到栈中</li>
<li>如果该节点的孩子节点不为空，添加孩子节点到栈中</li>
</ul>
<p>这样就能得到先遍历孩子再遍历兄弟的顺序了，代码如下：</p>
<pre><code class="language-java">import java.util.*;

public class ThroneInheritance {
    private final Node root;
    private final Map&lt;String,Node&gt; map;
    public ThroneInheritance(String kingName) {
        root = new Node();
        root.name = kingName;
        map = new HashMap&lt;&gt;();
        map.put(kingName,root);
    }

    public void birth(String parentName, String childName) {
        Node children = new Node();
        children.name = childName;
        map.put(childName,children);
        Node parent = map.get(parentName);
        if(parent.children == null){
            parent.children = children;
        }else {
            parent = parent.children;
            while (parent.brother != null) {
                parent = parent.brother;
            }
            parent.brother = children;
        }
    }

    public void death(String name) {
        map.get(name).death = true;
    }

    public List&lt;String&gt; getInheritanceOrder() {
        List&lt;String&gt; list = new LinkedList&lt;&gt;();
        Stack&lt;Node&gt; stack = new Stack&lt;&gt;();
        stack.add(root);
        while (!stack.isEmpty()){
            Node temp = stack.pop();
            if(!temp.death){
                list.add(temp.name);
            }
            if(temp.brother != null){
                stack.push(temp.brother);
            }
            if(temp.children != null){
                stack.push(temp.children);
            }
        }
        return list;
    }

    private static class Node{
        String name;
        boolean death;
        Node brother;
        Node children;
    }
}
</code></pre>
<p>必须吹一波自己，近乎双100，不愧是在凌晨三点做的：</p>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1624129460904.png" alt="" loading="lazy"></figure>
<p>再优化一下，最快279ms，比第一名快，舒服：</p>
<figure data-type="image" tabindex="3"><img src="https://2293736867.github.io/post-images/1624130160141.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="4"><img src="https://2293736867.github.io/post-images/1624130109126.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第369期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-369-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-369-qi/">
        </link>
        <updated>2021-06-18T16:38:35.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>岁月是把杀猪刀，可他拿丑的人一点办法也没有。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>藕花珠缀，犹似汗凝妆。<br>
——阎选《临江仙·雨停荷荠逗浓香》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>如果你是我该多好，那你就知道我有多难过，多喜欢你。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1624080638582.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>本来想动归的，看了一下数据量，直接暴力回溯：</p>
<pre><code class="language-java">import java.util.List;

public class Solution {
    private int max = 0;
    public int maxLength(List&lt;String&gt; arr) {
        dfs(arr,0,new StringBuilder());
        return max;
    }

    private void dfs(List&lt;String&gt; arr,int index,StringBuilder current){
        int len = current.length();
        if(index &lt; arr.size()) {
            if(len &gt; max){
                max = len;
            }
            dfs(arr,index+1,current);
            StringBuilder next = new StringBuilder(current);
            next.append(arr.get(index));
            if(check(next)){
                dfs(arr,index+1,next);
            }
        }
        if(len &gt; max){
            max = len;
        }
    }

    private boolean check(StringBuilder builder){
        boolean []table = new boolean[26];
        for (int i=0;i&lt;builder.length();++i){
            int index = builder.charAt(i) - 'a';
            if(!table[index]){
                table[index] = true;
            }else{
                return false;
            }
        }
        return true;
    }
}
</code></pre>
<p>效果一般般：</p>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1624034460831.png" alt="" loading="lazy"></figure>
<p>加上位运算优化（看了题解的）：</p>
<pre><code class="language-java">import java.util.List;

public class Solution {
    private int ans = 0;

    public int maxLength(List&lt;String&gt; arr) {
        int n = arr.size();
        int [] masks = new int[n];
        int index = 0;
        for (String s : arr) {
            int mask = 0;
            for (int i = 0; i &lt; s.length(); i++) {
                int ch = s.charAt(i) - 'a';
                if (((mask &gt;&gt; ch) &amp; 1) != 0) {
                    mask = 0;
                    break;
                }
                mask |= 1 &lt;&lt; ch;
            }
            if (mask &gt; 0) {
                masks[index++] = mask;
            }
        }
        backtrack(0,0,masks,index);
        return ans;
    }

    private void backtrack(int pos, int mask,int []masks,int n) {
        if (pos == n){
            ans = Math.max(ans, Integer.bitCount(mask));
            return;
        }

        if ((mask &amp; masks[pos]) == 0) {
            backtrack(pos + 1, mask | masks[pos],masks,n);
        }
        backtrack(pos + 1, mask,masks,n);
    }
}
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://2293736867.github.io/post-images/1624075839526.png" alt="" loading="lazy"></figure>
<p>本质上是用一个<code>mask</code>去代替哈希表，<code>mask</code>是一个整型，32位，因为只有小写字母，最多只有26位，所以可以利用一个整型中的每一位去判断字母是否出现过。</p>
<p>具体做法就是，一个字符串对应一个整型<code>mask</code>，遍历每个字符串中的每一个字符，如果字符已经出现过（对应的<code>mask</code>为1），也就是以下语句为<code>true</code>：</p>
<pre><code class="language-java">if(((mask &gt;&gt; ch) &amp; 1) != 0)
</code></pre>
<p>这样就把<code>mask</code>重置为0，否则将对应的位置为1：</p>
<pre><code class="language-java">mask = mask | (1 &lt;&lt; ch);
</code></pre>
<p>也就是</p>
<pre><code class="language-java">mask |= (1&lt;&lt;ch);
</code></pre>
<p>在回溯判断的时候，使用</p>
<pre><code class="language-java">mask &amp; masks[pos] == 0
</code></pre>
<p>即可判断字母是否出现过，如果不为0，表示有重合的1，也就是出现过相同字母了，否则进行下一层的回溯。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何建立一个足够安全的SSH连接？]]></title>
        <id>https://2293736867.github.io/post/ru-he-jian-li-yi-ge-zu-gou-an-quan-de-ssh-lian-jie/</id>
        <link href="https://2293736867.github.io/post/ru-he-jian-li-yi-ge-zu-gou-an-quan-de-ssh-lian-jie/">
        </link>
        <updated>2021-06-18T07:54:10.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-概述">1 概述</h1>
<p>使用<code>SSH</code>连接服务器是一件很平常的事，但是，连接是否足够安全是一个令人担忧的问题。本文从如下几个方面介绍了如何建立一个足够安全的<code>SSH</code>连接：</p>
<ul>
<li>端口</li>
<li>协议</li>
<li>用户</li>
<li>密码</li>
<li>密钥对</li>
<li><code>ssh-agent</code></li>
</ul>
<h1 id="2-端口">2 端口</h1>
<p>第一步就是修改默认端口<code>22</code>，修改<code>/etc/ssh/sshd_config</code>中的<code>Port</code>即可，比如这里修改为<code>1234</code>端口：</p>
<pre><code class="language-bash">Port 1234
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200820155542693.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>在<code>Debian</code>系的系统中直接修改端口就可以了，在<code>RedHat</code>中还需要使用<code>semanage</code>去开启端口：</p>
<pre><code class="language-bash">yum install policycoreutils-python #没有安装的话需要先安装
semanage port -a -t ssh_port_t -p tcp 1234 # 添加端口
semanage port -l | grep ssh # 验证是否添加成功
</code></pre>
<h1 id="3-ssh协议">3  <code>SSH</code>协议</h1>
<p><code>SSH2</code>协议要比<code>SSH1</code>安全，因此建议使用，同样修改配置文件：</p>
<pre><code class="language-bash">Protocol 2 # 如果没有就末尾添加
</code></pre>
<p>这样客户端连接的时候就不能使用<code>Protocol 1</code>协议连接：</p>
<pre><code class="language-bash">ssh -1 username@ip
</code></pre>
<p>会提示</p>
<pre><code class="language-bash">SSH protocol v.1 is no longer supported
</code></pre>
<h1 id="4-超时断开">4 超时断开</h1>
<p>修改为<code>60s</code>未操作自动断开：</p>
<pre><code class="language-bash">ClientAliveInterval 60 
# 以秒为单位，超过60s未操作自动断开

ClientAliveCountMax 0 
# 如果客户端没有响应则判断一次超时，该参数设置允许超时的次数
</code></pre>
<h1 id="5-限制用户">5 限制用户</h1>
<h2 id="51-禁用root用户登录">5.1 禁用<code>root</code>用户登录</h2>
<pre><code class="language-bash">PermitRootLogin no
</code></pre>
<p>当然禁用之前需要先创建好登录的用户，这里假设创建一个叫<code>aa</code>的用户：</p>
<pre><code class="language-bash">useradd aa
passwd aa
vim /etc/sudoers
</code></pre>
<p>复制一行<code>root</code>的权限并修改用户名：</p>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20210618095059197.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>然后输入<code>:wq!</code>强制保存退出。</p>
<h2 id="52-指定用户登录">5.2 指定用户登录</h2>
<pre><code class="language-bash">AllowUsers testuser
</code></pre>
<p>这样只能通过该用户连接到该服务器，另外，如果出现拒绝登录的问题：</p>
<pre><code class="language-bash">kex_exchange_identification: read: Connection reset by peer
</code></pre>
<p>则需要去开启对应允许的<code>ip</code>登录，修改<code>/etc/hosts.allow</code>，添加：</p>
<pre><code class="language-bash">sshd: ALL
</code></pre>
<h2 id="53-禁用特定用户登录">5.3 禁用特定用户登录</h2>
<pre><code class="language-bash">DenyUser testuser
</code></pre>
<p>禁止通过<code>testuser</code>登录。</p>
<p>类似的配置还有<code>AllowGroups</code>与<code>DenyGroups</code>。</p>
<h1 id="6-密码">6 密码</h1>
<p>禁用（空）密码登录：</p>
<pre><code class="language-bash">PermitEmptyPasswords no
PasswordAuthentication no
</code></pre>
<h1 id="7-日志">7 日志</h1>
<pre><code class="language-bash">LogLevel VERBOSE
</code></pre>
<p>默认为<code>INFO</code>，修改为<code>VERBOSE</code>可以得到更加详细的信息。</p>
<h1 id="8-密钥对">8 密钥对</h1>
<h2 id="81-生成密钥对">8.1 生成密钥对</h2>
<p>上面已经设置了不能使用密码登录，那么，换句话说需要使用密钥登录，生成密钥并不难：</p>
<pre><code class="language-bash">ssh-keygen -t rsa 
</code></pre>
<p>只需要指定算法即可，默认为<code>3072</code>位，可选<code>4096</code>位。</p>
<p>但是，相比起传统的<code>RSA</code>，在<code>OpenSSH 6.5</code>中引入了另一种叫<code>Ed25519</code>的更加安全的算法，使用椭圆曲线进行加密。<code>Ed25519</code>相比起<code>RSA</code>的优点有：</p>
<ul>
<li>体积更小：相比起<code>RSA 3072</code>的<code>544</code>个字符，<code>Ed25519</code>只有<code>68</code>个字符</li>
<li>更快：生成速度比<code>RSA</code>快，同时签名速度也比<code>RSA</code>快</li>
<li>更安全：签名过程不依赖随机数生成器，不依赖哈希函数的防碰撞特性，没有时间通道攻击的问题</li>
</ul>
<p>生成方式很简单：</p>
<pre><code class="language-bash">ssh-keygen -a 1024 -t ed25519 -f ~/.ssh/ed25519
</code></pre>
<p>参数说明如下：</p>
<ul>
<li><code>-a</code>：指定<code>KDF</code>（<code>Key Derivation Function</code>）的轮数</li>
<li><code>-t</code>：指定算法，可选<code>dsa</code>、<code>ecdsa</code>、<code>ecdsa-sk</code>、<code>ed25519</code>、<code>ed25519-sk</code>、<code>rsa</code></li>
<li><code>-f</code>：指定位置</li>
</ul>
<p>生成之后复制公钥即可：</p>
<pre><code class="language-bash">ssh-copy-id -i ~/.ssh/ed25519.pub user@ip
</code></pre>
<h2 id="82-私钥密码">8.2 私钥密码</h2>
<p>比如按上述方式生成密钥对时，会提示输入私钥密码：</p>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20200820164532325.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>这里的密码会在使用私钥连接的时候提示：</p>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20200820164836250.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="83-配合ssh-add">8.3 配合<code>ssh-add</code></h2>
<p>默认情况下每次使用私钥登录的时候都需要输入私钥的密码，如果不想每次输出，可以使用<code>ssh-add</code>：</p>
<pre><code class="language-bash">ssh-add ~/.ssh/test # ~/.ssh/test替换成对应的私钥路径
</code></pre>
<p>这样只需要输入一次私钥密码，下一次连接的时候就不需要输入私钥密码连接了。</p>
<h2 id="84-使用不同密钥对">8.4 使用不同密钥对</h2>
<p>假设您有多台服务器：<code>server1</code>，<code>server2</code>，<code>server3</code>，则可以为不同服务器使用不同的密钥对，而不是使用同一个密钥对：</p>
<pre><code class="language-bash">ssh-keygen -a 1024 -t ed25519 -f ~/.ssh/server1
ssh-keygen -a 1024 -t ed25519 -f ~/.ssh/server2
ssh-keygen -a 1024 -t ed25519 -f ~/.ssh/server3
</code></pre>
<p>接着复制公钥到对应的服务器上：</p>
<pre><code class="language-bash">ssh-copy-id user@server1 -i ~/.ssh/server1.pub
ssh-copy-id user@server2 -i ~/.ssh/server2.pub
ssh-copy-id user@server3 -i ~/.ssh/server3.pub
</code></pre>
<h1 id="9-ssh-agent">9 <code>ssh-agent</code></h1>
<h2 id="91-这是什么">9.1 这是什么？</h2>
<p><code>ssh-agent</code>是一个程序，可以帮助管理私钥。代理能提供如下用途：</p>
<ul>
<li>自动选择密钥：使用不同密钥连接到不同主机时，需要手动指定密钥（比如上面的<code>使用不同密钥对</code>的例子中，连接到不同服务器时需要加上<code>-i</code>参数），<code>ssh-agent</code>可以自动选择，不需要手动指定</li>
<li>自动输入私钥密码：如果私钥设置了密钥（比如上面的<code>私钥密码</code>例子），但是又需要频繁地使用私钥进行认证时，<code>ssh-agent</code>可以帮助自动输入私钥的密码</li>
</ul>
<h2 id="92-使用">9.2 使用</h2>
<p>首先启动：</p>
<pre><code class="language-bash">eval `ssh-agent` # 注意是反引号
</code></pre>
<p>接着添加私钥：</p>
<pre><code class="language-bash"># 以上面“使用不同的密钥对”为例
ssh-add ~/.ssh/server1
ssh-add ~/.ssh/server1
ssh-add ~/.ssh/server1
</code></pre>
<p>这样连接的时候就不需要手动指定<code>-i</code>参数了。</p>
<p>如果私钥指定了密码，会在<code>ssh-add</code>时进行提示输入：</p>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/20200820170238249.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>这样下次使用带密钥的私钥连接时就不需要输入密码了。</p>
<h1 id="10-2fa">10 <code>2FA</code></h1>
<p><code>Two-Factor Authentication</code>，缩写<code>2FA</code>，意为<code>双重认证</code>，<code>双因子认证</code>等等，顾名思义就是进行两步认证的操作，可选的应用有：</p>
<ul>
<li><code>Google Authenticator</code></li>
<li><code>Authy</code></li>
<li><code>Yubico</code></li>
<li><code>Duo</code></li>
</ul>
<p>比如<code>Google Authenticator</code>，安装之后，连接服务器需要进行输入验证码的操作。</p>
<p>具体的话就不演示了，因为笔者需要经常连接，因此这个选项对笔者来说不太实际，想要实现的话具体可以参考<a href="https://xz.aliyun.com/t/5249">这里</a>。</p>
<h1 id="11-其他选项">11 其他选项</h1>
<h2 id="111-设置最大错误次数">11.1 设置最大错误次数</h2>
<pre><code class="language-bash">MaxAuthTries 6
</code></pre>
<p>默认为最多允许<code>3</code>次密码错误（需要除2），修改为<code>2</code>则表示如果密码输入错误一次即自动断开。</p>
<h2 id="112-主动断开会话">11.2 主动断开会话</h2>
<pre><code class="language-bash">LoginGraceTime 120
</code></pre>
<p>在<code>LoginGraceTime</code>指定的时间内如果没有连接成功，则自动断开会话，默认单位为秒，可以指定以分钟为单位，比如：</p>
<pre><code class="language-bash">LoginGraceTime 2m
</code></pre>
<h1 id="12-最后">12 最后</h1>
<p>修改完配置文件<code>/etc/ssh/ssd_config</code>后，对<code>sshd</code>服务进行重启：</p>
<pre><code class="language-bash">systemctl restart sshd
</code></pre>
<h1 id="13-参考">13 参考</h1>
<ul>
<li>
<p><a href="http://www.zsythink.net/archives/2407/">了解ssh代理：ssh-agent</a></p>
</li>
<li>
<p><a href="https://www.jianshu.com/p/d0c48dcf6af6">简书-SSH超时断开(ClientAliveInterval和ClientAliveCountMax )的使用</a></p>
</li>
<li>
<p><a href="https://xz.aliyun.com/t/5249">使用两步验证（2FA）保护你的SSH连接</a></p>
</li>
<li>
<p><a href="https://blog.devolutions.net/2017/4/10-steps-to-secure-open-ssh">10 Steps to Secure Open SSH</a></p>
</li>
<li>
<p><a href="https://devops.ionos.com/tutorials/secure-the-ssh-server-on-ubuntu/">Secure The SSH Server On Ubuntu</a></p>
</li>
<li>
<p><a href="https://medium.com/risan/upgrade-your-ssh-key-to-ed25519-c6e8d60d3c54">Upgrade Your SSH Key to Ed25519</a></p>
</li>
</ul>
]]></content>
    </entry>
</feed>