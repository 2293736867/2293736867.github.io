<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://2293736867.github.io</id>
    <title>氷泠&apos;s blog</title>
    <updated>2020-09-13T01:13:03.190Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://2293736867.github.io"/>
    <link rel="self" href="https://2293736867.github.io/atom.xml"/>
    <subtitle>我配不上你，
纵然很努力。</subtitle>
    <logo>https://2293736867.github.io/images/avatar.png</logo>
    <icon>https://2293736867.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 氷泠&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[每日分享 第91期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-91-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-91-qi/">
        </link>
        <updated>2020-09-15T01:06:04.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>垃圾还有大爷大妈捡走，你呢？</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>你的牙釉质比龙虾壳或犀牛角还坚硬，甚至比钢铁还坚硬。牙釉质是由矿化的磷酸钙组成，而磷酸钙是生物所能制造的最坚硬的物质。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>悟了长生理，秋莲处处开。<br>
——吕岩《五言》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>痛苦犹如一艘船，欲望是指南针。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第90期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-90-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-90-qi/">
        </link>
        <updated>2020-09-14T00:48:37.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>很多人觉得自己活得太累，实际上，他们可能只是睡得太晚。</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>作为地球上最高大、最古老的生物之一，颤抖居人正慢慢死于骡鹿之口。这片位于犹他州的颤杨群面积达到106英亩，拥有近80000年的历史，目前正因被骡鹿吞食新茎而日益稀疏。与此同时，骡鹿目前正因为没有天敌而蓬勃繁衍。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>阴生古苔绿，色染秋烟碧。<br>
——李白《南轩松》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>死去的人不需要花。被花所拯救的是留下的人。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第89期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-89-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-89-qi/">
        </link>
        <updated>2020-09-13T00:48:16.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>装逼只是瞬间，不要脸那才是永恒。</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>与居住在核电厂附近相比，居住在煤电厂附近所受的辐射剂量更高。这是因为煤电厂所排粉煤灰的辐射量是类似核电厂废料的100倍。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>洞庭青草，近中秋，更无一点风色。<br>
——张孝祥《念奴娇·过洞庭》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>我于杀戮之中盛放，亦如黎明中的花朵。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第88期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-88-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-88-qi/">
        </link>
        <updated>2020-09-12T00:47:55.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>我一般说话都会给人留面子，万一我怼你了，没错我就是故意的。</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>有一种叫作疯狂蜂蜜的蜂蜜会让人产生幻觉。由于售价高达每磅80美元，因此尼泊尔采蜜人会为了收获这种蜂蜜而进行危险的垂直攀爬。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>青青园中葵，朝露待日晞。<br>
——佚名《长歌行》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>机场永远等不到船，就像我永远等不到你。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第87期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-87-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-87-qi/">
        </link>
        <updated>2020-09-11T00:47:09.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>所有抱怨社会不公和制度的人翻译过来只有一句话：请给我金钱，女人和社会地位。</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>扁虫同时拥有雄性和雌性生殖器官，如果它们找不到与自己交配的扁虫，它们将通过将针状交配器刺入自己的脑袋以为自己授精，这种交配方式叫自交。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>不知明镜里，何处得秋霜。<br>
——李白《秋浦歌十七首》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>能诚实地承认穷，诚恳地表达对于钱的兴趣，就是对穷者的尊严。</p>
</blockquote>
<h1 id="关于每日音乐">关于每日音乐</h1>
<p>最近有点忙，而且找不到什么好听的新歌，所以关于每日音乐分享这部分就先暂告一段落了，如有不便请多多包涵。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Spring Boot demo系列（四）：Spring Web+Validation]]></title>
        <id>https://2293736867.github.io/post/spring-boot-demo-xi-lie-si-spring-webvalidation/</id>
        <link href="https://2293736867.github.io/post/spring-boot-demo-xi-lie-si-spring-webvalidation/">
        </link>
        <updated>2020-09-10T01:59:24.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#1-%E6%A6%82%E8%BF%B0">1 概述</a></li>
<li><a href="#2-%E6%A0%A1%E9%AA%8C">2 校验</a></li>
<li><a href="#3-hibernate-validator">3 <code>Hibernate Validator</code></a></li>
<li><a href="#4-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8">4 基本使用</a></li>
<li><a href="#5-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86">5 异常处理</a></li>
<li><a href="#6-%E5%BF%AB%E9%80%9F%E5%A4%B1%E8%B4%A5%E6%A8%A1%E5%BC%8F">6 快速失败模式</a></li>
<li><a href="#7-valid%E4%B8%8Evalidated">7 <code>@Valid</code>与<code>@Validated</code></a>
<ul>
<li><a href="#71-%E5%88%86%E7%BB%84">7.1 分组</a></li>
<li><a href="#72-%E7%BB%84%E5%BA%8F%E5%88%97">7.2 组序列</a></li>
</ul>
</li>
<li><a href="#8-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3">8 自定义注解</a></li>
<li><a href="#9-%E6%9D%A5%E7%82%B9aop">9 来点<code>AOP</code></a>
<ul>
<li><a href="#91-%E4%BE%9D%E8%B5%96">9.1 依赖</a></li>
<li><a href="#92-%E9%AA%8C%E8%AF%81%E6%B3%A8%E8%A7%A3">9.2 验证注解</a></li>
<li><a href="#93-%E5%AD%97%E6%AE%B5%E9%AA%8C%E8%AF%81">9.3 字段验证</a></li>
<li><a href="#94-%E5%AE%9A%E4%B9%89%E9%AA%8C%E8%AF%81%E5%99%A8">9.4 定义验证器</a></li>
</ul>
</li>
<li><a href="#10-%E5%8F%82%E8%80%83%E6%BA%90%E7%A0%81">10 参考源码</a></li>
</ul>
</p>
<h1 id="1-概述">1 概述</h1>
<p>本文主要讲述了如何使用<code>Hibernate Validator</code>以及<code>@Valid/@Validate</code>注解。</p>
<h1 id="2-校验">2 校验</h1>
<p>对于一个普通的<code>Spring Boot</code>应用，经常可以在业务层看到以下类似的操作：</p>
<pre><code class="language-java">if(id == null)
{...}
if(username == null)
{...}
if(password == null)
{...}
</code></pre>
<p>这是很正常的，但是会显得代码很繁琐，一个更好的做法就是使用<code>Hibernate Validator</code>。</p>
<h1 id="3-hibernate-validator">3 <code>Hibernate Validator</code></h1>
<p><code>JSR</code>是<code>Java Specification Requests</code>的缩写，意思是<code>Java规范提案</code>，<code>JSR-303</code>是<code>Java EE 6</code>的一项子规范，叫作<code>Bean Validation</code>，<code>Hibernate Validator</code>是<code>Bean Validator</code>的参考实现。其中<code>JSR-303</code>内置<code>constraint</code>如下：</p>
<ul>
<li><code>@Null</code>：被注解元素必须为<code>null</code></li>
<li><code>@NotNull</code>：必须不为<code>null</code></li>
<li><code>@AssertTrue</code>/<code>@AssertFalse</code>：必须为<code>true</code>/<code>false</code></li>
<li><code>@Min(value)</code>/<code>@Max(value)</code>：指定最小值/最大值（可以相等）</li>
<li><code>@DecimalMin(value)</code>/<code>DecimalMax(value)</code>：指定最小值/最大值（不能相等）</li>
<li><code>@Size(min,max)</code>：大小在给定范围</li>
<li><code>@Digits(integer,fraction)</code>：将字符串转为浮点数，并且规定整数位数最大<code>integer</code>位，小数位数最大<code>fraction</code>位</li>
<li><code>@Past</code>：必须是一个过去日期</li>
<li><code>@Future</code>：必须是将来日期</li>
<li><code>@Pattern</code>：必须符合正则表达式</li>
</ul>
<p>其中<code>Hibernate Validator</code>添加的<code>constraint</code>如下：</p>
<ul>
<li><code>@Email</code>：必须符合邮箱格式</li>
<li><code>@Length(min,max)</code>：字符串长度范围</li>
<li><code>@Range</code>：数字在指定范围</li>
</ul>
<p>而在<code>Spring</code>中，对<code>Hibernate Validator</code>进行了二次封装，添加了自动校验并且可以把校验信息封装进特定的<code>BindingResult</code>中。</p>
<h1 id="4-基本使用">4 基本使用</h1>
<p>注解直接在实体类的对应字段加上即可：</p>
<pre><code class="language-java">@Setter
@Getter
public class User {
    @NotBlack(message = &quot;邮箱不能为空&quot;)
    @Email(message = &quot;邮箱非法&quot;)
    private String email;
    @NotBlack(message = &quot;电话不能为空&quot;)
    private String phone;
}
</code></pre>
<p>控制层：</p>
<pre><code class="language-java">@CrossOrigin(value = &quot;http://localhost:3000&quot;)
@RestController
public class TestController {
    @PostMapping(&quot;/test&quot;)
    public boolean test(@RequestBody @Valid User user)
    {
        return true;
    }
}
</code></pre>
<p>测试：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200909171918903.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200909172101821.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20200909172134182.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>可以看到把<code>phone</code>字段留空或者使用非法邮箱格式时直接抛出异常。</p>
<h1 id="5-异常处理">5 异常处理</h1>
<p>前面说过校验出错会把异常放进<code>BindingResult</code>中，具体的处理方法就是加上对应参数即可，控制层修改如下：</p>
<pre><code class="language-java">@PostMapping(&quot;/test&quot;)
public boolean test(@RequestBody @Valid User user, BindingResult result)
{
    if(result.hasErrors())
        result.getAllErrors().forEach(System.out::println);
    return true;
}
</code></pre>
<p>可以通过<code>getAllErrors</code>获取所有的错误，这样就可以对具体错误进行处理了。</p>
<h1 id="6-快速失败模式">6 快速失败模式</h1>
<p><code>Hibernate Validator</code>有两种校验模式：</p>
<ul>
<li>普通模式：默认，检验所有属性，然后返回所有验证失败信息</li>
<li>快速失败模式：只要有一个验证失败便返回</li>
</ul>
<p>使用快速失败模式需要通过<code>HiberateValidateConfiguration</code>以及<code>ValidateFactory</code>创建<code>Validator</code>，并且使用<code>Validator.validate</code>手动校验，首先可以添加一个生成<code>Validator</code>的类：</p>
<pre><code class="language-java">import org.hibernate.validator.HibernateValidator;
import org.springframework.context.annotation.Configuration;

import java.util.Set;
import javax.validation.ConstraintViolation;
import javax.validation.Validation;
import javax.validation.Validator;

@Configuration
public class FailFastValidator {
    private final Validator validator;
    public FailFastValidator()
    {
        validator = Validation
        .byProvider(HibernateValidator.class)
        .configure()
        .failFast(true)
        .buildValidatorFactory()
        .getValidator();
    }

    public Set&lt;ConstraintViolation&lt;User&gt;&gt; validate(User user)
    {
        return validator.validate(user);
    }
}
</code></pre>
<p>接着修改控制层，去掉<code>User</code>上的<code>@Valid</code>，同时注入<code>validator</code>进行手动校验：</p>
<pre><code class="language-java">import com.example.demo.entity.User;
import com.example.demo.failfast.FailFastValidator;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import javax.validation.ConstraintViolation;
import java.util.Set;

@CrossOrigin(value = &quot;http://localhost:3000&quot;)
@RestController
@RequiredArgsConstructor(onConstructor = @__(@Autowired))
public class TestController {
    private final FailFastValidator validator;
    @PostMapping(&quot;/test&quot;)
    public boolean test(@RequestBody User user)
    {
        Set&lt;ConstraintViolation&lt;User&gt;&gt; message = validator.validate(user);
        message.forEach(System.out::println);
        return true;
    }
}
</code></pre>
<p>这样一旦校验失败便会返回，而不是校验完所有的字段记录所有错误信息再返回。</p>
<h1 id="7-valid与validated">7 <code>@Valid</code>与<code>@Validated</code></h1>
<p><code>@Valid</code>位于<code>javax.validation</code>下，而<code>@Validated</code>位于<code>org.springframework.validation.annotation</code>下，是<code>@Valid</code>的一次封装，在<code>@Valid</code>的基础上，增加了分组以及组序列的功能，下面分别进行介绍。</p>
<h2 id="71-分组">7.1 分组</h2>
<p>当不同的情况下需要不同的校验方式时，可以使用分组功能，比如在某种情况下需要注册时不需要校验邮箱，而修改信息的时候需要校验邮箱，则实体类可以如下设计：</p>
<pre><code class="language-java">@Setter
@Getter
public class User {
    @NotBlank(message = &quot;邮箱不能为空&quot;,groups = GroupB.class)
    @Email(message = &quot;邮箱非法&quot;,groups = GroupB.class)
    private String email;
    @NotBlank(message = &quot;电话不能为空&quot;,groups = {GroupA.class,GroupB.class})
    private String phone;

    public interface GroupA{}
    public interface GroupB{}
}
</code></pre>
<p>接着修改控制层，并使用<code>@Validate</code>代替原来的<code>@Valid</code>：</p>
<pre><code class="language-java">public class TestController {
    @PostMapping(&quot;/test&quot;)
    public boolean test(@RequestBody @Validated(User.GroupA.class) User user)
    {
        return true;
    }
}
</code></pre>
<p>在<code>GroupA</code>的情况下，只校验电话，测试如下：</p>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20200909174327878.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>而如果修改为<code>GroupB</code>：</p>
<pre><code class="language-java">public boolean test(@RequestBody @Validated(User.GroupB.class) User user)
</code></pre>
<p>这样就邮箱与电话都校验：</p>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/20200909174437324.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="72-组序列">7.2 组序列</h2>
<p>默认情况下，校验是无序的，也就是说，对于下面的实体类：</p>
<pre><code class="language-java">public class User {
    @NotBlank(message = &quot;邮箱不能为空&quot;)
    @Email(message = &quot;邮箱非法&quot;)
    private String email;
    @NotBlank(message = &quot;电话不能为空&quot;)
    private String phone;
}
</code></pre>
<p>先校验哪一个并没有固定顺序，修改控制层如下，返回错误信息：</p>
<pre><code class="language-java">@PostMapping(&quot;/test&quot;)
public String test(@RequestBody @Validated User user, BindingResult result)
{
    for (ObjectError allError : result.getAllErrors()) {
        return allError.getDefaultMessage();
    }
    return &quot;true&quot;;
}
</code></pre>
<p>可以看到两次测试的结果不同：</p>
<figure data-type="image" tabindex="6"><img src="https://img-blog.csdnimg.cn/2020090918234135.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="7"><img src="https://img-blog.csdnimg.cn/20200909182406397.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>因为顺序不固定，而如果指定了顺序：</p>
<pre><code class="language-java">public class User {
    @NotBlank(message = &quot;邮箱不能为空&quot;,groups = First.class)
    @Email(message = &quot;邮箱非法&quot;,groups = First.class)
    private String email;
    @NotBlank(message = &quot;电话不能为空&quot;,groups = Third.class)
    private String phone;

    public interface First{}
    public interface Second{}
    public interface Third{}
    @GroupSequence({First.class,Second.class,Third.class})
    public interface Group{}
}
</code></pre>
<p>同时控制层指定顺序：</p>
<pre><code class="language-java">public String test(@RequestBody @Validated(User.Group.class) User user, BindingResult result)
</code></pre>
<p>这样就一定会先校验<code>First</code>，也就是先校验邮箱是否为空。</p>
<h1 id="8-自定义注解">8 自定义注解</h1>
<p>尽管使用上面的各种注解已经能解决很多情况了，但是对于一些特定的情况，需要一些特别的校验，而自带的注解不能满足，这时就需要自定义注解了，比如上面的电话字段，国内的是11位的，而且需要符合某些条件（比如默认区号<code>+86</code>等），下面就自定义一个专门用于手机号码的注解：</p>
<pre><code class="language-java">@Documented
@Constraint(validatedBy = PhoneValidator.class)
@Target({ElementType.FIELD,ElementType.METHOD})
@Retention(RetentionPolicy.RUNTIME)
public @interface Phone {
    String message() default &quot;请使用合法的手机号码&quot;;
    Class&lt;?&gt; [] groups() default {};
    Class&lt;? extends Payload&gt; [] payload() default {};
}
</code></pre>
<p>同时定义一个验证类：</p>
<pre><code class="language-java">public class PhoneValidator implements ConstraintValidator&lt;Phone,String&gt; {
    @Override
    public boolean isValid(String s, ConstraintValidatorContext constraintValidatorContext) {
        if(s.length() != 11)
            return false;
        return Pattern.matches(&quot;^((17[0-9])|(14[0-9])|(13[0-9])|(15[^4,\\D])|(18[0,5-9]))\\d{8}$&quot;,s);
    }
}
</code></pre>
<p>接着修改实体类，加上注解即可：</p>
<pre><code class="language-java">@Phone
@NotBlank(message = &quot;电话不能为空&quot;)
private String phone;
</code></pre>
<p>测试如下，可以看到虽然是11位了，但是格式非法，因此返回相应信息：</p>
<figure data-type="image" tabindex="8"><img src="https://img-blog.csdnimg.cn/20200909184017180.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="9-来点aop">9 来点<code>AOP</code></h1>
<p>默认情况下<code>Hibernate Validator</code>不是快速失败模式的，但是如果配成快速失败模式就不能用<code>@Validate</code>了，需要手动实例化一个<code>Validator</code>，这是一种很麻烦的操作，虽然说可以利用组序列“伪装”成一个快速失败模式，但是有没有更好的解决办法呢？</p>
<p>有！</p>
<p>就是。。。</p>
<p>自己动手使用<code>AOP</code>实现校验。</p>
<h2 id="91-依赖">9.1 依赖</h2>
<p><code>AOP</code>这种高级的东西当然是用别人的轮子啊：</p>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<h2 id="92-验证注解">9.2 验证注解</h2>
<p>首先自定义一个验证注解，这个注解的作用类似<code>@Validate</code>：</p>
<pre><code class="language-java">public @interface UserValidate {}
</code></pre>
<h2 id="93-字段验证">9.3 字段验证</h2>
<p>自定义一些类似<code>@NotEmpty</code>等的注解：</p>
<pre><code class="language-java">@Documented
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.FIELD)
public @interface MyEmail {
    String message() default &quot;邮箱不能为空，且需要一个合法的邮箱&quot;;
    int order();
}

@Documented
@Target(ElementType.FIELD)
@Retention(RetentionPolicy.RUNTIME)
public @interface MyPhone {
    String message() default &quot;电话不能为空，且需要一个合法的电话&quot;;
    int order();
}
</code></pre>
<h2 id="94-定义验证器">9.4 定义验证器</h2>
<pre><code class="language-java">@Aspect
@Component
public class UserValidator {
    @Pointcut(&quot;@annotation(com.example.demo.aop.UserValidate)&quot;)
    public void userValidate(){}

    @Before(&quot;userValidate()&quot;)
    public void validate(JoinPoint point) throws EmailException, PhoneException, IllegalAccessException {
        User user = (User)point.getArgs()[0];
        TreeMap&lt;Integer,Annotation&gt; treeMap = new TreeMap&lt;&gt;();
        HashMap&lt;Integer,Object&gt; allFields = new HashMap&lt;&gt;();
        for (Field field : user.getClass().getDeclaredFields()) {
            field.setAccessible(true);
            for (Annotation annotation : field.getAnnotations()) {
                if(annotation.annotationType() == MyEmail.class)
                {
                    treeMap.put(((MyEmail)annotation).order(),annotation);
                    allFields.put(((MyEmail)annotation).order(),field.get(user));
                }
                else if(annotation.annotationType() == MyPhone.class)
                {
                    treeMap.put(((MyPhone)annotation).order(),annotation);
                    allFields.put(((MyPhone)annotation).order(),field.get(user));
                }
            }
        }
        for (Map.Entry&lt;Integer, Annotation&gt; entry : treeMap.entrySet()) {
            Class&lt;? extends Annotation&gt; type = entry.getValue().annotationType();
            if(type == MyEmail.class)
            {
                validateEmail((String)allFields.get(entry.getKey()));
            }
            else if(type == MyPhone.class)
            {
                validatePhone((String)allFields.get(entry.getKey()));
            }
        }
    }

    private static void validateEmail(String s) throws EmailException
    {
        throw new EmailException();
    }

    private static void validatePhone(String s) throws PhoneException
    {
        throw new PhoneException();
    }
}
</code></pre>
<p>这个是实现校验的核心，首先定义一个切点：</p>
<pre><code class="language-java">@Pointcut(&quot;@annotation(com.example.demo.aop.UserValidate)&quot;)
public void userValidate(){}
</code></pre>
<p>该切点应用在注解<code>@UserValidate</code>上，接着定义验证方法<code>validate</code>，首先通过切点获取其中的参数以及参数中的注解，并且模拟了组序列，先使用<code>TreeMap</code>进行排序，最后针对遍历该<code>TreeMap</code>，对不同的注解分别调用不同的方法校验。</p>
<p>实体类简单定义顺序即可：</p>
<pre><code class="language-java">public class User {
    @MyEmail(order = 2)
    private String email;
    @MyPhone(order = 1)
    private String phone;
}
</code></pre>
<p>控制类中的注解定义在方法上：</p>
<pre><code class="language-java">@PostMapping(&quot;/test&quot;)
@UserValidate
public String test(@RequestBody User user)
{
    return &quot;true&quot;;
}
</code></pre>
<p>这样就自定义实现了一个简单的<code>JSR-303</code>了。</p>
<p>当然该方法还有很多的不足，比如需要配合全局异常处理，不然的话会直接抛出异常：</p>
<figure data-type="image" tabindex="9"><img src="https://img-blog.csdnimg.cn/20200909195817539.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>前端也是直接返回异常：</p>
<figure data-type="image" tabindex="10"><img src="https://img-blog.csdnimg.cn/20200909195834685.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>一般情况下还是推荐使用<code>Hibernate Validator</code>，应对常规情况足够了。</p>
<h1 id="10-参考源码">10 参考源码</h1>
<p><code>Java</code>版：</p>
<ul>
<li><a href="https://github.com/2293736867/SpringBootDemoJava/tree/master/HibernateValidator">Github</a></li>
<li><a href="https://gitee.com/u6b7b5fc3/SpringBootDemoJava/tree/master/HibernateValidator">码云</a></li>
</ul>
<p><code>Kotlin</code>版：</p>
<ul>
<li><a href="https://github.com/2293736867/SpringBootDemoKotlin/tree/master/HibernateValidator">Github</a></li>
<li><a href="https://gitee.com/u6b7b5fc3/SpringBootDemoKotlin/tree/master/HibernateValidator">码云</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第86期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-86-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-86-qi/">
        </link>
        <updated>2020-09-09T17:03:15.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>钱不是万能的，但有钱真的可以为所欲为。</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>2010年，哥伦比亚军队制作了一首名为《Better Days》的歌曲，其副歌中嵌入了莫尔斯电码，并在被叛军控制的领土上播出，以此提高人质的士气。其密文如下：“已有19人获救，你就是下一个，不要放弃希望”。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>古刹疏钟度，遥岚破风悬。<br>
——李贺《南园十三首》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>不要想，去感受。</p>
</blockquote>
<h1 id="每日音乐">每日音乐</h1>
<blockquote>
<p><a href="https://www.kugou.com/song/143mmx36.html#hash=530B4F05106ABB8DD5EFE29AAFB6D306&amp;album_id=36183150">嚣张（粤语）-大泫</a></p>
</blockquote>
<blockquote>
<p>请你讲<br>
给我知<br>
你想说的话<br>
其实我<br>
还是我<br>
想得太多<br>
如何能<br>
强忍眼泪<br>
去怀抱孤独进睡<br>
怎么会<br>
不可能<br>
再与你一堆</p>
</blockquote>
<blockquote>
<p>不要讲<br>
给我知<br>
你的规矩吧<br>
仍是我<br>
全做错<br>
现已丑化<br>
别埋藏<br>
容不了下去<br>
加深这空虚<br>
烧光那<br>
些多余<br>
忘记尽瘁</p>
</blockquote>
<blockquote>
<p>奋力做个傀儡愿意破碎受重伤<br>
黑暗像是伴着寂寞<br>
共我做对象<br>
偶然发现你在<br>
我旁拍掌<br>
还是这么嚣张<br>
不再日日夜夜<br>
痴心卑恭地妄想<br>
想要改写怎么仿佛<br>
听到你声响<br>
多可笑<br>
还是打了败仗</p>
</blockquote>
<blockquote>
<p>不要讲<br>
给我知<br>
你的规矩吧<br>
仍是我<br>
全做错<br>
现已丑化<br>
别埋藏<br>
容不了下去<br>
加深这空虚<br>
烧光那<br>
些多余<br>
忘记尽瘁</p>
</blockquote>
<blockquote>
<p>奋力做个傀儡愿意破碎受重伤<br>
黑暗像是伴着寂寞共我做对象<br>
偶然发现你在我旁拍掌<br>
还是这么嚣张<br>
不再日日夜夜<br>
痴心卑恭地妄想<br>
想要改写怎么仿佛听到你声响<br>
多可笑<br>
还是打了败仗</p>
</blockquote>
<blockquote>
<p>奋力做个傀儡愿意破碎受重伤<br>
黑暗像是伴着寂寞共我做对象<br>
偶然发现你在我旁拍掌<br>
还是这么嚣张<br>
不再日日夜夜<br>
痴心卑恭地妄想<br>
想要改写怎么仿佛听到你声响<br>
多可笑<br>
还是打了败仗</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第85期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-85-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-85-qi/">
        </link>
        <updated>2020-09-09T14:28:07.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>没人牵手，我就揣兜。</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>在大萧条期间，一位银行家说服佛罗里达州Quincy镇的家庭以每股19美元的价格购买可口可乐的股票。后来，该镇以67位百万富翁成为美国人均最富有的地方。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>酒贱常愁客少，月明多被云妨。<br>
——苏轼《西江月·世事一场大梦》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>去死两次！</p>
</blockquote>
<h1 id="每日音乐">每日音乐</h1>
<blockquote>
<p><a href="http://www.yymp3.com/Play/9181/116999.htm">月牙湾-F.I.R</a></p>
</blockquote>
<blockquote>
<p>敦煌天空的沙粒<br>
带着我们的记忆<br>
我从半路看回去<br>
这秦关漫漫好婉踞</p>
</blockquote>
<blockquote>
<p>梦想穿过了西域<br>
包含了多少的禅意<br>
爱情像一本游记<br>
我会找寻它的密语<br>
看月牙湾下的泪光<br>
在丝路上被遗忘</p>
</blockquote>
<blockquote>
<p>是谁的心啊<br>
孤单地留下<br>
他还好吗<br>
我多想爱他<br>
那永恒的泪<br>
凝固那一句话<br>
也许可能蒸发</p>
</blockquote>
<blockquote>
<p>是谁的爱啊<br>
比泪水坚强<br>
轻声呼唤<br>
就让我融化<br>
每一滴雨水<br>
演化成我翅膀<br>
想着我爱的人<br>
追吧</p>
</blockquote>
<blockquote>
<p>梦想穿过了西域<br>
包含了多少的禅意<br>
爱情像一本游记<br>
我会找寻它的密语<br>
看月牙湾下的泪光<br>
在丝路上被遗忘</p>
</blockquote>
<blockquote>
<p>是谁的心啊<br>
孤单地留下<br>
他还好吗<br>
我多想爱他<br>
那永恒的泪<br>
凝固那一句话<br>
也许可能蒸发</p>
</blockquote>
<blockquote>
<p>是谁的爱啊<br>
比泪水坚强<br>
轻声呼唤<br>
就让我融化<br>
每一滴雨水<br>
演化成我翅膀<br>
向着我爱的人<br>
追吧</p>
</blockquote>
<blockquote>
<p>是谁的心啊<br>
孤单地留下<br>
他还好吗<br>
我多想爱他<br>
那永恒的泪<br>
凝固那一句话<br>
也许可能蒸发</p>
</blockquote>
<blockquote>
<p>是谁的爱啊<br>
比泪水坚强<br>
轻声呼唤<br>
就让我融化<br>
每一滴雨水<br>
演化成我翅膀<br>
向着我爱的人<br>
追吧</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Spring 学习笔记（三）：Spring Bean]]></title>
        <id>https://2293736867.github.io/post/spring-xue-xi-bi-ji-san-spring-bean/</id>
        <link href="https://2293736867.github.io/post/spring-xue-xi-bi-ji-san-spring-bean/">
        </link>
        <updated>2020-09-09T08:16:09.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#1-bean%E9%85%8D%E7%BD%AE">1 <code>Bean</code>配置</a></li>
<li><a href="#2-bean%E5%AE%9E%E4%BE%8B%E5%8C%96">2 <code>Bean</code>实例化</a>
<ul>
<li><a href="#21-%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%E5%AE%9E%E4%BE%8B%E5%8C%96">2.1 构造方法实例化</a></li>
<li><a href="#22-%E9%9D%99%E6%80%81%E5%B7%A5%E5%8E%82%E5%AE%9E%E4%BE%8B%E5%8C%96">2.2 静态工厂实例化</a></li>
<li><a href="#23-%E5%AE%9E%E4%BE%8B%E5%B7%A5%E5%8E%82%E5%AE%9E%E4%BE%8B%E5%8C%96">2.3 实例工厂实例化</a></li>
</ul>
</li>
<li><a href="#3-bean%E4%BD%9C%E7%94%A8%E5%9F%9F">3 <code>Bean</code>作用域</a>
<ul>
<li><a href="#31-%E5%88%86%E7%B1%BB">3.1 分类</a></li>
<li><a href="#32-singleton">3.2 <code>singleton</code></a></li>
<li><a href="#33-prototype">3.3 <code>prototype</code></a></li>
</ul>
</li>
<li><a href="#4-bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">4 <code>Bean</code>生命周期</a></li>
<li><a href="#5-bean%E8%A3%85%E9%85%8D%E6%96%B9%E5%BC%8F">5 <code>Bean</code>装配方式</a>
<ul>
<li><a href="#51-%E5%9F%BA%E4%BA%8Exml%E8%A3%85%E9%85%8D">5.1 基于<code>XML</code>装配</a></li>
<li><a href="#52-%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E8%A3%85%E9%85%8D">5.2 基于注解装配</a></li>
<li><a href="#53-%E6%B3%A8%E8%A7%A3%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B">5.3 注解使用示例</a>
<ul>
<li><a href="#531-bean">5.3.1 <code>@Bean</code></a></li>
<li><a href="#532-%E5%85%B6%E4%BB%96">5.3.2 其他</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</p>
<h1 id="1-bean配置">1 <code>Bean</code>配置</h1>
<p><code>Spring</code>可以看做是一个管理<code>Bean</code>的工厂，开发者需要将<code>Bean</code>配置在<code>XML</code>或者<code>Properties</code>配置文件中。实际开发中常使用<code>XML</code>的格式，其中<code>&lt;bean&gt;</code>中的属性或子元素如下：</p>
<ul>
<li><code>id</code>：<code>Bean</code>在<code>BeanFactory</code>中的唯一标识，在代码中通过<code>BeanFactory</code>获取<code>Bean</code>的实例时候需要以此作为索引</li>
<li><code>class</code>：<code>Bean</code>的具体实体类，使用<code>包名+类名</code>的形式指定</li>
<li><code>scope</code>：指定<code>Bean</code>实例的作用域</li>
<li><code>&lt;constructor-arg&gt;</code>：使用构造方法注入，指定构造方法的参数，<code>index</code>表示序号，<code>ref</code>指定对<code>BeanFactory</code>中其他<code>Bean</code>的引用关系，<code>type</code>指定参数类型，<code>value</code>指定参数常量值</li>
<li><code>&lt;property&gt;</code>：用于设置一个属性，表示使用<code>setter</code>注入，<code>name</code>指定属性的名字，<code>value</code>指定要注入的值，<code>ref</code>指定注入的某个<code>Bean</code>的<code>id</code></li>
<li><code>&lt;list&gt;</code>：用于封装<code>List</code>或者数组类型的依赖注入</li>
<li><code>&lt;map&gt;</code>：封装<code>Map</code>类型的依赖注入</li>
<li><code>&lt;set&gt;</code>：封装<code>Set</code>类型的依赖注入</li>
<li><code>&lt;entry&gt;</code>：<code>&lt;map&gt;</code>的子元素，用于设置一个键值对</li>
</ul>
<h1 id="2-bean实例化">2 <code>Bean</code>实例化</h1>
<p><code>Spring</code>实例化<code>Bean</code>有三种方式：</p>
<ul>
<li>构造方法实例化</li>
<li>静态工厂实例化</li>
<li>实例工厂实例化</li>
</ul>
<p>下面进行简单的演示。</p>
<h2 id="21-构造方法实例化">2.1 构造方法实例化</h2>
<p><code>Spring</code>可以调用<code>Bean</code>对应的类的无参构造方法进行实例化，比如：</p>
<pre><code class="language-java">public class TestBean {
    public TestBean()
    {
        System.out.println(&quot;构造方法实例化&quot;);
    }
}
</code></pre>
<p>配置文件如下：</p>
<pre><code class="language-xml">&lt;bean id=&quot;testBean&quot; class=&quot;TestBean&quot;/&gt;
</code></pre>
<p>则会调用无参构造方法初始化。</p>
<p>其实就是只写一个<code>&lt;bean&gt;</code>就可以了，默认的话会调用无参构造方法初始化。</p>
<h2 id="22-静态工厂实例化">2.2 静态工厂实例化</h2>
<p>静态工厂实例化需要在工厂类中配置一个静态方法来创建<code>Bean</code>，并添加<code>factory-method</code>元素，首先创建工厂类：</p>
<pre><code class="language-java">public class TestBeanFactory {
    private static final TestBean testBean = new TestBean();
    public static TestBean getInstance()
    {
        return testBean;
    }
}
</code></pre>
<p>接着配置文件通过<code>class</code>指定该工厂类，通过<code>factory-method</code>指定获取实例的方法：</p>
<pre><code class="language-xml">&lt;bean id=&quot;testBeanFactory&quot; class=&quot;TestBeanFactory&quot; factory-method=&quot;getInstance&quot;/&gt;
</code></pre>
<p>这样就可以通过<code>id</code>获取了：</p>
<pre><code class="language-java">TestBean test = (TestBean) context.getBean(&quot;testBeanFactory&quot;);
</code></pre>
<h2 id="23-实例工厂实例化">2.3 实例工厂实例化</h2>
<p>实例工厂实例化与静态工厂实例化类似，不过是非静态方法，然后加上一个<code>factory-bean</code>元素，同样首先创建工厂类：</p>
<pre><code class="language-java">public class TestBeanFactory {
    public TestBean getInstance()
    {
        return new TestBean();
    }
}
</code></pre>
<p>在配置文件需要添加两个<code>Bean</code>，一个指定工厂类，一个指定使用哪一个工厂类以及使用工厂类的哪一个方法：</p>
<pre><code class="language-xml">&lt;bean id=&quot;factory&quot; class=&quot;TestBeanFactory&quot; /&gt; &lt;!--指定工厂类--&gt;
&lt;bean id=&quot;testBeanFactory&quot; factory-bean=&quot;factory&quot; factory-method=&quot;getInstance&quot; /&gt; &lt;!--指定工厂Bean以及哪一个工厂方法--&gt;
</code></pre>
<p>获取：</p>
<pre><code class="language-java">TestBean test = (TestBean) context.getBean(&quot;testBeanFactory&quot;);
</code></pre>
<h1 id="3-bean作用域">3 <code>Bean</code>作用域</h1>
<h2 id="31-分类">3.1 分类</h2>
<p><code>&lt;bean&gt;</code>中的<code>scope</code>可以指定的作用域如下：</p>
<ul>
<li><code>singleton</code>：默认作用域，在<code>Spring</code>容器只有一个<code>Bean</code>实例</li>
<li><code>prototype</code>：每次获取<code>Bean</code>都会返回一个新的实例</li>
<li><code>request</code>：在一次<code>HTTP</code>请求中只返回一个<code>Bean</code>实例，不同<code>HTTP</code>请求返回不同的<code>Bean</code>实例，仅在<code>Spring Web</code>应用程序上下文使用</li>
<li><code>session</code>：在一个<code>HTTP Session</code>中，容器将返回同一个<code>Bean</code>实例，仅在<code>Spring Web</code>应用程序上下文中使用</li>
<li><code>application</code>：为每个<code>ServletContext</code>对象创建一个实例，即同一个应用共享一个<code>Bean</code>实例，仅在<code>Spring Web</code>应用程序上下文使用</li>
<li><code>websocket</code>：为每个<code>WebSocket</code>对象创建一个<code>Bean</code>实例，仅在<code>Spring Web</code>应用程序上下文使用</li>
</ul>
<p>下面具体说一下最常用的两个：<code>singleton</code>和<code>prototype</code>。</p>
<h2 id="32-singleton">3.2 <code>singleton</code></h2>
<p><code>scope</code>设置为<code>singleton</code>时，<code>Spring IoC</code>仅生成和管理一个<code>Bean</code>实例，使用<code>id</code>/<code>name</code>获取<code>Bean</code>实例时，<code>IoC</code>容器返回共享的<code>Bean</code>实例。设置方式如下：</p>
<pre><code class="language-xml">&lt;bean id=&quot;testBean&quot; class=&quot;TestBean&quot;/&gt;
&lt;bean id=&quot;testBean&quot; class=&quot;TestBean&quot; scope=&quot;singleton&quot;/&gt;
</code></pre>
<p>因为这是默认的作用域，设置的话<code>IDE</code>也智能提示是多余的：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200909075954376.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>所以通过不需要加上<code>scope</code>，测试例子：</p>
<pre><code class="language-java">TestBean test1 = (TestBean) context.getBean(&quot;testBean&quot;);
TestBean test2 = (TestBean) context.getBean(&quot;testBean&quot;);
System.out.println(test1 == test2);
</code></pre>
<p>输入的结果为<code>True</code>。</p>
<h2 id="33-prototype">3.3 <code>prototype</code></h2>
<p>每次获取<code>Bean</code>时都会创建一个新的实例，例子如下：</p>
<pre><code class="language-xml">&lt;bean id=&quot;testBean&quot; class=&quot;TestBean&quot; scope=&quot;prototype&quot;/&gt;
</code></pre>
<pre><code class="language-java">TestBean test1 = (TestBean) context.getBean(&quot;testBean&quot;);
TestBean test2 = (TestBean) context.getBean(&quot;testBean&quot;);
System.out.println(test1 == test2);
</code></pre>
<p>测试结果为<code>False</code>。</p>
<h1 id="4-bean生命周期">4 <code>Bean</code>生命周期</h1>
<p><code>Spring</code>可以管理作用域为<code>singleton</code>的生命周期，在此作用域下<code>Spring</code>能精确知道<code>Bean</code>何时被创建，何时初始化完成以及何时被摧毁。<code>Bean</code>的整个生命周期如下：</p>
<ul>
<li>实例化<code>Bean</code></li>
<li>进行依赖注入</li>
<li>如果<code>Bean</code>实现了<code>BeanNameAware</code>，调用<code>setBeanName</code></li>
<li>如果<code>Bean</code>实现了<code>BeanFactoryAware</code>，调用<code>setBeanFactory</code></li>
<li>如果<code>Bean</code>实现了<code>ApplicationContextAware</code>，调用<code>setApplicationContext</code></li>
<li>如果<code>Bean</code>实现了<code>BeanPostProcessor</code>，调用<code>postProcessBeforeInitialization</code></li>
<li>如果<code>Bean</code>实现了<code>InitializingBean</code>，调用<code>afterPropertiesSet</code></li>
<li>如果配置文件配置了<code>init-method</code>属性，调用该方法</li>
<li>如果实现了<code>BeanPostProcessor</code>，调用<code>postProcessAfterInitialization</code>，注意接口与上面的相同但是方法不一样</li>
<li>不需要时进入销毁阶段</li>
<li>如果<code>Bean</code>实现了<code>DisposableBean</code>，调用<code>destroy</code></li>
<li>如果配置文件配置了<code>destroy-method</code>，调用该方法</li>
</ul>
<p>下面用代码进行演示：</p>
<pre><code class="language-java">public class TestBean implements BeanNameAware, BeanFactoryAware, ApplicationContextAware, BeanPostProcessor, InitializingBean, DisposableBean {
    public TestBean()
    {
        System.out.println(&quot;调用构造方法&quot;);
    }

    @Override
    public void setBeanName(String s) {
        System.out.println(&quot;调用BeanNameAware的setBeanName&quot;);
    }

    @Override
    public void setBeanFactory(BeanFactory beanFactory) throws BeansException {
        System.out.println(&quot;调用BeanFactoryAware的setBeanFactory&quot;);
    }

    @Override
    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
        System.out.println(&quot;调用ApplicationContextAware的setApplicationContext&quot;);
    }

    @Override
    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {
        System.out.println(&quot;调用BeanPostProcessor的postProcessBeforeInitialization&quot;);
        return null;
    }

    @Override
    public void afterPropertiesSet() throws Exception {
        System.out.println(&quot;调用InitializingBean的afterPropertiesSet&quot;);
    }

    public void initMethod()
    {
        System.out.println(&quot;调用XML配置的init-method&quot;);
    }

    @Override
    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {
        System.out.println(&quot;调用BeanPostProcessor的postProcessAfterInitialization&quot;);
        return null;
    }

    @Override
    public void destroy() throws Exception {
        System.out.println(&quot;调用DisposableBean的destroy&quot;);
    }

    public void destroyMethod()
    {
        System.out.println(&quot;调用XML配置的destroy-method&quot;);
    }
}
</code></pre>
<p>配置文件如下，指定了<code>init-method</code>以及<code>destroy-method</code>：</p>
<pre><code class="language-xml">&lt;bean id=&quot;testBean&quot; class=&quot;TestBean&quot; init-method=&quot;initMethod&quot; destroy-method=&quot;destroyMethod&quot;/&gt;
</code></pre>
<p>测试：</p>
<pre><code class="language-java">public static void main(String[] args) {
    ConfigurableApplicationContext context = new FileSystemXmlApplicationContext(&quot;classpath:applicationContext.xml&quot;);
    TestBean test = (TestBean) context.getBean(&quot;testBean&quot;);
    ((BeanDefinitionRegistry) context.getBeanFactory()).removeBeanDefinition(&quot;testBean&quot;);
}
</code></pre>
<p>输出如下：</p>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200909125748530.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>如果没有最后一行的手动删除<code>Bean</code>定义是不会看见最后两行的输出的，另外，这里没有调用<code>BeanPostProcessor</code>接口的两个方法，如果把<code>scope</code>改为<code>prototype</code>，输出如下：</p>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/2020090912593951.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>可以看到首先对<code>Bean</code>进行一次初始化，并且再次生成一个新的实例，而且调用了<code>BeanPostProcessor</code>的两个方法。但是需要注意<code>Spring</code>不会管理<code>scope</code>为<code>prototype</code>的销毁，所以图中没有看到调用销毁的方法。</p>
<h1 id="5-bean装配方式">5 <code>Bean</code>装配方式</h1>
<p><code>Spring</code>支持以下两种装配方式：</p>
<ul>
<li>基于<code>XML</code>装配</li>
<li>基于注解装配</li>
<li>显式<code>Bean</code>装配</li>
</ul>
<p><code>Bean</code>的装配方式也就是<code>Bean</code>的依赖注入方式，下面分别进行阐述。</p>
<h2 id="51-基于xml装配">5.1 基于<code>XML</code>装配</h2>
<p>基于<code>XML</code>装配也就是在<code>XML</code>文件中指定使用构造方法注入或者<code>setter</code>注入，比如：</p>
<pre><code class="language-java">public class TestBean {
    private final List&lt;String&gt; stringList;
    private String s;

    public TestBean(List&lt;String&gt; stringList) {
        this.stringList = stringList;
    }

    public void setS(String s)
    {
        this.s = s;
    }

    @Override
    public String toString() {
        return stringList.toString() + &quot;\n&quot; + s + &quot;\n&quot;;
    }
}
</code></pre>
<p>该<code>Bean</code>有一个带参数的构造方法以及一个<code>setter</code>，接着在<code>XML</code>中指定相应的值即可：</p>
<pre><code class="language-xml">&lt;bean id=&quot;testBean&quot; class=&quot;TestBean&quot;&gt;
    &lt;constructor-arg index=&quot;0&quot;&gt;
        &lt;list&gt;
            &lt;value&gt;1&lt;/value&gt;
            &lt;value&gt;2&lt;/value&gt;
        &lt;/list&gt;
    &lt;/constructor-arg&gt;
    &lt;property name=&quot;s&quot; value=&quot;444&quot; /&gt;
&lt;/bean&gt;
</code></pre>
<p>测试：</p>
<pre><code class="language-java">ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);
System.out.println(context.getBean(&quot;testBean&quot;));
</code></pre>
<h2 id="52-基于注解装配">5.2 基于注解装配</h2>
<p>尽管<code>XML</code>方式可以简单地装配<code>Bean</code>，但是一旦<code>Bean</code>过多就会造成<code>XML</code>文件过于庞大，不方便以后的升级和维护，因此推荐使用基于注解的装配方式，先来看一下常用的注解：</p>
<ul>
<li><code>@Autowired</code>：自动装配，默认按照<code>Bean</code>的类型进行装配，这是<code>Spring</code>的注解</li>
<li><code>@Resource</code>：与<code>@Autowired</code>类似，但是是按名称进行装配，当找不到与名称匹配的<code>Bean</code>时才按照类型进行装配，这是<code>JDK</code>的注解</li>
<li><code>@Qualifier</code>：与<code>@Autowired</code>配合使用，因为<code>@Autowired</code>默认按<code>Bean</code>类型进行装配，使用<code>@Qualifier</code>可以按名称进行装配</li>
<li><code>@Bean</code>：方法上的注解，用于产生一个<code>Bean</code>，然后交由<code>Spring</code>管理</li>
<li><code>@Component</code>：表示一个组件对象，加上了该注解就能实现自动装配，默认的<code>Bean</code>的<code>id</code>为使用小驼峰命名法的类</li>
<li><code>@Repository</code>/<code>@Service</code>/<code>@Controller</code>：实际上是<code>@Component</code>的别名，只不过是专门用于持久层/业务层/控制层的，从源码可以看出三个注解的定义除了名字不一样其他都一致，并且都是<code>@Component</code>的别名：</li>
</ul>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20200908201601356.PNG" alt="在这里插入图片描述" loading="lazy"></figure>
<p>官方文档也提到相比起使用<code>@Component</code>，使用<code>@Repository</code>/<code>@Service</code>/<code>@Controller</code>在持久层/业务层/控制层更加合适，而不是统一使用<code>@Component</code>：</p>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/20200908201800199.PNG" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="53-注解使用示例">5.3 注解使用示例</h2>
<h3 id="531-bean">5.3.1 <code>@Bean</code></h3>
<p><code>@Bean</code>示例如下：</p>
<pre><code class="language-java">public class TestBean implements BeanNameAware{
    @Override
    public void setBeanName(String s) {
        System.out.println(&quot;setBeanName&quot;);
    }
}

@Configuration
public class Config {
    @Bean
    public TestBean getBean()
    {
        return new TestBean();
    }
}

public class Main {
    public static void main(String[] args) {
        ApplicationContext context = new AnnotationConfigApplicationContext(Config.class);
        context.getBean(&quot;getBean&quot;);
    }
}
</code></pre>
<p>注意通过<code>@Bean</code>自动产生的<code>Bean</code>的<code>id</code>为方法名，而不是<code>Bean</code>的类名的小驼峰形式。</p>
<h3 id="532-其他">5.3.2 其他</h3>
<p><code>@Autowired</code>/<code>@Resource</code>/<code>@Qualifier</code>/<code>@Repository</code>/<code>@Service</code>/<code>@Controller</code>综合示例，首先创建如下包以及文件：</p>
<figure data-type="image" tabindex="6"><img src="https://img-blog.csdnimg.cn/20200909155801661.png" alt="在这里插入图片描述" loading="lazy"></figure>
<pre><code class="language-java">@Controller
public class TestController {
    @Resource
    private TestService service;

    public void save()
    {
        System.out.println(&quot;controller save&quot;);
        service.save();
    }
}
</code></pre>
<pre><code class="language-java">@Service
public class TestService {
    @Autowired
    @Qualifier(&quot;testRepository1&quot;)
    private TestInterface repository1;

    @Autowired
    @Qualifier(&quot;testRepository2&quot;)
    private TestInterface repository2;
    public void save()
    {
        System.out.println(&quot;service save&quot;);
        repository1.save();
        repository2.save();
    }
}
</code></pre>
<pre><code class="language-java">@Repository
public class TestRepository1 implements TestInterface{
    @Override
    public void save() {
        System.out.println(&quot;repository1 save&quot;);
    }
}
</code></pre>
<pre><code class="language-java">@Repository
public class TestRepository2 implements TestInterface{
    @Override
    public void save() {
        System.out.println(&quot;repository2 save&quot;);
    }
}
</code></pre>
<pre><code class="language-java">public interface TestInterface {
    void save();
}
</code></pre>
<pre><code class="language-java">public class Main {
    public static void main(String[] args) {
        ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);
        ((TestController)context.getBean(&quot;testController&quot;)).save();
    }
}
</code></pre>
<p>配置文件：</p>
<pre><code class="language-xml">&lt;context:component-scan base-package=&quot;bean&quot; /&gt;
</code></pre>
<p>在<code>TestService</code>中，使用了<code>@Qualifier</code>：</p>
<pre><code class="language-java">@Autowired
@Qualifier(&quot;testRepository1&quot;)
private TestInterface repository1;

@Autowired
@Qualifier(&quot;testRepository2&quot;)
private TestInterface repository2;
</code></pre>
<p>因为<code>TestInterface</code>有两个实现类，<code>@Autowired</code>不知道是选择<code>TestRepository1</code>还是<code>TestRepository2</code>，因此需要加上<code>@Qualifier</code>，指定需要注入的<code>Bean</code>的<code>id</code>，或者使用<code>@Resouce</code>：</p>
<pre><code class="language-java">@Resource
private TestInterface testRepository1;

@Resource
private TestInterface testRepository2;
</code></pre>
<p>但是要注意这样默认了成员的名字就是<code>Bean</code>的<code>id</code>，可以看到这里的名字是<code>testRepository1</code>与<code>testRepository2</code>而不是<code>repository1</code>和<code>repository2</code>。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Spring 学习笔记（二）：SpringIoC]]></title>
        <id>https://2293736867.github.io/post/spring-xue-xi-bi-ji-er-springioc/</id>
        <link href="https://2293736867.github.io/post/spring-xue-xi-bi-ji-er-springioc/">
        </link>
        <updated>2020-09-08T09:18:55.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-ioc与di">1 <code>IoC</code>与<code>DI</code></h1>
<p><code>IoC</code>是<code>Inversion of Control</code>的简称，也就是控制反转。通常来说，创建对象需要调用者手动创建，也就是<code>new XXX()</code>的方式。当<code>Spring</code>框架出现后，对象的实例不再由调用者创建，而是由<code>Spring</code>容器创建，这样控制权就由调用者转移到<code>Spring</code>容器，控制权发生了反转，这就是<code>Spring</code>的控制反转。从<code>Spring</code>容器来看，<code>Spring</code>容器负责将被依赖对象赋值给调用者的成员变量，相当于为调用者注入它所依赖的实例，这就是<code>Spring</code>的依赖注入（<code>Dependency Injection</code>，<code>DI</code>）。</p>
<p>一句话总结：</p>
<ul>
<li><strong><code>IoC</code>：控制权由调用者交由<code>Spring</code>容器，控制发生了反转</strong></li>
<li><strong><code>DI</code>：由<code>Spring</code>容器注入需要的值到对象中</strong></li>
</ul>
<h1 id="2-spring-ioc容器">2 <code>Spring IoC</code>容器</h1>
<p><code>Spring</code>中实现<code>IoC</code>的是<code>Spring IoC</code>容器，主要基于以下两个接口：</p>
<ul>
<li><code>BeanFactory</code></li>
<li><code>ApplicationContext</code></li>
</ul>
<h2 id="21-beanfactory">2.1 <code>BeanFactory</code></h2>
<p>位于<code>org.springframework.beans.factory</code>下，提供了完整的<code>IoC</code>服务支持，是一个管理<code>Bean</code>工厂，主要负责初始化各种<code>Bean</code>。可以通过<code>XmlBeanFactory</code>来获取<code>XML</code>文件中的<code>Bean</code>并进行装配，例子如下：</p>
<pre><code class="language-java">BeanFactory factory = new XmlBeanFactory(new FileSystemResource(&quot;/xxx/xxx/xxx/xxx/applicationContext.xml&quot;));
TestInterface test = (TestInterface)factory.getBean(&quot;test&quot;);
test.hello();
</code></pre>
<p>需要使用绝对路径，而且，该方法已经过时了：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200908123818784.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>因此不推荐使用。</p>
<h2 id="22-applicationcontext">2.2 <code>ApplicationContext</code></h2>
<p><code>ApplicationContext</code>是<code>BeanFactory</code>的子接口，也称为应用上下文，除了包含<code>BeanFactory</code>的功能外还添加了国际化、资源访问、事件传播等的支持，创建<code>ApplicationContext</code>的实例有以下三种方法：</p>
<ul>
<li><code>ClassPathXmlApplicationContext</code></li>
<li><code>FileSystemXmlApplicationContext</code></li>
<li><code>Web</code>服务器实例化</li>
</ul>
<h3 id="221-classpathxmlapplicationcontext">2.2.1 <code>ClassPathXmlApplicationContext</code></h3>
<p>该类从<code>resources</code>下寻找指定的<code>XML</code>文件：</p>
<pre><code class="language-java">ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);
TestInterface test = (TestInterface)context.getBean(&quot;test&quot;);
test.hello();
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/202009081242295.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h3 id="222-filesystemxmlapplicationcontext">2.2.2 <code>FileSystemXmlApplicationContext</code></h3>
<p>该类读取配置文件需要加上前缀：</p>
<ul>
<li><code>classpath:</code>：该前缀表示从类路径读取，对于<code>Maven</code>项目来说就是<code>resources</code></li>
<li><code>file:</code>：该前缀表示从绝对路径获取</li>
</ul>
<p>例子：</p>
<pre><code class="language-java">ApplicationContext context = new FileSystemXmlApplicationContext(&quot;classpath:applicationContext.xml&quot;);
//ApplicationContext context = new FileSystemXmlApplicationContext(&quot;file:/xxx/xxx/xxx/xxxx/xxx/applicationContext.xml&quot;);
</code></pre>
<h3 id="223-web服务器实例化">2.2.3 <code>Web</code>服务器实例化</h3>
<p>一般使用基于<code>ContextLoaderListener</code>的实现方式，修改<code>web.xml</code>，添加如下代码：</p>
<pre><code class="language-xml">&lt;context-param&gt;
    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
    &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;
    &lt;listener&gt;
        &lt;listener-class&gt;
            org.springframework.web.context.ContextLoaderListener
        &lt;/listener-class&gt;
    &lt;/listener&gt;
&lt;/context-param&gt;
</code></pre>
<h1 id="3-di的两种方法">3 <code>DI</code>的两种方法</h1>
<p><code>DI</code>通常有两种实现方式：</p>
<ul>
<li>构造方法注入</li>
<li><code>setter</code>注入</li>
</ul>
<p>下面分别来看一下。</p>
<h2 id="31-构造方法注入">3.1 构造方法注入</h2>
<p><code>Spring</code>可以利用反射机制通过构造方法完成注入，比如有以下三个类：</p>
<pre><code class="language-java">public interface TestInterface {
    void hello();
}

public class TestA implements TestInterface {
    @Override
    public void hello() {
        System.out.println(&quot;Test A&quot;);
    }
}

public class TestB {
    private TestInterface test;

    public TestB(TestInterface test)
    {
        this.test = test;
    }

    public void method()
    {
        test.hello();
    }
}
</code></pre>
<p><code>TestInterface</code>是一个简单的接口，而<code>TestA</code>实现了该接口，<code>TestB</code>需要一个<code>TestInterface</code>类型的对象，因此可以先注入一个<code>TestA</code>，再将该<code>TestA</code>注入到<code>TestB</code>的构造方法中：</p>
<pre><code class="language-xml">&lt;bean id=&quot;testA&quot; class=&quot;TestA&quot;/&gt; &lt;!--注入一个TestA对象--&gt;
&lt;bean id=&quot;testB&quot; class=&quot;TestB&quot;&gt;
	&lt;constructor-arg index=&quot;0&quot; ref=&quot;testA&quot; /&gt; &lt;!--将上面注入的TestA作为参数传入构造方法中，在传给TestB的私有成员--&gt;
&lt;/bean&gt;
</code></pre>
<p><code>constructor-arg</code>是用于定义通过构造方法的方式进行注入的标签，<code>index</code>定义位置，从<code>0</code>开始，<code>ref</code>是某个<code>Bean</code>的引用，值为该<code>Bean</code>的<code>id</code>。</p>
<h2 id="32-通过setter注入">3.2 通过<code>setter</code>注入</h2>
<p>在上面的例子中，修改<code>TestB</code>如下：</p>
<pre><code class="language-java">public class TestB {
    private TestInterface test;

    public void setTest(TestInterface test) {
        this.test = test;
    }

    public void method()
    {
        test.hello();
    }
}
</code></pre>
<p>其实就是添加了一个<code>setter</code>，接着修改配置文件：</p>
<pre><code class="language-xml">&lt;bean id=&quot;testA&quot; class=&quot;TestA&quot;/&gt;
&lt;bean id=&quot;testB&quot; class=&quot;TestB&quot;&gt;
    &lt;property name=&quot;test&quot; ref=&quot;testA&quot; /&gt;
&lt;/bean&gt;
</code></pre>
<p><code>&lt;property&gt;</code>表示通过<code>setter</code>注入，<code>name</code>是私有成员的名字，<code>ref</code>是被传入<code>setter</code>的<code>Bean</code>的<code>id</code>值。</p>
]]></content>
    </entry>
</feed>