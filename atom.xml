<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://2293736867.github.io</id>
    <title>氷泠&apos;s blog</title>
    <updated>2020-06-22T19:56:18.455Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://2293736867.github.io"/>
    <link rel="self" href="https://2293736867.github.io/atom.xml"/>
    <subtitle>我配不上你，
纵然很努力。</subtitle>
    <logo>https://2293736867.github.io/images/avatar.png</logo>
    <icon>https://2293736867.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 氷泠&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[每日分享 第5期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-5-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-5-qi/">
        </link>
        <updated>2020-06-22T19:40:02.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200623034208533.png" alt="" loading="lazy"></figure>
<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>想好了的是假象，认真的做了也没前途。</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>据估计，有5%的人类从未经历过头痛。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>潜力黄云白日曛，北风吹雁雪纷纷。<br>
——高适《别董大二首》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>隔着屏幕轻易产生感情的你，肯定很孤独吧。</p>
</blockquote>
<h1 id="每日音乐">每日音乐</h1>
<blockquote>
<p><a href="https://music.163.com/#/song?id=22677433">千本桜-黒うさP / 初音ミク</a></p>
</blockquote>
<blockquote>
<p>大胆不敵にハイカラ革命<br>
磊々落々(らいらいらくらく)<br>
反戦国<br>
日の丸印の二輪車転が<br>
悪霊退散　ICBM<br>
環状線を走り抜けて<br>
東奔西走なんのその<br>
少年少女戦国無双<br>
浮世の随(まにま)に</p>
</blockquote>
<blockquote>
<p>千本桜 夜ニ紛レ<br>
君ノ声モ届カナイヨ<br>
此処は宴 鋼の檻<br>
その断頭台で見下ろし<br>
三千世界<br>
常世之闇(とこよのやみ)<br>
嘆ク唄モ聞コエナイヨ<br>
青藍(せいらん)の空 遥か彼方<br>
その光線銃で打ち抜いて</p>
</blockquote>
<blockquote>
<p>百戦錬磨の見た目は将校<br>
いったりきたりの<br>
花魁(おいらん)道中<br>
アイツもコイツも皆で集まれ<br>
聖者の行進 わんっ つー さん しっ<br>
禅定門(ぜんじょうもん)を<br>
潜り抜けて<br>
安楽浄土厄払い<br>
きっと終幕(さいご)は大団円<br>
拍手の合間に</p>
</blockquote>
<blockquote>
<p>千本桜 夜ニ紛レ<br>
君ノ声モ届カナイヨ<br>
此処は宴 鋼の檻<br>
その断頭台で見下ろして<br>
三千世界<br>
常世之闇(とこよのやみ)<br>
嘆ク唄モ聞コエナイヨ<br>
希望の丘 遥か彼方<br>
その閃光弾を打ち上げろ</p>
</blockquote>
<blockquote>
<p>環状線を走り抜けて<br>
東奔西走なんのその<br>
少年少女戦国無双<br>
浮世の随(まにま)に</p>
</blockquote>
<blockquote>
<p>千本桜 夜ニ紛レ<br>
君ノ声モ届カナイヨ<br>
此処は宴 鋼の檻<br>
その断頭台を飛び降りて<br>
千本桜 夜ニ紛レ<br>
君が歌い僕は踊る<br>
此処は宴 鋼の檻<br>
さあ光線銃を撃ちまくれ</p>
</blockquote>
<h1 id="有关十二生肖">有关十二生肖</h1>
<p>最近看了一篇十二生肖的文章，我们知道中国传统的十二生肖分别是：</p>
<blockquote>
<p>鼠 牛 虎 兔 龙 蛇 马 羊 猴 鸡 狗 猪</p>
</blockquote>
<p>但是十二生肖并不是中国所特有，在中国周边国家甚至中国不同民族也有不同的十二生肖，有的国家是直接引进，比如日本，有的国家是变形重组，比如越南。</p>
<p>与中国十二生肖相同的有：日本、韩国、朝鲜、台湾和新加坡。<br>
在国内的一些少数民族，十二生肖会有部分不一样，比如：</p>
<blockquote>
<p>桂西彝族：龙 凤 马 蚁 人 鸡 狗 猪 雀 牛 虎 蛇<br>
哀牢山彝族：虎 兔 穿山甲 蛇 马 羊 猴 鸡 狗 猪 鼠 牛<br>
川滇黔彝族：鼠 牛 虎 兔 龙 蛇 马 羊 猴 鸡 狗 猪<br>
海南黎族：鸡 狗 猪 鼠 牛 虫 兔 龙 蛇 马 羊 猴</p>
</blockquote>
<p>而在越南中，兔改成了猫（以后可以说十二生肖中有猫了哈哈），由兔子变成猫有三种说法：</p>
<blockquote>
<p>一是越南当时没有兔子，用猫代替。<br>
二是比起兔子越南人更喜欢猫，并且猫在越南有“小虎”之称。<br>
三是当初十二生肖传入越南时，当地人把原本的“卯兔年”误读成“猫”，于是沿用至今。</p>
</blockquote>
<p>泰国，生肖从蛇开始，而龙变成了“那伽”。</p>
<blockquote>
<p>古埃及则是：牝（pin）牛 山羊 狮子 驴 蟹 蛇 犬 猫 鳄 红鹤 猿 秃鹰</p>
</blockquote>
<blockquote>
<p>美国原住民则是：狼 隼（sun） 海狸 鹿 啄木鸟 鲑鱼 熊 乌鸦 蛇 猫头鹰 鹅 水獭 （ta）</p>
</blockquote>
<blockquote>
<p>但是对于古代欧洲的凯尔特人，他们依照月亮的周期将一年分为13月，每一个月都有代表的动物和守护树，代表的13种动物为：鹿 猫 牛 马 蝴蝶 蛇 海马 鱼 狼 狐狸 鹪鹩（jiao liao） 天鹅 隼</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第4期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-4-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-4-qi/">
        </link>
        <updated>2020-06-22T01:42:11.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200623034814769.png" alt="" loading="lazy"></figure>
<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>长得好看的才叫吃货，长得不好看的那叫饭桶。</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>欧洲最矮的国家是马耳他。马耳他人的平均身高为164.9cm（约65英寸），而欧盟的平均身高为169.6cm（约67英寸）。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>凉风吹夜雨，萧瑟动寒林。<br>
——张说《幽州夜饮》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>如果温柔是罪，那就只能用拳头来洗清我们犯下的罪孽。<br>
——镇魂街</p>
</blockquote>
<h1 id="每日音乐">每日音乐</h1>
<blockquote>
<p><a href="https://music.163.com/#/song?id=439121233">Dancin-Aaron Smith/Luvli/Krono</a></p>
</blockquote>
<blockquote>
<p>Get up on the floor<br>
Dancin' all night long<br>
Get up on the floor<br>
Dancin' till the break of dawn<br>
Get up on the floor<br>
Dancin' till the break of dawn<br>
Get up on the floor<br>
Dancin'</p>
</blockquote>
<blockquote>
<p>All the time<br>
My baby you on my mind<br>
And I don't know why<br>
Yeah but the feeling is find<br>
Can't you see<br>
Yo' honey you are for me oh<br>
It were meant to be<br>
Dancin' in the moonlight<br>
Gazing at the stars so bright<br>
Holding you until the sunrise<br>
Sleeping unti the midnight</p>
</blockquote>
<blockquote>
<p>Get up on the floor<br>
Dancin's all night floor<br>
Get up on the floor<br>
Dancin till the break of dawn<br>
Get up on the floor<br>
Dancin' till the break of dawn<br>
Get up on the floor<br>
Dancin'</p>
</blockquote>
<blockquote>
<p>Dancin' is what to do<br>
Dancin' is what I think of you<br>
Dancin' is what makes me whole<br>
Dancin' is what to do<br>
Dancin' when I think of you<br>
Dancin' is what clears my soul<br>
Dancin' is what makes me whole<br>
Everytime when I look in your eyes<br>
That smile was crying that you were mine<br>
Do you know, your love is true I know<br>
You are the best thing that has happened to me</p>
</blockquote>
<blockquote>
<p>Get up on the floor<br>
Dancin' all night long<br>
Get up on the floor<br>
Dancin' till the break of dawn<br>
Get up on the floor<br>
Dancin' till the break of dawn<br>
Get up on the floor<br>
Dancin'</p>
</blockquote>
<blockquote>
<p>Dancin' is what to do<br>
Dancin' when I thik of you<br>
Dancin' is what clears my soul<br>
Dancin' is what to do<br>
Dancin' when I think of you<br>
Dancin' is what clears my soul<br>
Dancin' is what makes me whole</p>
</blockquote>
<blockquote>
<p>Get up on the floor<br>
Dancin' till the break of dawn<br>
Get up on the floor<br>
Dancin' till the break of dawn<br>
Get up on the floor<br>
Dancin'(oh)<br>
Get up on the floor<br>
Dancin' all night long<br>
Get up on the floor<br>
Dancin' till the break of dawn<br>
Get up on the floor</p>
</blockquote>
<blockquote>
<p>Dancin'(oh)<br>
Dancin' is what to do<br>
Dancin' when I think of you<br>
Dancin' is what clears my soul<br>
Dancin' what to do<br>
Dancin' when I think of yo<br>
Dancin' is what clears my soul<br>
Dancin' is what to do<br>
Dancin' when I think of you<br>
Dancin' is what clears my soul<br>
Dancin' is what makes me whole<br>
Dancin' what to do<br>
Dancin' when I think of you<br>
Dancin' is what clears my soul<br>
Dancin' is what makes me whole</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第3期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-3-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-3-qi/">
        </link>
        <updated>2020-06-20T18:00:24.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://img2020.cnblogs.com/blog/2008963/202006/2008963-20200621015932609-1177793518.png" alt="" loading="lazy"></figure>
<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>我的脑袋不是空的。我是要大有作为的人，只是混沌初开。</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>在日本直到2015年时，人们在过了零点以后跳舞还是非法行为。这条法律是在1948年开始实施的，为的是打击一些为非法活动作掩护的餐厅，到了2015年这条法律才废除。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>接天莲叶无穷碧，映日荷花别样红。<br>
——杨万里《晓出净慈寺送林子方》</p>
</blockquote>
<h1 id="每日音乐">每日音乐</h1>
<blockquote>
<p><a href="https://music.163.com/#/song?id=28661853">我配不上你-夏天Alex</a></p>
</blockquote>
<blockquote>
<p>你完全可以找个更好的知己<br>
不一定和我这样子如此亲密<br>
害怕有一天自己 真的就离不开你<br>
距离让我们怎么靠近<br>
我知道自己和你有很大差距<br>
爱情却让我再一次身不由己<br>
受过伤的人怀疑 尽管这来之不易<br>
拼命的争取不如放弃</p>
</blockquote>
<blockquote>
<p>我配不上你 纵然很努力<br>
我喜欢你 心里却没底<br>
我没有歇斯底里 我只是望尘莫及<br>
就像买不起心爱的衬衣<br>
我还在原地 你飞上天际<br>
我喜欢你 想一想而已<br>
总是说后会有期 有天会在一起<br>
只是在一起的两个人<br>
不是我和你</p>
</blockquote>
<figure data-type="image" tabindex="2"><img src="https://img2020.cnblogs.com/blog/2008963/202006/2008963-20200620180745405-735410624.png" alt="" loading="lazy"></figure>
<blockquote>
<p>你完全可以找个更好的知己<br>
不一定和我这样子如此亲密<br>
害怕有一天自己真的就离不开你<br>
距离让我们怎么靠近<br>
我知道自己和你有很大差距<br>
爱情却让我再一次身不由己<br>
受过伤的人怀疑 尽管尽管这来之不易<br>
拼命的争取不如放弃</p>
</blockquote>
<blockquote>
<p>我配不上你 纵然很努力<br>
我喜欢你 心里却没底<br>
我没有歇斯底里 我只是望尘莫及<br>
就像买不起心爱的衬衣<br>
我还在原地 你飞上天际<br>
我喜欢你 想一想而已<br>
总是说后会有期<br>
有天会在一起<br>
只是在一起的两个人<br>
不是我和你</p>
</blockquote>
<figure data-type="image" tabindex="3"><img src="https://img2020.cnblogs.com/blog/2008963/202006/2008963-20200620180757816-1790799237.png" alt="" loading="lazy"></figure>
<blockquote>
<p>我配不上你 纵然很努力<br>
我喜欢你 心里却没底<br>
我没有歇斯底里 我只是望尘莫及<br>
就像买不起心爱的衬衣<br>
我还在原地 你飞上天际<br>
我喜欢你 想一想而已<br>
总是说后会有期 有天会在一起<br>
只是在一起的两个人<br>
不是我和你</p>
</blockquote>
<figure data-type="image" tabindex="4"><img src="https://img2020.cnblogs.com/blog/2008963/202006/2008963-20200620180751050-2107348189.png" alt="" loading="lazy"></figure>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>温柔正确的人总是难以生存，因为这个世界既不温柔，也不正确<br>
——我的青春恋爱物语果然有问题</p>
</blockquote>
<h1 id="有关重温火影">有关重温火影</h1>
<p>最近重温了火影的一些经典，包括白与再不斩，佐助VS鼬，佐助VS卡卡西，当然还有最后的鸣左封印辉夜，要不是疫情的原因估计我也不会去看。<br>
不过说真的感觉自己的青春就这么过去了还是有点不甘啊，720集也就是最后一集无数人留名以及表白，感觉自己的青春也就这么没了啊。。。。</p>
<figure data-type="image" tabindex="5"><img src="https://img2020.cnblogs.com/blog/2008963/202006/2008963-20200620175841465-696434200.png" alt="" loading="lazy"></figure>
<p>来说说鼬神吧，背负整个村子的骂名，杀光一整族的人，只是为了弟弟。真的是宠弟狂魔，临死前也有给佐助上个天照就是为了不与带土见面。个人觉得鼬是真的厉害，智商爆棚，可惜到了358集就死了，唉，真是可惜了，虽然后面秽土转生给复活了。</p>
<figure data-type="image" tabindex="6"><img src="https://img2020.cnblogs.com/blog/2008963/202006/2008963-20200620175818060-706163986.png" alt="" loading="lazy"></figure>
<p>不过打佐助的时候还是放了点水的，虽然很多弹幕说“放了海”“鬼鲛的大坝都要塌了不要放海了”，一开始的月读虽然动漫里面说是佐助解的，但是感觉是鼬自己解开的，也需要做点戏给观战的绝看看，到后面豪火球对决的时候，加上了天照，吞噬佐助的火球的同时还把翅膀给烧了，但是主动熄灭了。。。这确实是放水了。佐助放麒麟被鼬的须佐抵挡后，用十拳剑封印了佐助体内的大蛇丸，为什么当时就不一刀下去把佐助给杀了？（当然这样的话可能就全剧终了岸本也不会这样做的不过也可以劈一下啊，确实放水了）</p>
<figure data-type="image" tabindex="7"><img src="https://img2020.cnblogs.com/blog/2008963/202006/2008963-20200620175854505-954165188.png" alt="" loading="lazy"></figure>
<p>最后虽然是鼬死了但是感觉是鼬自己用万花筒过度加上自身的病死的，说真的要不是鼬放水佐助应该打不过，即使鼬死后场地旁边还留有天照，还把封印大蛇丸时逃出来的那一条小白蛇给烧了，确实是保护佐助到家了。</p>
<figure data-type="image" tabindex="8"><img src="https://img2020.cnblogs.com/blog/2008963/202006/2008963-20200620175759748-1880087122.png" alt="" loading="lazy"></figure>
<p>鼬应该给个火影做啊，这人设确实有点惨。<br>
就这样吧，反正我的青春也完结了2333333。。。。</p>
<p>虽然还有博人传，但是怎么也看不惯，毕竟画风不一样，当然这也不奇怪，毕竟不是岸本画的，是池本画的。感觉里面的鸣人还有佐助被削了很多，鸣人动不动就暴仙人九尾，螺旋手里剑都看不见了，不是一般先搞一下体术，然后分身，再仙人之类的吗？？？？<br>
还有佐助虽然单手了，豪火球都不怎么用，轮回眼说闪就闪，须佐一用就最厉害的那个，不是要仇恨吗？？？还记得以前是怎么打迪达拉，打团藏的吗？</p>
<p>不过也无可厚非了，毕竟博人的丸子会隐身，而且觉得65集，也就是国人黄成希导演的那一集，是做的不错的。虽然博人出场扔了两个丸子，一个是基本没什么伤害的但是救了众人的，一个是父子合力的。。。大的夸张的丸子，直接把桃式给秒了，还留下什么狠化“一个打败神的人是注定做不回凡人的”。不过这集确实看的过瘾，佐助和鸣人的配合着实高燃。</p>
<figure data-type="image" tabindex="9"><img src="https://img2020.cnblogs.com/blog/2008963/202006/2008963-20200620175956579-1013118963.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第2期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-2-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-2-qi/">
        </link>
        <updated>2020-06-20T05:58:35.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://img2020.cnblogs.com/blog/2008963/202006/2008963-20200620135827815-1047854143.png" alt="" loading="lazy"></figure>
<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>不明白你们遇到好事，为什么要掐腿揉眼睛，真醒了怎么办？</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>尽管可可豆已经被食用了数千年之久，但知道19世纪40年代人类才产生出第一块固体巧克力棒。以前可可豆都以粉末或饮料形式被食用。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>荷叶罗裙一色裁，芙蓉向脸两边开。<br>
——王昌龄《采莲曲》</p>
</blockquote>
<h1 id="每日音乐">每日音乐</h1>
<blockquote>
<p><a href="https://music.163.com/#/song?id=204435">分手假期-钟洁/Hojo</a></p>
</blockquote>
<figure data-type="image" tabindex="2"><img src="https://img2020.cnblogs.com/blog/2008963/202006/2008963-20200620135723335-645357184.png" alt="" loading="lazy"></figure>
<blockquote>
<p>原来分手也有假期<br>
想要回去<br>
才发现我无法面对你<br>
曾经对爱的憧憬<br>
拼了命去爱你<br>
而最后 只剩下回忆</p>
</blockquote>
<blockquote>
<p>删掉你短信 怪我不争气<br>
失落的情绪 就让你离去<br>
别犹豫 你还在我回忆<br>
别伤心 没什么了不起<br>
也许是我还不懂爱情<br>
还是我不够年龄<br>
太多的心事说给谁听<br>
你听我后悔的声音<br>
你听 我爱上你的原因</p>
</blockquote>
<blockquote>
<p>Oh Baby<br>
还记得第一次邂逅的场景<br>
我被你的眼睛吸引 我动心<br>
不想在犹豫 慢慢向你靠近<br>
风吹散你香气 深深的为你着迷<br>
爱上你 我难以抽离<br>
怪我的坏脾气 你才会狠下心<br>
眼看着我陷入谷底<br>
我该怎么才能挽回你</p>
</blockquote>
<blockquote>
<p>原来分手也有假期<br>
想要回去<br>
才发现我无法面对你<br>
曾经对爱的憧憬<br>
拼了命去爱你<br>
而最后 只剩下回忆<br>
原来分手还会想你<br>
保持清醒<br>
只是我再也不会爱你<br>
喜欢孤单的旅行<br>
在陌生的城市<br>
仿佛看到熟悉的背影</p>
</blockquote>
<blockquote>
<p>短暂的分离 出国散散心<br>
陌生国度里 还是想起你<br>
在餐厅 听浪漫进行曲<br>
烛光里 欣赏窗外美景<br>
我渴望一段新的恋情<br>
能代替过去的爱情<br>
爱像突如其来的大雨<br>
你听 我悲泣的声音<br>
你听 我离开你的原因</p>
</blockquote>
<blockquote>
<p>Oh Baby<br>
还记得第一次邂逅的默契<br>
时间缠绵滴答滴答 走下去<br>
相处之后发现勉强在一起<br>
让你受尽委屈 所以才会答应你<br>
爱上你 我深信不疑<br>
渴望幸福甜蜜 可惜我太花心<br>
眼看着你为我痛心<br>
最后只能默默的离开你</p>
</blockquote>
<blockquote>
<p>原来分手也有假期<br>
想要回去<br>
才发现我无法面对你<br>
曾经对爱的憧憬<br>
拼了命去爱你<br>
而最后 只剩下回忆<br>
原来分手还会想你<br>
保持清醒<br>
只是我再也不会爱你<br>
喜欢孤单的旅行<br>
在陌生的城市<br>
仿佛看到熟悉的背影<br>
我的脚步怎么会犹豫<br>
不敢相信那个人是你</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享  第1期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-1-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-1-qi/">
        </link>
        <updated>2020-06-19T06:59:08.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日壁纸">每日壁纸</h1>
<figure data-type="image" tabindex="1"><img src="https://img2020.cnblogs.com/blog/2008963/202006/2008963-20200619113902854-1484933044.png" alt="" loading="lazy"></figure>
<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>我要没点自我安慰的本事，还真活不到现在。</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>为了感谢约翰·韦恩（美国西部片演员）对将巴拿马运河的控制权归还给巴拿马的支持，巴拿马当局在巴拿马海岸附近授予了他一座以其名字命名的岛屿。</p>
</blockquote>
<h1 id="奇怪的网站">奇怪的网站</h1>
<p>最近在github上看到的：</p>
<blockquote>
<p><a href="https://github.com/CNwoman-bot/evil-man">Evil Man - 中国男性之恶</a></p>
</blockquote>
<figure data-type="image" tabindex="2"><img src="https://img2020.cnblogs.com/blog/2008963/202006/2008963-20200619120118771-1113081546.png" alt="" loading="lazy"></figure>
<h1 id="每日音乐">每日音乐</h1>
<blockquote>
<p><a href="https://music.163.com/#/song?id=1358035181">落霜-花粥</a></p>
</blockquote>
<figure data-type="image" tabindex="3"><img src="https://img2020.cnblogs.com/blog/2008963/202006/2008963-20200619144718471-60616751.png" alt="" loading="lazy"></figure>
<blockquote>
<p>一眼望穿 千年是非<br>
难判谁人错与对<br>
两相无言 各自慌乱<br>
不提何处惹尘埃<br>
三生有幸 我至死不渝<br>
陪你一生何俱<br>
四海飘零 你声明狼藉<br>
相思不过一场戏</p>
</blockquote>
<figure data-type="image" tabindex="4"><img src="https://img2020.cnblogs.com/blog/2008963/202006/2008963-20200619145148467-1839808462.png" alt="" loading="lazy"></figure>
<blockquote>
<p>啊 夜微凉 梦一场<br>
无人在意满地霜<br>
啊 细思量 你在旁<br>
月落他乡心事忙<br>
啊 琴悠扬 醉斜阳<br>
回望路皆是荒凉<br>
啊 醉痴狂 世无双<br>
别时最怕断离肠</p>
</blockquote>
<figure data-type="image" tabindex="5"><img src="https://img2020.cnblogs.com/blog/2008963/202006/2008963-20200619145159916-1985501118.png" alt="" loading="lazy"></figure>
<blockquote>
<p>九泉之约 十年大业<br>
心如磐石肝似铁<br>
万语千言 百口莫辩<br>
情至深时惹人怨</p>
</blockquote>
<blockquote>
<p>啊 夜微凉 梦一场<br>
无人在意满地霜<br>
啊 细思量 你在旁<br>
月落他乡心事忙<br>
啊 琴悠扬 醉斜阳<br>
回望路皆是荒凉<br>
啊 醉痴狂 世无双<br>
别时最怕断离肠</p>
</blockquote>
<figure data-type="image" tabindex="6"><img src="https://img2020.cnblogs.com/blog/2008963/202006/2008963-20200619145505384-502438515.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于每日分享]]></title>
        <id>https://2293736867.github.io/post/guan-yu-mei-ri-fen-xiang/</id>
        <link href="https://2293736867.github.io/post/guan-yu-mei-ri-fen-xiang/">
        </link>
        <updated>2020-06-19T06:58:01.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-为什么要做每日分享">1 为什么要做每日分享</h1>
<p>最近疫情肆虐，“大举进攻”各个国家。<br>
先贴一张于2020.06.19截取的疫情数据图：</p>
<figure data-type="image" tabindex="1"><img src="https://img2020.cnblogs.com/blog/2008963/202006/2008963-20200619112752400-1116068559.png" alt="" loading="lazy"></figure>
<p>目前全球累计确诊已超824万。</p>
<p>其实作为一个普通的程序猿，能帮的也极为有限，虽然宅家的时间长了，但是感觉总是不在状态。</p>
<p>人总要做点什么来对抗一下这该死的生活，就像村上春树里面的《当你跑步时，你在想什么》一样。</p>
<p>所以，这是每日分享的缘由。</p>
<p>即使没有什么人看，笔者也不在乎。</p>
<p>只是，想单纯的做下去。</p>
<h1 id="2-分享的是什么">2 分享的是什么</h1>
<p>音乐啊，壁纸啊，句子，电影以及一些冷知识之类的。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[单个java文件打成可执行jar包]]></title>
        <id>https://2293736867.github.io/post/dan-ge-java-wen-jian-da-cheng-ke-zhi-xing-jar-bao/</id>
        <link href="https://2293736867.github.io/post/dan-ge-java-wen-jian-da-cheng-ke-zhi-xing-jar-bao/">
        </link>
        <updated>2020-06-15T18:01:55.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-概述">1 概述</h1>
<p>使用JDK自带的jar与java将单个java文件打成可执行jar包并运行。<br>
当然也可以使用IDE完成，使用Maven只需要一个简单的package，但是单个文件嘛，没必要这么“凶狠”。</p>
<h1 id="2-新建测试文件">2 新建测试文件</h1>
<p>著名的Hello World：</p>
<pre><code class="language-java">public class Main
{
	public static void main(String [] args)
	{
		System.out.println(&quot;Hello world.&quot;);
	}
}
</code></pre>
<h1 id="3-编译">3 编译</h1>
<p>生成jar包需要class文件，换句话说需要先编译，建议先创建一个临时文件夹存放class文件。</p>
<pre><code class="language-java">mkdir test &amp;&amp; mv Main.java test &amp;&amp; cd test;
javac Main.java
</code></pre>
<h1 id="4-打包">4 打包</h1>
<pre><code class="language-java">jar --create --verbose --file Main.jar --main-class Main *.class
</code></pre>
<p>说明一下各个参数：</p>
<ul>
<li><code>--create</code>：创建jar</li>
<li><code>--verbose</code>：打包时产生输出</li>
<li><code>--file</code>：打包的jar文件名</li>
<li><code>--main-class</code>：指定入口类</li>
<li><code>*.class</code>：打包所有的class文件，这里可以接受的参数可以是<code>*</code>，表示打包该目录下所有文件，也可以是目录名，打包指定目录下的所有文件</li>
</ul>
<p>这里使用默认的包，若是自定义包，使用</p>
<pre><code class="language-bash">--main-class com.xxx.xxx.Main
</code></pre>
<p>即可。</p>
<p>注意打包时网上有的教程使用简写：</p>
<pre><code class="language-java">jar -cvf Main.jar *.class
</code></pre>
<p>这样确实是能打包，但是直接运行的时候会提示：</p>
<pre><code class="language-bash">no main manifest attribute, in Main.jar
</code></pre>
<p>可以加上<code>--main-class</code>参数或者直接更新打包后里面的<code>MANIFEST.mf</code>文件，加上：</p>
<pre><code class="language-bash">Main-Class: Main
</code></pre>
<p>当然还是建议使用上述的方法一步打包到位。</p>
<h1 id="5-运行">5 运行</h1>
<pre><code class="language-java">java -jar Main.jar
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[一次使用IDEA中HTTP Client的经历]]></title>
        <id>https://2293736867.github.io/post/yi-ci-shi-yong-idea-zhong-http-client-de-jing-li/</id>
        <link href="https://2293736867.github.io/post/yi-ci-shi-yong-idea-zhong-http-client-de-jing-li/">
        </link>
        <updated>2020-06-12T14:00:59.000Z</updated>
        <content type="html"><![CDATA[<p><s>说好六月停更的。。。。</s><br>
<s>害。。。</s></p>
<h1 id="1-开端">1 开端</h1>
<p>HTTP Client是IDEA中自带的一个插件，用于代替原来的REST Client，打开<code>Tools-&gt;HTTP Client-&gt;Test RESTful Web Service</code>，会提示REST Client不推荐使用，推荐使用HTTP Client：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200612212834462.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>然后当然就点击使用啊，但是，问题来了，一个普通的GET请求都发送不出去？？？？</p>
<p><img src="https://img-blog.csdnimg.cn/20200612213023340.png" alt="在这里插入图片描述" loading="lazy"><br>
IDEA的东西估计没这么菜吧？？？</p>
<p>肯定不会这么菜的。。。</p>
<p>但是为什么就是发不出去？？？</p>
<h1 id="2-尝试">2 尝试</h1>
<p>GET请求对吧，浏览器也可以做，于是，使用了浏览器进行测试，一点问题都没有：</p>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/2020061221324552.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>没理由啊，笔者在想，那为什么IDEA不行呢？？</p>
<p>接着使用了大名鼎鼎的Postman，也是一点问题也没有：</p>
<p><img src="https://img-blog.csdnimg.cn/20200612213409109.png" alt="在这里插入图片描述" loading="lazy"><br>
Postman也没问题啊，接着试试“情敌”Postwoman，问题来了！</p>
<p>发送不出去，查看了一下F12控制台，报错如下：<br>
<img src="https://img-blog.csdnimg.cn/2020061221413586.png" alt="在这里插入图片描述" loading="lazy"><br>
搜索了一下解决办法，是跨域资源请求的问题，在Controller类上加上</p>
<pre><code class="language-java">@CrossOrigin(value = &quot;http://localhost:3000&quot;)
</code></pre>
<p>即可，因为Postwoman默认运行的端口为3000。</p>
<p>这个注解还可以作用在方法上，起作用的就是对应的方法，这里是对整个Controller起作用。</p>
<p>另外这里只使用了最简单的参数，其他的参数还有<code>origins</code>（同<code>value</code>），<code>allowHeaders</code>，<code>exposedHeaders</code>，<code>methods</code>，<code>allowCredentials</code>，<code>maxAge</code>，具体使用不介绍，加上了以后Postwoman就能正常发送请求了：</p>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20200612214301201.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="3-再次尝试">3 再次尝试</h1>
<p>但是IDEA中的HTTP Client还是不行啊，就最最最普通的GET请求，还是返回500：</p>
<p><img src="https://img-blog.csdnimg.cn/20200612214433478.png" alt="在这里插入图片描述" loading="lazy"><br>
于是换了一种思路，想再用其他类似插件的方式测试。</p>
<p>所以就想到了VScode，里面有一个类似的扩展叫REST Client，安装以后写了一个普通的GET请求，完全没问题：</p>
<p><img src="https://img-blog.csdnimg.cn/20200612214557968.png" alt="在这里插入图片描述" loading="lazy"><br>
但还是想不到为什么IDEA还是不行啊？？？</p>
<p>还是500 。。。</p>
<p>。。。</p>
<p>但是，反过来想，可能是请求发送不出去，因为如果是接受到了请求的话，肯定会有日志记录的，但是没有，所以原因可能是请求发送不出去。。。</p>
<h1 id="4-最终答案">4 最终答案</h1>
<p>一个普通的GET请求为什么发送不出去？</p>
<p>到底是为什么会返回500？</p>
<p>最后，经过一番痛苦的思考，找到了问题所在：代理！</p>
<p><img src="https://img-blog.csdnimg.cn/2020061221491977.png?" alt="在这里插入图片描述" loading="lazy"><br>
发送不出去就是因为设置了本地代理，返回的500，是代理服务器返回的，不是Tomcat返回的。</p>
<p>终于，把代理去掉之后，HTTP Client就可以正常使用了：<br>
<img src="https://img-blog.csdnimg.cn/20200612215103984.png" alt="在这里插入图片描述" loading="lazy"><br>
没错，“真凶”就是代理。</p>
<p>最后终于打消了笔者的误解，为什么IDEA中的HTTP Client会这么“菜”，连一个普通的GET请求也发送不出去？？</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Tomcat9配置HTTP/2]]></title>
        <id>https://2293736867.github.io/post/tomcat9-pei-zhi-http2/</id>
        <link href="https://2293736867.github.io/post/tomcat9-pei-zhi-http2/">
        </link>
        <updated>2020-06-08T07:30:17.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#1-%E6%A6%82%E8%BF%B0">1 概述</a></li>
<li><a href="#2-http2%E7%89%B9%E6%80%A7">2 HTTP/2特性</a>
<ul>
<li><a href="#21-%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E5%B8%A7">2.1 二进制分帧</a></li>
<li><a href="#22-%E5%8E%8B%E7%BC%A9%E5%A4%B4%E9%83%A8">2.2 压缩头部</a></li>
<li><a href="#23-%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8">2.3 多路复用</a></li>
<li><a href="#24-%E6%B5%81%E4%BC%98%E5%85%88%E5%8F%8A%E6%B5%81%E6%8E%A7%E5%88%B6">2.4 流优先及流控制</a></li>
<li><a href="#25-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8E%A8%E9%80%81">2.5 服务器推送</a></li>
<li><a href="#26-%E5%BA%94%E7%94%A8%E5%B1%82%E5%8D%8F%E5%95%86%E5%8D%8F%E8%AE%AE">2.6 应用层协商协议</a></li>
</ul>
</li>
<li><a href="#3-%E4%BD%BF%E7%94%A8mkcert%E7%94%9F%E6%88%90%E8%AF%81%E4%B9%A6">3 使用mkcert生成证书</a>
<ul>
<li><a href="#31-%E5%AE%89%E8%A3%85mkcert">3.1 安装mkcert</a>
<ul>
<li><a href="#311-macos">3.1.1 MacOS</a></li>
<li><a href="#312-linux">3.1.2 Linux</a></li>
<li><a href="#313-windows">3.1.3 Windows</a></li>
</ul>
</li>
<li><a href="#32-%E7%94%9F%E6%88%90%E8%AF%81%E4%B9%A6">3.2 生成证书</a>
<ul>
<li><a href="#321-%E5%AE%89%E8%A3%85%E6%9C%AC%E5%9C%B0ca%E8%AF%81%E4%B9%A6">3.2.1 安装本地CA证书</a></li>
<li><a href="#322-%E5%88%A9%E7%94%A8ca%E8%AF%81%E4%B9%A6%E7%AD%BE%E5%8F%91%E6%9C%AC%E5%9C%B0%E8%AF%81%E4%B9%A6">3.2.2 利用CA证书签发本地证书</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#4-%E9%85%8D%E7%BD%AEtomcat">4 配置Tomcat</a>
<ul>
<li><a href="#41-%E4%BD%BF%E7%94%A8nio">4.1 使用Nio</a></li>
<li><a href="#42-%E4%BD%BF%E7%94%A8apr">4.2 使用APR</a></li>
</ul>
</li>
</ul>
</p>
<h1 id="1-概述">1 概述</h1>
<p>Tomcat从Tomcat8的一些较新版本就支持HTTP/2了，Tomcat9直接支持，本文首先讲述了相关HTTP/2的特性，接着利用一个简单的开源工具mkcert生成证书并利用该证书配置HTTP/2。</p>
<h1 id="2-http2特性">2 HTTP/2特性</h1>
<p>首先介绍一下HTTP/2特性，这也从另一方面解释了为什么需要使用HTTP/2。</p>
<h2 id="21-二进制分帧">2.1 二进制分帧</h2>
<p>HTTP/2在应用层与传输层增加了一个二进制分帧，能够达到“在不改动HTTP语义，HTTP方法，状态码，URI及首部字段的情况下，突破HTTP/1.1的性能限制，改进传输性能，实现低延迟和高吞吐量。”</p>
<h2 id="22-压缩头部">2.2 压缩头部</h2>
<p>HTTP/2对消息头采用了HPACK进行压缩传输，能够节省消息头占用的网络流量，而HTTP/1.x每次请求都会携带大量的冗余头信息，浪费了很多带宽资源。</p>
<h2 id="23-多路复用">2.3 多路复用</h2>
<p>简单地说就是所有的请求都通过一个TCP连接并发完成。HTTP/1.x虽然能利用一个连接完成多次请求，但是多个请求之间是有先后顺序的，后面发送的请求必须等待上一个请求返回才能发送响应，很容易导致后面的请求被阻塞。而HTTP/2做到了真正的并发请求。<br>
HTTP/2将消息分解为帧，为每帧分配一个流标识符，然后在一个TCP连接上独立发送，HTTP/2将请求帧与响应帧交织在一起，能够让所有请求与响应都在一个套接字上发生，所有请求或响应都无法相互阻塞，减少了延迟，提高了页面加载速度，消除了对HTTP/1.1工具的需求。</p>
<h2 id="24-流优先及流控制">2.4 流优先及流控制</h2>
<p>消息帧通过对流进行发送，每个流分配了一个优先级，用于确定处理顺序以及收到的资源量，优先级可以是0-256之间的数字，可以定义依赖关系，允许在一个资源之前加载另一个资源。<br>
流控制管理数据的传输，允许接收者停止或减少发送的数据量，比如观看视频暂停时，客户端会通知服务器停止发送视频数据。</p>
<h2 id="25-服务器推送">2.5 服务器推送</h2>
<p>一般情况下需要客户端请求服务器才会响应，HTTP/2中能够先于客户端检测将要请求的资源，提前通知客户端，但是不发送资源只发送URL，客户端收到后会进行验证缓存，发现需要则正式发起请求。</p>
<h2 id="26-应用层协商协议">2.6 应用层协商协议</h2>
<p>客户端与服务器都升级才能支持HTTP/2，但是有可能存在HTTP/1与HTTP/2并存的情况，如果都使用80端口，需要选择其中一个协议通信。<br>
APLN（Application Layer Protocol Negotiation）就是为了解决这个问题，通过协商选择协议：</p>
<ul>
<li>首先客户端发起请求，如果支持HTTP/2则带upgrade头部</li>
<li>若服务器不支持则拒绝升级通过HTTP/1.1返回响应</li>
<li>若服务器支持则接受升级，切换到新分帧使用HTTP/2通信</li>
</ul>
<p>更多请查看<a href="https://httpwg.org/specs/rfc7540.html">RFC7540 官方文档</a>。</p>
<h1 id="3-使用mkcert生成证书">3 使用mkcert生成证书</h1>
<p>网上大部分的教程都是使用OpenSSL生成根证书，客户端证书以及服务端证书的，一堆参数配置非常复杂，因此这里使用一个简单的一键生成本地证书的开源工具<a href="https://github.com/FiloSottile/mkcert">mkcert</a>，无需任何配置。</p>
<h2 id="31-安装mkcert">3.1 安装mkcert</h2>
<h3 id="311-macos">3.1.1 MacOS</h3>
<pre><code class="language-bash">brew install mkcert
brew install nss # 如果使用火狐
</code></pre>
<p>使用MacPorts：</p>
<pre><code class="language-bash">sudo port selftupdate
sudo port install mkcert
sudo port install css # 如果使用火狐
</code></pre>
<h3 id="312-linux">3.1.2 Linux</h3>
<p>需要先安装<code>certutil</code>：</p>
<pre><code class="language-bash">#Debian/Ubuntu
sudo apt install libnss3-tools
#Red Hat/Fedora/CentOS
sudo yum install nss-tools
#Arch/Manjaro
sudo pacman -S nss
#SUSE
sudo zypper install mozilla-nss-tools
</code></pre>
<p>使用<code>LinuxBrew</code>安装：</p>
<pre><code class="language-bash">brew install mkcert
</code></pre>
<p>安装<a href="https://docs.brew.sh/Homebrew-on-Linux">LinuxBrew</a>：</p>
<pre><code class="language-bash">/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&quot;
</code></pre>
<p>Arch/Manjaro可以使用pacman安装：</p>
<pre><code class="language-bash">sudo pacman -Syu mkcert
</code></pre>
<p>或者从源码安装（需要go环境）：</p>
<pre><code class="language-bash">git clone https://github.com/FiloSottile/mkcert &amp;&amp; cd mkcert
go build -ldflags &quot;-X main.Version=$(git describe --tags)&quot;
</code></pre>
<p>或者使用<a href="https://github.com/FiloSottile/mkcert/releases">已构建好的版本</a>。</p>
<h3 id="313-windows">3.1.3 Windows</h3>
<p>安装Chocolatey（以管理员运行PowerShell）：</p>
<pre><code class="language-bash">Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
</code></pre>
<p>或安装Scoop（管理员PowerShell）：</p>
<pre><code class="language-bash">Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
# 或
iwr -useb get.scoop.sh | iex
</code></pre>
<p>使用Chocolatey或Scoop安装：</p>
<pre><code class="language-bash">choco install mkcert
#或
scoop bucket add extras
scoop install mkcert
</code></pre>
<p>或者使用<a href="https://github.com/FiloSottile/mkcert/releases">已构建好的版本</a>。</p>
<h2 id="32-生成证书">3.2 生成证书</h2>
<p>mkcert的命令非常简单，可以使用<code>--help</code>查看帮助：</p>
<pre><code class="language-bash">mkcert --help
</code></pre>
<h3 id="321-安装本地ca证书">3.2.1 安装本地CA证书</h3>
<pre><code class="language-bash">mkcert -install
</code></pre>
<p>默认会在<code>~/.local/share/mkcert</code>生成CA证书。</p>
<h3 id="322-利用ca证书签发本地证书">3.2.2 利用CA证书签发本地证书</h3>
<pre><code class="language-bash">mkcert localhost
</code></pre>
<p>其中localhost表示签发本地证书，可以换成<code>example.com</code>，<code>*.example.com</code>，<code>example.test</code>，<code>127.0.0.1</code>，<code>::1</code>之类的域名或者ip。<br>
执行后会在当前文件夹下生成<code>localhost-key.pem</code>与<code>localhost.pem</code>，前者是私钥，后者是证书。</p>
<h1 id="4-配置tomcat">4 配置Tomcat</h1>
<p>Tomcat可以通过两种方式配置HTTP/2，一种是自带的Nio方式，另一种是使用额外库APR，APR-util与TC-Native的方式。</p>
<h2 id="41-使用nio">4.1 使用Nio</h2>
<p>通过Nio配置HTTP/2需要结合OpenSSL与keytool将证书转换为<code>pkcs#12</code>再转换为<code>jks</code>：</p>
<pre><code class="language-bash">openssl pkcs12 -export -inkey localhost-key.pem -in localhost.pem -out localhost.p12
</code></pre>
<p>会提示输入导出密码，需要记住，转换成<code>jks</code>时需要用到。<br>
<img src="https://img-blog.csdnimg.cn/20200608144240906.png" alt="在这里插入图片描述" loading="lazy"><br>
接着转换为<code>jks</code>：</p>
<pre><code class="language-bash">keytool -importkeystore -srckeystore localhost.p12 -srcstoretype pkcs12 -destkeystore localhost.jks
</code></pre>
<p>这里会提示输入目标keystore与源keystore的密码，目标keystore密码一会在修改<code>server.xml</code>时需要用到，源keystore密码就是上面的导出密码。<br>
<img src="https://img-blog.csdnimg.cn/20200608144851193.png" alt="在这里插入图片描述" loading="lazy"><br>
接着复制<code>localhost.jks</code>到Tomcat的<code>conf</code>下并修改<code>server.xml</code>：</p>
<pre><code class="language-xml">&lt;Connector port=&quot;8443&quot; protocol=&quot;org.apache.coyote.http11.Http11NioProtocol&quot;
               maxThreads=&quot;150&quot; SSLEnabled=&quot;true&quot;&gt;
	&lt;UpgradeProtocol className=&quot;org.apache.coyote.http2.Http2Protocol&quot; /&gt;
    &lt;SSLHostConfig&gt;
        &lt;Certificate certificateKeystoreFile=&quot;conf/localhost.jks&quot;
       				 certificateKeystorePassword=&quot;111111&quot;
                     type=&quot;RSA&quot; /&gt;
    &lt;/SSLHostConfig&gt;
&lt;/Connector&gt;
</code></pre>
<p>添加了升级协议（默认HTTP/1.1）：</p>
<pre><code class="language-xml">&lt;UpgradeProtocol className=&quot;org.apache.coyote.http2.Http2Protocol&quot; /&gt;
</code></pre>
<p>另外<code>certificateKeystorePassword</code>是上一步的目标keystore的密码。<br>
完成后开启Tomcat并访问<code>https://localhost:8443</code>：<br>
<img src="https://img-blog.csdnimg.cn/20200608150201599.png" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200608150257547.png" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="42-使用apr">4.2 使用APR</h2>
<p>使用APR不需要对证书进行额外的转换，但是需要安装三个库：</p>
<ul>
<li><a href="https://apr.apache.org/">APR</a></li>
<li><a href="https://apr.apache.org/">APR-util</a></li>
<li><a href="https://tomcat.apache.org/native-doc/">TC-Native</a></li>
</ul>
<p>笔者的Manjaro可以直接包管理器安装：</p>
<pre><code class="language-bash">sudo pacman -S apr apr-util tomcat-native
</code></pre>
<p>其他系统请自行使用包管理器或者按上面的官网链接进行编译安装。<br>
复制<code>localhost-key.pem</code>与<code>localhost.pem</code>到Tomcat的<code>conf</code>目录下，并修改<code>server.xml</code>：</p>
<pre><code class="language-xml">&lt;Connector port=&quot;8443&quot; protocol=&quot;org.apache.coyote.http11.Http11AprProtocol&quot;
               maxThreads=&quot;150&quot; SSLEnabled=&quot;true&quot; &gt;
    &lt;UpgradeProtocol className=&quot;org.apache.coyote.http2.Http2Protocol&quot; /&gt;
    &lt;SSLHostConfig&gt;
        &lt;Certificate certificateKeyFile=&quot;conf/localhost-key.pem&quot;
                     certificateFile=&quot;conf/localhost.pem&quot;
                     type=&quot;RSA&quot; /&gt;
    &lt;/SSLHostConfig&gt;
&lt;/Connector&gt;
</code></pre>
<p>开启Tomcat后就可以访问<code>https://localhost:8443</code>了：<br>
<img src="https://img-blog.csdnimg.cn/20200608143030125.png" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200608143333489.png" alt="在这里插入图片描述" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[残酷游戏]]></title>
        <id>https://2293736867.github.io/post/can-ku-you-xi/</id>
        <link href="https://2293736867.github.io/post/can-ku-you-xi/">
        </link>
        <updated>2020-06-07T03:20:49.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>其实自命受苦都只因我能离不离<br>
看着对你爱得仿似爱情欲避不避<br>
若能耗尽力气  去捕捉你<br>
亦能剩下自己可挽救自己<br>
我也知越是幻想不准想你更记得起<br>
我在故意去将苦涩替代寂寞滋味<br>
用残酷游戏  制造卑微<br>
自由自在莫非惨过永远受气</p>
</blockquote>
<p>摊牌，<br>
哦豁，<br>
GG。<br>
历史总是惊人的相似，<br>
现实总是太多的无奈。<br>
注孤生。</p>
]]></content>
    </entry>
</feed>