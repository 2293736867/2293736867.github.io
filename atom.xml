<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://2293736867.github.io</id>
    <title>氷泠&apos;s blog</title>
    <updated>2021-02-24T05:37:29.640Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://2293736867.github.io"/>
    <link rel="self" href="https://2293736867.github.io/atom.xml"/>
    <subtitle>我配不上你，
纵然很努力。</subtitle>
    <logo>https://2293736867.github.io/images/avatar.png</logo>
    <icon>https://2293736867.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 氷泠&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[Spring Boot demo系列（十）：Redis缓存]]></title>
        <id>https://2293736867.github.io/post/spring-boot-demo-xi-lie-shi-redis-huan-cun/</id>
        <link href="https://2293736867.github.io/post/spring-boot-demo-xi-lie-shi-redis-huan-cun/">
        </link>
        <updated>2021-02-24T05:35:47.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-概述">1 概述</h1>
<p>本文演示了如何在<code>Spring Boot</code>中将<code>Redis</code>作为缓存使用，具体的内容包括：</p>
<ul>
<li>环境搭建</li>
<li>项目搭建</li>
<li>测试</li>
</ul>
<h1 id="2-环境">2 环境</h1>
<ul>
<li><code>Redis</code></li>
<li><code>MySQL</code></li>
<li><code>MyBatis Plus</code></li>
</ul>
<h1 id="3-redis安装">3 <code>Redis</code>安装</h1>
<p><code>Redis</code>安装非常简单，以笔者的<code>Manjaro</code>为例，直接<code>paru</code>安装：</p>
<pre><code class="language-bash">paru -S redis
</code></pre>
<p><code>Ubuntu</code>、<code>CentOS</code>之类的都提供了软件包安装：</p>
<pre><code class="language-bash">sudo apt install redis
sudo yum install redis
</code></pre>
<p>如果想从源码编译安装：</p>
<pre><code class="language-bash">wget http://download.redis.io/redis-stable.tar.gz
tar xvzf redis-stable.tar.gz
cd redis-stable
make
</code></pre>
<p><code>Windows</code>以及其他系统的安装可以参考<a href="https://www.redis.net.cn/tutorial/3503.html">此处</a>。</p>
<h1 id="4-新建项目">4 新建项目</h1>
<p>新建项目，加入如下依赖：</p>
<p><code>Maven</code>：</p>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;mysql&lt;/groupId&gt;
    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
    &lt;scope&gt;runtime&lt;/scope&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
    &lt;artifactId&gt;lombok&lt;/artifactId&gt;
    &lt;optional&gt;true&lt;/optional&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;
    &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;
    &lt;version&gt;3.4.2&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<p><code>Gradle</code>：</p>
<pre><code class="language-bash">implementation(&quot;com.baomidou:mybatis-plus-boot-starter:3.4.2&quot;)
implementation(&quot;mysql:mysql-connector-java:8.0.23&quot;)
</code></pre>
<p>项目结构：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20210223194201507.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="5-配置类">5 配置类</h1>
<p><code>MyBatis Plus</code>+<code>Redis</code>配置类：</p>
<pre><code class="language-java">@Configuration
@MapperScan(&quot;com.example.demo.dao&quot;)
public class MyBatisPlusConfig {
}
</code></pre>
<pre><code class="language-java">@Configuration
@AutoConfigureAfter(RedisAutoConfiguration.class)
@EnableCaching
public class RedisConfig {
    @Bean
    public RedisTemplate&lt;String, Object&gt; redisTemplate(LettuceConnectionFactory factory) {
        RedisTemplate&lt;String, Object&gt; template = new RedisTemplate&lt;&gt;();
        template.setKeySerializer(new StringRedisSerializer());
        template.setValueSerializer(new GenericJackson2JsonRedisSerializer());
        template.setConnectionFactory(factory);
        return template;
    }

    @Bean
    public CacheManager cacheManager(RedisConnectionFactory factory) {
        RedisCacheConfiguration configuration = RedisCacheConfiguration.defaultCacheConfig()
        .serializeKeysWith(
            RedisSerializationContext.SerializationPair.fromSerializer(new StringRedisSerializer())
        ).serializeValuesWith(
            RedisSerializationContext.SerializationPair.fromSerializer(new GenericJackson2JsonRedisSerializer())
        );
        return RedisCacheManager.builder(factory).cacheDefaults(configuration).build();
    }
}
</code></pre>
<p>重点说一下<code>Redis</code>配置类，这个类主要生成两个<code>Bean</code>：</p>
<ul>
<li><code>RedisTemplate</code>：简化<code>Redis</code>操作的数据访问类</li>
<li><code>CacheManager</code>：<code>Spring</code>的中央缓存管理器</li>
</ul>
<p>其中<code>RedisTemplate</code>是一个模板类，第一个参数的类型是该<code>template</code>使用的键的类型，通常是<code>String</code>，第二个参数的类型是该<code>template</code>使用的值的类型，通常为<code>Object</code>或<code>Seriazable</code>。</p>
<p><code>setKeySerializer</code>和<code>setValueSerializer</code>分别设置键值的序列化器。键一般为<code>String</code>类型，可以使用自带的<code>StringRedisSerializer</code>。对于值，可以使用自带的<code>GenericJackson2RedisSerializer</code>。</p>
<p><code>CacheManager</code>的配置类似，就不重新说了。</p>
<h1 id="6-实体类">6 实体类</h1>
<pre><code class="language-java">@Getter
@Setter
@ToString
@AllArgsConstructor
@NoArgsConstructor
public class User {
    private Integer id;
    private String name;
}
</code></pre>
<h1 id="7-持久层">7 持久层</h1>
<pre><code class="language-java">public interface UserMapper extends BaseMapper&lt;User&gt; {
}
</code></pre>
<h1 id="8-业务层">8 业务层</h1>
<pre><code class="language-java">@org.springframework.stereotype.Service
@Transactional
@RequiredArgsConstructor(onConstructor = @__(@Autowired))
public class Service {
    private final UserMapper mapper;

    @CachePut(value = &quot;user&quot;,key = &quot;#user.id&quot;)
    public User save(User user){
        User oldUser = mapper.selectById(user.getId());
        if(oldUser == null){
            mapper.insert(user);
            return user;
        }
        if(mapper.updateById(user) == 1)
            return user;
        return oldUser;
    }

    @CacheEvict(value = &quot;user&quot;,key = &quot;#id&quot;)
    public boolean delete(Integer id){
        return mapper.deleteById(id) == 1;
    }

    @Cacheable(value = &quot;user&quot;,key = &quot;#id&quot;)
    public User select(Integer id){
        return mapper.selectById(id);
    }

    @Cacheable(value=&quot;allUser&quot;,key = &quot;#root.target+#root.methodName&quot;)
    //root.target是目标类，这里是com.example.demo.Service，root.methodName是方法名，这里是selectAll
    public List&lt;User&gt; selectAll(){
        return mapper.selectList(null);
    }
}
</code></pre>
<p>注解说明如下：</p>
<ul>
<li><code>@CachePut</code>：执行方法体再将返回值缓存，一般用于更新数据</li>
<li><code>@CacheEvict</code>：删除缓存，一般用于删除数据</li>
<li><code>@Cacheable</code>：查询缓存，如果有缓存就直接返回，没有缓存的话执行方法体并将返回值存入缓存，一般用于查询数据</li>
</ul>
<p>三个注解都涉及到了<code>key</code>以及<code>value</code>属性，实际上，真正的存入<code>Redis</code>的<code>key</code>是两者的组合，比如：</p>
<pre><code class="language-java">@Cacheable(value=&quot;user&quot;,key=&quot;#id&quot;)
</code></pre>
<p>则存入的<code>Redis</code>中的<code>key</code>为：</p>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20210223210929435.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>而存入对应的值为方法返回值序列化后的结果，比如如果返回值为<code>User</code>，则会被序列化为：</p>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/202102240035293.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="9-配置文件">9 配置文件</h1>
<pre><code class="language-yml">spring:
  datasource:
    url: jdbc:mysql://localhost:3306/test
    username: root
    password: 123456
  redis:
    database: 0
    host: 127.0.0.1
    port: 6379
logging:
  level:
    com.example.demo: debug
</code></pre>
<p><code>spring.redis.database</code>指定数据库的索引，默认为0，<code>host</code>与<code>port</code>分别指定主机（默认本地）以及端口（默认<code>6379</code>）。</p>
<p>也就是说，简单配置的话可以完全省略<code>Redis</code>相关配置，仅指定数据库连接<code>url</code>、用户名以及密码：</p>
<pre><code class="language-yml">spring:
  datasource:
    url: jdbc:mysql://localhost:3306/test
    username: root
    password: 123456
logging:
  level:
    com.example.demo: debug
</code></pre>
<h1 id="10-启动redis">10 启动<code>Redis</code></h1>
<h2 id="101-启动redis服务器">10.1 启动<code>Redis</code>服务器</h2>
<p><code>Redis</code>服务器启动需要一个配置文件，默认位置为<code>/etc/redis.conf</code>（源码编译安装的话在源文件夹内），建议先复制一份：</p>
<pre><code class="language-bash">cp /etc/redis.conf ~/Desktop/
</code></pre>
<p>默认的配置文件为单机<code>Redis</code>配置，端口<code>6379</code>，<code>redis-server</code>可以直接运行：</p>
<pre><code class="language-bash">sudo redis-server redis.conf
</code></pre>
<h2 id="102-连接服务器">10.2 连接服务器</h2>
<p>连接可以通过自带的<code>redis-cli</code>命令：</p>
<pre><code class="language-bash">redis-cli -h localhost -p 6379
</code></pre>
<p>默认情况下可以直接使用</p>
<pre><code class="language-bash">redis-cli
</code></pre>
<p>连接。</p>
<p>基本操作：</p>
<ul>
<li><code>keys *</code>：查询所有键</li>
<li><code>get key</code>：查询<code>key</code>所对应的值</li>
<li><code>flushall</code>：清空所有键</li>
</ul>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20210224002836614.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="11-测试">11 测试</h1>
<pre><code class="language-java">@SpringBootTest
@RequiredArgsConstructor(onConstructor = @__(@Autowired))
class DemoApplicationTests {

    private final Service service;

    @Test
    void select() {
        service.select(1);
        service.select(1);
    }

    @Test
    void selectAll(){
        service.selectAll();
        service.selectAll();
    }

    @Test
    void delete(){
        service.delete(1);
    }

    @Test
    void save(){
        User user = new User(1,&quot;name1&quot;);
        service.save(user);
        service.select(user.getId());
        user.setName(&quot;name2&quot;);
        service.save(user);
        service.select(user.getId());
    }
}
</code></pre>
<p>执行其中的<code>select</code>，会发现<code>MyBatis Plus</code>只有一次<code>select</code>的输出，证明缓存生效了：</p>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/20210223211341949.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>而把缓存注解去掉后，会有两次<code>select</code>输出：</p>
<figure data-type="image" tabindex="6"><img src="https://img-blog.csdnimg.cn/20210223211541773.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>其它测试方法就不截图了，原理类似。</p>
<h1 id="12-附录kotlin中的一些细节">12 附录：<code>Kotlin</code>中的一些细节</h1>
<h2 id="121-string数组">12.1 <code>String</code>数组</h2>
<p>其实<code>@Cacheable</code>/<code>@CacheEvict</code>/<code>@CachePut</code>中的<code>value</code>都是<code>String []</code>，在<code>Java</code>中可以直接写上<code>value</code>，在<code>Kotlin</code>中需要<code>[value]</code>。</p>
<h2 id="122-class">12.2 <code>@class</code></h2>
<p>序列化到<code>Redis</code>时，实体类会被加上一个<code>@class</code>字段：</p>
<figure data-type="image" tabindex="7"><img src="https://img-blog.csdnimg.cn/202102240035293.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>这个标识供<code>Jackson</code>反序列化时使用，笔者一开始的实体类实现是：</p>
<pre><code class="language-kotlin">data class User(var id:Int?=null, var name:String=&quot;&quot;)
</code></pre>
<p>但是序列化后不携带<code>@class</code>字段：</p>
<figure data-type="image" tabindex="8"><img src="https://img-blog.csdnimg.cn/20210224011003732.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>在反序列化时直接报错：</p>
<pre><code class="language-bash">Could not read JSON: Missing type id when trying to resolve subtype of [simple type, class java.lang.Object]: missing type id property '@class'
 at [Source: (byte[])&quot;{&quot;id&quot;:1,&quot;name&quot;:&quot;name2&quot;}&quot;; line: 1, column: 23]; nested exception is com.fasterxml.jackson.databind.exc.InvalidTypeIdException: Missing type id when trying to resolve subtype of [simple type, class java.lang.Object]: missing type id property '@class'
 at [Source: (byte[])&quot;{&quot;id&quot;:1,&quot;name&quot;:&quot;name2&quot;}&quot;; line: 1, column: 23]
</code></pre>
<p>解决方法有两个：</p>
<ul>
<li>手动添加<code>@class</code>字段</li>
<li>将实体类设为<code>open</code></li>
</ul>
<h3 id="1221-手动添加class">12.2.1 手动添加<code>@class</code></h3>
<p>准确来说并不是手动添加，而是让注解添加，需要添加一个类注解<code>@JsonTypeInfo</code>：</p>
<pre><code class="language-kotlin">@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS)
data class User(var id:Int?=null, var name:String=&quot;&quot;)
</code></pre>
<p>该注解的<code>use</code>用于指定类型标识码，该值只能为<code>JsonTypeInfo.Id.CLASS</code>。</p>
<h3 id="1222-将实体类设置为open">12.2.2 将实体类设置为<code>open</code></h3>
<p>在<code>Java</code>中，实体类没有任何额外配置，<code>Redis</code>序列化/反序列化一样没有问题，是因为值序列化器<code>GenericJackson2JsonRedisSerializer</code>，该类会自动添加一个<code>@class</code>字段，因此不会出现上面的问题。</p>
<p>但是在<code>Kotlin</code>中，类默认不是<code>open</code>的，也就是无法添加<code>@class</code>字段，因此便会反序列化失败，解决方案是将实体类设置为<code>open</code>：</p>
<pre><code class="language-kotlin">open class User(var id:Int?=null, var name:String=&quot;&quot;)
</code></pre>
<p>但是缺点是不能使用<code>data class</code>了。</p>
<h1 id="13-参考源码">13 参考源码</h1>
<p><code>Java</code>版：</p>
<ul>
<li><a href="https://github.com/2293736867/SpringBootDemoJava/tree/main/RedisCache">Github</a></li>
<li><a href="https://gitee.com/u6b7b5fc3/SpringBootDemoJava/tree/main/RedisCache">码云</a></li>
<li><a href="https://codechina.csdn.net/qq_27525611/SpringBootDemoJava/-/tree/main/RedisCache">CODECHINA</a></li>
</ul>
<p><code>Kotlin</code>版：</p>
<ul>
<li><a href="https://github.com/2293736867/SpringBootDemoKotlin/tree/main/RedisCache">Github</a></li>
<li><a href="https://gitee.com/u6b7b5fc3/SpringBootDemoKotlin/tree/main/RedisCache">码云</a></li>
<li><a href="https://codechina.csdn.net/qq_27525611/SpringBootDemoKotlin/-/tree/main/RedisCache">CODECHINA</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第255期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-255-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-255-qi/">
        </link>
        <updated>2021-02-24T05:33:56.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>努力加油，每一个困难，都会克服我。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>流水传潇浦，悲风过洞庭。<br>
——钱起《省试湘灵鼓瑟》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>一个人觉得寂寞，和另一个人相互依偎有什么错。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[解决Docker MySQL无法被宿主机访问的问题]]></title>
        <id>https://2293736867.github.io/post/jie-jue-docker-mysql-wu-fa-bei-su-zhu-ji-fang-wen-de-wen-ti/</id>
        <link href="https://2293736867.github.io/post/jie-jue-docker-mysql-wu-fa-bei-su-zhu-ji-fang-wen-de-wen-ti/">
        </link>
        <updated>2021-02-23T03:16:22.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-问题描述">1 问题描述</h1>
<p><code>Docker</code>启动<code>MySQL</code>容器后，创建一个<code>localhost</code>访问的用户：</p>
<pre><code class="language-bash">create user test@localhost identified by 'test';
</code></pre>
<p>但是在宿主机中无法通过该用户登录：</p>
<pre><code class="language-bash">mycli -u test
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20210223110510684.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="2-原因">2 原因</h1>
<p>在<code>Docker</code>中的<code>MySQL</code>创建<code>localhost</code>的用户只能在<code>Docker</code>内部访问，而不能通过外部访问。</p>
<p>至于为什么能在宿主机访问<code>root</code>，是因为默认存在两个<code>root</code>，分别是：</p>
<ul>
<li><code>root@localhost</code></li>
<li><code>root@%</code></li>
</ul>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20210223110858572.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>而<code>test</code>只有一个<code>localhost</code>：</p>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20210223110928695.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="3-解决方案">3 解决方案</h1>
<p>创建<code>test@%</code>或者创建<code>test@172.17.0.1</code>即可：</p>
<pre><code class="language-bash">create user test@% identified by 'test';
create user test@172.17.0.1 identified by 'test';
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第254期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-254-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-254-qi/">
        </link>
        <updated>2021-02-23T02:55:14.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>打麻将三缺一，斗地主二缺一，我谈个恋爱咋还一缺一？</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>冰合大河流，茫茫一片愁。<br>
——纳兰性德《菩萨蛮·白日惊飚冬已半》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>我们把世界看错，反说它欺骗了我们。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第253期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-253-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-253-qi/">
        </link>
        <updated>2021-02-22T02:52:04.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>从今天开始，接受来自三大姑八大姨，灵魂的拷问。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>坐睡觉来无一事，满窗晴日看蚕生。<br>
——范成大《春日田园杂兴》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>知识有两种，一种是你知道的，一种是你知道在哪里能找到的。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第252期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-252-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-252-qi/">
        </link>
        <updated>2021-02-21T02:37:58.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>其实命运，真不是喜欢和你开玩笑，它是很认真的想弄死你。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>风暖鸟声碎，日高花影重。<br>
——杜荀鹤《春宫怨》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>相传胜利者肯定手持正义，那仅是因为正义可被胜利者定义。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第251期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-251-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-251-qi/">
        </link>
        <updated>2021-02-20T02:05:48.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>为了防止我这个月又乱花钱，我提前把钱，都花完了。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>一条藤径绿，万点雪峰晴。<br>
——李白《冬日归旧山》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>爱你所爱，行你所行，听从你心，无问西东。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日一句 251-300期合集]]></title>
        <id>https://2293736867.github.io/post/mei-ri-yi-ju-251-300-qi-he-ji/</id>
        <link href="https://2293736867.github.io/post/mei-ri-yi-ju-251-300-qi-he-ji/">
        </link>
        <updated>2021-02-19T05:21:55.000Z</updated>
        <content type="html"><![CDATA[<h1 id="第251期">第251期</h1>
<blockquote></blockquote>
<h1 id="第252期">第252期</h1>
<blockquote></blockquote>
<h1 id="第253期">第253期</h1>
<blockquote></blockquote>
<h1 id="第254期">第254期</h1>
<blockquote></blockquote>
<h1 id="第255期">第255期</h1>
<blockquote></blockquote>
<h1 id="第256期">第256期</h1>
<blockquote></blockquote>
<h1 id="第257期">第257期</h1>
<blockquote></blockquote>
<h1 id="第258期">第258期</h1>
<blockquote></blockquote>
<h1 id="第259期">第259期</h1>
<blockquote></blockquote>
<h1 id="第260期">第260期</h1>
<blockquote></blockquote>
<h1 id="第261期">第261期</h1>
<blockquote></blockquote>
<h1 id="第262期">第262期</h1>
<blockquote></blockquote>
<h1 id="第263期">第263期</h1>
<blockquote></blockquote>
<h1 id="第264期">第264期</h1>
<blockquote></blockquote>
<h1 id="第265期">第265期</h1>
<blockquote></blockquote>
<h1 id="第266期">第266期</h1>
<blockquote></blockquote>
<h1 id="第267期">第267期</h1>
<blockquote></blockquote>
<h1 id="第268期">第268期</h1>
<blockquote></blockquote>
<h1 id="第269期">第269期</h1>
<blockquote></blockquote>
<h1 id="第270期">第270期</h1>
<blockquote></blockquote>
<h1 id="第271期">第271期</h1>
<blockquote></blockquote>
<h1 id="第272期">第272期</h1>
<blockquote></blockquote>
<h1 id="第273期">第273期</h1>
<blockquote></blockquote>
<h1 id="第274期">第274期</h1>
<blockquote></blockquote>
<h1 id="第275期">第275期</h1>
<blockquote></blockquote>
<h1 id="第276期">第276期</h1>
<blockquote></blockquote>
<h1 id="第277期">第277期</h1>
<blockquote></blockquote>
<h1 id="第278期">第278期</h1>
<blockquote></blockquote>
<h1 id="第279期">第279期</h1>
<blockquote></blockquote>
<h1 id="第280期">第280期</h1>
<blockquote></blockquote>
<h1 id="第281期">第281期</h1>
<blockquote></blockquote>
<h1 id="第282期">第282期</h1>
<blockquote></blockquote>
<h1 id="第283期">第283期</h1>
<blockquote></blockquote>
<h1 id="第284期">第284期</h1>
<blockquote></blockquote>
<h1 id="第285期">第285期</h1>
<blockquote></blockquote>
<h1 id="第286期">第286期</h1>
<blockquote></blockquote>
<h1 id="第287期">第287期</h1>
<blockquote></blockquote>
<h1 id="第288期">第288期</h1>
<blockquote></blockquote>
<h1 id="第289期">第289期</h1>
<blockquote></blockquote>
<h1 id="第290期">第290期</h1>
<blockquote></blockquote>
<h1 id="第291期">第291期</h1>
<blockquote></blockquote>
<h1 id="第292期">第292期</h1>
<blockquote></blockquote>
<h1 id="第293期">第293期</h1>
<blockquote></blockquote>
<h1 id="第294期">第294期</h1>
<blockquote></blockquote>
<h1 id="第295期">第295期</h1>
<blockquote></blockquote>
<h1 id="第296期">第296期</h1>
<blockquote></blockquote>
<h1 id="第297期">第297期</h1>
<blockquote></blockquote>
<h1 id="第298期">第298期</h1>
<blockquote></blockquote>
<h1 id="第299期">第299期</h1>
<blockquote></blockquote>
<h1 id="第300期">第300期</h1>
<blockquote></blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第250期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-250-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-250-qi/">
        </link>
        <updated>2021-02-19T05:12:23.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>我发现我挺能哄女孩睡觉的，只要我一发信息，女孩就说我要睡觉了。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>为问东风吹老，几度枫江兰径，千里转平芜？<br>
——张惠言《水调歌头（五首选三）》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>前天是小兔子，昨天是小鹿，今天是你。</p>
</blockquote>
<h1 id="250期打卡">250期打卡</h1>
<p>不知不觉就250期了啊。</p>
<p>年初八大家过得还好吗。</p>
<p>害。</p>
<p>然而国外的疫情貌似不见有好的趋势，虽然研制出了疫苗，但是好像没有变异的速度快。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[解决IDEA Gradle构建报错"Cause: zip END header not found"]]></title>
        <id>https://2293736867.github.io/post/jie-jue-idea-gradle-gou-jian-bao-cuo-cause-zip-end-header-not-found/</id>
        <link href="https://2293736867.github.io/post/jie-jue-idea-gradle-gou-jian-bao-cuo-cause-zip-end-header-not-found/">
        </link>
        <updated>2021-02-18T08:45:04.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-问题描述">1 问题描述</h1>
<p>某天使用<code>Gradle</code>构建项目时，<code>IDEA</code>报错如下：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20210218103240572.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="2-原因">2 原因</h1>
<p>原因是下载的<code>Gradle</code>，也就是<code>zip</code>压缩包不完整，导致无法使用<code>Gradle</code>构建。</p>
<h1 id="3-解决方法">3 解决方法</h1>
<h2 id="31-删除本地缓存重新下载">3.1 删除本地缓存重新下载</h2>
<p>首先打开<code>IDEA</code>设置中的<code>Gradle</code>，找到<code>Gradle user home</code>：</p>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20210218103500710.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>比如笔者的是<code>~/.gradle</code>，打开其中的<code>wrapper/dists</code>，就可以看到缓存的<code>Gradle</code>：</p>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20210218104307551.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>删除对应版本的<code>Gradle</code>即可，<code>IDEA</code>会自动重新下载。</p>
<h2 id="32-设置特定版本的gradle">3.2 设置特定版本的<code>Gradle</code></h2>
<p>如果清除缓存重新下载不行，可以设置特定版本的<code>Gradle</code>，首先下载<a href="https://services.gradle.org/distributions/">Gradle</a>到本地，下载最新版的<code>xxx-all.zip</code>即可：</p>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20210218104832815.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>下载后修改项目文件夹下的<code>gradle/wrapper/gradle-wrapper.properties</code>，参考<a href="https://blog.buercheng.space/posts/3790347158/#2-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95">此处</a>修改<code>distributionUrl</code>为本地路径：</p>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/20210218104942158.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>默认<code>Gradle</code>配置如下：</p>
<figure data-type="image" tabindex="6"><img src="https://img-blog.csdnimg.cn/20210218105247997.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>一般来说修改<code>distributionUrl</code>即可，如果请查看报错修改设置。</p>
]]></content>
    </entry>
</feed>