<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://2293736867.github.io</id>
    <title>氷泠&apos;s blog</title>
    <updated>2021-03-31T06:37:24.771Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://2293736867.github.io"/>
    <link rel="self" href="https://2293736867.github.io/atom.xml"/>
    <subtitle>我配不上你，
纵然很努力。</subtitle>
    <logo>https://2293736867.github.io/images/avatar.png</logo>
    <icon>https://2293736867.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 氷泠&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[软件测试笔记（三）：黑盒测试]]></title>
        <id>https://2293736867.github.io/post/ruan-jian-ce-shi-bi-ji-san-hei-he-ce-shi/</id>
        <link href="https://2293736867.github.io/post/ruan-jian-ce-shi-bi-ji-san-hei-he-ce-shi/">
        </link>
        <updated>2021-03-31T05:59:57.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#1-%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E6%A6%82%E8%BF%B0">1 黑盒测试概述</a></li>
<li><a href="#2-%E7%AD%89%E4%BB%B7%E7%B1%BB%E5%88%92%E5%88%86">2 等价类划分</a>
<ul>
<li><a href="#21-%E7%AD%89%E4%BB%B7%E7%B1%BB">2.1 等价类</a></li>
<li><a href="#22-%E5%88%92%E5%88%86%E5%8E%9F%E5%88%99">2.2 划分原则</a></li>
</ul>
</li>
<li><a href="#3-%E8%BE%B9%E7%95%8C%E5%80%BC%E5%88%86%E6%9E%90">3 边界值分析</a>
<ul>
<li><a href="#31-%E8%BE%B9%E7%95%8C%E5%80%BC%E5%88%86%E6%9E%90%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99">3.1 边界值分析设计原则</a></li>
<li><a href="#32-%E8%BE%B9%E7%95%8C%E5%88%86%E6%9E%90%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95">3.2 边界分析的两种方法</a></li>
</ul>
</li>
<li><a href="#4-%E5%86%B3%E7%AD%96%E8%A1%A8">4 决策表</a></li>
<li><a href="#5-%E5%9B%A0%E6%9E%9C%E5%9B%BE">5 因果图</a>
<ul>
<li><a href="#51-%E5%AE%9A%E4%B9%89">5.1 定义</a></li>
<li><a href="#52-%E5%9F%BA%E6%9C%AC%E5%9B%BE%E5%BD%A2%E7%AC%A6%E5%8F%B7">5.2 基本图形符号</a></li>
</ul>
</li>
<li><a href="#6-%E5%9C%BA%E6%99%AF%E6%B3%95">6 场景法</a></li>
</ul>
</p>
<h1 id="1-黑盒测试概述">1 黑盒测试概述</h1>
<p>黑盒测试也叫功能测试，通过测试来检测每个功能是否都能正常使用。在测试中，把程序看作是一个不能打开的黑盒子，在完全不考虑程序内部结构和内部特性的情况下，对程序接口进行测试，只检查程序功能是否按照需求规格说明书的规定正常使用，程序是否能适当接收输入数据而产生正确的输出信息。</p>
<p>黑盒测试以用户角度，从输入数据与输出数据的关系触发，试图发现一下几类错误：</p>
<ul>
<li>功能不正确或遗漏</li>
<li>界面错误</li>
<li>数据库访问错误</li>
<li>性能错误</li>
<li>初始化和终止错误</li>
</ul>
<p>用例设计方法包括：</p>
<ul>
<li>等价类划分</li>
<li>边界值分析</li>
<li>决策表</li>
<li>因果图</li>
<li>场景法</li>
</ul>
<p>等等。</p>
<h1 id="2-等价类划分">2 等价类划分</h1>
<h2 id="21-等价类">2.1 等价类</h2>
<p>等价类是指某个输入域的子集，在该子集合中，测试某等价类的代表值就等于这一类其他值的测试，对于揭露程序的错误是等效的。因此，全部输入数据可以合理划分为若干个等价类，在每一个等价类中取一个数据作为测试的输入条件，就可以用少量的代表性的测试数据取得比较好的效果。</p>
<p>等价类划分可以分为：</p>
<ul>
<li>有效等价类：对于程序的规格说明来说是合理的，有意义的输入数据构成的集合，利用有效等价类可以检验程序是否实现了规格说明中所规定的功能和意义</li>
<li>无效等价类：与有效等价类相反，是指对程序的规格说明无意义，不合理的数据构成的集合</li>
</ul>
<h2 id="22-划分原则">2.2 划分原则</h2>
<ul>
<li>如果规定了输入值的范围，可以定义一个有效等价类和两个无效等价类</li>
<li>如果规定了输入的规则，可以划分出一个有效的等价类（符合规则）和若干无效的等价类（从不同角度违反原则）</li>
<li>如果规定了输入数据的已组织，且程序对不同输入值做不同处理，则每个允许的输入值是一个有效等价类，并有一个无效等价类</li>
<li>如果规定了输入数据是整型，可以划分出正整数、零、负整数三个有效等价类</li>
<li>处理表格时，有效类为空表、含一项的表、含多项的表等</li>
</ul>
<h1 id="3-边界值分析">3 边界值分析</h1>
<h2 id="31-边界值分析设计原则">3.1 边界值分析设计原则</h2>
<p>边界值分析作为等价类划分的补充，通过选择等价类的边界值作为测试用例。</p>
<p>基于边界值分析有如下原则：</p>
<ul>
<li>如果输入条件规定了值的范围，应选择刚到达这个范围的边界的值，以及刚刚超过这个范围边界的值作为测试输入数据</li>
<li>如果输入条件中规定了值的个数，则用最大个数、最小个数、比最小个数少一，比最大个数多一作为测试数据</li>
<li>如果规格说明书给出的输入域或输出域的有序集合，则应选取集合的第一个元素和最后一个元素作为测试用例</li>
<li>如果程序中使用了内部数据结构，则应选择内部数据结构的边界上的值作为测试用例</li>
</ul>
<h2 id="32-边界分析的两种方法">3.2 边界分析的两种方法</h2>
<p>一般包括：</p>
<ul>
<li>一般边界值分析：一般取<code>Min</code>、<code>Min+</code>、<code>Normal</code>、<code>Max-</code>、<code>Max</code></li>
<li>健壮性边界值分析：除了一般边界值分析外，还包括<code>Min-</code>、<code>Max+</code></li>
</ul>
<h1 id="4-决策表">4 决策表</h1>
<p>决策表又叫判定表，是分析多种逻辑条件下执行不同操作的技术。决策表由四个部分组成，包括：</p>
<ul>
<li>条件桩：列出问题的所有条件，条件的顺序无关紧要</li>
<li>动作桩：列出问题规定可能采取的所有动作，排列顺序没有约束</li>
<li>条件项：列出了针对条件桩的取值在所有可能情况下的真假值</li>
<li>动作项：列出了在条件项的各种取值的有机关联情况下应采取的动作</li>
</ul>
<p>另一方面，决策表中的规则，指的是任何条件组合的特定取值以及相应要执行的动作，在决策表中贯穿条件项和动作项的列就是规则，决策表中列出多少条件取值，就对应多少规则，条件项就有多少列。</p>
<p>比如下面是一个使用决策表制作的打印机测试用例：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/2021033109210066.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="5-因果图">5 因果图</h1>
<h2 id="51-定义">5.1 定义</h2>
<p>因果图利用图解法分析输入的各种组合情况，适合于描述多种输入条件的组合，相应产生多个动作的方法，因果图的好处如下：</p>
<ul>
<li>考虑多个输入之间的相互组合、相互制约的关系</li>
<li>指导测试用例的选择，指出需求规格说明描述中存在的问题</li>
<li>能够帮助测试人员按照一定的步骤，高效率地开发测试用例</li>
<li>因果图法是一种严格地将自然语言规格说明转化为形式语言规格说明的方法，可以指出规格说明存在的不完整性和二义性</li>
</ul>
<h2 id="52-基本图形符号">5.2 基本图形符号</h2>
<p>原因结果图：</p>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20210331103407748.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p><code>ci</code>和<code>ei</code>都可以取值0或1，0表示状态不出现，1表示状态出现。</p>
<p>约束图：</p>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20210331104503159.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="6-场景法">6 场景法</h1>
<p>同一事件不同的触发顺序和处理结果形成事件流，每个事件流触发时的情景便形成了场景。</p>
<p>场景法一般包含基本流和备选流（也叫备用流），从一个流程开始，通过描述经过的路径来确定过程，经过遍历所有的基本流和备用流来形成整个场景。场景法的基本设计步骤如下：</p>
<ul>
<li>根据说明，描述程序的基本流以及各项备选流</li>
<li>根据基本流和各项备选流生成不同的场景</li>
<li>对每一个场景生成相应的测试用例</li>
<li>对生成的所有测试用例重新复审，去掉多余的测试用例，测试用例确定后，对每一个测试用例确定测试数据值</li>
</ul>
<p>图示如下：</p>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20210331110653842.png" alt="在这里插入图片描述" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第290期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-290-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-290-qi/">
        </link>
        <updated>2021-03-31T05:58:28.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>大家都以为我没有朋友，事实上，我还真没有朋友。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>春风桃李开花日，秋雨梧桐叶落时。<br>
——白居易《长恨歌》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>你是否会等待我？我会变得更加完美！</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第289期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-289-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-289-qi/">
        </link>
        <updated>2021-03-30T05:56:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>你不懂得安排自己的人生，会有很多人帮你安排，他们需要你做的事。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>狂风落尽深红色，绿叶成阴子满枝。<br>
——杜牧《叹花/怅诗》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>寻觅归乡之路，一次一颗子弹。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第288期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-288-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-288-qi/">
        </link>
        <updated>2021-03-29T05:41:31.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>你前世一定是塑料袋，除了会装还是会装。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>微雨众卉新，一雷惊蛰始。<br>
——韦应物《观田家》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>跑得快不一定赢，老跌跟头才是成功。</p>
</blockquote>
<h1 id="逃避">逃避</h1>
<pre><code>逃避虽然可耻，

但是有用。
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第287期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-287-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-287-qi/">
        </link>
        <updated>2021-03-28T00:39:55.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>你妹是个好姑娘，替你妈分担了很多。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>妒雪聊相比，欺春不逐来。<br>
——杜牧《梅》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>扣首问路，码梦为生。</p>
</blockquote>
<h1 id="关于印度人骨">关于印度人骨</h1>
<h2 id="一些历史">一些历史</h2>
<p>没想到在印度人骨还不被放过，即使印度当局数百年前已经禁止了人骨贸易，但是仍然存在着令人毛骨悚然的黑市。</p>
<p>16世纪随着医学的发展，医生们对人体结构的了解越来越深入，对人体骨骼的要求只增不减，在那时候的英格兰，医生为了获取骨骼，常常会为了买尸体和死者讨价还价，甚至暴力掠夺，伤人等。于是英国政府出台了《解剖法》，允许医生拿走城市停尸房或医院中无人认领的尸体。</p>
<p>但是这并没有满足医生们的研究需求，于是，英国医生将眼光转向了殖民地印度，并雇佣了盗贼从印度墓地挖尸，同时也强迫各大医院将无人认领的尸体处理之后运往英国。到上世纪80年代，印度一年可以出口60000具头骨，这个数字足以让发达国家的每个医学生都拥有自己的“真人版”实验骨具。</p>
<p>自此以后，印度出现了各种人类“骨头工厂”，但是在一起儿童骨骼交易案爆发后，印度收紧了政策，于1985年宣布人类遗体部件出口为非法行为，自那以后全球合法骨骼供应市场陷入崩溃。</p>
<h2 id="人骨来源">人骨来源</h2>
<p>对于人骨的来源，来自与印度的“工厂”。</p>
<p>这里的“工厂”，包括了像<code>Young Brothers</code>这样的大型工厂（表面上是做的是医疗设备的进出口，根据员工透露私底下会进行人骨交易），也包括了黑市市场的主体，也就是一家家散布于乡、镇、村中不起眼街道的“人骨工厂”，这些工厂负责人骨的加工和对外销售。</p>
<p>说是工厂，其实就是堆着人的骨头和骨头加工工具的屋子，规模小，环境差，没有正规“工厂”的样子可言。工厂屋里的地上，往往沿墙边放着一桶桶制骨用的化学物品，地上散落着数以百计的人类骨头，屋缘上也无序地挂着细绳或金属丝穿过的脊椎部件，风不吹也晃悠悠的。</p>
<p>人骨的制作流程，往往是：</p>
<pre><code>先将尸体用渔网包好沉入河中，经过细菌和鱼的分解，一周之后尸体成了骨架和松散体。

接下来由人擦洗尸体，再放入锅中用苏打水去煮，去除残留的腐肉，留下黄色的钙质表面。

接着把它们放在阳光下晒一周，再在盐酸中浸泡，这样谷歌就不再发黄，变得洁白。

之后骨头将细钢丝串联起来，贴在医学图标或者框架上，再根据需求锯掉多余的骨头以便能够完整看到内部结构。
</code></pre>
<p>就这样，一个合格的人体谷歌标本就出炉了。在骨头工厂的安排下，它们便开启了国外游的旅途，根据市场价，一件骨骼的标本大约700美元左右。</p>
<h2 id="关于人的来源">关于人的来源</h2>
<p>人骨从人身上来，那么人从哪里来？</p>
<p>答案是太平间或火葬场。</p>
<p>在印度，每天都产生约100多具无人认领的尸体，这些尸体被发现后会放在停尸房保存几周，如果还没人认领，政府会安排这些尸体送往有需要的医院或医学生那里供研究或实验使用。</p>
<pre><code>因传染病而去世的人体尸骨可能比较安全。

病毒或许成了他们去世后的“防御”技能。
</code></pre>
<p>人骨工厂的人手段高明，往往能将尸体停在停尸房期间将它们光明正大带走为自己服务，在火葬场也是类似，或是或火葬场的工作人员串通，或是本身就是火葬场工作人员，待死者家属哭得伤心之时，以光速将尸体从火坑中拖出来，和前来接应的专车对接，把尸体运到可以让它们“发挥余热”的地方。</p>
<p>另一个来源，就是盗墓。</p>
<p>盗墓常常在夜深人静的时候进行，以荒野地区的新墓地为佳，因为尸体新鲜，而且看守不严，“成功率”高。并且，有时候可以“光明正大”地进行盗墓，只需要贿赂墓地看守员。</p>
<p>最后的一个来源是恒河的水葬。因为有些穷人负担不起仪式繁琐的火葬，将象征性地烧一下，随后抛入圣河——恒河中，但很不幸，漂流的尸体很可能会被人骨贩子拦截下来，于是这些尸体也就阴差阳错地为“医学研究”做出伟大贡献。</p>
<h2 id="来源">来源</h2>
<p>来源：<a href="https://zhuanlan.zhihu.com/p/360036589">东亚评论——《印度，连死人骨头也不放过》（转自地球知识局）</a></p>
<p>这里只是部分的摘要，没有附上图片，想要详细了解请看原文。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第286期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-286-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-286-qi/">
        </link>
        <updated>2021-03-27T13:37:23.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>吃货的思路是，好吃你就多吃点，不好吃多少也要吃点。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>舞低杨柳楼心月，歌尽桃花扇底风。<br>
——晏几道《鹧鸪天·彩袖殷勤捧玉钟》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>最折磨人的或许不是一场惨烈战争，而是繁琐的日常生活。</p>
</blockquote>
<h1 id="最近">最近</h1>
<p>最近一周发生了一些很不愉快的事情，因此拖更了几天。。。</p>
<p>害。。。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第285期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-285-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-285-qi/">
        </link>
        <updated>2021-03-26T13:34:53.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>别慌去接受失败，要慢慢去感受。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>那知自是，桃花结子，不因春瘦。<br>
——晁补之《水龙吟·次歆林圣予惜春》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>在凄惨的处境中回忆幸福，是世间最大的痛苦。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第284期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-284-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-284-qi/">
        </link>
        <updated>2021-03-25T13:32:29.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>死不可怕，怕的是再也不能活了。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>春蚕食叶响回廊，禹门已准桃花浪，月殿先收桂子香。<br>
——辛弃疾《鹧鸪天·送廊之秋试》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>愿你以渺小启程，以伟大结束</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[让你的Windows/Linux玩上Switch！]]></title>
        <id>https://2293736867.github.io/post/rang-ni-de-windowslinux-wan-shang-switch/</id>
        <link href="https://2293736867.github.io/post/rang-ni-de-windowslinux-wan-shang-switch/">
        </link>
        <updated>2021-03-24T07:23:46.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-前言">1 前言</h1>
<p>某天在<code>Github</code>上面看到了两个<code>Switch</code>的模拟器：</p>
<ul>
<li><a href="https://github.com/yuzu-emu/yuzu">yuzu</a></li>
<li><a href="https://github.com/Ryujinx/Ryujinx">Ryujinx</a></li>
</ul>
<p>于是就想动手想尝试一下在<code>Linux</code>上面玩上<code>Switch</code>。</p>
<p>本文首先简单介绍一下两个模拟器，接着是两个模拟器的安装使用及基本配置。附录包括了<code>Vulkan</code>以及<code>OpenGL</code>的比较和<code>Ryujinx</code>和<code>yuzu</code>的比较。下面先来看一下两个模拟器究竟是什么。</p>
<h1 id="2-模拟器-平台以及兼容性">2 模拟器、平台以及兼容性</h1>
<h2 id="21-关于模拟器">2.1 关于模拟器</h2>
<ul>
<li><code>yuzu</code>：<code>Citra</code>的制作者写的一个开源<code>NS</code>模拟器，用<code>C++</code>编写，高达<code>14.2k star</code>，特点包括<code>Vulkan API</code>的支持、灵活的模拟器配置以及游戏配置等等</li>
<li><code>Ryujinx</code>：基于<code>.NET 5.x</code>与<code>C#</code>的开源<code>NS</code>模拟器，特点包括<code>OpenAL</code>音频输出、<code>PPTC</code>（下文有介绍）、支持多种输入、支持<code>DLC</code>等等，<code>5.8k star</code></li>
</ul>
<h2 id="22-关于平台">2.2 关于平台</h2>
<p>目前这两个模拟器支持的平台只有<code>Windows</code>和<code>Linux</code>：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20210324103451122.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/2021032410353687.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>至于<code>Mac</code>，<code>yuzu</code>没有说明支持，而<code>Ryujinx</code>在计划中，在下载页面（上图）可以看到<code>Mac</code>的图标，但是处于灰色状态。</p>
<p>另外，笔者还发现了一个在<code>M1 Mac</code>上运行的<a href="https://github.com/Ryujinx/Ryujinx/issues/1805">issue</a>：</p>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20210324083947775.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>大概看了一下需要等待2021年11月的<code>.NET 6</code>去支持了，所以<code>Mac</code>党还得再等等。</p>
<h2 id="23-关于兼容性">2.3 关于兼容性</h2>
<p>官方给出了游戏的兼容性列表：</p>
<ul>
<li><code>yuzu</code>：<a href="https://yuzu-emu.org/game/">兼容性列表</a></li>
<li><code>Ryujinx</code>：<a href="https://github.com/Ryujinx/Ryujinx-Games-List/issues">兼容性列表</a></li>
</ul>
<h1 id="3-环境">3 环境</h1>
<p>笔者测试的环境为：</p>
<ul>
<li>笔记本</li>
<li>系统：<code>Manjaro</code></li>
<li>显卡：<code>RTX 2060</code></li>
<li>固件版本：<code>Firmware 11.0.1</code></li>
<li>测试游戏：超级马里奥3D世界</li>
</ul>
<h1 id="4-准备工作">4 准备工作</h1>
<p>无论使用的是<code>yuzu</code>还是<code>Ryujinx</code>，都需要准备：</p>
<ul>
<li><code>prod.keys</code></li>
<li>游戏本体</li>
</ul>
<p>如果使用的是<code>Ryujinx</code>，还需要额外准备固件。</p>
<p>先来看一下<code>prod.keys</code>。</p>
<h2 id="41-prodkeys">4.1 <code>prod.keys</code></h2>
<p><code>yuzu</code>以及<code>Ryujinx</code>都需要<code>prod.keys</code>，里面包含了<code>NS</code>设备需要的<code>key</code>，需要通过<code>Hekate</code>等一些列工具生成，这部分比较复杂，因此文末附录直接提供了现成的<code>prod.keys</code>。</p>
<p>另外，在<code>yuzu</code>的官方文档还提到了需要使用<code>title.key</code>，笔者实测发现<code>title.key</code>不是必须的，可以自动生成：</p>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/2021032410165252.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>而在<code>Ryujinx</code>中<code>title.key</code>也不是必须的，在<code>system</code>文件夹下只需存在<code>prod.keys</code>即可。</p>
<h2 id="42-游戏本体">4.2 游戏本体</h2>
<p>游戏本体这里推荐三个网站下载：</p>
<ul>
<li><a href="https://www.bibgame.com/">游戏年轮</a></li>
<li><a href="https://gamekegs.com/">游戏大桶</a></li>
<li><a href="https://muziwan.mzplays.com/">木子玩</a></li>
</ul>
<p>注意：游戏下载完成后需要放在一个文件夹中。</p>
<h2 id="43-固件ryujinx">4.3 固件（<code>Ryujinx</code>）</h2>
<p>在<code>Ryujinx</code>中还需要额外的固件（<code>Firmware</code>），固件的版本需要与<code>prod.keys</code>对应，固件可以到<a href="https://darthsternie.net/switch-firmwares/">此处</a>下载或者从文末提供的链接下载，目前最新的版本是<code>11.0.1</code>。</p>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/20210324102248799.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="5-yuzu">5 <code>yuzu</code></h1>
<h2 id="51-下载">5.1 下载</h2>
<p><code>yuzu</code>提供了<code>AppImage</code>，直接<a href="https://yuzu-emu.org/downloads/">下载</a>然后添加执行权限即可：</p>
<figure data-type="image" tabindex="6"><img src="https://img-blog.csdnimg.cn/20210323151106787.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>添加执行权限：</p>
<pre><code class="language-bash">chmod u+x yuzu-*.AppImage
./yuzu-*.AppImage
</code></pre>
<h2 id="52-prodkeys">5.2 <code>prod.keys</code></h2>
<p>第一次运行会提示没有<code>key</code>，先忽略进入界面，选择右上角的<code>File-&gt;Open yuzu Folder</code>，打开后，新建一个<code>keys</code>文件夹：</p>
<figure data-type="image" tabindex="7"><img src="https://img-blog.csdnimg.cn/20210323151347222.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>把<code>prod.keys</code>放进去并重启即可。</p>
<h2 id="53-添加游戏">5.3 添加游戏</h2>
<p>点击<code>Add New Game Directory</code>，选择游戏目录进行添加即可：</p>
<figure data-type="image" tabindex="8"><img src="https://img-blog.csdnimg.cn/20210323151554422.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>添加完游戏后就可以直接双击启动游戏了。</p>
<h2 id="54-配置">5.4 配置</h2>
<p><code>yuzu</code>的配置比较丰富，除了模拟器本身的配置外，每个游戏也拥有独立的配置：</p>
<figure data-type="image" tabindex="9"><img src="https://img-blog.csdnimg.cn/20210324104229876.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="10"><img src="https://img-blog.csdnimg.cn/20210324104330479.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h3 id="541-一般配置">5.4.1 一般配置</h3>
<p>一般的配置包括系统语言、一些热键等的配置，通常情况下保持默认即可：</p>
<figure data-type="image" tabindex="11"><img src="https://img-blog.csdnimg.cn/20210324104528423.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="12"><img src="https://img-blog.csdnimg.cn/20210324104544112.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>另外在按键的配置中可以根据需要选择自己合适的按键，可以根据单手柄和双手柄的形式配置：</p>
<figure data-type="image" tabindex="13"><img src="https://img-blog.csdnimg.cn/20210324133151642.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="14"><img src="https://img-blog.csdnimg.cn/20210324133215828.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h3 id="542-图形配置">5.4.2 图形配置</h3>
<p>这里的配置很重要：</p>
<figure data-type="image" tabindex="15"><img src="https://img-blog.csdnimg.cn/20210324104856956.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>主要包括：</p>
<ul>
<li><code>API</code>设置：<code>yuzu</code>支持<code>OpenGL</code>还有<code>Vulkan</code>，笔者实测发现<code>Vulkan</code>会运行得更流畅，帧率更高，具体根据个人情况进行选择，文末附录有提到两者的比较</li>
<li><code>Use disk shader cache</code>：磁盘着色器缓存，建议开启，这样就不用每次都重新编译，而是直接从磁盘加载到内存</li>
<li><code>Use asynchronous GPU emulation</code>：<code>GPU</code>异步模拟，<code>yuzu</code>重写了<code>GPU</code>显存管理器，加速了缓存机制，使得帧数得到明显提示，同时性能提升40%-400%（来自<code>BSoD Gaming</code>的测试数据，链接在文末）</li>
<li><code>Use NVDEC emulation</code>：<code>NVDEC</code>是一项硬件转码技术，能减少转码期间计算密集型任务中CPU的负担，这是<code>Nvidia</code>的一个技术，有了它，过场动画的播放会畅顺很多</li>
</ul>
<h3 id="543-游戏配置">5.4.3 游戏配置</h3>
<p><code>yuzu</code>可以根据每个游戏进行独立的配置，在对应的游戏上面右键，并选择<code>properties</code>选项卡即可进入如下界面：</p>
<figure data-type="image" tabindex="16"><img src="https://img-blog.csdnimg.cn/20210324132727669.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>大部分设置与模拟器设置一样，就不详细说了。</p>
<h2 id="55-启动游戏">5.5 启动游戏</h2>
<p>双击游戏就可以愉快地开始了。</p>
<h1 id="6-ryujinx">6 <code>Ryujinx</code></h1>
<h2 id="61-下载">6.1 下载</h2>
<p>直接到<code>Ryujinx</code>官网<a href="https://ryujinx.org/download">下载</a>即可：</p>
<figure data-type="image" tabindex="17"><img src="https://img-blog.csdnimg.cn/20210324072507918.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="62-key与固件">6.2 <code>key</code>与固件</h2>
<p>打开<code>Ryujinx</code>，<code>Windows</code>直接打开<code>exe</code>，<code>Linux</code>直接<code>./Ryujinx</code>即可，首次运行的时候应该会如下提示：</p>
<figure data-type="image" tabindex="18"><img src="https://img-blog.csdnimg.cn/20210324072957981.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>先选择OK，进入界面后选择<code>File-&gt;Open Ryujinx Folder</code>，把<code>prod.keys</code>放进<code>system</code>并重启。</p>
<figure data-type="image" tabindex="19"><img src="https://img-blog.csdnimg.cn/20210324073101872.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>重启之后，在界面中选择<code>Tools -&gt; Install Firmware -&gt; Install a firmware from XCI or ZIP</code>安装下载好的固件。</p>
<h2 id="63-添加游戏">6.3 添加游戏</h2>
<p>打开<code>Options -&gt; Settings</code>，选择其中的<code>Add</code>并选择对应的游戏文件夹进行添加即可。</p>
<figure data-type="image" tabindex="20"><img src="https://img-blog.csdnimg.cn/20210324073513388.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="64-配置">6.4 配置</h2>
<p>添加完游戏后就可以看到游戏了，别急着打开，先把一些常规设置做一下。虽然<code>Ryujinx</code>的配置选项比<code>yuzu</code>要少，但并不代表不需要配置，其中最重要的三个是<code>Input</code>、<code>System</code>和<code>Graphics</code>。</p>
<figure data-type="image" tabindex="21"><img src="https://img-blog.csdnimg.cn/20210324074016869.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h3 id="641-input">6.4.1 <code>Input</code></h3>
<p>这里是一些输入配置，与<code>yuzu</code>一样，也是可以根据双手柄以及单手柄的类型来设置键盘的按键：</p>
<figure data-type="image" tabindex="22"><img src="https://img-blog.csdnimg.cn/20210324074151198.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="23"><img src="https://img-blog.csdnimg.cn/20210324074232247.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h3 id="642-system">6.4.2 <code>System</code></h3>
<p>这是一些时区以及系统语言的设置，一般会使用操作系统的设置，不需要更改，这里说一下勾选的三个选项：</p>
<figure data-type="image" tabindex="24"><img src="https://img-blog.csdnimg.cn/2021032407440262.png" alt="在这里插入图片描述" loading="lazy"></figure>
<ul>
<li><code>VSync</code>：垂直同步，当显卡每秒渲染的帧率大于屏幕的刷新率时，会将显卡的输出与屏幕刷新率协调，从而阻止画面撕裂，比如屏幕刷新率只有<code>60Hz</code>，如果原来显卡每秒能渲染<code>120帧</code>，那么启用<code>Vsync</code>会让显卡同步屏幕的刷新率</li>
<li><code>PPTC</code>：这是一项可以减少游戏加载时间的技术，实际上是一项缓存技术，第一次启动游戏的时候会创建或更新<code>.info</code>文件，第二次启动游戏的时候从该文件决定转译哪一个函数以及怎样转译，每次游戏结束都会更新该文件。这些缓存文件的位置在<code>User’s AppData\Roaming\Ryujinx\games\&lt;game id&gt;\cache\cpu</code>或<code>~/.config/Ryujinx/games/&lt;game id&gt;/cache/cpu</code>里面</li>
</ul>
<figure data-type="image" tabindex="25"><img src="https://img-blog.csdnimg.cn/20210324081911781.png" alt="在这里插入图片描述" loading="lazy"></figure>
<ul>
<li><code>FS Integrity Checks</code>：这是一个安全性的检查选项</li>
</ul>
<h3 id="643-graphics">6.4.3 <code>Graphics</code></h3>
<figure data-type="image" tabindex="26"><img src="https://img-blog.csdnimg.cn/20210324085705582.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>这里是一些显卡相关的选项，包括：</p>
<ul>
<li>是否启用着色器缓存：建议开启，这是一项可以提高用户体验性的技术，着色器被编译后会被放进硬盘中，随着下次启动游戏从硬盘加载到内存中</li>
<li>各向异性过滤：用来过滤、处理当视角变化导致3D物体表面倾斜时造成的纹理错误等问题，可以设置从2倍到16倍，数值越大对显卡要求越高</li>
<li>分辨率缩放：默认是原生的720p或1080p，可以根据显示屏缩放调整</li>
<li>画面比例：默认16比9，根据屏幕设置即可</li>
</ul>
<h2 id="65-启动游戏">6.5 启动游戏</h2>
<p>双击愉快地启动游戏了。</p>
<h1 id="7-截图">7 截图</h1>
<p>笔者很懒就随便截了两张马里奥的：</p>
<figure data-type="image" tabindex="27"><img src="https://img-blog.csdnimg.cn/2021032413363115.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="28"><img src="https://img-blog.csdnimg.cn/20210324133644853.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="附录一vulkan还是opengl">附录一：<code>Vulkan</code>还是<code>OpenGL</code>？</h1>
<p>这里是针对<code>yuzu</code>来说的，因为<code>Ryujinx</code>只提供了<code>OpenGL</code>的<code>API</code>。</p>
<p><code>yuzu</code>提供了两种图形<code>API</code>：</p>
<ul>
<li><code>Vulkan</code></li>
<li><code>OpenGL</code></li>
</ul>
<p>笔者尝试玩了一下超级马里奥3D世界，发现<code>OpenGL</code>会经常性的卡顿，玩起来很不流畅，就连顶一个金币都会卡顿大约1s左右，这种用户体验就非常的不好，但是，使用<code>Vulkan</code>就没有问题。</p>
<figure data-type="image" tabindex="29"><img src="https://img-blog.csdnimg.cn/20210324104856956.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>当然这也有可能是游戏本身的原因，笔者并没有测试更多的游戏。下面是<code>Vulkan</code>相比起<code>OpenGL</code>的优点：</p>
<ul>
<li>更加接近底层：<code>API</code>更加接近驱动和硬件，方便开发者优化</li>
<li>多线程：<code>Vulkan</code>天然支持多线程，也支持异步数据交互以及并行绘制</li>
</ul>
<p>而下面是在<code>Linux</code>上对<code>Dota2</code>以及<code>Mad Max</code>在<code>RX 560</code>以及<code>GTX 1050 Ti</code>下不同场景不同分辨率下的测试数据，包括帧数以及<code>CPU</code>使用率（2018年7月，作者<code>Michael Larabel</code>，链接在文末），首先是<code>Dota2</code>的数据：</p>
<figure data-type="image" tabindex="30"><img src="https://img-blog.csdnimg.cn/20210324134603183.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="31"><img src="https://img-blog.csdnimg.cn/202103241346162.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="32"><img src="https://img-blog.csdnimg.cn/20210324134639827.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="33"><img src="https://img-blog.csdnimg.cn/20210324134648643.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>下面是<code>Mad Max</code>，图形预设为低，<code>1080p</code>：</p>
<figure data-type="image" tabindex="34"><img src="https://img-blog.csdnimg.cn/20210323163202970.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="35"><img src="https://img-blog.csdnimg.cn/20210323163224147.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="36"><img src="https://img-blog.csdnimg.cn/20210323163252547.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>图形预设为低，<code>2k</code>分辨率：</p>
<figure data-type="image" tabindex="37"><img src="https://img-blog.csdnimg.cn/20210324134942503.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="38"><img src="https://img-blog.csdnimg.cn/20210324135020725.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="39"><img src="https://img-blog.csdnimg.cn/20210324135035208.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>图形预设为高，<code>1080p</code>：</p>
<figure data-type="image" tabindex="40"><img src="https://img-blog.csdnimg.cn/20210324134800239.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="41"><img src="https://img-blog.csdnimg.cn/20210324134808615.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="42"><img src="https://img-blog.csdnimg.cn/20210324134838893.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>图形预设默认，<code>2k</code>分辨率：</p>
<figure data-type="image" tabindex="43"><img src="https://img-blog.csdnimg.cn/20210324135144703.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="44"><img src="https://img-blog.csdnimg.cn/20210324135152435.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="45"><img src="https://img-blog.csdnimg.cn/20210324135208401.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>可以看到<code>Vulkan</code>的大部分表现都要比<code>OpenGL</code>要好，在<code>GTX 1050 Ti</code>中，无论是<code>1080p</code>还是<code>2k</code>，在更高帧率的同时保持着更低的<code>CPU</code>使用率。</p>
<p>不过，虽然<code>Vulkan</code>能表现出更好的性能，但是要比<code>OpenGL</code>复杂得多，由于笔者不是学图形的，就不展开了，需要的请自行查阅资料。</p>
<h1 id="附录二ryujinx还是yuzu">附录二：<code>Ryujinx</code>还是<code>yuzu</code>？</h1>
<p>这里同样参考了别人的测试（数据来源<code>BSoD Gaming</code>，2020年8月，链接见文末），环境为有两组：</p>
<ul>
<li><code>i5 4690k + GTX 1080 Ti</code></li>
<li><code>i7 8700k + GTX 1080 Ti</code></li>
</ul>
<p>下面是一些测评的截图，显示了不同环境下的<code>CPU</code>使用率以及帧数：</p>
<figure data-type="image" tabindex="46"><img src="https://img-blog.csdnimg.cn/20210324141034878.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="47"><img src="https://img-blog.csdnimg.cn/20210324141125882.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="48"><img src="https://img-blog.csdnimg.cn/20210324141200195.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="49"><img src="https://img-blog.csdnimg.cn/20210324141252217.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="50"><img src="https://img-blog.csdnimg.cn/2021032414131292.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="51"><img src="https://img-blog.csdnimg.cn/20210324141412103.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>比较特别的是塞尔达传说：荒野之息，可以看到只有一组变量了，因为在低配置的机器上测试不了，而在<code>i7 8700k</code>上，可以明显看到<code>Ryujinx</code>的帧数要比<code>yuzu</code>低很多，而且<code>Ryujinx</code>的<code>CPU</code>占用率要比<code>yuzu</code>高：</p>
<figure data-type="image" tabindex="52"><img src="https://img-blog.csdnimg.cn/20210324141446801.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>另外在异界锁链中，虽然<code>yuzu</code>有着比<code>Ryujinx</code>更高的帧率，但是会出现错误的材质，如下图所示：</p>
<figure data-type="image" tabindex="53"><img src="https://img-blog.csdnimg.cn/20210324141914551.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>下面总结一下优点：</p>
<ul>
<li><code>Ryujinx</code>：新手友好，配置方便快捷，而且带有分辨率缩放功能，还有<code>Mac</code>平台支持（目前在计划中）</li>
<li><code>yuzu</code>：能针对硬件以及游戏进行更详细的配置，而不是像<code>Ryujinx</code>那样的统一全局配置，游戏加载速度更快，更重要的是带有<code>Vulkan API</code>支持，这是最大的优点</li>
</ul>
<p>缺点：</p>
<ul>
<li><code>Ryujinx</code>：新游戏加载缓慢，需要较长时间等待加载，但是有了<code>PPTC</code>的帮助，加载时间快了不少</li>
<li><code>yuzu</code>：配置较为复杂，而且不具备分辨率缩放的功能，会有更好的内存使用率以及页面文件使用率</li>
</ul>
<p>如何选择取舍就看各位读者了。</p>
<h1 id="附录三资源下载">附录三：资源下载</h1>
<p>提供了<code>prod.keys</code>、最新的<code>Windows</code>+<code>Linux</code>模拟器、固件以及测试所用的游戏，链接请关注公众号“氷泠之路”并回复关键字<code>Switch</code>获取。</p>
<h1 id="参考">参考</h1>
<p>1、<a href="https://blog.ryujinx.org/introducing-profiled-persistent-translation-cache/">Ryujinx-PPTC</a></p>
<p>2、<a href="https://yuzu-emu.org/entry/yuzu-nvdec-emulation/">yuzu-New Feature Release - NVDEC emulation!</a></p>
<p>3、<a href="https://www.youtube.com/watch?v=n-fElYfNmYo">YouTube-Yuzu Emulator - The Async GPU Update | 40 - 400% Performance Improvements</a></p>
<p>4、<a href="https://www.phoronix.com/scan.php?page=article&amp;item=opengl-vulkan-july2018&amp;num=1">Vulkan vs. OpenGL Performance For Linux Games</a></p>
<p>5、<a href="https://www.zhihu.com/question/41053397">知乎-openGL、vulkan求解惑？</a></p>
<p>6、<a href="https://www.zhihu.com/question/46536915/answer/790880788">知乎-Vulkan相比于OpenGL、DX12、Metal和Mantle有什么优势、劣势？</a></p>
<p>7、<a href="https://www.youtube.com/watch?v=4pVpHcyJeSM">YouTube-What is the Best Nintendo Switch Emulator? Performance &amp; Features Tested</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第283期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-283-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-283-qi/">
        </link>
        <updated>2021-03-24T07:20:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>假如生活出卖了你，希望是论斤卖，毕竟你比较肥。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>几日不来春便老，开尽桃花。<br>
——吴琚《浪淘沙·岸柳可藏鸦》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>相见争如不见，多情何似无情。</p>
</blockquote>
]]></content>
    </entry>
</feed>