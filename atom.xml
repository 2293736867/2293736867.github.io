<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://2293736867.github.io</id>
    <title>氷泠&apos;s blog</title>
    <updated>2020-09-21T08:40:56.756Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://2293736867.github.io"/>
    <link rel="self" href="https://2293736867.github.io/atom.xml"/>
    <subtitle>我配不上你，
纵然很努力。</subtitle>
    <logo>https://2293736867.github.io/images/avatar.png</logo>
    <icon>https://2293736867.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 氷泠&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[每日分享 第101期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-101-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-101-qi/">
        </link>
        <updated>2020-09-25T08:24:54.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>你可以像猪一样懒，却无法像只猪一样，懒得心安理得。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>秋浦田舍翁，采鱼水中宿。<br>
——李白《秋浦歌十七首》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>在人间有谁或者不像是一场炼狱，我不哭我已经没有尊严能放弃。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第100期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-100-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-100-qi/">
        </link>
        <updated>2020-09-24T08:24:13.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>别人扮猪吃老虎，你只能扮猪。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>未觉池塘青草梦，结前梧叶已秋声。<br>
——偶成《朱熹》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>你还是这么冷漠啊。不过，仅此而已的话，我是不会泄气的。</p>
</blockquote>
<h1 id="100期纪念">100期纪念</h1>
<p>打个卡。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第99期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-99-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-99-qi/">
        </link>
        <updated>2020-09-23T08:21:41.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>任何时候都记得微笑，这会让你看起来，像个不能随便惹的神经病。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>云淡风轻近午天，傍花随柳过前川。<br>
——程颢《春日偶成》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>扬帆起航，于舟渡之。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第98期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-98-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-98-qi/">
        </link>
        <updated>2020-09-22T08:21:09.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>自古情深留不住，总是套路得人心。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>闲云潭影日悠悠，物换星移几度秋。<br>
——王勃《藤王阁诗》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>我们是独立的个体，却不是孤独的存在。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第97期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-97-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-97-qi/">
        </link>
        <updated>2020-09-21T08:19:52.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>你努力找他说话的样子，像极了商场里的导购。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>冉冉秋光留不住，满阶红叶暮。<br>
——李煜《谢秋恩·冉冉秋光留不住》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>I like you, but just like you.</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第96期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-96-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-96-qi/">
        </link>
        <updated>2020-09-19T17:12:18.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>当年我背井离乡，乡里人从此再也没有，喝上一口井水。</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>鸟类是鄂目动物的近亲，也是已经灭绝的有羽毛的恐龙的后代。这也使得了鸟类成了唯一“活下来”的恐龙该。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>塞下秋来风景异，衡阳雁去无留意。<br>
——范仲淹《渔家傲·秋思》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>每个人的心里，都有一个忘不记，却无法拥抱珍惜的人。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[解决JDK9以上的非法反射访问警告]]></title>
        <id>https://2293736867.github.io/post/jie-jue-jdk9-yi-shang-de-fei-fa-fan-she-fang-wen-jing-gao/</id>
        <link href="https://2293736867.github.io/post/jie-jue-jdk9-yi-shang-de-fei-fa-fan-she-fang-wen-jing-gao/">
        </link>
        <updated>2020-09-19T12:28:16.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-问题描述">1 问题描述</h1>
<p><code>JDK9</code>以上很多库都有这种非法反射访问的警告，比如<code>protostuff</code>：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200919194048433.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>解决方法两个：</p>
<ul>
<li><code>JDK</code>降级</li>
<li><code>添加JVM</code>参数</li>
</ul>
<h1 id="2-原因">2 原因</h1>
<p>降到<code>JDK8</code>能解决以上问题。</p>
<p>但是这不是本文的重点。</p>
<p>先说一下出现该警告的原因，笔者使用的<code>JDK</code>为<code>OpenJDK 11</code>，<code>JDK9</code>以上模块不能使用反射去访问非公有的成员/成员方法以及构造方法，除非模块标识为<code>opens</code>去允许反射访问。旧<code>JDK</code>制作的库（<code>JDK8</code>及以下）运行在<code>JDK9</code>上会自动被标识为<code>未命名模块</code>，为了处理该警告，<code>JDK9</code>以上提出了一个新的<code>JVM</code>参数：<code>--illegal-access</code>。</p>
<h1 id="3-illegal-access">3 <code>--illegal-access</code></h1>
<p>该参数有四个可选值：</p>
<ul>
<li><code>permit</code>：默认值，允许通过反射访问，因此会提示像上面一样的警告，这个是首次非法访问警告，后续不警告</li>
<li><code>warn</code>：每次非法访问都会警告</li>
<li><code>debug</code>：在<code>warn</code>的基础上加入了类似<code>e.printStackTrace()</code>的功能</li>
<li><code>deny</code>：禁止所有的非法访问除了使用特别的命令行参数排除的模块，比如使用<code>--add-opens</code>排除某些模块使其能够通过非法反射访问</li>
</ul>
<p>因此解决的办法很简单，将其设置为<code>deny</code>，并添加<code>--add-opens</code>开启对应的允许非法反射访问的模块即可。</p>
<p>可以通过先设置为<code>debug</code>找到对应的非法访问的代码，比如<code>protostuff</code>中的非法反射访问代码段如下：</p>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200919201147228.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20200919201213390.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>这都是<code>JDK</code>基本模块的代码，因此，添加<code>--add-opens=java.base/java.lang.invoke=ALL-UNNAMED</code>即可。<code>--add-opens</code>可以使模块中的包对其他模块开放，这样就可以在运行期使用深层反射访问该程序包中的所有成员类型。</p>
<h1 id="4-总结">4 总结</h1>
<p>因此解决的办法是添加如下两个<code>JVM</code>参数：</p>
<pre><code class="language-bash">--illegal-access=deny --add-opens java.base/java.lang=ALL-UNNAMED
</code></pre>
<p><code>IDEA</code>可以在运行配置中的<code>VM options</code>中添加：</p>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20200919201617951.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>如果使用<code>Maven</code>打包的时候还是会出现警告，可以在<code>IDEA</code>中的<code>Maven</code>配置中添加全局的<code>Maven</code>参数：</p>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/2020091920210955.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>另外，如果使用<code>Gradle</code>而不是<code>Maven</code>作为管理工具，<code>Gradle</code>测试的时候还是会显示警告，尽管<code>Gradle</code>运行配置里面有<code>VM Options</code>选项：</p>
<figure data-type="image" tabindex="6"><img src="https://img-blog.csdnimg.cn/20200919201812198.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>但在这里添加是没用的，正确的做法是在<code>build.gradle</code>中添加：</p>
<pre><code class="language-css">test {
    useJUnitPlatform()
    jvmArgs('--illegal-access=deny')
    jvmArgs('--add-opens', 'java.base/java.lang.invoke=ALL-UNNAMED')
}
</code></pre>
<p>这样<code>Gradle</code>测试也没有问题了。</p>
<h1 id="5-参考">5 参考</h1>
<ul>
<li><a href="https://www.logicbig.com/tutorials/core-java-tutorial/modules/illegal-access-operations.html">Java 9 Modules - The Unnamed Module and Accessing JDK Internal Code via Reflection</a></li>
<li><a href="https://github.com/gradle/gradle/issues/6725">Gradle Github Issue-Gradle 4.10: Illegal reflective access to method java.lang.Object.finalize</a></li>
<li><a href="https://www.cnblogs.com/IcanFixIt/p/7144366.html">博客园-Java 9 揭秘（9. 打破模块封装）</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第95期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-95-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-95-qi/">
        </link>
        <updated>2020-09-18T17:12:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>我每天拼了命努力就是为了，向那些看不起我的人证明，他们是对的。</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>二战时，美国一艘驱逐舰靠扔土豆战胜了一艘日本潜水艇，因为日本人以为他们扔的是手雷。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>伤心枕上三更雨，点滴霖霪。<br>
——李清照《添字丑奴儿·窗前谁种芭蕉树》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>就像那句狠话：有一天，我一定会后悔的。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Spring Boot demo系列（七）：邮件服务]]></title>
        <id>https://2293736867.github.io/post/spring-boot-demo-xi-lie-qi-you-jian-fu-wu/</id>
        <link href="https://2293736867.github.io/post/spring-boot-demo-xi-lie-qi-you-jian-fu-wu/">
        </link>
        <updated>2020-09-18T15:12:04.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-概述">1 概述</h1>
<p><code>Spring Boot</code>整合邮件服务，包括发送普通的文本邮件以及带附件的邮件。</p>
<h1 id="2-邮箱选择">2 邮箱选择</h1>
<p>这里选择的是<code>QQ</code>邮箱作为发送的邮箱，当然也可以选择其他的邮箱，只是具体的配置不一样。</p>
<p>使用<code>QQ</code>邮箱的话，需要在个人设置中开启<code>SMTP</code>服务：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200918163806172.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200918163831675.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>发送短信后完成验证即可，会有一个授权码，先复制下来保存。</p>
<h1 id="3-具体实现">3 具体实现</h1>
<h2 id="31-依赖">3.1 依赖</h2>
<p>提供了<code>starter</code>：</p>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<p><code>gradle</code>：</p>
<pre><code class="language-bash">implementation 'org.springframework.boot:spring-boot-starter-mail'
</code></pre>
<h2 id="32-邮件接口">3.2 邮件接口</h2>
<p>只有两个简单的接口，一个是发送纯文本的，一个是发送带附件的：</p>
<pre><code class="language-java">public interface MailService {
    void sendSimpleMail(String to,String subject,String content);
    void sendAttachmentMail(String to, String subject, String content, Path file) throws MessagingException;
}
</code></pre>
<h2 id="33-接口实现">3.3 接口实现</h2>
<pre><code class="language-java">@Service
@RequiredArgsConstructor(onConstructor = @__(@Autowired))
public class MailServiceImpl implements MailService{
    private final JavaMailSender sender;

    @Value(&quot;${spring.mail.username}&quot;)
    private String from;

    @Override
    public void sendSimpleMail(String to, String subject, String content) {
        SimpleMailMessage message = new SimpleMailMessage();
        message.setFrom(from);
        message.setTo(to);
        message.setSubject(subject);
        message.setText(content);
        sender.send(message);
    }

    @Override
    public void sendAttachmentMail(String to, String subject, String content, Path file) throws MessagingException {
        MimeMessage message = sender.createMimeMessage();
        MimeMessageHelper helper = new MimeMessageHelper(message,true);
        helper.setFrom(from);
        helper.setTo(to);
        helper.setSubject(subject);
        helper.setText(content);
        helper.addAttachment(file.getFileName().toString(),new FileSystemResource(file));
        sender.send(message);
    }
}
</code></pre>
<p><code>JavaMailSender</code>是<code>Spring Boot</code>携带的邮件发送接口，注入后可以发送<code>SimpleMailMessage</code>以及<code>MimeMessage</code>类型的信息。</p>
<ul>
<li><code>SimpleMailMessage</code>：简单的邮件信息对象，封装了一些常见的属性，比如寄信地址以及收信地址，发送日期，主题，内容等</li>
<li><code>MimeMessage</code>：发送<code>MIME</code>类型的邮件信息，<code>MIME</code>指的是<code>Multipurpose Internet Mail Extensiosns</code>，是描述消息内容类型的因特网标准，能包含文本，图像，音频，视频以及其他应用程序专用的数据</li>
<li><code>MimeMessageHelper</code>：用于设置<code>MimeMessage</code>属性的类，可以利用其中的<code>addAttachment</code>添加附件</li>
<li><code>setFrom</code>/<code>setTo</code>/<code>setSubject</code>/<code>setText</code>：分别表示设置<code>寄信地址</code>/<code>收信地址</code>/<code>主题</code>/<code>内容</code></li>
</ul>
<h2 id="34-测试类">3.4 测试类</h2>
<pre><code class="language-java">@SpringBootTest
@RequiredArgsConstructor(onConstructor = @__(@Autowired))
class DemoApplicationTests {
	private final MailService service;

	@Test
	void contextLoads() throws URISyntaxException, MessagingException {
		service.sendSimpleMail(&quot;xxx@xxx.com&quot;,&quot;这是主题&quot;,&quot;这是内容&quot;);
		service.sendAttachmentMail(&quot;xxxx@xx.com&quot;,&quot;这是主题&quot;,&quot;这是内容&quot;, Path.of(Objects.requireNonNull(getClass().getClassLoader().getResource(&quot;pic/1.jpg&quot;)).toURI()));
		//附件为resources下pic/1.jpg
		service.sendAttachmentMail(&quot;xxxx@xxx.com&quot;,&quot;这是主题&quot;,&quot;这是内容&quot;, Path.of(&quot;/&quot;,&quot;srv&quot;,&quot;http&quot;,&quot;1.jpg&quot;));
		//附件为/srv/http/1.jpg
	}
</code></pre>
<p>发送文本直接指定主题和内容即可，发送带附件的话：</p>
<ul>
<li>如果是<code>resources</code>下的内容，使用<code>getClass().getClassLoader().getReource(&quot;xxx/xxx&quot;)</code></li>
<li>如果是绝对路径，使用<code>Path.of(&quot;/&quot;,&quot;path1&quot;,&quot;path2&quot;,...,&quot;filename&quot;)</code></li>
</ul>
<h2 id="35-配置文件">3.5 配置文件</h2>
<pre><code class="language-yaml">spring:
  mail:
    host: smtp.qq.com
    username: xxxxxxx@qq.com
    password: xxxxxxxxxx
    port: 465
    properties:
      mail:
        smtp:
          ssl:
            enable: true
          auth: true
          starttls:
            enable: true
            required: true
</code></pre>
<p>作为<code>Demo</code>使用只需要修改<code>username</code>以及<code>password</code>即可。</p>
<ul>
<li><code>username</code>：发送的用户邮箱</li>
<li><code>password</code>：不是邮箱密码，而是授权码，就是刚才开启<code>SMTP</code>服务出现的授权码</li>
</ul>
<p>其他配置说明：</p>
<ul>
<li><code>host</code>：<code>SMTP</code>服务器地址</li>
<li><code>port</code>：端口，可以选择<code>465</code>/<code>587</code>，<code>host</code>以及<code>port</code>可以参考<code>QQ</code>邮箱<a href="https://service.mail.qq.com/cgi-bin/help?subtype=1&amp;&amp;id=28&amp;&amp;no=371">文档</a></li>
<li><code>properties</code>：里面都是一些安全设置，开启<code>SSL</code>以及认证等</li>
</ul>
<h2 id="36-测试">3.6 测试</h2>
<p>修改测试类的邮箱，运行单元测试即可。</p>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/2020091822073816.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>如果没通过，可以参考<a href="https://blog.csdn.net/wangyanming123/article/details/52734334">这里</a>，罗列了常见的错误码以及可能的解决方案。</p>
<h1 id="4-加密">4 加密</h1>
<p>由于用户名以及密码都直接写在了配置文件中，如果泄露的话会很危险，因此需要对配置文件进行加密。</p>
<p>具体的话可以参考笔者之前的原力计划文章，<a href="https://blog.csdn.net/qq_27525611/article/details/105797382">戳这里</a>。</p>
<h2 id="41-依赖">4.1 依赖</h2>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;com.github.ulisesbocchio&lt;/groupId&gt;
    &lt;artifactId&gt;jasypt-spring-boot-starter&lt;/artifactId&gt;
    &lt;version&gt;3.0.3&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<p><code>gradle</code>：</p>
<pre><code class="language-bash">implementation(&quot;com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.3&quot;)
</code></pre>
<h2 id="42-配置文件">4.2 配置文件</h2>
<p>配置文件只需要加上加密口令即可：</p>
<pre><code class="language-yaml">jasypt:
  encryptor:
    password: test
</code></pre>
<p>默认使用的是<code>PBE</code>加密算法，<code>PBE</code>其实是一种组合加密算法，默认是采用<code>HCMA</code>算法（混合<code>CMA-ES</code>算法）+<code>SHA512</code>消息摘要算法+<code>AES256</code>对称加密算法。</p>
<p>另外，如果不想在配置文件直接写上加密的口令，可以使用以下三种方法对口令进行参数化：</p>
<p>命令行参数（运行时设置）：</p>
<pre><code class="language-bash">java -jar xxx.jar --jasypt.encryptor.password=test
</code></pre>
<p>应用环境变量（运行时设置）：</p>
<pre><code class="language-bash">java -Djasypt.encryptor.password=test -jar xxx.jar
</code></pre>
<p>系统环境变量（在配置文件中设置）：</p>
<pre><code class="language-bash">jasypt:
  encryptor:
    password: ${TEST}
# 表示获取环境变量TEST的值作为加密口令
</code></pre>
<h2 id="43-测试类">4.3 测试类</h2>
<p>新建一个测试类：</p>
<pre><code class="language-java">@SpringBootTest
@RequiredArgsConstructor(onConstructor = @__(@Autowired))
public class EncryptAndDecrypt {
    private final StringEncryptor encryptor;
    @Value(&quot;${spring.mail.username}&quot;)
    private String username;
    @Value(&quot;${spring.mail.password}&quot;)
    private String password;

    @Test
    public void encrypt()
    {
        System.out.println(encryptor.encrypt(username));
        System.out.println(encryptor.encrypt(password));
    }

    @Test
    public void decrypt()
    {
        System.out.println(username);
        System.out.println(password);
    }
}
</code></pre>
<h2 id="44-获取密文">4.4 获取密文</h2>
<p>假设明文如下：</p>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20200918221733675.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>运行<code>encrypt</code>即可，输出如下：</p>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/20200918222337765.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="45-替换明文">4.5 替换明文</h2>
<p>加上前缀<code>ENC(</code>以及后缀<code>)</code>去替换明文：</p>
<figure data-type="image" tabindex="6"><img src="https://img-blog.csdnimg.cn/20200918222455717.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="46-测试">4.6 测试</h2>
<p>获取明文直接运行<code>decrypt</code>即可，输出：</p>
<figure data-type="image" tabindex="7"><img src="https://img-blog.csdnimg.cn/20200918222538977.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>这样就完成加密了。</p>
<h1 id="5-源码">5 源码</h1>
<p><code>Java</code>版：</p>
<ul>
<li><a href="https://github.com/2293736867/SpringBootDemoJava/tree/master/Mail">Github</a></li>
<li><a href="https://gitee.com/u6b7b5fc3/SpringBootDemoJava/tree/master/Mail">码云</a></li>
<li><a href="https://codechina.csdn.net/qq_27525611/SpringBootDemoJava/-/tree/master/Mail">CODE.CHINA</a></li>
</ul>
<p><code>Kotlin</code>版：</p>
<ul>
<li><a href="https://github.com/2293736867/SpringBootDemoKotlin/tree/master/Mail">Github</a></li>
<li><a href="https://gitee.com/u6b7b5fc3/SpringBootDemoKotlin/tree/master/Mail">码云</a></li>
<li><a href="https://codechina.csdn.net/qq_27525611/SpringBootDemoKotlin/-/tree/master/Mail">CODE.CHINA</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Spring Boot demo系列（六）：HTTPS]]></title>
        <id>https://2293736867.github.io/post/spring-boot-demo-xi-lie-liu-https/</id>
        <link href="https://2293736867.github.io/post/spring-boot-demo-xi-lie-liu-https/">
        </link>
        <updated>2020-09-18T04:39:22.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-概述">1 概述</h1>
<p>本文演示了如何给<code>Spring Boot</code>应用加上<code>HTTPS</code>的过程。</p>
<h1 id="2-证书">2 证书</h1>
<p>虽然证书能自己生成，使用<code>JDK</code>自带的<code>keytool</code>即可，但是生产环境是不可能使用自己生成的证书的，因此这里使用的证书是购买过来的，具体流程就不说了，去云厂商处购买即可。</p>
<h1 id="3-配置文件">3 配置文件</h1>
<p>新建一个<code>Spring Boot</code>工程，在配置文件添加如下参数：</p>
<pre><code class="language-bash">server.ssl.key-store=classpath:crt/xxx.pfx
server.ssl.key-store-type=PKCS12
server.ssl.key-store-password=xxxx
</code></pre>
<p>具体配置需要结合云厂商的文档，笔者在阿里云上买的证书，下载的是<code>Tomcat</code>的版本，参照里面的帮助设置以上三个参数。</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200918075422879.png" alt="在这里插入图片描述" loading="lazy"></figure>
<ul>
<li><code>server.ssl.key-store</code>：证书文件的位置，为<code>classpath:crt/xxx</code>，其中<code>classpath:</code>表示使用<code>resources</code>下的路径，但是需要加上一个文件夹，比如，假设证书文件名为<code>1.pfx</code>，直接放在<code>resources</code>下的话，路径就是<code>classpath:1.pfx</code>，这样是访问不了的，但是加上目录后，也就是如果放在<code>resources/crt</code>下，路径就是<code>classpath:crt/1.pfx</code>，这样就可以访问了</li>
<li><code>server.ssl.key-store-type</code>：<code>PKCS12</code>，根据阿里云的<code>Tomcat</code>配置文档得出，具体的话根据自己的云厂商证书部署文档决定</li>
<li><code>server.ssl.key-store-password</code>：证书下载后有两个文件，一个是证书，一个是<code>pfx-password.txt</code>，这里的密码就是<code>pfx-password.txt</code>的内容</li>
</ul>
<h1 id="4-本地测试">4 本地测试</h1>
<p>直接<code>run</code>即可，首先可以试一下用<code>HTTP</code>访问：</p>
<pre><code class="language-bash">http://localhost:8080
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200918080936613.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>会提示需要使用<code>HTTPS</code>，改为<code>HTTPS</code>后：</p>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20200918113622156.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>这是因为笔者的证书绑定了域名的缘故，没有使用域名访问，修改本地<code>host</code>：</p>
<pre><code class="language-bash">127.0.0.1 www.xxx.xxx
</code></pre>
<p>这样使用域名访问就不会显示不安全了：</p>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20200918113841823.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="5-docker部署">5 <code>Docker</code>部署</h1>
<p>打包，改名为<code>demo.jar</code>，上传到服务器。</p>
<p>其他更详细的<code>Docker</code>部署操作请查看笔者之前的博客，<a href="https://blog.csdn.net/qq_27525611/article/details/108571663">戳这里</a>。</p>
<p>这里给出<code>Dockerfile</code>：</p>
<pre><code class="language-bash">FROM adoptopenjdk/openjdk11:aarch64-centos-jdk-11.0.8_10

MAINTAINER test &lt;test@qq.com&gt;

VOLUME /tmp

EXPOSE 8080

ADD demo.jar demo.jar

ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;demo.jar&quot;]
</code></pre>
<p>创建镜像与容器并运行：</p>
<pre><code class="language-bash">docker build -t demo .
docker run -d -p 8888:8080 demo
</code></pre>
<p>测试：</p>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/20200918120313108.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="6-源码">6 源码</h1>
<p><code>Java</code>版：</p>
<ul>
<li><a href="https://github.com/2293736867/SpringBootDemoJava/tree/master/HTTPS">Github</a></li>
<li><a href="https://gitee.com/u6b7b5fc3/SpringBootDemoJava/tree/master/HTTPS">码云</a></li>
<li><a href="https://codechina.csdn.net/qq_27525611/SpringBootDemoJava/-/tree/master/HTTPS">CODE.CHINA</a></li>
</ul>
<p><code>Kotlin</code>版：</p>
<ul>
<li><a href="https://github.com/2293736867/SpringBootDemoKotlin/tree/master/HTTPS">Github</a></li>
<li><a href="https://gitee.com/u6b7b5fc3/SpringBootDemoKotlin/tree/master/HTTPS">码云</a></li>
<li><a href="https://codechina.csdn.net/qq_27525611/SpringBootDemoKotlin/-/tree/master/HTTPS">CODE.CHINA</a></li>
</ul>
]]></content>
    </entry>
</feed>