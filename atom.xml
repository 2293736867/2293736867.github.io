<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://2293736867.github.io</id>
    <title>氷泠&apos;s blog</title>
    <updated>2020-09-08T09:20:34.788Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://2293736867.github.io"/>
    <link rel="self" href="https://2293736867.github.io/atom.xml"/>
    <subtitle>我配不上你，
纵然很努力。</subtitle>
    <logo>https://2293736867.github.io/images/avatar.png</logo>
    <icon>https://2293736867.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 氷泠&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[每日分享 第86期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-86-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-86-qi/">
        </link>
        <updated>2020-09-09T17:03:15.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>钱不是万能的，但有钱真的可以为所欲为。</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>2010年，哥伦比亚军队制作了一首名为《Better Days》的歌曲，其副歌中嵌入了莫尔斯电码，并在被叛军控制的领土上播出，以此提高人质的士气。其密文如下：“已有19人获救，你就是下一个，不要放弃希望”。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>古刹疏钟度，遥岚破风悬。<br>
——李贺《南园十三首》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>不要想，去感受。</p>
</blockquote>
<h1 id="每日音乐">每日音乐</h1>
<blockquote>
<p><a href="https://www.kugou.com/song/143mmx36.html#hash=530B4F05106ABB8DD5EFE29AAFB6D306&amp;album_id=36183150">嚣张（粤语）-大泫</a></p>
</blockquote>
<blockquote>
<p>请你讲<br>
给我知<br>
你想说的话<br>
其实我<br>
还是我<br>
想得太多<br>
如何能<br>
强忍眼泪<br>
去怀抱孤独进睡<br>
怎么会<br>
不可能<br>
再与你一堆</p>
</blockquote>
<blockquote>
<p>不要讲<br>
给我知<br>
你的规矩吧<br>
仍是我<br>
全做错<br>
现已丑化<br>
别埋藏<br>
容不了下去<br>
加深这空虚<br>
烧光那<br>
些多余<br>
忘记尽瘁</p>
</blockquote>
<blockquote>
<p>奋力做个傀儡愿意破碎受重伤<br>
黑暗像是伴着寂寞<br>
共我做对象<br>
偶然发现你在<br>
我旁拍掌<br>
还是这么嚣张<br>
不再日日夜夜<br>
痴心卑恭地妄想<br>
想要改写怎么仿佛<br>
听到你声响<br>
多可笑<br>
还是打了败仗</p>
</blockquote>
<blockquote>
<p>不要讲<br>
给我知<br>
你的规矩吧<br>
仍是我<br>
全做错<br>
现已丑化<br>
别埋藏<br>
容不了下去<br>
加深这空虚<br>
烧光那<br>
些多余<br>
忘记尽瘁</p>
</blockquote>
<blockquote>
<p>奋力做个傀儡愿意破碎受重伤<br>
黑暗像是伴着寂寞共我做对象<br>
偶然发现你在我旁拍掌<br>
还是这么嚣张<br>
不再日日夜夜<br>
痴心卑恭地妄想<br>
想要改写怎么仿佛听到你声响<br>
多可笑<br>
还是打了败仗</p>
</blockquote>
<blockquote>
<p>奋力做个傀儡愿意破碎受重伤<br>
黑暗像是伴着寂寞共我做对象<br>
偶然发现你在我旁拍掌<br>
还是这么嚣张<br>
不再日日夜夜<br>
痴心卑恭地妄想<br>
想要改写怎么仿佛听到你声响<br>
多可笑<br>
还是打了败仗</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第85期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-85-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-85-qi/">
        </link>
        <updated>2020-09-09T14:28:07.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>没人牵手，我就揣兜。</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>在大萧条期间，一位银行家说服佛罗里达州Quincy镇的家庭以每股19美元的价格购买可口可乐的股票。后来，该镇以67位百万富翁成为美国人均最富有的地方。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>酒贱常愁客少，月明多被云妨。<br>
——苏轼《西江月·世事一场大梦》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>去死两次！</p>
</blockquote>
<h1 id="每日音乐">每日音乐</h1>
<blockquote>
<p><a href="http://www.yymp3.com/Play/9181/116999.htm">月牙湾-F.I.R</a></p>
</blockquote>
<blockquote>
<p>敦煌天空的沙粒<br>
带着我们的记忆<br>
我从半路看回去<br>
这秦关漫漫好婉踞</p>
</blockquote>
<blockquote>
<p>梦想穿过了西域<br>
包含了多少的禅意<br>
爱情像一本游记<br>
我会找寻它的密语<br>
看月牙湾下的泪光<br>
在丝路上被遗忘</p>
</blockquote>
<blockquote>
<p>是谁的心啊<br>
孤单地留下<br>
他还好吗<br>
我多想爱他<br>
那永恒的泪<br>
凝固那一句话<br>
也许可能蒸发</p>
</blockquote>
<blockquote>
<p>是谁的爱啊<br>
比泪水坚强<br>
轻声呼唤<br>
就让我融化<br>
每一滴雨水<br>
演化成我翅膀<br>
想着我爱的人<br>
追吧</p>
</blockquote>
<blockquote>
<p>梦想穿过了西域<br>
包含了多少的禅意<br>
爱情像一本游记<br>
我会找寻它的密语<br>
看月牙湾下的泪光<br>
在丝路上被遗忘</p>
</blockquote>
<blockquote>
<p>是谁的心啊<br>
孤单地留下<br>
他还好吗<br>
我多想爱他<br>
那永恒的泪<br>
凝固那一句话<br>
也许可能蒸发</p>
</blockquote>
<blockquote>
<p>是谁的爱啊<br>
比泪水坚强<br>
轻声呼唤<br>
就让我融化<br>
每一滴雨水<br>
演化成我翅膀<br>
向着我爱的人<br>
追吧</p>
</blockquote>
<blockquote>
<p>是谁的心啊<br>
孤单地留下<br>
他还好吗<br>
我多想爱他<br>
那永恒的泪<br>
凝固那一句话<br>
也许可能蒸发</p>
</blockquote>
<blockquote>
<p>是谁的爱啊<br>
比泪水坚强<br>
轻声呼唤<br>
就让我融化<br>
每一滴雨水<br>
演化成我翅膀<br>
向着我爱的人<br>
追吧</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Spring 学习笔记（二）：SpringIoC]]></title>
        <id>https://2293736867.github.io/post/spring-xue-xi-bi-ji-er-springioc/</id>
        <link href="https://2293736867.github.io/post/spring-xue-xi-bi-ji-er-springioc/">
        </link>
        <updated>2020-09-08T09:18:55.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-ioc与di">1 <code>IoC</code>与<code>DI</code></h1>
<p><code>IoC</code>是<code>Inversion of Control</code>的简称，也就是控制反转。通常来说，创建对象需要调用者手动创建，也就是<code>new XXX()</code>的方式。当<code>Spring</code>框架出现后，对象的实例不再由调用者创建，而是由<code>Spring</code>容器创建，这样控制权就由调用者转移到<code>Spring</code>容器，控制权发生了反转，这就是<code>Spring</code>的控制反转。从<code>Spring</code>容器来看，<code>Spring</code>容器负责将被依赖对象赋值给调用者的成员变量，相当于为调用者注入它所依赖的实例，这就是<code>Spring</code>的依赖注入（<code>Dependency Injection</code>，<code>DI</code>）。</p>
<p>一句话总结：</p>
<ul>
<li><strong><code>IoC</code>：控制权由调用者交由<code>Spring</code>容器，控制发生了反转</strong></li>
<li><strong><code>DI</code>：由<code>Spring</code>容器注入需要的值到对象中</strong></li>
</ul>
<h1 id="2-spring-ioc容器">2 <code>Spring IoC</code>容器</h1>
<p><code>Spring</code>中实现<code>IoC</code>的是<code>Spring IoC</code>容器，主要基于以下两个接口：</p>
<ul>
<li><code>BeanFactory</code></li>
<li><code>ApplicationContext</code></li>
</ul>
<h2 id="21-beanfactory">2.1 <code>BeanFactory</code></h2>
<p>位于<code>org.springframework.beans.factory</code>下，提供了完整的<code>IoC</code>服务支持，是一个管理<code>Bean</code>工厂，主要负责初始化各种<code>Bean</code>。可以通过<code>XmlBeanFactory</code>来获取<code>XML</code>文件中的<code>Bean</code>并进行装配，例子如下：</p>
<pre><code class="language-java">BeanFactory factory = new XmlBeanFactory(new FileSystemResource(&quot;/xxx/xxx/xxx/xxx/applicationContext.xml&quot;));
TestInterface test = (TestInterface)factory.getBean(&quot;test&quot;);
test.hello();
</code></pre>
<p>需要使用绝对路径，而且，该方法已经过时了：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200908123818784.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>因此不推荐使用。</p>
<h2 id="22-applicationcontext">2.2 <code>ApplicationContext</code></h2>
<p><code>ApplicationContext</code>是<code>BeanFactory</code>的子接口，也称为应用上下文，除了包含<code>BeanFactory</code>的功能外还添加了国际化、资源访问、事件传播等的支持，创建<code>ApplicationContext</code>的实例有以下三种方法：</p>
<ul>
<li><code>ClassPathXmlApplicationContext</code></li>
<li><code>FileSystemXmlApplicationContext</code></li>
<li><code>Web</code>服务器实例化</li>
</ul>
<h3 id="221-classpathxmlapplicationcontext">2.2.1 <code>ClassPathXmlApplicationContext</code></h3>
<p>该类从<code>resources</code>下寻找指定的<code>XML</code>文件：</p>
<pre><code class="language-java">ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);
TestInterface test = (TestInterface)context.getBean(&quot;test&quot;);
test.hello();
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/202009081242295.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h3 id="222-filesystemxmlapplicationcontext">2.2.2 <code>FileSystemXmlApplicationContext</code></h3>
<p>该类读取配置文件需要加上前缀：</p>
<ul>
<li><code>classpath:</code>：该前缀表示从类路径读取，对于<code>Maven</code>项目来说就是<code>resources</code></li>
<li><code>file:</code>：该前缀表示从绝对路径获取</li>
</ul>
<p>例子：</p>
<pre><code class="language-java">ApplicationContext context = new FileSystemXmlApplicationContext(&quot;classpath:applicationContext.xml&quot;);
//ApplicationContext context = new FileSystemXmlApplicationContext(&quot;file:/xxx/xxx/xxx/xxxx/xxx/applicationContext.xml&quot;);
</code></pre>
<h3 id="223-web服务器实例化">2.2.3 <code>Web</code>服务器实例化</h3>
<p>一般使用基于<code>ContextLoaderListener</code>的实现方式，修改<code>web.xml</code>，添加如下代码：</p>
<pre><code class="language-xml">&lt;context-param&gt;
    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
    &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;
    &lt;listener&gt;
        &lt;listener-class&gt;
            org.springframework.web.context.ContextLoaderListener
        &lt;/listener-class&gt;
    &lt;/listener&gt;
&lt;/context-param&gt;
</code></pre>
<h1 id="3-di的两种方法">3 <code>DI</code>的两种方法</h1>
<p><code>DI</code>通常有两种实现方式：</p>
<ul>
<li>构造方法注入</li>
<li><code>setter</code>注入</li>
</ul>
<p>下面分别来看一下。</p>
<h2 id="31-构造方法注入">3.1 构造方法注入</h2>
<p><code>Spring</code>可以利用反射机制通过构造方法完成注入，比如有以下三个类：</p>
<pre><code class="language-java">public interface TestInterface {
    void hello();
}

public class TestA implements TestInterface {
    @Override
    public void hello() {
        System.out.println(&quot;Test A&quot;);
    }
}

public class TestB {
    private TestInterface test;

    public TestB(TestInterface test)
    {
        this.test = test;
    }

    public void method()
    {
        test.hello();
    }
}
</code></pre>
<p><code>TestInterface</code>是一个简单的接口，而<code>TestA</code>实现了该接口，<code>TestB</code>需要一个<code>TestInterface</code>类型的对象，因此可以先注入一个<code>TestA</code>，再将该<code>TestA</code>注入到<code>TestB</code>的构造方法中：</p>
<pre><code class="language-xml">&lt;bean id=&quot;testA&quot; class=&quot;TestA&quot;/&gt; &lt;!--注入一个TestA对象--&gt;
&lt;bean id=&quot;testB&quot; class=&quot;TestB&quot;&gt;
	&lt;constructor-arg index=&quot;0&quot; ref=&quot;testA&quot; /&gt; &lt;!--将上面注入的TestA作为参数传入构造方法中，在传给TestB的私有成员--&gt;
&lt;/bean&gt;
</code></pre>
<p><code>constructor-arg</code>是用于定义通过构造方法的方式进行注入的标签，<code>index</code>定义位置，从<code>0</code>开始，<code>ref</code>是某个<code>Bean</code>的引用，值为该<code>Bean</code>的<code>id</code>。</p>
<h2 id="32-通过setter注入">3.2 通过<code>setter</code>注入</h2>
<p>在上面的例子中，修改<code>TestB</code>如下：</p>
<pre><code class="language-java">public class TestB {
    private TestInterface test;

    public void setTest(TestInterface test) {
        this.test = test;
    }

    public void method()
    {
        test.hello();
    }
}
</code></pre>
<p>其实就是添加了一个<code>setter</code>，接着修改配置文件：</p>
<pre><code class="language-xml">&lt;bean id=&quot;testA&quot; class=&quot;TestA&quot;/&gt;
&lt;bean id=&quot;testB&quot; class=&quot;TestB&quot;&gt;
    &lt;property name=&quot;test&quot; ref=&quot;testA&quot; /&gt;
&lt;/bean&gt;
</code></pre>
<p><code>&lt;property&gt;</code>表示通过<code>setter</code>注入，<code>name</code>是私有成员的名字，<code>ref</code>是被传入<code>setter</code>的<code>Bean</code>的<code>id</code>值。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第84期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-84-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-84-qi/">
        </link>
        <updated>2020-09-08T06:18:31.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>高考失败不要紧，以后还有更多的失败等着你。</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>线虫（也被称为圆虫）的精子不会游泳，而是利用细胞骨架进行爬行。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>似初秋入夜，浅凉欺葛。<br>
——吴文英《满江红·翠幕深庭》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>荷尔蒙决定一见钟情，多巴胺决定天长地久。</p>
</blockquote>
<h1 id="每日音乐">每日音乐</h1>
<blockquote>
<p><a href="https://music.163.com/#/song?id=1456443773">隔岸-姚六一</a></p>
</blockquote>
<blockquote>
<p>那一幕怎么忘记<br>
初次相遇的你<br>
路人闹挺挺看我滑稽<br>
为你一笑我愿做猴戏<br>
一生能有几序<br>
牵肠挂肚情义<br>
你大可不必猜忌寻觅<br>
我愿意一生为你追寻</p>
</blockquote>
<blockquote>
<p>就这般望着你<br>
难免我愁愁<br>
除你我禽鸟连花草<br>
成双荡悠悠<br>
你呀你冻我心房酸我眼眶一生的伤<br>
你呀你彼岸观望置身一旁一生两望</p>
</blockquote>
<blockquote>
<p>也有春花秋月<br>
也望相守不渝<br>
雨打荷叶吵吵了几滴<br>
又怎能熄灭心中柔情<br>
谈笑中提起你<br>
疼痛这般熟悉<br>
如今的你在何处飘零<br>
一片片破碎的心难拾起<br>
你我为何沦落这步田地</p>
</blockquote>
<blockquote>
<p>就这般望着你<br>
难免我愁愁<br>
除你我禽鸟连花草<br>
成双荡悠悠<br>
你呀你冻我心房酸我眼眶一生的伤<br>
你呀你彼岸观望置身一旁一生两望</p>
</blockquote>
<blockquote>
<p>穷极一生又何俱<br>
也许只是一个背影<br>
天亮之后就出行<br>
你又会在何处伫立<br>
是否也在等我的你<br>
回顾皆如草木<br>
唯你是青山<br>
嘲笑世间<br>
情难两得<br>
天作隔两岸<br>
你呀你冻我心房酸我眼眶一生的伤<br>
你呀你彼岸观望置身一旁一生两望</p>
</blockquote>
<blockquote>
<p>穷极一生又何俱<br>
也许只是一个背影<br>
天亮之后就出行<br>
在隔对岸等你</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Spring 学习笔记（一）：Spring 入门]]></title>
        <id>https://2293736867.github.io/post/spring-xue-xi-bi-ji-yi-spring-ru-men/</id>
        <link href="https://2293736867.github.io/post/spring-xue-xi-bi-ji-yi-spring-ru-men/">
        </link>
        <updated>2020-09-07T16:54:20.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-spring简介">1 <code>Spring</code>简介</h1>
<p><code>Spring</code>是一个轻量级<code>Java</code>开发框架，最早由<code>Rod Johnson</code>创建，目的是为了解决企业级应用开发的业务逻辑层和其他各层的耦合问题，是一个分层的<code>Java SE/EE full-stack</code>轻量级开源框架，为开发<code>Java</code>应用程序提供全面的基础架构支持。</p>
<h1 id="2-spring体系结构">2 <code>Spring</code>体系结构</h1>
<p>目前<code>Spring</code>已经集成了20多个模块，分布在以下模块中：</p>
<ul>
<li><code>Core Container</code>：核心容器</li>
<li><code>Data Access/Integration</code>：数据访问/集成</li>
<li><code>Web</code>：<code>Web</code>模块</li>
<li><code>AOP</code>：<code>Aspect Oriented Programming</code>，面向切面编程</li>
<li><code>Instrumentation</code>：植入模块</li>
<li><code>Messaging</code>：消息传输</li>
<li><code>Test</code>：测试模块</li>
</ul>
<p>如图所示：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200907230724234.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="21-核心容器">2.1 核心容器</h2>
<p>由<code>Spring-core</code>、<code>Spring-beans</code>、<code>Spring-context</code>、<code>Spring-context-support</code>、<code>Spring-expression</code>等模块组成：</p>
<ul>
<li><code>Spring-core</code>：提供了框架的基本组成部分，包括<code>Ioc</code>（<code>Inversion of Control</code>，控制反转）以及<code>DI</code>（<code>Dependency Injection</code>，依赖注入）功能</li>
<li><code>Spring-beans</code>：提供了<code>BeanFactory</code>，是工厂模式的一个典型实现，<strong><code>Spring</code>将管理的对象称为<code>Bean</code></strong></li>
<li><code>Spring-context</code>：建立在<code>Core</code>和<code>Beans</code>模块的基础上，提供了一个框架式的对象访问方式，是访问定义和配置的任何对象的媒介，<code>ApplicationContext</code>接口是<code>Context</code>模块的焦点</li>
<li><code>Spring-context-support</code>：支持整合第三方库到<code>Spring</code>应用程序上下文，特别是用于高速缓存（<code>EhCache</code>、<code>JCache</code>）和任务调度（<code>CommonJ</code>、<code>Quartz</code>）的支持</li>
<li><code>Spring-expression</code>：提供了强大的表达式语言去支持运行时查询和操作对象图，是<code>JSP 2.1</code>规定的统一表达式语言的扩展</li>
</ul>
<h2 id="22-aop和instrumentation">2.2 <code>AOP</code>和<code>Instrumentation</code></h2>
<ul>
<li><code>Spring-aop</code>：提供了一个符合<code>AOP</code>要求的面向切面的编程实现，允许定义方法拦截器和切入点</li>
<li><code>Spring-aspects</code>：提供了与<code>AspectJ</code>的集成功能，<code>AspectJ</code>是一个功能强大且成熟的<code>AOP</code>框架</li>
<li><code>Spring-instrumentation</code>：提供了类植入支持和类加载器的实现</li>
</ul>
<h2 id="23-消息">2.3 消息</h2>
<p><code>Spring 4.0</code>后增加了消息模块，提供了对消息传递体系结构和协议的支持。</p>
<h2 id="24-数据访问集成">2.4 数据访问/集成</h2>
<p>数据访问/集成层由<code>JDBC</code>、<code>ORM</code>、<code>OXM</code>、<code>JMS</code>和事务模块组成。</p>
<ul>
<li><code>Spring-JDBC</code>：提供了一个<code>JDBC</code>抽象层，消除了繁琐的<code>JDBC</code>编码和数据库厂商特有的错误代码解析</li>
<li><code>Spring-ORM</code>：为流行的<code>ORM</code>（<code>Object-Relational Mapping</code>，对象关系映射）框架提供了支持，包括<code>JPA</code>和<code>Hibernate</code>，使用<code>Spring-ORM</code>框架可以将这些<code>O/R</code>映射框架与<code>Spring</code>提供的所有其他功能结合使用</li>
<li><code>Spring-OXM</code>：提供了一个支持对象/<code>XML</code>映射的抽象层实现，例如<code>JAXB</code>、<code>Castor</code>、<code>JiBX</code>、<code>XStream</code></li>
<li><code>Spring-JMS</code>：<code>JMS</code>（<code>Java Messaging Service</code>，<code>Java</code>消息传递服务），包含用于生产和使用消息的功能</li>
<li><code>Spring-TX</code>：事务管理模块，支持用于实现特殊接口和所有<code>POJO</code>类的编程和声明式事务管理</li>
</ul>
<h2 id="25-web">2.5 <code>Web</code></h2>
<p><code>Web</code>有<code>Spring-Web</code>、<code>Spring-WebMVC</code>、<code>Spring-WebSocket</code>和<code>Portlet</code>模块组成。</p>
<ul>
<li><code>Spring-Web</code>：提供了基本的<code>Web</code>开发集成功能，例如多文件上传等</li>
<li><code>Spring-WebMVC</code>：也叫<code>Web-Servlet</code>模块，包含用于<code>Web</code>应用程序的<code>Spring MVC</code>和<code>REST Web Services</code>的实现。</li>
<li><code>Spring-WebSocket</code>：提供了<code>WebSocket</code>和<code>SockJS</code>的实现</li>
<li><code>Porlet</code>：类似于<code>Servlet</code>模块的功能，提供了<code>Porlet</code>环境下<code>MVC</code>的实现</li>
</ul>
<h2 id="26-测试">2.6 测试</h2>
<p><code>Spring-test</code>模块支持使用<code>JUnit</code>或<code>TestNG</code>对<code>Spring</code>组件进行单元测试和集成测试。</p>
<h1 id="3-环境">3 环境</h1>
<ul>
<li><code>OpenJDK 11.0.8</code></li>
<li><code>IDEA 2020.2</code></li>
<li><code>Maven</code>/<code>Gradle</code></li>
</ul>
<h1 id="4-入门demojava版">4 入门<code>Demo</code>（<code>Java</code>版）</h1>
<h2 id="41-新建maven工程">4.1 新建<code>Maven</code>工程</h2>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200907233051206.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/2020090723311784.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="42-引入依赖">4.2 引入依赖</h2>
<p><code>pom.xml</code>文件加入：</p>
<pre><code class="language-xml">&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-context&lt;/artifactId&gt;
        &lt;version&gt;5.2.8.RELEASE&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-core&lt;/artifactId&gt;
        &lt;version&gt;5.2.8.RELEASE&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-beans&lt;/artifactId&gt;
        &lt;version&gt;5.2.8.RELEASE&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-web&lt;/artifactId&gt;
        &lt;version&gt;5.2.8.RELEASE&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-test&lt;/artifactId&gt;
        &lt;version&gt;5.2.8.RELEASE&lt;/version&gt;
        &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;commons-logging&lt;/groupId&gt;
        &lt;artifactId&gt;commons-logging&lt;/artifactId&gt;
        &lt;version&gt;1.2&lt;/version&gt;
    &lt;/dependency&gt;
	&lt;dependency&gt;
	    &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;
	    &lt;artifactId&gt;junit-jupiter-api&lt;/artifactId&gt;
	    &lt;version&gt;5.6.2&lt;/version&gt;
	    &lt;scope&gt;test&lt;/scope&gt;
	&lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>
<p>可以<a href="https://mvnrepository.com/">戳这里</a>查看最新的版本。</p>
<h2 id="43-新建文件">4.3 新建文件</h2>
<p>新建如下5个空文件：</p>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20200907235716608.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="44-applicationcontextxml">4.4 <code>applicationContext.xml</code></h2>
<p>该文件是<code>Spring</code>的配置文件，习惯命名为<code>applicationContext.xml</code>，内容如下：</p>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;

    &lt;bean id=&quot;test&quot; class=&quot;TestImpl&quot;/&gt;
&lt;/beans&gt;
</code></pre>
<p>这里声明了一个<code>id</code>为<code>test</code>，类为<code>TestImpl</code>的<code>Bean</code>。</p>
<h2 id="45-testinterface">4.5 <code>TestInterface</code></h2>
<pre><code class="language-java">public interface TestInterface {
    void hello();
}

</code></pre>
<h2 id="46-testimpl">4.6 <code>TestImpl</code></h2>
<pre><code class="language-java">public class TestImpl implements TestInterface {
    @Override
    public void hello() {
        System.out.println(&quot;Hello Spring.&quot;);
    }
}
</code></pre>
<h2 id="47-main">4.7 <code>Main</code></h2>
<pre><code class="language-java">public class Main {
    public static void main(String[] args) {
        System.out.println(&quot;Hello&quot;);
        ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);
        ((TestInterface)context.getBean(&quot;test&quot;)).hello();
    }
}
</code></pre>
<h2 id="48-tests">4.8 <code>Tests</code></h2>
<pre><code class="language-java">public class Tests {
    @Test
    public void test()
    {
        ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);
        TestInterface testInterface = (TestInterface)context.getBean(&quot;test&quot;);
        testInterface.hello();
    }
}
</code></pre>
<h2 id="49-运行">4.9 运行</h2>
<h3 id="491-测试">4.9.1 测试</h3>
<p>直接点击测试类旁边的按钮即可：</p>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/20200907234955345.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>若出现如下错误：</p>
<figure data-type="image" tabindex="6"><img src="https://img-blog.csdnimg.cn/20200907234516940.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>是<code>JDK</code>版本设置错误的问题，先打开<code>Project Structure</code>，修改<code>Modules</code>下的<code>JDK</code>版本：</p>
<figure data-type="image" tabindex="7"><img src="https://img-blog.csdnimg.cn/20200907234551832.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>下一步是打开设置，修改<code>Comiler</code>下的<code>JDK</code>版本：</p>
<figure data-type="image" tabindex="8"><img src="https://img-blog.csdnimg.cn/20200907234617820.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>输出：</p>
<figure data-type="image" tabindex="9"><img src="https://img-blog.csdnimg.cn/20200907235111902.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h3 id="492-main">4.9.2 <code>Main</code></h3>
<p>默认不能直接运行<code>Main</code>函数，需要添加运行配置：</p>
<figure data-type="image" tabindex="10"><img src="https://img-blog.csdnimg.cn/20200907235151867.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>选择<code>Application</code>添加配置，并且指定<code>Name</code>以及<code>Main class</code>：</p>
<figure data-type="image" tabindex="11"><img src="https://img-blog.csdnimg.cn/20200907235315411.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>这样就可以运行了：</p>
<figure data-type="image" tabindex="12"><img src="https://img-blog.csdnimg.cn/20200907235415796.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="5-kotlin版demo">5 <code>Kotlin</code>版<code>Demo</code></h1>
<p>使用<code>Gradle</code>+<code>Kotlin</code>的入门<code>Demo</code>。</p>
<h2 id="51-新建gradle工程">5.1 新建<code>Gradle</code>工程</h2>
<figure data-type="image" tabindex="13"><img src="https://img-blog.csdnimg.cn/20200908000719552.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="14"><img src="https://img-blog.csdnimg.cn/20200907235621499.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="52-buildgradle">5.2 <code>build.gradle</code></h2>
<p>完整文件如下：</p>
<pre><code class="language-bash">plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.4.0'
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'org.springframework', name: 'spring-context', version: '5.2.8.RELEASE'
    compile group: 'org.springframework', name: 'spring-core', version: '5.2.8.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version: '5.2.8.RELEASE'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    implementation &quot;org.jetbrains.kotlin:kotlin-stdlib-jdk8&quot;
}
compileKotlin {
    kotlinOptions {
        jvmTarget = &quot;11&quot;
    }
}
</code></pre>
<p>除了添加依赖以外还添加了一些其他参数。</p>
<h2 id="53-新建文件夹以及文件">5.3 新建文件夹以及文件</h2>
<figure data-type="image" tabindex="15"><img src="https://img-blog.csdnimg.cn/20200908003800783.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="54-testinterface">5.4 <code>TestInterface</code></h2>
<pre><code class="language-kotlin">interface TestInterface {
    fun hello()
}
</code></pre>
<h2 id="55-testimpl">5.5 <code>TestImpl</code></h2>
<pre><code class="language-kotlin">class TestImpl:TestInterface
{
    override fun hello() {
        println(&quot;Hello Spring&quot;)
    }
}
</code></pre>
<h2 id="56-main">5.6 <code>Main</code></h2>
<pre><code class="language-kotlin">fun main() {
    println(&quot;Hello&quot;)
    val context: ApplicationContext = ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;)
    val test: TestInterface = context.getBean(&quot;test&quot;) as TestInterface
    test.hello()
}
</code></pre>
<h2 id="57-applicationcontextxml">5.7 <code>applicationContext.xml</code></h2>
<p>同上。</p>
<h2 id="58-tests">5.8 <code>Tests</code></h2>
<pre><code class="language-kotlin">class Tests {
    @Test
    fun test()
    {
        val context:ApplicationContext = ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;)
        val test:TestInterface = context.getBean(&quot;test&quot;) as TestInterface
        test.hello()
    }
}
</code></pre>
<h2 id="59-运行">5.9 运行</h2>
<h3 id="591-测试">5.9.1 测试</h3>
<figure data-type="image" tabindex="16"><img src="https://img-blog.csdnimg.cn/20200908003226273.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>同样直接点击旁边的按钮即可运行：</p>
<figure data-type="image" tabindex="17"><img src="https://img-blog.csdnimg.cn/20200908003258540.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h3 id="592-main">5.9.2 <code>Main</code></h3>
<p>同样点击按钮即可：</p>
<figure data-type="image" tabindex="18"><img src="https://img-blog.csdnimg.cn/20200908003338106.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="19"><img src="https://img-blog.csdnimg.cn/20200908003412136.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="6-源码">6 源码</h1>
<ul>
<li><a href="https://github.com/2293736867/CSBookNotes/tree/master/Spring/Chapter1/JavaSpringDemo">Github</a></li>
<li><a href="https://gitee.com/u6b7b5fc3/CSBookNotes/tree/master/Spring/Chapter1/JavaSpringDemo">码云</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Spring Boot demo系列（三）：Spring Web+MyBatis Plus]]></title>
        <id>https://2293736867.github.io/post/spring-boot-demo-xi-lie-san-spring-webmybatis-plus/</id>
        <link href="https://2293736867.github.io/post/spring-boot-demo-xi-lie-san-spring-webmybatis-plus/">
        </link>
        <updated>2020-09-07T13:49:19.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-概述">1 概述</h1>
<p><code>Spring Web</code>+<code>MyBatis Plus</code>的一个<code>Demo</code>，内容和上一篇类似，因此重点放在<code>MyBatis Plus</code>这里。</p>
<h1 id="2-dao层">2 <code>dao</code>层</h1>
<p><code>MyBatis Plus</code>相比起<code>MyBaits</code>可以简化不少配置，能够使用代码生成器快速生成<code>Entity</code>、<code>Mapper</code>等各个模块的代码。另外，对于普通的<code>CRUD</code>提供了两个接口实现：</p>
<ul>
<li><code>ISerivce&lt;T&gt;</code></li>
<li><code>BaseMapper&lt;T&gt;</code></li>
</ul>
<p>其中最简单的<code>IService&lt;T&gt;</code>的<code>CRUD</code>接口如下：</p>
<ul>
<li><code>save(T entity)</code>：插入，返回布尔</li>
<li><code>saveOrUpdate(T entity)</code>：插入或更新，返回布尔</li>
<li><code>removeById(Serializable id)</code>：删除，返回布尔</li>
<li><code>updateById(Serializable id)</code>：更新，返回布尔</li>
<li><code>getById(Serializable id)</code>：查询，返回<code>T</code></li>
<li><code>list()</code>：查询所有，返回<code>List&lt;T&gt;</code></li>
</ul>
<p>上面是根据主键进行操作的方法，还有是根据<code>Wrapper</code>进行操作的，具体请查看官方文档。</p>
<p>最简单的<code>BaseMapper&lt;T&gt;</code>的<code>CRUD</code>接口如下：</p>
<ul>
<li><code>insert(T eneity)</code>：插入，返回<code>int</code></li>
<li><code>deleteById(Serializable id)</code>：删除，返回<code>int</code></li>
<li><code>updateById(T entity)</code>：更新，返回<code>int</code></li>
<li><code>selectById(Serializable id)</code>：查询，返回<code>T</code></li>
</ul>
<p>同样道理也可以根据<code>Wrapper</code>操作，具体请查看官网，下面演示分别演示这两种实现方式的<code>Demo</code>。</p>
<h2 id="21-basemappert">2.1 <code>BaseMapper&lt;T&gt;</code></h2>
<p><code>BaseMapper&lt;T&gt;</code>的实现方式比<code>IService&lt;T&gt;</code>要相对简单一点，首先需要一个继承了<code>BaseMapper&lt;T&gt;</code>的接口：</p>
<pre><code class="language-java">@Mapper
public interface UserMapper extends BaseMapper&lt;User&gt; {
}
</code></pre>
<p>接着在业务层中直接注入并使用：</p>
<pre><code class="language-java">@Service
@RequiredArgsConstructor(onConstructor = @__(@Autowired))
public class MyBatisPlusMapper {
    private final UserMapper mapper;
    public boolean save(User user)
    {
        if(mapper.selectById(user.getId()) != null)
            return mapper.updateById(user) == 1;
        return mapper.insert(user) == 1;
    }

    public boolean delete(String id)
    {
        return mapper.deleteById(id) == 1;
    }

    public User select(String id)
    {
        return mapper.selectById(id);
    }

    public List&lt;User&gt; selectAll()
    {
        return mapper.selectList(null);
    }
}
</code></pre>
<p>由于<code>insert</code>/<code>updateById</code>/<code>deleteById</code>都是返回<code>int</code>，表示<code>SQL</code>语句操作影响的行数，因为都是对单个实体进行操作，所以将返回值与<code>1</code>判断就可以知道是否操作成功。</p>
<h2 id="22-iservicet">2.2 <code>IService&lt;T&gt;</code></h2>
<p>同样需要先创建一个接口并继承<code>IService&lt;T&gt;</code>：</p>
<pre><code class="language-java">public interface UserService extends IService&lt;User&gt; {
}
</code></pre>
<p>接着业务类继承<code>ServiceImpl&lt;UserMapper,User&gt;</code>并实现<code>UserService</code>，这个<code>UserMapper</code>是上面的<code>UserMapper</code>：</p>
<pre><code class="language-java">@Service
@RequiredArgsConstructor(onConstructor = @__(@Autowired))
public class MyBatisPlusIService extends ServiceImpl&lt;UserMapper,User&gt; implements UserService {
    public boolean save(User user)
    {
        return saveOrUpdate(user);
    }

    public boolean delete(String id)
    {
        return removeById(id);
    }

    public User select(String id)
    {
        return getById(id);
    }

    public List&lt;User&gt; selectAll()
    {
        return list();
    }
}
</code></pre>
<p>由于<code>remove/saveOrUpdate</code>都是返回布尔值，就不需要像<code>BaseMapper</code>一样将返回值与<code>1</code>判断了。</p>
<h1 id="3-controller层">3 <code>Controller</code>层</h1>
<p>两个<code>Controller</code>，分别使用<code>IService&lt;T&gt;</code>以及<code>BaseMapper&lt;T&gt;</code>：</p>
<pre><code class="language-java">@RestController
@RequestMapping(&quot;/iservice&quot;)
@RequiredArgsConstructor(onConstructor = @__(@Autowired))
public class MyBatisPlusIServiceController {
    private final MyBatisPlusIService myBatisPlusIService;
    @GetMapping(&quot;select&quot;)
    public User select1(@RequestParam String id)
    {
        return myBatisPlusIService.select(id);
    }

    @GetMapping(&quot;select/{id}&quot;)
    public User select2(@PathVariable(&quot;id&quot;) String id)
    {
        return myBatisPlusIService.select(id);
    }

    @GetMapping(&quot;selectAll&quot;)
    public List&lt;User&gt; selectAll()
    {
        return myBatisPlusIService.selectAll();
    }

    @GetMapping(&quot;delete&quot;)
    public boolean delete1(@RequestParam String id)
    {
        return myBatisPlusIService.delete(id);
    }

    @GetMapping(&quot;delete/{id}&quot;)
    public boolean delete2(@PathVariable(&quot;id&quot;) String id)
    {
        return myBatisPlusIService.delete(id);
    }

    @PostMapping(&quot;save&quot;)
    public boolean save(@RequestBody User user)
    {
        return myBatisPlusIService.save(user);
    }
}
</code></pre>
<pre><code class="language-java">@RestController
@RequestMapping(&quot;/mapper&quot;)
@RequiredArgsConstructor(onConstructor = @__(@Autowired))
public class MyBatisPlusMapperController {
    private final MyBatisPlusMapper myBatisPlusMapper;
    @GetMapping(&quot;select&quot;)
    public User select1(@RequestParam String id)
    {
        return myBatisPlusMapper.select(id);
    }

    @GetMapping(&quot;select/{id}&quot;)
    public User select2(@PathVariable(&quot;id&quot;) String id)
    {
        return myBatisPlusMapper.select(id);
    }

    @GetMapping(&quot;selectAll&quot;)
    public List&lt;User&gt; selectAll()
    {
        return myBatisPlusMapper.selectAll();
    }

    @GetMapping(&quot;delete&quot;)
    public boolean delete1(@RequestParam String id)
    {
        return myBatisPlusMapper.delete(id);
    }

    @GetMapping(&quot;delete/{id}&quot;)
    public boolean delete2(@PathVariable(&quot;id&quot;) String id)
    {
        return myBatisPlusMapper.delete(id);
    }

    @PostMapping(&quot;save&quot;)
    public boolean save(@RequestBody User user)
    {
        return myBatisPlusMapper.save(user);
    }
}
</code></pre>
<h1 id="4-其他">4 其他</h1>
<h2 id="41-实体类">4.1 实体类</h2>
<pre><code class="language-java">@Getter
@Setter
@AllArgsConstructor
public class User {
    private String id;
    private String username;
    private String password;
    @Override
    public String toString()
    {
        return &quot;id:&quot;+id+&quot;\nusername:&quot;+username+&quot;\npassword:&quot;+password+&quot;\n&quot;;
    }
}
</code></pre>
<h2 id="42-配置类">4.2 配置类</h2>
<p>配置类主要就是加一个<code>@MapperScan</code>：</p>
<pre><code class="language-java">@Configuration
@MapperScan(&quot;com.example.demo.dao&quot;)
public class MyBatisPlusConfig {
}
</code></pre>
<h2 id="43-配置文件">4.3 配置文件</h2>
<pre><code class="language-java">spring:
  datasource:
    url: jdbc:mysql://localhost:3306/test
    username: test
    password: test
</code></pre>
<p>按需要修改即可。</p>
<h2 id="44-数据库">4.4 数据库</h2>
<p><code>SQL</code>文件在源码链接中。</p>
<h1 id="5-测试">5 测试</h1>
<p>测试就直接运行<code>test</code>目录下的文件即可，笔者简单做了两个测试，上个图：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200907123448661.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200907123509864.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="6-源码">6 源码</h1>
<p><code>Java</code>版：</p>
<ul>
<li><a href="https://github.com/2293736867/SpringBootDemoJava/tree/master/WebWithMyBatisPlus">Github</a></li>
<li><a href="https://gitee.com/u6b7b5fc3/SpringBootDemoJava/tree/master/WebWithMyBatisPlus">码云</a></li>
</ul>
<p><code>Kotlin</code>版：</p>
<ul>
<li><a href="https://github.com/2293736867/SpringBootDemoKotlin/tree/master/WebWithMybatis">Github</a></li>
<li><a href="https://gitee.com/u6b7b5fc3/SpringBootDemoKotlin/tree/master/WebWithMybatis">码云</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第83期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-83-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-83-qi/">
        </link>
        <updated>2020-09-07T06:18:11.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>三观没用，你得靠五官。</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>南太平洋中有一处航天器墓地。这个地方被称作尼莫点，是地球上距离陆地最遥远的地方。这里长眠着超过300个航天器和相关的太空垃圾，包括俄罗斯航空在地球轨道上组装的第一个空间站——和平号空间站</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>秋坐金张馆，繁阴昼不开。<br>
——李白《玉真公主别馆苦雨赠卫尉张卿二首》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>隔着人潮呼救像只困兽，呼吸颤抖去泪流，去相拥。</p>
</blockquote>
<h1 id="每日音乐">每日音乐</h1>
<blockquote>
<p><a href="https://music.163.com/#/song?id=1443838552">他只是经过-h3R3 / Felix Bennett</a></p>
</blockquote>
<blockquote>
<p>他只是经过<br>
你的<br>
世界<br>
并没有停留<br>
只偶尔听说<br>
谁说<br>
关于他你又会触动<br>
眼泪又滴落<br>
闪动<br>
太多的话都变沉默<br>
你给的问候<br>
温柔<br>
所有都被一笔带过</p>
</blockquote>
<blockquote>
<p>他曾说的话有没有兑现<br>
他现在又站在谁的对面<br>
谁又让你站在暴雨中的街角淋个整夜<br>
曾陪他逛过的每个路口<br>
为何你停留不走<br>
低头想了很多<br>
每一句goobye goodnight<br>
慢慢推叠变成无奈<br>
他给的伤害<br>
还在<br>
变成噩梦你醒不来</p>
</blockquote>
<blockquote>
<p>他只是经过<br>
你的<br>
世界<br>
并没有停留<br>
只偶尔听说<br>
谁说<br>
关于他你又会触动</p>
</blockquote>
<blockquote>
<p>对他的思念day by day by day<br>
从他的口中全都变成一句无所谓<br>
为他而学着唱的情歌他早忘了<br>
但是还在你的播放列表里面排到前几位<br>
看他的现状谈了分了又合<br>
谁会在意你呢<br>
他早都忘了这也许对你是种折磨<br>
你所有的所有只剩下他一个<br>
可这种感受有谁能懂<br>
亲密的照片和留言全扔进垃圾桶<br>
谁又会来当你的树洞</p>
</blockquote>
<blockquote>
<p>他只是经过<br>
你的<br>
世界<br>
并没有停留<br>
只偶尔听说<br>
谁说<br>
关于他你又会触动<br>
眼泪又滴落<br>
闪动<br>
太多的话变成沉默<br>
你给的问候<br>
温柔<br>
所有都被一笔带过</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第82期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-82-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-82-qi/">
        </link>
        <updated>2020-09-06T06:17:16.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>同样都是咸鱼，为什么别人可以</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>埃菲尔铁塔在夏天时会“长”高，由于钢铁热胀冷缩的缘故，埃菲尔铁塔在夏天时会长高15公分。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>居人共住武陵源，还从物外起田园。<br>
——王维《桃源行》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>自己不经意的一句话，触动了别人的心。</p>
</blockquote>
<h1 id="每日音乐">每日音乐</h1>
<blockquote>
<p><a href="https://music.163.com/#/song?id=1412005373">分开也是另一种明白-乔洋</a></p>
</blockquote>
<blockquote>
<p>彼此生活中穿梭<br>
要的其实并不多<br>
小心翼翼的保留承诺<br>
守护最后的寄托<br>
坏情绪总很脆弱<br>
像风席卷了荒漠<br>
你的冰冷我无法反驳<br>
给你理由去挣脱</p>
</blockquote>
<blockquote>
<p>分开也是另一种明白<br>
我们不应该相爱<br>
两个世界的人彼此伤害<br>
陷入无尽的深海<br>
分开也是另一种取代<br>
取代了我的悲哀<br>
离开你并没有醒过来<br>
在回忆爬不上来<br>
被深埋</p>
</blockquote>
<blockquote>
<p>彼此生活中穿梭<br>
要的其实并不多<br>
小心翼翼的保留承诺<br>
守护最后的寄托<br>
坏情绪总是很弱<br>
像风席卷了荒漠<br>
你的冰冷我无法反驳<br>
给你理由去挣脱</p>
</blockquote>
<blockquote>
<p>分开也是另一种明白<br>
我们不应该相爱<br>
两个世界的人彼此伤害<br>
陷入无尽的深海<br>
分开也是另一种取代<br>
取代了我的悲哀<br>
离开你并没有醒过来<br>
在回忆爬不上来<br>
被深埋</p>
</blockquote>
<blockquote>
<p>分开也是另一种明白<br>
我们不应该相爱<br>
两个世界的人彼此伤害<br>
陷入无尽的深海<br>
分开也是另一种取代<br>
取代了我的悲哀<br>
离开你并没有醒过来<br>
在回忆爬不上来<br>
被深埋</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Spring Boot demo系列（二）：简单三层架构Web应用]]></title>
        <id>https://2293736867.github.io/post/spring-boot-demo-xi-lie-er-jian-dan-san-ceng-jia-gou-web-ying-yong/</id>
        <link href="https://2293736867.github.io/post/spring-boot-demo-xi-lie-er-jian-dan-san-ceng-jia-gou-web-ying-yong/">
        </link>
        <updated>2020-09-06T06:09:34.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-概述">1 概述</h1>
<p>这是<code>Spring Boot</code>的第二个<code>Demo</code>，一个只有三层架构的极简<code>Web</code>应用，持久层使用的是<code>MyBatis</code>。</p>
<h1 id="2-架构">2 架构</h1>
<p>一个最简单的<code>Spring Boot Web</code>应用分为三层：</p>
<ul>
<li><code>Controller</code>层：负责具体业务流程的控制，调用<code>Service</code>层来控制业务逻辑</li>
<li><code>Service</code>层：业务逻辑层，真正执行业务的操作，比如获取用户信息等</li>
<li><code>Dao</code>层：负责数据持久化，在这一层中与各种数据库，比如<code>MySQL</code>、<code>Oracle</code>等打交道</li>
</ul>
<p>先来简单说一下三层所使用到的注解。</p>
<h2 id="21-controller层">2.1 <code>Controller</code>层</h2>
<p><code>Controller</code>层也是入口层，一般涉及如下注解：</p>
<ul>
<li><code>@Controller</code>：<code>@Controller</code>是经典的<code>Controller</code>层注解，<code>@Controller</code>标识的类代表该类是控制器类</li>
<li><code>@RequestMapping</code>：使用<code>@RequestMapping</code>可以对请求进行映射，可以注解在类上或者方法上，在类上的话表示该类所有的方法都是以该地址作为父地址，在方法上就表示可以映射对应的请求到该方法上</li>
<li><code>@GetMapping/@PostMapping</code>：这两者实际上是<code>@RequestMapping</code>对应不同方法的简化版，因为<code>@RequestMapping</code>有一个<code>method</code>属性，如果该<code>method</code>指定为<code>GET</code>那么就相当于<code>@GetMapping</code>，如果指定为<code>POST</code>就相当于<code>@PostMapping</code></li>
<li><code>@ResponseBody</code>：作用在方法上，将返回的数据进行可能的转换（取决于请求头，转换为<code>JSON</code>或<code>XML</code>等等，默认的情况下比如单纯字符串就直接返回），比如返回语句为<code>return &quot;success&quot;;</code>，如果加上了<code>@ResponseBody</code>就直接返回<code>success</code>，如果不加上就会跳转到<code>success.jsp</code>页面</li>
<li><code>@RequestParm</code>：处理<code>Contrent-Type</code>为<code>application/x-www-form-urlencoded</code>的内容，可以接受简单属性类型或者对象，支持<code>GET</code>+<code>POST</code></li>
<li><code>@RequestBody</code>：处理<code>Content-Type</code>不为<code>application/x-www-form-urlencoded</code>的内容（也就是需要指定<code>Content-Type</code>），不支持<code>GET</code>，只支持<code>POST</code></li>
<li><code>@PathVariable</code>：可以将占位符的参数传入方法参数，比如<code>/path/1</code>，可以将<code>1</code>传入方法参数中</li>
<li><code>@PathParm</code>：与<code>@RequestParm</code>一样，一般使用<code>@RequestParm</code></li>
<li><code>@RestController</code>：相当于<code>@Controller</code>+<code>@ResponseBody</code></li>
</ul>
<h2 id="22-service层">2.2 <code>Service</code>层</h2>
<p><code>Service</code>层用于执行主要的业务逻辑，主要就是下面这个注解：</p>
<ul>
<li><code>@Serice</code>：是一个增强型的<code>@Component</code>，<code>@Component</code>表示一个最普通的组件，可以被注入到<code>Spring</code>容器进行管理，而<code>@Service</code>是专门用于处理业务逻辑的注解，<code>@Controller</code>类似，也是一个增强型的<code>@Component</code>，专门用于<code>Controller</code>层的处理</li>
</ul>
<h2 id="23-dao层">2.3 <code>Dao</code>层</h2>
<p><code>Dao</code>是数据持久层，这里进行数据持久化的操作，一般加上<code>@Repository</code>即可：</p>
<ul>
<li><code>@Repository</code>：也是一个增强型的<code>@Component</code>，注解在持久层中，具有将具体数据库抛出的异常转为<code>Spring</code>持久层异常的功能</li>
</ul>
<p>讲完注解了下面就开始实践一下。</p>
<h1 id="3-实践">3 实践</h1>
<h2 id="31-新建项目">3.1 新建项目</h2>
<p>选择如下依赖：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200905184741142.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p><code>Lombok</code>能简化代码，推荐使用，并且需要<code>IDEA</code>安装插件。<code>ORM</code>框架这里选择<code>MyBatis</code>。</p>
<h2 id="32-新建包">3.2 新建包</h2>
<p>新建如下四个包：</p>
<ul>
<li><code>controller</code></li>
<li><code>dao</code></li>
<li><code>entity</code></li>
<li><code>service</code></li>
<li><code>config</code></li>
</ul>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200906022200803.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="33-controller层">3.3 <code>Controller</code>层</h2>
<h3 id="331-简单controller">3.3.1 简单<code>Controller</code></h3>
<p>在<code>controller</code>包下新建<code>Controller.java</code>：</p>
<pre><code class="language-java">@RestController
@RequestMapping(&quot;/&quot;)
public class Controller {
    @GetMapping(&quot;test&quot;)
    public String testMethod()
    {
        return &quot;test controller&quot;;
    }
}
</code></pre>
<p>运行之后，如果出现如下错误：</p>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20200905225439985.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>这是因为没有配置数据源，可以先把<code>MySQL</code>和<code>MyBatis</code>的依赖删去：</p>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/2020090522555443.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>运行之后在浏览器输入<code>localhost:8080/test</code>会返回<code>test controller</code>：</p>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/20200905225642617.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>这样一个最简单的<code>Controller</code>就完成了。</p>
<h3 id="332-requestparm">3.3.2 <code>@RequestParm</code></h3>
<p>然后下一步是添加参数，可以考虑使用<code>@RequestParm</code>添加：</p>
<pre><code class="language-java">@GetMapping(&quot;withParm&quot;)
public String withParm(@RequestParam String id)
{
    return &quot;id:&quot;+id;
}
</code></pre>
<p>这样直接访问<code>localhost:8080/withParm</code>是不行的，因为没有携带<code>id</code>参数：</p>
<figure data-type="image" tabindex="6"><img src="https://img-blog.csdnimg.cn/20200906000522328.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>加入参数即可，也就是<code>localhost:8080/withParm?id=1</code>：</p>
<figure data-type="image" tabindex="7"><img src="https://img-blog.csdnimg.cn/20200906000605468.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h3 id="333-pathvariable">3.3.3 <code>@PathVariable</code></h3>
<p>另一种添加参数的方式是使用<code>@PathVariable</code>：</p>
<pre><code class="language-java">@GetMapping(&quot;path1/{id}&quot;)
public String path1(@PathVariable(&quot;id&quot;) String id)
{
    return &quot;id:&quot;+id;
}
</code></pre>
<p>这样不是加入<code>?id=xx</code>，而是直接加入占位符，比如<code>localhost:8080/path1/1</code>：</p>
<figure data-type="image" tabindex="8"><img src="https://img-blog.csdnimg.cn/20200906000845532.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h3 id="334-完整curd">3.3.4 完整<code>CURD</code></h3>
<p>这里是一个完整的<code>CRUD</code>示例：</p>
<pre><code class="language-java">@RestController
@RequestMapping(&quot;/&quot;)
@CrossOrigin(&quot;http://localhost:3000&quot;)
@RequiredArgsConstructor(onConstructor = @__(@Autowired))
public class CRUDController {
    private final Service service;

    @PostMapping(&quot;save&quot;)
    public boolean save(@RequestBody User user)
    {
        return service.save(user);
    }

    @GetMapping(&quot;delete&quot;)
    public boolean delete(@RequestParam String id)
    {
        return service.delete(id);
    }

    @GetMapping(&quot;select&quot;)
    public User select(@RequestParam String id)
    {
        return service.select(id);
    }

    @GetMapping(&quot;selectAll&quot;)
    public List&lt;User&gt; selectAll()
    {
        return service.selectAll();
    }

}
</code></pre>
<p>注解基本上都在上面说过了，除了下面两个：</p>
<ul>
<li><code>@RequiredArgsConstrutcor</code>：这个是<code>Lombok</code>的注解，用来消除直接使用<code>@Autowired</code>出现的警告</li>
<li><code>@CrossOrgin</code>：跨域注解，由于笔者使用<code>Postwoman</code>测试，默认运行端口为<code>3000</code>，因此需要加上该注解，使用<code>Postman</code>测试则不需要</li>
</ul>
<h2 id="34-service层">3.4 <code>Service</code>层</h2>
<pre><code class="language-java">@org.springframework.stereotype.Service
@RequiredArgsConstructor(onConstructor = @__(@Autowired))
public class Service {
    private final UserMapper mapper;

    public boolean save(User user)
    {
        String id = user.getId();
        User currentUser = select(id);
        if(currentUser != null)
            return mapper.update(user) == 1;
        return mapper.insert(user) == 1;
    }

    public boolean delete(String id)
    {
        return mapper.deleteById(id) == 1;
    }

    public User select(String id)
    {
        return mapper.selectById(id);
    }

    public List&lt;User&gt; selectAll()
    {
        return mapper.selectAll();
    }
}
</code></pre>
<p>简单的<code>CRUD</code>，调用持久层的方法。</p>
<h2 id="35-dao层">3.5 <code>Dao</code>层</h2>
<p>由于使用<code>MyBatis</code>，这里的<code>Dao</code>层只有一个<code>Mapper</code>：</p>
<pre><code class="language-java">@Mapper
@Component
public interface UserMapper{
    @Select(&quot;select * from user where id=#{id}&quot;)
    User selectById(@Param(&quot;id&quot;) String id);

    @Select(&quot;select * from user&quot;)
    List&lt;User&gt; selectAll();

    int insert(@Param(&quot;user&quot;) User user);

    int deleteById(@Param(&quot;id&quot;) String id);

    int update(@Param(&quot;user&quot;) User user);
}
</code></pre>
<p><code>select</code>的<code>sql</code>直接写在了上面，剩下的<code>sql</code>语句写在了<code>xml</code>配置文件，另外<code>@Mapper</code>注解表示在编译后生成对应的接口实现类。</p>
<h2 id="36-实体类">3.6 实体类</h2>
<pre><code class="language-java">@Data
@AllArgsConstructor
public class User {
    private String id;
    private String username;
    private String password;
    @Override
    public String toString()
    {
        return &quot;id:&quot;+id+&quot;\n&quot;+&quot;username&quot;+username+&quot;\npassword&quot;+password+&quot;\n&quot;;
    }
}
</code></pre>
<h2 id="37-配置类">3.7 配置类</h2>
<pre><code class="language-java">@Configuration
@MapperScan(&quot;com.example.demo.dao&quot;)
public class MyBatisConfig {
}
</code></pre>
<ul>
<li><code>@Configuration</code>：定义为配置类</li>
<li><code>@MapperScan</code>：<code>@Mapper</code>的扫描路径</li>
</ul>
<h2 id="38-配置文件">3.8 配置文件</h2>
<figure data-type="image" tabindex="9"><img src="https://img-blog.csdnimg.cn/20200906003818117.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>配置文件常用的有<code>properties</code>以及<code>yaml</code>，<code>yaml</code>格式更加简单，这里使用<code>yaml</code>格式：</p>
<pre><code class="language-yaml">spring:
  datasource:
    url: jdbc:mysql://127.0.0.1:3306/test
    username: test
    password: test

mybatis:
  configuration:
    map-underscore-to-camel-case: true
  mapper-locations: classpath:mappers/*.xml
</code></pre>
<p>分别指定数据库链接，数据库用户名以及密码，还有下划线转驼峰命名以及<code>mapper</code>文件的位置。</p>
<p>另外还需要创建<code>UserMapper.xml</code>：</p>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.example.demo.dao.UserMapper&quot;&gt;
    &lt;insert id=&quot;insert&quot;&gt;
        INSERT INTO `user` (`id`,`username`,`password`)
        VALUES (#{user.id},#{user.username},#{user.password})
    &lt;/insert&gt;

    &lt;update id=&quot;update&quot;&gt;
        UPDATE `user` set `username`=#{user.username} , `password`=#{user.password} where id=#{user.id}
    &lt;/update&gt;

    &lt;delete id=&quot;deleteById&quot;&gt;
        DELETE FROM `user` WHERE `id` = #{id}
    &lt;/delete&gt;
&lt;/mapper&gt;
</code></pre>
<p>就单纯的<code>sql</code>语句。</p>
<p>另外需要准备建表以及建用户的<code>sql</code>：</p>
<pre><code class="language-sql">CREATE DATABASE IF NOT EXISTS test;

CREATE USER IF NOT EXISTS 'test'@'localhost' IDENTIFIED BY 'test';

GRANT ALL ON test.* to 'test'@'localhost';

USE test;

CREATE TABLE user
(
    id char(10) primary key ,
    username varchar (30) not null,
    password varchar (30) not null
);
</code></pre>
<p>测试数据：</p>
<pre><code class="language-sql">USE test;
INSERT INTO user(id,username,password) values ('1','username1','password1'),('2','username2','password2');
</code></pre>
<p>最终配置文件如下：</p>
<figure data-type="image" tabindex="10"><img src="https://img-blog.csdnimg.cn/20200906021241990.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="4-其他准备">4 其他准备</h1>
<h2 id="41-建库建表建用户">4.1 建库建表建用户</h2>
<p>直接执行上面的脚本即可。</p>
<h2 id="42-开启服务">4.2 开启服务</h2>
<p>使用相应命令开启数据库服务。</p>
<h1 id="5-测试">5 测试</h1>
<h2 id="51-单元测试">5.1 单元测试</h2>
<p>修改一下自带的测试类即可：</p>
<pre><code class="language-java">@SpringBootTest
@RequiredArgsConstructor(onConstructor = @__(@Autowired))
class DemoApplicationTests {

    private final Service service;

    @Test
    void contextLoads() {
    }

    @Test
    void select()
    {
        System.out.println(service.select(&quot;1&quot;));
    }

    @Test
    void selectAll()
    {
        service.selectAll().forEach(System.out::println);
    }

//    @Test
//    void delete()
//    {
//        service.delete(&quot;3&quot;);
//    }

    @Test
    void save()
    {
        service.save(new User(&quot;3&quot;,&quot;username3&quot;,&quot;password3&quot;));
    }
}
</code></pre>
<figure data-type="image" tabindex="11"><img src="https://img-blog.csdnimg.cn/20200906021515598.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>直接点击左边的按钮即可运行，测试通过图如下：</p>
<figure data-type="image" tabindex="12"><img src="https://img-blog.csdnimg.cn/20200906021632644.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="52-浏览器测试">5.2 浏览器测试</h2>
<p>由于没有做前端，这里就使用<code>Postwoman</code>模拟前端测试：</p>
<figure data-type="image" tabindex="13"><img src="https://img-blog.csdnimg.cn/2020090602180490.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="14"><img src="https://img-blog.csdnimg.cn/20200906021835698.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="15"><img src="https://img-blog.csdnimg.cn/20200906021911642.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="16"><img src="https://img-blog.csdnimg.cn/20200906021957154.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="6-源码">6 源码</h1>
<p><code>Java</code>版：</p>
<ul>
<li><a href="https://github.com/2293736867/SpringBootDemoJava/tree/master/WebWithMyBatis">Github</a></li>
<li><a href="https://gitee.com/u6b7b5fc3/SpringBootDemoJava/tree/master/WebWithMyBatis/">码云</a></li>
</ul>
<p><code>Kotlin</code>版：</p>
<ul>
<li><a href="https://github.com/2293736867/SpringBootDemoKotlin/tree/master/WebWithMybatis">Github</a></li>
<li><a href="https://gitee.com/u6b7b5fc3/SpringBootDemoKotlin/tree/master/WebWithMybatis/">码云</a></li>
</ul>
<h1 id="7-参考">7 参考</h1>
<ul>
<li><a href="https://github.com/xkcoding/spring-boot-demo/tree/master/spring-boot-demo-orm-mybatis">Spring Boot Demo MyBatis</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Spring Boot demo系列（一）：Hello World]]></title>
        <id>https://2293736867.github.io/post/spring-boot-demo-xi-lie-yi-hello-world/</id>
        <link href="https://2293736867.github.io/post/spring-boot-demo-xi-lie-yi-hello-world/">
        </link>
        <updated>2020-09-06T06:07:06.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-新建工程">1 新建工程</h1>
<p>打开<code>IDEA</code>选择新建工程并选择<code>Spring Initializer</code>：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200905140324635.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>可以在<code>Project JDK</code>处选择<code>JDK</code>版本，下一步是选择包名，语言，构建工具以及打包工具等，这里选择的是<code>Java</code>+<code>Maven</code>+<code>Jar</code>：</p>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200905140357144.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>再下一步是选择依赖，一般来说<code>Spring Boot</code>应用都需要以下四个基础依赖：</p>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20200905140624123.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>最后一步是填上工程名以及路径：</p>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20200905140708654.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>这样一个<code>Demo</code>就完成了，项目结构如下：</p>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/20200905140955174.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="2-hello-world">2 Hello World</h1>
<p>在启动类输入即可：</p>
<figure data-type="image" tabindex="6"><img src="https://img-blog.csdnimg.cn/20200905141703684.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>然后在可以点上面的绿色小三角运行，或者按<code>Shift+F10</code>，如果没有运行配置可以手动添加，点击<code>Edit Configurations</code>：</p>
<figure data-type="image" tabindex="7"><img src="https://img-blog.csdnimg.cn/20200905141208708.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>选择<code>Spring Boot</code>：</p>
<figure data-type="image" tabindex="8"><img src="https://img-blog.csdnimg.cn/20200905141241773.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>一般修改<code>Name</code>（配置名称）以及<code>Main class</code>（启动类）即可，开发环境中可以勾上<code>Enable debug output</code>以及<code>Hide banner</code>：</p>
<figure data-type="image" tabindex="9"><img src="https://img-blog.csdnimg.cn/20200905141348803.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>然后就可以看到输出了：</p>
<figure data-type="image" tabindex="10"><img src="https://img-blog.csdnimg.cn/2020090514162368.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="3-源码">3 源码</h1>
<p><code>Java</code>版：</p>
<ul>
<li><a href="https://github.com/2293736867/SpringBootDemoJava">Github</a></li>
<li><a href="https://gitee.com/u6b7b5fc3/SpringBootDemoJava">码云</a></li>
</ul>
<p><code>Kotlin</code>版：</p>
<ul>
<li><a href="https://github.com/2293736867/SpringBootDemoKotlin">Github</a></li>
<li><a href="https://gitee.com/u6b7b5fc3/SpringBootDemoKotlin">码云</a></li>
</ul>
]]></content>
    </entry>
</feed>