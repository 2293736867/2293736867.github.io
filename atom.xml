<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://2293736867.github.io</id>
    <title>氷泠&apos;s blog</title>
    <updated>2020-11-02T23:48:34.465Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://2293736867.github.io"/>
    <link rel="self" href="https://2293736867.github.io/atom.xml"/>
    <subtitle>我配不上你，
纵然很努力。</subtitle>
    <logo>https://2293736867.github.io/images/avatar.png</logo>
    <icon>https://2293736867.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 氷泠&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[每日分享 第142期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-142-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-142-qi/">
        </link>
        <updated>2020-11-02T23:25:08.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>你若不离不弃，我特么必死无疑。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>高梧百尺夜苍苍，乱扫秋星落晓霜。<br>
——郑燮《咏梧桐》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>保持好迎接强者的心态，才是初心</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第141期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-141-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-141-qi/">
        </link>
        <updated>2020-11-01T16:53:57.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>别人的身体里都是才华，你的身体里都是珍珠奶茶。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>春山碧树秋重绿，人在武陵溪。<br>
——刘基《眼儿媚·秋思》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>世间文字八万个，唯有一字最是能杀人：情字可误人，情字可杀人。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第140期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-140-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-140-qi/">
        </link>
        <updated>2020-10-31T16:52:17.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>别人没回复，继续等，你会等到她的朋友圈。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>秋光照不极，鸟色去无边。<br>
——张籍《水》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>你怎么奇奇怪怪怪。。怪可爱的。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第139期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-139-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-139-qi/">
        </link>
        <updated>2020-10-30T16:50:36.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>出卖自己的灵魂和原则并不丢人，丢人的是没能卖一个好价钱。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>霜威出塞早，云色渡河秋。<br>
——李白《太原早秋》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>不要太小看人类了！</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第138期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-138-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-138-qi/">
        </link>
        <updated>2020-10-30T10:27:06.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>如果你有什么事，一定要告诉我，反正我也解决不了。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>欲向海天寻月去，五更飞梦渡鲲洋。<br>
——丘逢甲《元夕五月》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>寻找比自己更没用的人，沉浸于这样的优越感中。</p>
</blockquote>
<h1 id="关于博客">关于博客</h1>
<p>不知不觉已经写了一年多博客了，准确来说第一篇真正意义上的<a href="https://blog.csdn.net/qq_27525611/article/details/102493643">博客</a>是去年的10月写的：</p>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1604053795226.png" alt="" loading="lazy"></figure>
<p>一年后的阅读量是1823，25个收藏，怎么说呢，这篇算是稍微偏硬核一点的，但是用的技术是比较落后的，是传统的<code>Java Web</code>+<code>JDBC</code>+<code>WAR</code>部署，害。</p>
<p>隐约记得当时还幼稚地发了条朋友圈。。。</p>
<p>而那段时间，其实是过得比较痛苦的，因为。。。</p>
<p>因为。。。</p>
<p>没有因为。</p>
<p>行吧又扯远了，还是建议读者多点写博客吧，虽然是费时间，虽然是成长得慢，但是时间长了，会发现这其实是一个很好的决定。</p>
<p>笔者并不是给你们灌鸡汤，毕竟，这也算是某种意义上的一种爱好，坚持与不坚持，没人能强迫，自己想去，便去做就好了。</p>
<p>晚安。</p>
<p>2020/10/31 凌晨</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【长文】Spring学习笔记（七）：Mybatis映射器+动态SQL]]></title>
        <id>https://2293736867.github.io/post/chang-wen-spring-xue-xi-bi-ji-qi-mybatis-ying-she-qi-dong-tai-sql/</id>
        <link href="https://2293736867.github.io/post/chang-wen-spring-xue-xi-bi-ji-qi-mybatis-ying-she-qi-dong-tai-sql/">
        </link>
        <updated>2020-10-30T07:24:24.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#1-%E6%A6%82%E8%BF%B0">1 概述</a></li>
<li><a href="#2-mybatis%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%A6%82%E8%A7%88">2 <code>MyBatis</code>配置文件概览</a></li>
<li><a href="#3-%E5%87%86%E5%A4%87%E6%AD%A5%E9%AA%A4">3 准备步骤</a></li>
<li><a href="#4-%E6%98%A0%E5%B0%84%E5%99%A8%E6%A6%82%E8%BF%B0">4 映射器概述</a>
<ul>
<li><a href="#41-select">4.1 <code>&lt;select&gt;</code></a></li>
<li><a href="#42-%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0">4.2 传递参数</a>
<ul>
<li><a href="#421-map">4.2.1 <code>Map</code></a></li>
<li><a href="#412-%E4%BD%BF%E7%94%A8javabean">4.1.2 使用<code>JavaBean</code></a></li>
</ul>
</li>
<li><a href="#42-insert">4.2 <code>&lt;insert&gt;</code></a></li>
<li><a href="#43-updatedelete">4.3 <code>&lt;update&gt;</code>/<code>&lt;delete&gt;</code></a></li>
<li><a href="#44-sql">4.4 <code>&lt;sql&gt;</code></a></li>
</ul>
</li>
<li><a href="#5-resultmap">5 <code>&lt;resultMap&gt;</code></a>
<ul>
<li><a href="#51-%E4%BD%BF%E7%94%A8map">5.1 使用<code>Map</code></a></li>
<li><a href="#52-%E4%BD%BF%E7%94%A8pojo">5.2 使用<code>POJO</code></a></li>
</ul>
</li>
<li><a href="#6-%E7%BA%A7%E8%81%94%E6%9F%A5%E8%AF%A2">6 级联查询</a>
<ul>
<li><a href="#61-%E4%B8%80%E5%AF%B9%E4%B8%80">6.1 一对一</a>
<ul>
<li><a href="#611-%E6%95%B0%E6%8D%AE%E8%A1%A8">6.1.1 数据表</a></li>
<li><a href="#612-%E5%AE%9E%E4%BD%93%E7%B1%BB">6.1.2 实体类</a></li>
<li><a href="#613-%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6">6.1.3 映射文件</a></li>
<li><a href="#614-dao%E6%8E%A5%E5%8F%A3">6.1.4 <code>Dao</code>接口</a></li>
<li><a href="#615-%E6%B5%8B%E8%AF%95">6.1.5 测试</a></li>
</ul>
</li>
<li><a href="#62-%E4%B8%80%E5%AF%B9%E5%A4%9A">6.2 一对多</a>
<ul>
<li><a href="#621-%E6%95%B0%E6%8D%AE%E8%A1%A8">6.2.1 数据表</a></li>
<li><a href="#622-%E5%AE%9E%E4%BD%93%E7%B1%BB">6.2.2 实体类</a></li>
<li><a href="#623-%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6">6.2.3 映射文件</a></li>
<li><a href="#624-dao%E6%8E%A5%E5%8F%A3">6.2.4 <code>Dao</code>接口</a></li>
<li><a href="#625-%E6%B5%8B%E8%AF%95">6.2.5 测试</a></li>
</ul>
</li>
<li><a href="#63-%E5%A4%9A%E5%AF%B9%E5%A4%9A">6.3 多对多</a>
<ul>
<li><a href="#631-%E6%95%B0%E6%8D%AE%E8%A1%A8">6.3.1 数据表</a></li>
<li><a href="#632-%E5%AE%9E%E4%BD%93%E7%B1%BB">6.3.2 实体类</a></li>
<li><a href="#633-%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6">6.3.3 映射文件</a></li>
<li><a href="#634-dao%E6%8E%A5%E5%8F%A3">6.3.4 <code>Dao</code>接口</a></li>
<li><a href="#635-%E6%B5%8B%E8%AF%95">6.3.5 测试</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#7-%E5%8A%A8%E6%80%81sql">7 动态<code>SQL</code></a>
<ul>
<li><a href="#71-if">7.1 <code>&lt;if&gt;</code></a></li>
<li><a href="#72-choosewhenotherwise">7.2 <code>&lt;choose&gt;</code>+<code>&lt;when&gt;</code>+<code>&lt;otherwise&gt;</code></a></li>
<li><a href="#73-trim">7.3 <code>&lt;trim&gt;</code></a></li>
<li><a href="#74-where">7.4 <code>&lt;where&gt;</code></a></li>
<li><a href="#75-set">7.5 <code>&lt;set&gt;</code></a></li>
<li><a href="#76-foreach">7.6 <code>&lt;foreach&gt;</code></a></li>
<li><a href="#77-bind">7.7 <code>&lt;bind&gt;</code></a></li>
</ul>
</li>
<li><a href="#8-%E6%BA%90%E7%A0%81">8 源码</a></li>
</ul>
</p>
<h1 id="1-概述">1 概述</h1>
<p>本文主要讲述了如何使用<code>MyBatis</code>中的映射器以及动态<code>SQL</code>的配置。</p>
<h1 id="2-mybatis配置文件概览">2 <code>MyBatis</code>配置文件概览</h1>
<p><code>MyBatis</code>配置文件主要属性如下：</p>
<ul>
<li><code>&lt;settings&gt;</code>：相关设置，键值对形式</li>
<li><code>&lt;typeAliases&gt;</code>：类型别名</li>
<li><code>&lt;typeHandlers&gt;</code>：类型处理器</li>
<li><code>&lt;objectFactory&gt;</code>：对象工厂</li>
<li><code>&lt;plugins&gt;</code>：插件，包含若干个<code>&lt;plugin&gt;</code></li>
<li><code>&lt;environments&gt;</code>：环境配置，包含若干个<code>&lt;environment&gt;</code>，在<code>&lt;environment&gt;</code>中可以指定事务管理器<code>&lt;transactionManager&gt;</code>以及数据源<code>&lt;dataSource&gt;</code></li>
<li><code>&lt;databaseIdProvider&gt;</code>：数据库厂商标识</li>
<li><code>&lt;mappers&gt;</code>：映射器，包含若干个<code>&lt;mapper&gt;</code></li>
</ul>
<p>注意顺序不能颠倒，否则启动时会发生异常。</p>
<h1 id="3-准备步骤">3 准备步骤</h1>
<p>由于本文大部分的代码都只给出了关键的语句而没有完整的工程，因此如果想要实现一遍请<code>clone</code><a href="https://github.com/2293736867/SpringInitProjectJavaAndKotlin/tree/master/MyBatisSpringJavaInit">此处</a>的代码（<code>Kotlin</code>请<code>clone</code><a href="https://github.com/2293736867/SpringInitProjectJavaAndKotlin/tree/master/MyBatisSpringKotlinInit">此处</a>），并：</p>
<ul>
<li>利用<code>resources/sql</code>下的脚本文件创建数据库以及数据表，并插入相应数据</li>
<li>修改<code>MyBatis</code>、<code>Spring</code>、<code>dhcp2</code>等依赖为最新版本并修改<code>MySQL</code>驱动为对应版本</li>
<li>修改<code>applicationContext.xml</code>文件中的数据库用户名，密码以及数据库<code>URL</code>，可能需要修改驱动</li>
<li>开启数据库服务并进行测试，运行<code>MainTest</code>中的测试方法即可，正常来说会出现如下结果：</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20201028140955357.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="4-映射器概述">4 映射器概述</h1>
<p><code>MyBatis</code>的映射器由一个接口加上<code>XML</code>映射文件组成，是最复杂的组件，映射文件常用元素如下：</p>
<ul>
<li><code>&lt;select&gt;</code>：查询语句</li>
<li><code>&lt;insert&gt;</code>/<code>&lt;update&gt;</code>/<code>&lt;delete&gt;</code>：<code>插入</code>/<code>更新</code>/<code>删除</code>语句，返回操作所影响的行数，比如插入了两行，操作成功了影响的行数则为两行，返回整数2</li>
<li><code>&lt;sql&gt;</code>：自定义的<code>SQL</code></li>
<li><code>&lt;resultMap&gt;</code>：提供映射规则</li>
</ul>
<p>下面先来看一下最常用的<code>&lt;select&gt;</code>。</p>
<h2 id="41-select">4.1 <code>&lt;select&gt;</code></h2>
<p>示例（在<code>mapper/UserDao.xml</code>直接添加即可）：</p>
<pre><code class="language-xml">&lt;select id=&quot;selectById&quot; parameterType=&quot;Integer&quot; resultType=&quot;pers.init.entity.User&quot;&gt;
    select * from user where id = #{id}
&lt;/select&gt;
</code></pre>
<p>其中<code>id</code>是唯一标识符，接受一个<code>Integer</code>，返回<code>com.pojo.User</code>对象，结果集自动映射到<code>com.pojo.User</code>中。</p>
<p>常用属性如下：</p>
<ul>
<li><code>id</code>：<code>&lt;select&gt;</code>语句的全局唯一标识符</li>
<li><code>paramterType</code>：表示传入<code>SQL</code>语句的参数类型的全限定名或别名，可选，能自动推断</li>
<li><code>resultType</code>：执行<code>SQL</code>后返回的类型</li>
<li><code>resultMap</code>：与<code>resultType</code>类似，<code>resultType</code>默认一一对应映射，比如表字段名为<code>id</code>，则映射到实体类的<code>id</code>中，而<code>resultMap</code>需要手动定义映射关系，这样就可以把表字段中的<code>id</code>映射到实体类的<code>id1</code>，或<code>id2</code>，或<code>id3</code>，<code>resultType</code>与<code>resultMap</code>两者需要指定一个，不能同时存在</li>
<li><code>flushCache</code>：设置调用<code>SQL</code>后是否要求<code>MyBatis</code>清空之前查询的本地缓存以及二级缓存，默认<code>false</code></li>
<li><code>useCache</code>：启动二级缓存，默认<code>true</code></li>
<li><code>timeout</code>：超时参数，单位秒</li>
<li><code>fetchSize</code>：获取记录的总条数设定</li>
<li><code>statementType</code>：使用哪个<code>JDBC</code>的<code>Statement</code>，取值可以为<code>STATEMENT</code>/<code>PREPARED</code>/<code>CALLABLE</code>，分别表示<code>Statement</code>/<code>PreparedStatement</code>/<code>CallableStatement</code></li>
<li><code>resultSetType</code>：针对<code>JDBC</code>的<code>ResultSet</code>，可设置为<code>FORWARD_ONLY</code>/<code>SCROLL_SENSITIVE</code>/<code>SCROLL_INSENSITIVE</code>，分别表示<code>只允许向前访问</code>/<code>双向滚动，不及时更新</code>/<code>双向滚动，及时更新</code></li>
</ul>
<p>并修改<code>UserDao</code>，添加一个<code>selectById</code>方法：</p>
<pre><code class="language-java">User selectById(Integer id);
</code></pre>
<p>可以直接测试了：</p>
<pre><code class="language-java">@Test
public void selectById()
{
    System.out.println(dao.selectById(1));
}
</code></pre>
<p>下面来看一下如何传递多个参数。</p>
<h2 id="42-传递参数">4.2 传递参数</h2>
<p>有了最基本的<code>select</code>后，传递<code>id</code>这种单一参数很容易，但是实际情况中很多时候需要传递多个参数，<code>MyBatis</code>中传递多个参数有两种方式：</p>
<ul>
<li>通过<code>Map</code>传递</li>
<li>通过<code>JavaBean</code>传递</li>
</ul>
<h3 id="421-map">4.2.1 <code>Map</code></h3>
<p>可以使用<code>Map</code>传递多个参数，示例<code>&lt;select&gt;</code>如下：</p>
<pre><code class="language-xml">&lt;select id=&quot;selectByMap&quot; resultType=&quot;pers.init.entity.User&quot; parameterType=&quot;map&quot;&gt;
    select * from user where name like concat('%', #{name}, '%') and age = #{age}
&lt;/select&gt;
</code></pre>
<p>参数名<code>name</code>以及<code>age</code>是<code>Map</code>的键。</p>
<p>接着在<code>UserDao</code>下添加：</p>
<pre><code class="language-java">User selectByMap(Map&lt;String,String&gt; map);
</code></pre>
<p>然后在主类中使用<code>Map</code>添加键值对：</p>
<pre><code class="language-java">@Test
public void selectByMap()
{
    Map&lt;String,String&gt; map = new HashMap&lt;&gt;();
    map.put(&quot;name&quot;,&quot;111&quot;);
    map.put(&quot;age&quot;,&quot;33&quot;);
    System.out.println(dao.selectByMap(map));
}
</code></pre>
<p>这样就能传递多个参数进行查询了。</p>
<h3 id="412-使用javabean">4.1.2 使用<code>JavaBean</code></h3>
<p>传递多个参数的另一种方法是利用<code>JavaBean</code>传递，创建一个<code>POJO</code>类：</p>
<pre><code class="language-java">@Getter
@Setter
@Builder
@ToString
public class UserPOJO {
    private String name;
    private Integer age;
}
</code></pre>
<p>修改<code>UserDao</code>接口方法：</p>
<pre><code class="language-java">public User selectByPOJO(UserPOJO user)
</code></pre>
<p>接着修改映射文件，实际上修改<code>parameterType</code>即可：</p>
<pre><code class="language-xml">&lt;select id=&quot;selectByPOJO&quot; resultType=&quot;pers.init.entity.User&quot; parameterType=&quot;pers.init.pojo.UserPOJO&quot;&gt;
    select * from user where name like concat('%', #{name}, '%') and age = #{age}
&lt;/select&gt;
</code></pre>
<p>注意访问传递的参数时直接使用<code>POJO</code>类的属性名即可，无须加上类似<code>UserPOJO.</code>的前缀。</p>
<p>最后进行测试：</p>
<pre><code class="language-java">@Test
public void selectByPOJO()
{
    UserPOJO pojo = UserPOJO.builder().age(33).name(&quot;111&quot;).build();
    System.out.println(dao.selectByPOJO(pojo));
}
</code></pre>
<h2 id="42-insert">4.2 <code>&lt;insert&gt;</code></h2>
<p><code>&lt;insert&gt;</code>用于插入，大部分属性与<code>&lt;select&gt;</code>相同，下面是几个特有属性：</p>
<ul>
<li><code>keyProperty</code>：将插入操作的返回值赋给<code>POJO</code>类的某个属性</li>
<li><code>keyColumn</code>：用于设置主键列的位置，当表中第1列不是主键时需要设置该参数，联合主键可以使用逗号分隔</li>
<li><code>useGeneratedKeys</code>：使用<code>JDBC</code>的<code>getGeneratedKeys</code>获取数据库内部产生的主键，默认<code>false</code></li>
</ul>
<p>比如典型的主键回填<code>&lt;insert&gt;</code>如下：</p>
<pre><code class="language-xml">&lt;insert id=&quot;insertUser1&quot; parameterType=&quot;pers.init.entity.User&quot; keyProperty=&quot;id&quot; useGeneratedKeys=&quot;true&quot;&gt;
    insert into user(name, age) values (#{name}, #{id})
&lt;/insert&gt;
</code></pre>
<p>这样就会利用数据库生成的自增主键回填到<code>User</code>的<code>id</code>属性中，<code>UserDao</code>接口如下：</p>
<pre><code class="language-java">int insertUser1(User user);
</code></pre>
<p>一般来说插入操作返回一个整数，表示操作影响的行数，因此可以设置返回值为<code>int</code>，测试如下：</p>
<pre><code class="language-java">@Test
public void insertUser1()
{
    User user = User.builder().age((short) 88).name(&quot;test1&quot;).build();
    System.out.println(dao.insertUser1(user));
    System.out.println(user.getId());
}
</code></pre>
<p>另外如果不支持自增主键，可以使用<code>selectKey</code>自定义生成主键，比如：</p>
<pre><code class="language-xml">&lt;insert id=&quot;insertUser2&quot; parameterType=&quot;pers.init.entity.User&quot;&gt;
    &lt;selectKey keyProperty=&quot;id&quot; resultType=&quot;integer&quot; order=&quot;BEFORE&quot;&gt;
        select if(max(id) is null,1,max(id)+1) as newId from user
    &lt;/selectKey&gt;
    insert into user(id,name,age) values(#{id},#{name},#{age})
&lt;/insert&gt;
</code></pre>
<p><code>&lt;selectKey&gt;</code>中的<code>keyProperty</code>指定了新主键<code>newId</code>返回给<code>pers.pojo.User</code>的<code>id</code>属性，<code>order</code>设置执行顺序，<code>BEFORE</code>/<code>AFTER</code>表示执行<code>&lt;selectKey&gt;</code>之后/之前再执行插入语句。</p>
<p>测试：</p>
<pre><code class="language-java">@Test
public void insertUser2()
{
    User user = User.builder().age((short) 10).name(&quot;test2&quot;).build();
    System.out.println(dao.insertUser2(user));
    System.out.println(user.getId());
}
</code></pre>
<h2 id="43-updatedelete">4.3 <code>&lt;update&gt;</code>/<code>&lt;delete&gt;</code></h2>
<p>返回一个整数，属性与<code>&lt;insert&gt;</code>/<code>&lt;select&gt;</code>类似，简单示例如下：</p>
<pre><code class="language-xml">&lt;update id=&quot;updateUser&quot; parameterType=&quot;pers.init.entity.User&quot;&gt;
    update user set name=#{name}, age=#{age} where id = #{id}
&lt;/update&gt;

&lt;delete id=&quot;deleteUser&quot; parameterType=&quot;Integer&quot;&gt;
    delete from user where id = #{id}
&lt;/delete&gt;
</code></pre>
<p>同理<code>update/delete</code>返回一个整数，表示操作影响的行数，因此设置<code>UserDao</code>接口如下：</p>
<pre><code class="language-java">int updateUser(User user);
int deleteUser(Integer id);
</code></pre>
<p>测试：</p>
<pre><code class="language-java">@Test
public void updateUser()
{
    User user = User.builder().id(3).name(&quot;3333333&quot;).age((short)11).build();
    selectAll();
    System.out.println(dao.updateUser(user));
    selectAll();
}

@Test
public void deleteUser()
{
    selectAll();
    System.out.println(dao.deleteUser(3));
    selectAll();
}
</code></pre>
<h2 id="44-sql">4.4 <code>&lt;sql&gt;</code></h2>
<p>用于定义<code>SQL</code>的一部分，以方便后面的<code>SQL</code>语句引用，比如：</p>
<pre><code class="language-xml">&lt;sql id=&quot;column&quot;&gt;
    id,name,age
&lt;/sql&gt;
&lt;select id=&quot;selectBySqlColumn&quot; resultType=&quot;pers.init.entity.User&quot;&gt;
    select &lt;include refid=&quot;column&quot;/&gt; from user
&lt;/select&gt;
</code></pre>
<p><code>UserDao</code>接口：</p>
<pre><code class="language-java">List&lt;User&gt; selectBySqlColumn();
</code></pre>
<p>测试：</p>
<pre><code class="language-java">@Test
public void selectBySqlColumn()
{
    System.out.println(dao.selectBySqlColumn());
}
</code></pre>
<h1 id="5-resultmap">5 <code>&lt;resultMap&gt;</code></h1>
<p>上面提高过，<code>&lt;resultMap&gt;</code>比<code>&lt;resultType&gt;</code>要强大，但是需要手动定义映射关系，一个常见的<code>&lt;resultMap&gt;</code>如下：</p>
<pre><code class="language-xml">&lt;resultMap type=&quot;package1.package2.package3.POJO&quot; id=&quot;resultMapId&quot;&gt;
	&lt;constrcutor&gt;                       &lt;!--实例化时将结果注入到构造方法中--&gt;
		&lt;idArg /&gt;                       &lt;!--ID参数--&gt;
		&lt;arg /&gt;                         &lt;!--普通参数--&gt;
	&lt;/constrcutor&gt;
	&lt;id /&gt;                              &lt;!--表示哪个列是主键--&gt;
	&lt;result /&gt;                          &lt;!--注入到字段/JavaBean属性的普通结果--&gt;
	&lt;association property=&quot;&quot;&gt;           &lt;!--一对一关联--&gt;
	&lt;collection property=&quot;&quot;&gt;            &lt;!--一对多关联--&gt;
	&lt;discriminator javaType=&quot;&quot;&gt;         &lt;!--使用结果值决定哪个结果映射--&gt;
		&lt;case value=&quot;&quot;&gt;                 &lt;!--基于某些值的结果映射--&gt;
	&lt;/discriminator&gt;
&lt;/resultMap&gt;
</code></pre>
<h2 id="51-使用map">5.1 使用<code>Map</code></h2>
<p>查询<code>SQL</code>的结果可以使用<code>Map</code>/<code>POJO</code>存储，使用<code>Map</code>存储不需要手动编写<code>&lt;resultMap&gt;</code>，默认表属性名是键值对的键：</p>
<pre><code class="language-xml">&lt;select id=&quot;selectReturnMap&quot; resultType=&quot;Map&quot;&gt;
    select * from user
&lt;/select&gt;
</code></pre>
<p>可用<code>List&lt;Map&gt;</code>来接收返回结果，一条记录映射到一个<code>Map</code>对象，<code>Map</code>中的<code>key</code>是<code>select</code>的字段名。</p>
<p>示例的<code>UserDao</code>方法如下：</p>
<pre><code class="language-java">List&lt;Map&lt;String,Object&gt;&gt; selectReturnMap();
</code></pre>
<p>其中<code>Map</code>类型为<code>Map&lt;String,Object&gt;</code>，测试方法如下：</p>
<pre><code class="language-java"> @Test
public void selectReturnMap()
{
    dao.selectReturnMap().forEach(System.out::println);
}
</code></pre>
<h2 id="52-使用pojo">5.2 使用<code>POJO</code></h2>
<p>如果使用<code>POJO</code>存储返回的对象时，需要先定义一个<code>POJO</code>类，可以在上面的<code>UserPOJO</code>基础上加上一个<code>id</code>属性：</p>
<pre><code class="language-java">@Getter
@Setter
@Builder
@ToString
public class UserPOJO {
    private Integer id;
    private String name;
    private Integer age;
}
</code></pre>
<p>接着编写映射文件：</p>
<pre><code class="language-xml">&lt;resultMap id=&quot;testPOJO&quot; type=&quot;pers.init.pojo.UserPOJO&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;
    &lt;result property=&quot;age&quot; column=&quot;age&quot;/&gt;
&lt;/resultMap&gt;
</code></pre>
<p>其中<code>property</code>指定<code>POJO</code>的属性，<code>column</code>是表字段名，最后配合<code>&lt;select&gt;</code>使用，指定<code>resultMap</code>为对应<code>id</code>：</p>
<pre><code class="language-xml">&lt;select id=&quot;selectReturnPOJO&quot; resultMap=&quot;testPOJO&quot;&gt;
	select * from user
&lt;/select&gt;
</code></pre>
<p>返回结果可以用<code>List&lt;UserPOJO&gt;</code>接收：</p>
<pre><code class="language-java">List&lt;UserPOJO&gt; selectReturnPOJO();
</code></pre>
<p>测试方法：</p>
<pre><code class="language-java">@Test
public void selectReturnPOJO()
{
    dao.selectReturnPOJO().forEach(System.out::println);
}
</code></pre>
<h1 id="6-级联查询">6 级联查询</h1>
<p>级联查询就是利用主键与外键的关系进行组合查询，比如表<code>A</code>的一个外键引用了表<code>B</code>的一个主键，查询<code>A</code>时，通过<code>A</code>的外键将<code>B</code>的相关记录返回，这就是级联查询。常见的级联查询有三种：</p>
<ul>
<li>一对一</li>
<li>一对多</li>
<li>多对多</li>
</ul>
<p><code>MyBatis</code>支持一对一以及一对多级联，没有对多对多级联提供支持，但是可以用多个一对多级联实现多对多级联。下面分别来看一下。</p>
<h2 id="61-一对一">6.1 一对一</h2>
<p>一对一级联查询是最常见的级联查询，可以通过<code>&lt;resultMap&gt;</code>中的<code>&lt;association&gt;</code>进行配置，通常使用的属性如下：</p>
<ul>
<li><code>property</code>：映射到实体类的对象属性</li>
<li><code>column</code>：指定表中对应的字段</li>
<li><code>javaType</code>：指定映射到实体对象属性的类型</li>
<li><code>select</code>：指定引入嵌套查询的子<code>SQL</code>语句，用于关联映射中的嵌套查询</li>
</ul>
<p>下面通过一个例子进行说明，例子分五步：</p>
<ul>
<li>创建数据表</li>
<li>创建实体类</li>
<li>编写映射文件</li>
<li>修改持久层接口</li>
<li>添加测试方法</li>
</ul>
<h3 id="611-数据表">6.1.1 数据表</h3>
<p>为了方便新增表以及数据都写在一起：</p>
<pre><code class="language-sql">use test;

drop table if exists idcard;
drop table if exists person;

create table idcard(
    id int(10) primary key auto_increment,
    code char(18) collate utf8mb4_unicode_ci default null
);

create table person(
    id int(10) primary key,
    name varchar(20) collate utf8mb4_unicode_ci default null,
    age smallint default null,
    idcard_id int(10) default null,
    key idcard_id(idcard_id),
    constraint idcard_id foreign key (idcard_id) references idcard(id)
);

insert into idcard(`code`) values('123456789123456789');

insert into person(`id`,`name`,`age`,`idcard_id`) values (1,'111',22,1);
</code></pre>
<h3 id="612-实体类">6.1.2 实体类</h3>
<pre><code class="language-java">@Data
public class IdCard {
    private Integer id;
    private String code;
}

@Data
public class Person {
    private Integer id;
    private String name;
    private Integer age;
    private IdCard card;
}
</code></pre>
<p>另外还需要创建一个映射结果的<code>POJO</code>类：</p>
<pre><code class="language-java">@Data
public class PersonPOJO {
    private Integer id;
    private String name;
    private Short age;
    private String code;
}
</code></pre>
<h3 id="613-映射文件">6.1.3 映射文件</h3>
<p>映射文件分为两个：</p>
<ul>
<li><code>IdCardMapper.xml</code></li>
<li><code>PersonMapper.xml</code></li>
</ul>
<p>首先是<code>IdCardMapper.xml</code>，加上一个<code>&lt;select&gt;</code>即可，注意<code>namespace</code>的位置填写正确，对应<code>dao</code>的位置。</p>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;pers.oneToOne.dao.IdCardDao&quot;&gt;
    &lt;select id=&quot;selectCodeById&quot; parameterType=&quot;Integer&quot; resultType=&quot;pers.oneToOne.entity.IdCard&quot;&gt;
        select * from idcard where id = #{id}
    &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>
<p>其次是<code>PersonMapper.xml</code>：</p>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;pers.oneToOne.dao.PersonDao&quot;&gt;
    &lt;resultMap id=&quot;personMap1&quot; type=&quot;pers.oneToOne.entity.Person&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;
        &lt;result property=&quot;age&quot; column=&quot;age&quot;/&gt;
        &lt;association property=&quot;card&quot; column=&quot;idcard_id&quot; javaType=&quot;pers.oneToOne.entity.IdCard&quot;
                     select=&quot;pers.oneToOne.dao.IdCardDao.selectCodeById&quot;/&gt;
    &lt;/resultMap&gt;
    &lt;select id=&quot;selectPersonById1&quot; parameterType=&quot;Integer&quot; resultMap=&quot;personMap1&quot;&gt;
        select *
        from person
        where id = #{id}
    &lt;/select&gt;

    &lt;resultMap id=&quot;personMap2&quot; type=&quot;pers.oneToOne.entity.Person&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;
        &lt;result property=&quot;age&quot; column=&quot;age&quot;/&gt;
        &lt;association property=&quot;card&quot; javaType=&quot;pers.oneToOne.entity.IdCard&quot;&gt;
            &lt;id property=&quot;id&quot; column=&quot;idcard_id&quot;/&gt;
            &lt;result property=&quot;code&quot; column=&quot;code&quot;/&gt;
        &lt;/association&gt;
    &lt;/resultMap&gt;

    &lt;select id=&quot;selectPersonById2&quot; parameterType=&quot;Integer&quot; resultMap=&quot;personMap2&quot;&gt;
        select p.*, ic.code
        from person p,
             idcard ic
        where p.idcard_id = ic.id
          and p.id = #{id}
    &lt;/select&gt;

    &lt;select id=&quot;selectPersonById3&quot; parameterType=&quot;Integer&quot; resultType=&quot;pers.oneToOne.pojo.PersonPOJO&quot;&gt;
        select p.*, ic.code
        from person p,
             idcard ic
        where p.idcard_id = ic.id
          and p.id = #{id}
    &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>
<p>首先第一个<code>&lt;resultMap&gt;</code>先指定<code>id</code>等属性，接着是<code>&lt;association&gt;</code>：</p>
<ul>
<li><code>property</code>是实体类属性，注意类型为<code>IdCard</code></li>
<li><code>column</code>是表字段名，类型为<code>int(10)</code></li>
<li><code>javaType</code>是通过后面的<code>select</code>返回的类型，可以理解成是<code>property</code>的类型，也就是<code>IdCard</code></li>
<li><code>select</code>指定嵌套查询使用的<code>SQL</code>，对应于<code>IdCardDao.xml</code>中的<code>selectCodeById</code></li>
</ul>
<p>接着在一个<code>&lt;select&gt;</code>中的<code>resultMap</code>指定该<code>map</code>的<code>id</code>即可。使用这种方法执行的是两次<code>SQL</code>：</p>
<ul>
<li>一次是<code>select * from person where id=?</code></li>
<li>一次是<code>select * from idcard where id=?</code></li>
</ul>
<p>最后再把结果整起起来，开启调试可以发现实际上也是执行了两条<code>SQL</code>：</p>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20201030170004401.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>而第二个<code>&lt;resultMap&gt;</code>中，在<code>&lt;association&gt;</code>里面没有了<code>select</code>属性，直接将结果映射到<code>SelectPersonById</code>中，这是执行一条<code>SQL</code>语句的结果：</p>
<pre><code class="language-sql">select p.*,ic.code from person p,idcard ic where p.idcard_id = ic.id and p.id=#{id}
</code></pre>
<p>实际查询如下：</p>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20201030212207860.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>如果需要重要可以将其配置成<code>&lt;resultMap&gt;</code>，比如：</p>
<pre><code class="language-xml">&lt;association property=&quot;card&quot; resultMap=&quot;resultMap&quot; /&gt;
&lt;resultMap id=&quot;resultMap&quot;&gt;
	&lt;id property=&quot;id&quot; column=&quot;idcard_id&quot;/&gt;
	&lt;result property=&quot;code&quot; column=&quot;code&quot;/&gt;
&lt;/resultMap&gt;
</code></pre>
<p>而最后一个<code>&lt;select&gt;</code>是进行连接查询，无需额外的<code>&lt;resultMap&gt;</code>，实际执行情况如下：</p>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20201030212511565.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h3 id="614-dao接口">6.1.4 <code>Dao</code>接口</h3>
<p>这个比较简单：</p>
<pre><code class="language-java">public interface PersonDao {
    Person selectPersonById1(Integer id);
    Person selectPersonById2(Integer id);
    PersonPOJO selectPersonById3(Integer id);
}
</code></pre>
<h3 id="615-测试">6.1.5 测试</h3>
<pre><code class="language-java">@Test
public void selectPersonById()
{
    System.out.println(dao.selectPersonById1(1));
    System.out.println(dao.selectPersonById2(1));
    System.out.println(dao.selectPersonById3(1));
}
</code></pre>
<p>注意在测试之前，需要修改配置文件<code>mybatis-config.xml</code>：</p>
<pre><code class="language-xml">&lt;configuration&gt;
    &lt;settings&gt;
        &lt;!--延迟加载--&gt;
        &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt;
        &lt;!--按需加载--&gt;
        &lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;true&quot;/&gt;
        &lt;!--调试开关，打印执行的SQL--&gt;
&lt;!--        &lt;setting name=&quot;logImpl&quot; value=&quot;STDOUT_LOGGING&quot;/&gt;--&gt;
    &lt;/settings&gt;
    &lt;mappers&gt;
        &lt;!--initMapper--&gt;
        &lt;mapper resource=&quot;mapper/init/UserMapper.xml&quot; /&gt;
        &lt;mapper resource=&quot;mapper/init/TestMapper.xml&quot; /&gt;
        &lt;!--一对一级联Mapper--&gt;
        &lt;mapper resource=&quot;mapper/oneToOne/PersonMapper.xml&quot; /&gt;
        &lt;mapper resource=&quot;mapper/oneToOne/IdCardMapper.xml&quot; /&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<p>前两个<code>&lt;setting&gt;</code>表示开启延迟加载以及按需加载，后面一个是设置调试开关，最后在下面的<code>&lt;mappers&gt;</code>加上<code>&lt;mapper&gt;</code>对应的<code>xml</code>的位置。</p>
<p>要注意的一个是<code>&lt;settings&gt;</code>需要写在<code>&lt;mappers&gt;</code>的前面。</p>
<p>另外因为<code>Dao</code>接口没有加上<code>@Mapper</code>注解，因此需要在<code>applicationContext.xml</code>中手动加上<code>Dao</code>位置：</p>
<pre><code class="language-xml">&lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;
    &lt;property name=&quot;basePackage&quot; value=&quot;pers.oneToOne.dao&quot;/&gt;
    &lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sql.SessionFactory&quot;/&gt;
&lt;/bean&gt;
</code></pre>
<p>测试结果：</p>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/2020102908000335.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="62-一对多">6.2 一对多</h2>
<p>一对多的级联查询与一对一处理有相似之处，主要是映射文件中的<code>&lt;collection&gt;</code>配置，例子也是和上面一样分五步。</p>
<h3 id="621-数据表">6.2.1 数据表</h3>
<p>需要两张表：</p>
<ul>
<li><code>user</code></li>
<li><code>order</code></li>
</ul>
<p><code>user</code>可以沿用前面的<code>user</code>表，而<code>order</code>表如下：</p>
<pre><code class="language-sql">use test;
drop table if exists orders;

create table orders(
    id int(10) primary key auto_increment,
    ordersn varchar(10) collate utf8mb4_unicode_ci default null,
    user_id int(10) default null,
    key user_id(user_id),
    constraint user_id foreign key (user_id) references user(id)
);

insert into orders(`ordersn`,`user_id`) values ('testorder1',1),('testorder2',1),('testorder3',1);
</code></pre>
<h3 id="622-实体类">6.2.2 实体类</h3>
<p>添加实体类<code>Orders</code>：</p>
<pre><code class="language-java">@Data
public class Orders {
    private Integer id;
    private String ordersn;
}
</code></pre>
<p>同时创建一个带<code>Orders</code>的<code>User</code>：</p>
<pre><code class="language-java">@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class UserWithOrders {
    private Integer id;
    private String name;
    private Short age;
    private List&lt;Orders&gt; ordersList;
}
</code></pre>
<h3 id="623-映射文件">6.2.3 映射文件</h3>
<p>两个：</p>
<ul>
<li><code>OrdersMapper.xml</code></li>
<li><code>UserWithOrdersMapper.xml</code></li>
</ul>
<p>首先是<code>OrdersMapper.xml</code>，只有一个简单的<code>&lt;select&gt;</code>：</p>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;pers.oneToMany.dao.OrdersDao&quot;&gt;
    &lt;select id=&quot;selectOrdersById&quot; parameterType=&quot;Integer&quot; resultType=&quot;pers.oneToMany.entity.Orders&quot;&gt;
        select * from orders where user_id=#{id}
    &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>
<p>接着是<code>UserWithOrdersMapper.xml</code>：</p>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;pers.oneToMany.dao.UserWithOrdersDao&quot;&gt;

    &lt;resultMap id=&quot;userAndOrder1&quot; type=&quot;pers.oneToMany.entity.UserWithOrders&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;
        &lt;result property=&quot;age&quot; column=&quot;age&quot;/&gt;
        &lt;collection property=&quot;ordersList&quot; ofType=&quot;pers.oneToMany.entity.Orders&quot; column=&quot;id&quot; select=&quot;pers.oneToMany.dao.OrdersDao.selectOrdersById&quot;/&gt;
    &lt;/resultMap&gt;
    &lt;select id=&quot;selectUserOrders1&quot; parameterType=&quot;Integer&quot; resultMap=&quot;userAndOrder1&quot;&gt;
        select * from user where id=#{id}
    &lt;/select&gt;

    &lt;resultMap id=&quot;userAndOrder2&quot; type=&quot;pers.oneToMany.entity.UserWithOrders&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot; /&gt;
        &lt;result property=&quot;name&quot; column=&quot;name&quot; /&gt;
        &lt;result property=&quot;age&quot; column=&quot;age&quot; /&gt;
        &lt;collection property=&quot;ordersList&quot; ofType=&quot;pers.oneToMany.entity.Orders&quot;&gt;
            &lt;id property=&quot;id&quot; column=&quot;id&quot; /&gt;
            &lt;result property=&quot;ordersn&quot; column=&quot;ordersn&quot;/&gt;
        &lt;/collection&gt;
    &lt;/resultMap&gt;
    &lt;select id=&quot;selectUserOrders2&quot; parameterType=&quot;Integer&quot; resultMap=&quot;userAndOrder2&quot;&gt;
        select u.*,o.id,o.ordersn from user u,orders o where u.id = o.user_id and u.id = #{id}
    &lt;/select&gt;

    &lt;select id=&quot;selectUserOrders3&quot; parameterType=&quot;Integer&quot; resultType=&quot;pers.oneToMany.pojo.UserOrdersPOJO&quot;&gt;
        select u.*,o.id,o.ordersn from user u,orders o where u.id = o.user_id and u.id = #{id}
    &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>
<p>相比起一对一的级联，重点改变的就是其中的<code>&lt;collection&gt;</code>，重要属性如下：</p>
<ul>
<li><code>property</code>：指定实体类的属性字段</li>
<li><code>ofType</code>：指定集合中的类型</li>
<li><code>column</code>：将哪些值传递给<code>select</code>中的方法</li>
<li><code>select</code>：嵌套查询的语句</li>
</ul>
<p>第二个<code>&lt;collection&gt;</code>类似，将查询的结果直接映射到<code>Orders</code>的属性上面。最后一种是直接使用连接查询。</p>
<h3 id="624-dao接口">6.2.4 <code>Dao</code>接口</h3>
<pre><code class="language-java">public interface OrdersDao {
    List&lt;Orders&gt; selectOrdersById(Integer id);
}

public interface UserWithOrdersDao {
    UserWithOrders selectUserOrders1(Integer id);
    UserWithOrders selectUserOrders2(Integer id);
    List&lt;UserOrdersPOJO&gt; selectUserOrders3(Integer id);
}
</code></pre>
<h3 id="625-测试">6.2.5 测试</h3>
<pre><code class="language-java">@Test
public void selectUserOrders()
{
    System.out.println(dao.selectUserOrders1(1));
    System.out.println(dao.selectUserOrders2(1));
    System.out.println(dao.selectUserOrders3(1));
}
</code></pre>
<h2 id="63-多对多">6.3 多对多</h2>
<p><code>MyBaits</code>其实不支持多对多级联，但是可以通过多个一对多级联实现，比如一个订单对应多个商品，一个商品对应多个订单，这样两者就是多对多级联关系，这样使用一个中间表，就可以转换为两个一对多关系。</p>
<p>下面同样通过五个步骤实现多对多级联。</p>
<h3 id="631-数据表">6.3.1 数据表</h3>
<p>需要订单表、商品表以及一个中间表，由于订单表<code>Orders</code>之前已创建，这里只需要创建两个表：</p>
<pre><code class="language-sql">use test;

create table product(
    id int(10) primary key auto_increment,
    name varchar(10) collate utf8mb4_unicode_ci default null,
    price double default null
);

create table orders_detail(
    id int(10) primary key auto_increment,
    orders_id int(10) default null,
    product_id int(10) default null,
    key orders_id(orders_id),
    key product_id(product_id),
    constraint orders_id foreign key (orders_id) references orders(id),
    constraint product_id foreign key (product_id) references product(id)
);

insert into product(`name`,`price`) values('product1',1.1),('product2',2.2),('product3',3.3);
insert into orders_detail(`orders_id`,`product_id`) values(1,1),(1,2),(1,3),(2,1),(2,3);
</code></pre>
<h3 id="632-实体类">6.3.2 实体类</h3>
<p>订单类可以沿用之前的，只需要两个实体类：</p>
<pre><code class="language-java">@Data
@AllArgsConstructor
@NoArgsConstructor
public class Product {
    private Integer id;
    private String name;
    private Double price;
    private List&lt;Orders&gt; orders;
}

@Data
@AllArgsConstructor
@NoArgsConstructor
public class OrdersWithProduct {
    private Integer id;
    private String ordersn;
    private List&lt;Product&gt; products;
}
</code></pre>
<h3 id="633-映射文件">6.3.3 映射文件</h3>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;pers.manyToMany.dao.OrdersWithProductDao&quot;&gt;
    &lt;resultMap id=&quot;ordersAndProduct&quot; type=&quot;pers.manyToMany.entity.OrdersWithProduct&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;ordersn&quot; column=&quot;ordersn&quot;/&gt;
        &lt;collection property=&quot;products&quot; ofType=&quot;pers.manyToMany.entity.Product&quot;&gt;
            &lt;id property=&quot;id&quot; column=&quot;pid&quot;/&gt;
            &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;
            &lt;result property=&quot;price&quot; column=&quot;price&quot;/&gt;
        &lt;/collection&gt;
    &lt;/resultMap&gt;
    &lt;select id=&quot;selectOrdersAndProduct&quot; resultMap=&quot;ordersAndProduct&quot;&gt;
        select o.*,p.id as pid ,p.name,p.price from orders o,orders_detail od, product p where o.id = od.orders_id and od.product_id = p.id
    &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>
<p>这里的多对多级联实质上是通过每次指定不同的<code>OrdersId</code>去查询对应的<code>Product</code>实现的，也就是分成了多次的一对多级联。</p>
<h3 id="634-dao接口">6.3.4 <code>Dao</code>接口</h3>
<pre><code class="language-java">public interface OrdersWithProductDao {
    List&lt;OrdersWithProduct&gt; selectOrdersAndProduct();
}
</code></pre>
<h3 id="635-测试">6.3.5 测试</h3>
<pre><code class="language-java">@Test
public void test()
{
    ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);
    OrdersWithProductDao dao = context.getBean(OrdersWithProductDao.class);
    System.out.println(dao.selectOrdersAndProduct());
}
</code></pre>
<h1 id="7-动态sql">7 动态<code>SQL</code></h1>
<p>最后来看一下动态<code>SQL</code>，动态<code>SQL</code>可以避免手动拼接<code>SQL</code>语句，比如在某些条件成立的情况下添加<code>and xxx=xxxx</code>之类的操作。先来看一下最常用的<code>&lt;if&gt;</code>。</p>
<h2 id="71-if">7.1 <code>&lt;if&gt;</code></h2>
<p><code>&lt;if&gt;</code>类似<code>Java</code>中的<code>if</code>语句，最简单的例子如下：</p>
<pre><code class="language-xml">&lt;select id=&quot;selectByIf&quot; parameterType=&quot;Integer&quot; resultType=&quot;pers.init.entity.User&quot;&gt;
    select * from user where 1=1
    &lt;if test=&quot;name != null and name != ''&quot;&gt;
        and name like concat('%',#{name},'%')
    &lt;/if&gt;
    &lt;if test=&quot;age != null and age&gt;0&quot;&gt;
        and age = #{age}
    &lt;/if&gt;
&lt;/select&gt;
</code></pre>
<p>也就是说当<code>test</code>中的条件成立时，便添加<code>and xxx</code>语句。注意<code>test</code>这个属性是<code>&lt;if&gt;</code>必须的，不能省略。</p>
<p>（注这里用到了一个关键的<code>1=1</code>，仅作说明使用，实际开发请勿使用<code>1=1</code>进行拼接）</p>
<p><code>Dao</code>接口：</p>
<pre><code class="language-java">List&lt;User&gt; selectByIf(User user);
</code></pre>
<p>测试：</p>
<pre><code class="language-java">@Test
public void testIf()
{
    System.out.println(dao.selectByIf(User.builder().age((short) 33).name(&quot;111&quot;).build()));
}
</code></pre>
<h2 id="72-choosewhenotherwise">7.2 <code>&lt;choose&gt;</code>+<code>&lt;when&gt;</code>+<code>&lt;otherwise&gt;</code></h2>
<p>类似<code>Java</code>中的<code>switch</code>语句：</p>
<ul>
<li><code>&lt;choose&gt;</code>类似<code>switch</code></li>
<li><code>&lt;when&gt;</code>类似<code>case</code></li>
<li><code>&lt;otherwise&gt;</code>类似<code>default</code></li>
</ul>
<p>当其中一个<code>&lt;when&gt;</code>成立时，语句便结束，类似于自动加上了<code>&quot;break&quot;</code>。</p>
<p>示例：</p>
<pre><code class="language-xml">&lt;select id=&quot;selectByChoose&quot; parameterType=&quot;Integer&quot; resultType=&quot;pers.init.entity.User&quot;&gt;
    select * from user where 1=1
    &lt;choose&gt;
        &lt;when test=&quot;name != null and name != ''&quot;&gt;
            and name like concat('%',#{name},'%')
        &lt;/when&gt;
        &lt;when test=&quot;age != null and age&gt;0&quot;&gt;
            and age=#{age}
        &lt;/when&gt;
        &lt;otherwise&gt;
            and id != 3
        &lt;/otherwise&gt;
    &lt;/choose&gt;
&lt;/select&gt;
</code></pre>
<p><code>Dao</code>接口：</p>
<pre><code class="language-java">List&lt;User&gt; selectByChoose(User user);
</code></pre>
<p>测试：</p>
<pre><code class="language-java">@Test
public void testChoose()
{
    System.out.println(dao.selectByChoose(User.builder().age((short)33).build()));
}
</code></pre>
<h2 id="73-trim">7.3 <code>&lt;trim&gt;</code></h2>
<p>主要功能：</p>
<ul>
<li>加前缀</li>
<li>加后缀</li>
<li>替换某些首部/尾部内容</li>
</ul>
<p>这里是一个使用<code>&lt;trim&gt;</code>来实现<code>&lt;where&gt;</code>的例子：</p>
<pre><code class="language-xml">&lt;select id=&quot;selectByTrim&quot; parameterType=&quot;Integer&quot; resultType=&quot;pers.init.entity.User&quot;&gt;
    select * from user
    &lt;trim prefix=&quot;where&quot; prefixOverrides=&quot;and&quot;&gt;
        &lt;if test=&quot;name != null and name != ''&quot;&gt;
            and name like concat('%',#{name},'%')
        &lt;/if&gt;
    &lt;/trim&gt;
&lt;/select&gt;
</code></pre>
<p><code>Dao</code>接口：</p>
<pre><code class="language-java">List&lt;User&gt; selectByTrim(User user);
</code></pre>
<p>测试：</p>
<pre><code class="language-java">@Test
public void testTrim()
{
    System.out.println(dao.selectByTrim(User.builder().build()));
    System.out.println(dao.selectByTrim(User.builder().name(&quot;test2&quot;).build()));
}
</code></pre>
<h2 id="74-where">7.4 <code>&lt;where&gt;</code></h2>
<p><code>&lt;where&gt;</code>最常用的就是拼接查询条件，比如有多个查询条件，仅仅使用多个<code>&lt;if&gt;</code>的话会出现首个<code>&lt;if&gt;</code>有一个多余的<code>and</code>的问题，而使用<code>&lt;where&gt;</code>会进行智能处理，当然也对<code>or</code>适用，例子如下：</p>
<pre><code class="language-xml">&lt;select id=&quot;selectByWhere&quot; parameterType=&quot;Integer&quot; resultType=&quot;pers.init.entity.User&quot;&gt;
    select * from user
    &lt;where&gt;
        &lt;if test=&quot;name != null and name != ''&quot;&gt;
            and name like concat('%',#{name},'%')
        &lt;/if&gt;
        &lt;if test=&quot;age != null and age&gt;0&quot;&gt;
            and age=#{age}
        &lt;/if&gt;
    &lt;/where&gt;
&lt;/select&gt;
</code></pre>
<p><code>Dao</code>接口：</p>
<pre><code class="language-java">List&lt;User&gt; selectByWhere(User user);
</code></pre>
<p>测试：</p>
<pre><code class="language-java">@Test
public void testWhere()
{
    System.out.println(dao.selectByWhere(User.builder().build()));
    System.out.println(dao.selectByWhere(User.builder().name(&quot;111&quot;).build()));
    System.out.println(dao.selectByWhere(User.builder().age((short)-3).build()));
}
</code></pre>
<h2 id="75-set">7.5 <code>&lt;set&gt;</code></h2>
<p><code>&lt;set&gt;</code>一般配合<code>update</code>语句使用，比如：</p>
<pre><code class="language-xml">&lt;update id=&quot;updateBySet&quot; parameterType=&quot;pers.init.entity.User&quot;&gt;
    update user
    &lt;set&gt;
        &lt;if test=&quot;name != null and name != ''&quot;&gt;
            name = #{name},
        &lt;/if&gt;
        &lt;if test=&quot;age != null and age &gt; 0&quot;&gt;
            age = #{age}
        &lt;/if&gt;
    &lt;/set&gt;
    where id=#{id}
&lt;/update&gt;
</code></pre>
<p><code>Dao</code>接口：</p>
<pre><code class="language-java">int updateBySet(User user);
</code></pre>
<p>测试：</p>
<pre><code class="language-java">@Test
public void testSet()
{
    System.out.println(dao.updateBySet(User.builder().name(&quot;999999&quot;).age((short)39).id(1).build()));
    System.out.println(dao.selectByWhere(User.builder().build()));
}
</code></pre>
<h2 id="76-foreach">7.6 <code>&lt;foreach&gt;</code></h2>
<p><code>&lt;foreach&gt;</code>主要用于<code>in</code>中，可以认为是一个集合，典型的使用场景是<code>select xxx from xxx where xxx in &lt;foreach&gt;</code>。</p>
<p><code>&lt;foreach&gt;</code>的主要属性有：</p>
<ul>
<li><code>item</code>：每个元素的别名</li>
<li><code>index</code>：每个元素的下标</li>
<li><code>collection</code>：<code>&lt;foreach&gt;</code>的类型，有<code>list</code>、<code>array</code>、<code>map</code>三种，当传入单个参数且该参数类型为<code>List</code>时，则为<code>list</code>，传入单个参数且该参数类型为数组时，则为<code>array</code>，否则应将其封装成<code>Map</code>，并设置属性值为<code>map</code></li>
<li><code>open</code>：语句开始标志</li>
<li><code>close</code>：语句结束标志</li>
</ul>
<p>例子：</p>
<pre><code class="language-xml">&lt;select id=&quot;selectByForeach&quot; parameterType=&quot;Integer&quot; resultType=&quot;pers.init.entity.User&quot;&gt;
  select * from user where id in
    &lt;foreach collection=&quot;list&quot; item=&quot;item&quot; index=&quot;index&quot; open=&quot;(&quot; separator=&quot;,&quot; close=&quot;)&quot;&gt;#{item}&lt;/foreach&gt;
&lt;/select&gt;
</code></pre>
<p><code>Dao</code>接口：</p>
<pre><code class="language-java">List&lt;User&gt; selectByForeach(List&lt;Integer&gt; id);
</code></pre>
<p>测试：</p>
<pre><code class="language-java">@Test
public void testForeach()
{
    System.out.println(dao.selectByForeach(List.of(1,2,3)));
}
</code></pre>
<h2 id="77-bind">7.7 <code>&lt;bind&gt;</code></h2>
<p><code>&lt;bind&gt;</code>可用于对字符串进行拼接，对于字符串拼接，<code>MySQL</code>使用的是<code>concat</code>，而<code>Oracle</code>使用的是<code>||</code>，而<code>MyBatis</code>提供了<code>&lt;bind&gt;</code>可以屏蔽这种<code>DBMS</code>之间的差异，无需修改<code>xml</code>即可进行移植，例子如下：</p>
<pre><code class="language-xml">&lt;select id=&quot;selectByBind&quot; parameterType=&quot;pers.init.entity.User&quot; resultType=&quot;pers.init.entity.User&quot;&gt;
    &lt;bind name=&quot;new_name&quot; value=&quot;'%'+name+'%'&quot;/&gt;
    select * from user where name like #{new_name}
&lt;/select&gt;
</code></pre>
<p><code>Dao</code>接口：</p>
<pre><code class="language-java">List&lt;User&gt; selectByBind(User user);
</code></pre>
<p>测试：</p>
<pre><code class="language-java">@Test
public void testBind()
{
    System.out.println(dao.selectByBind(User.builder().name(&quot;test1&quot;).build()));
}
</code></pre>
<h1 id="8-源码">8 源码</h1>
<p>此处给出了实现所有例子后的代码，仅供参考，但不建议直接<code>clone</code>，建议从初始化工程开始逐步实现。</p>
<p><code>Java</code>版：</p>
<ul>
<li><a href="https://github.com/2293736867/CSBookNotes/tree/master/Spring/Chapter7/MyBatisSpringJavaInit">Github</a></li>
<li><a href="https://gitee.com/u6b7b5fc3/CSBookNotes/tree/master/Spring/Chapter7/MyBatisSpringJavaInit">码云</a></li>
<li><a href="https://codechina.csdn.net/qq_27525611/CSBookNotes/-/tree/master/Spring/Chapter7/MyBatisSpringJavaInit">CODE.CHINA</a></li>
</ul>
<p><code>Kotlin</code>版：</p>
<ul>
<li><a href="https://github.com/2293736867/CSBookNotes/tree/master/Spring/Chapter7/MyBatisSpringKotlinInit">Github</a></li>
<li><a href="https://gitee.com/u6b7b5fc3/CSBookNotes/tree/master/Spring/Chapter7/MyBatisSpringKotlinInit">码云</a></li>
<li><a href="https://codechina.csdn.net/qq_27525611/CSBookNotes/-/tree/master/Spring/Chapter7/MyBatisSpringKotlinInit">CODE.CHINA</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第137期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-137-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-137-qi/">
        </link>
        <updated>2020-10-29T16:19:19.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>我丑，是为了降低画质提高性能，为什么我的人生还那么卡呢？</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>随风潜入夜，润物细无声。<br>
——杜甫《春夜喜雨》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>不要轻易的口出狂言，那样只会透露你的软弱。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux下屏幕亮度的调节]]></title>
        <id>https://2293736867.github.io/post/linux-xia-ping-mu-liang-du-de-diao-jie/</id>
        <link href="https://2293736867.github.io/post/linux-xia-ping-mu-liang-du-de-diao-jie/">
        </link>
        <updated>2020-10-29T01:04:01.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-概述">1 概述</h1>
<p><code>Linux</code>下的屏幕调节可以通过图形界面或者命令行进行调节，图形界面的话主要就是在设置中进行调节，如果设置中没有相应的选项可以进行手动调节。</p>
<h1 id="2-手动调节">2 手动调节</h1>
<h2 id="21-手动屏幕调节">2.1 手动屏幕调节</h2>
<p>亮度由<code>ACPI</code>内核模块控制，模块接口在<code>/sys/class/backlight</code>，进入<code>/sys/class/backlight</code>后会有一个叫<code>intel_backlight</code>/<code>nv_backlight</code>的文件夹（这个和硬件有关），再次进入后会有如下文件：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20201029083707187.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>其中<code>brightness</code>就是当前屏幕的亮度，<code>max_brightness</code>是最大亮度，笔者的环境上显示如下：</p>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20201029083828643.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>需要调节亮度时，切换到<code>root</code>用户，直接向<code>brightness</code>写入数值即可调节亮度：</p>
<pre><code class="language-bash">echo 50 &gt; brightness
</code></pre>
<p>注意范围为<code>[0-max_brightness]</code>，非法范围不能执行成功：</p>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20201029084345709.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p><s>勇士可以试一下<code>echo 0 &gt; brightness</code>。</s></p>
<h2 id="22-外接显示屏调节">2.2 外接显示屏调节</h2>
<p>如果是外接显示屏的话，使用上面的方法是不能调节的，需要使用另一条命令：</p>
<pre><code class="language-bash">xrandr
</code></pre>
<p>输入之后会显示对应的外接接口，比如：</p>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20201029084610458.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>这里的<code>HDMI-1</code>就是外接接口，然后通过：</p>
<pre><code class="language-bash">xrandr --output HDMI-1 --brightness 0.5
</code></pre>
<p>进行亮度调节，亮度的范围是<code>0-1</code>。该命令无需<code>root</code>，可以直接执行。</p>
<h1 id="3-自动调节">3 自动调节</h1>
<p>另外笔者搜索了一下找到了两个能自动调节屏幕两亮度的软件：</p>
<ul>
<li><code>Calise</code></li>
<li><code>Redshift</code></li>
</ul>
<p>建议使用后者，因为<code>Calise</code>貌似很久没更新了，相比起<code>Redshiift</code>有很大距离：</p>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/20201029085409530.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="6"><img src="https://img-blog.csdnimg.cn/20201029085447124.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p><code>Redshift</code>安装很简单，笔者的机器上只需要：</p>
<pre><code class="language-bash">yay -S redshift
</code></pre>
<p><code>Redshift</code>提供了命令行以及图形界面，可以通过经纬度以及当前时间进行自动调节，打开后会在托盘有个图标，右键有个选项<code>info</code>，打开后可以看到当前的经纬度、色温以及处于白天或者黑夜状态，可以输入：</p>
<pre><code class="language-bash">redshift -v
</code></pre>
<p>查看更多详细信息。</p>
<p>想手动调节亮度可以通过<code>-b</code>调节，比如：</p>
<pre><code class="language-bash">redshift -b 1.0:0.7
</code></pre>
<p>冒号前后分别表示白天以及夜晚的亮度，注意该命令会同时调节外接显示屏的亮度。其他更多选项请输入</p>
<pre><code class="language-bash">redshift -h
</code></pre>
<p>查询。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享  第136期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-136-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-136-qi/">
        </link>
        <updated>2020-10-28T22:33:02.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>如果时间可以倒流，那一定是，你再做梦。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>小试樽前白雪歌，叶叶秋声动。<br>
——石孝友《卜算子》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>已经无法回到过去了。<br>
也不知道将来会是什么模样。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第135期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-136-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-136-qi/">
        </link>
        <updated>2020-10-27T23:05:34.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>当你觉得自己不行的时候，就走马路上走走，这样你就是一个行人了。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>闲云潭影日悠悠，物换星移几度秋。<br>
——王勃《滕王阁诗》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>弱小和无知从来就不是一个文明毁灭的原因，傲慢才是。</p>
</blockquote>
]]></content>
    </entry>
</feed>