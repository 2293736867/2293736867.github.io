<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://2293736867.github.io</id>
    <title>氷泠&apos;s blog</title>
    <updated>2021-06-10T13:16:41.125Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://2293736867.github.io"/>
    <link rel="self" href="https://2293736867.github.io/atom.xml"/>
    <subtitle>几百遍，重复了几百遍
重复的情绪重复的熬过想你的夜</subtitle>
    <logo>https://2293736867.github.io/images/avatar.png</logo>
    <icon>https://2293736867.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 氷泠&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[每日分享 第361期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-361-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-361-qi/">
        </link>
        <updated>2021-06-09T16:47:13.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>困难像弹簧，你弱它就强，你强它更强。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>荷花送香气，竹露滴清响。<br>
——孟浩然《夏日南亭怀辛大》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>其实从头到尾，被挫骨扬灰，灰飞烟灭的，只有温情一人。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1623257950495.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>首先尝试了一下去做<code>零钱兑换I</code>，做是做出来了，用的是记忆化搜索，然后再做这题，发现还是不会。</p>
<p><s>太菜了太菜了。</s></p>
<pre><code class="language-java">public class Solution {
    public int change(int amount, int[] coins) {
        int []dp = new int[amount+1];
        dp[0] = 1;
        for(int coin:coins){
            for (int i=coin;i&lt;=amount;++i){
                dp[i] += dp[i-coin];
            }
        }
        return dp[amount];
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1623330831531.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第360期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-360-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-360-qi/">
        </link>
        <updated>2021-06-08T16:44:18.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>生命中必然要放弃某些人，不是你不在乎，是他们不在乎。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>从今若许闲乘月，拄杖无时夜叩门。<br>
——陆游《游山西村》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>生气归生气，又不是不爱你......</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1623257439961.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>自己做了一个暴力的，过了35个样例，剩下的超时，题解表示是一个变种的背包，三维<code>dp</code>（其实还有更详细的解答，不小心覆盖了昨天的每日分享，所以这里就补充一个简单的。。。）</p>
<pre><code class="language-java">public class Solution {
    private static final int MOD = 1000000007;

    public int profitableSchemes(int maxGroup, int minProfit, int[] group, int[] profit) {
        int len = group.length;
        int[][][] dp = new int[len + 1][maxGroup + 1][minProfit + 1];
        dp[0][0][0] = 1;

        for (int i = 1; i &lt;= len; i++) {
            int currentGroup = group[i - 1];
            int currentProfit = profit[i - 1];
            for (int j = 0; j &lt;= maxGroup; j++) {
                for (int k = 0; k &lt;= minProfit; ++k) {
                    dp[i][j][k] = dp[i - 1][j][k];
                    if (j &gt;= currentGroup) {
                        dp[i][j][k] = (dp[i][j][k] + dp[i - 1][j - currentGroup][Math.max(0, k - currentProfit)]) % MOD;
                    }
                }
            }
        }

        int sum = 0;
        for (int j = 0; j &lt;= maxGroup; j++) {
            sum = (sum + dp[len][j][minProfit]) % MOD;
        }
        return sum;
    }

}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第359期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-359-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-359-qi/">
        </link>
        <updated>2021-06-08T13:04:26.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>研究证明常年抽烟喝酒的人，患老年痴呆的概率较低，因为早死的概率较高。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>西风千里，送我今夜岳阳楼。<br>
——张孝祥《水调歌头·过岳阳楼作》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>在不同的遭遇里我发现你的瞬间，有种不可言说的温柔直觉。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1623157666637.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>先上一个自己做出来的：</p>
<pre><code class="language-java">import java.util.*;

public class Solution {
    public int lastStoneWeightII(int[] stones) {
        int n = stones.length;
        if (n == 1) {
            return stones[0];
        }

        Set&lt;Integer&gt; set = new HashSet&lt;&gt;();
        int min = Integer.MAX_VALUE;
        for (int i = 0; i &lt; n; ++i) {
            int stone = stones[i];
            if (set.isEmpty()) {
                set.add(stone);
                set.add(-stone);
            } else {
                Set&lt;Integer&gt; temp = new HashSet&lt;&gt;();
                if (i == n - 1) {
                    for (Integer num : set) {
                        int v = num - stone;
                        if (v &gt;= 0 &amp;&amp; min &gt; v) {
                            min = v;
                        }
                        v = num + stone;
                        if (v &gt;= 0 &amp;&amp; min &gt; v) {
                            min = v;
                        }
                    }
                } else {
                    for (Integer num : set) {
                        temp.add(num + stone);
                        temp.add(num - stone);
                    }
                }
                set = temp;
            }
        }
        return min;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1623157833297.png" alt="" loading="lazy"></figure>
<p>一开始是利用一个<code>HashSet</code>与一个<code>Node</code>类去标识长度和总和的，后面直接使用集合优化，然后再想更进一步使用数组优化时间就变长了。</p>
<p>核心思想是把石头看做一系列的数，然后每个数前面可以添加<code>+</code>或<code>-</code>，问题就转换为计算所有的数的和的最小值。</p>
<p>看了题解发现其实可以转化为01背包问题，不是特别懂就不扯了，放上一个朴素的二维<code>dp</code>：</p>
<pre><code class="language-java">import java.util.*;

public class Solution {
    public int lastStoneWeightII(int[] stones) {
        int n = stones.length;
        int sum = 0;
        for(int num:stones){
            sum += num;
        }
        int t = sum &gt;&gt; 1;
        int [][] f = new int [n+1][t+1];
        for (int i = 1; i &lt;= n; i++) {
            int stone = stones[i-1];
            for (int j = 0; j &lt;= t; j++) {
                f[i][j] = f[i-1][j] ;
                if(j &gt;= stone){
                    f[i][j] = Math.max(f[i][j],f[i-1][j-stone] + stone);
                }
            }
        }
        return Math.abs(sum - f[n][t] - f[n][t]);
    }
}
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://2293736867.github.io/post-images/1623159140331.png" alt="" loading="lazy"></figure>
<p>然后又试了一下一维的（果然要比二维快）：</p>
<pre><code class="language-java">class Solution {
    public int lastStoneWeightII(int[] ss) {
        int n = ss.length;
        int sum = 0;
        for (int i : ss) sum += i;
        int t = sum / 2;
        int[] f = new int[t + 1];
        for (int i = 1; i &lt;= n; i++) {
            int x = ss[i - 1];
            for (int j = t; j &gt;= x; j--) {
                f[j] = Math.max(f[j], f[j - x] + x);
            }
        }
        return Math.abs(sum - f[t] - f[t]);
    }
}
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://2293736867.github.io/post-images/1623159222708.png" alt="" loading="lazy"></figure>
<p>但是看一下第一名的魔鬼0ms：</p>
<pre><code class="language-java">class Solution {
    public int lastStoneWeightII(int[] stones) {
        int sum=0;
        for(int st:stones)
            sum+=st;
        for(int i=(sum&gt;&gt;1);;i--){
            if(helper(stones,0,0,i))
                return sum-2*i;
        }
    }
    
    boolean helper(int[] nums,int idx,int sum,int target){
        if(sum==target)
            return true;
        if(sum&gt;target)
            return false;
        if(idx==nums.length)
            return false;
        return helper(nums,idx+1,sum+nums[idx],target)
            ||helper(nums,idx+1,sum,target);
    }
}
</code></pre>
<p>这。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第358期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-358-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-358-qi/">
        </link>
        <updated>2021-06-07T02:30:26.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>如果你有什么事，一定要告诉我，反正我也解决不了。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>白鸟朱荷引画桡，垂杨影里见红桥，欲寻往事已魂消。<br>
——王士祯《浣溪沙·红桥》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>这个社会一直在淘汰有学历的人，但是不会淘汰有学习力的人。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1623033554364.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>直接暴力回溯：</p>
<pre><code class="language-java">public class Solution {
    private int ct;
    public int findTargetSumWays(int[] nums, int target) {
        int len = nums.length;
        dfs(nums,0,len,target,0);
        return ct;
    }

    private void dfs(int []nums,int index,int len,int target,int sum){
        if(index &lt; len) {
            dfs(nums,index+1,len,target,sum+nums[index]);
            dfs(nums,index+1,len,target,sum-nums[index]);
        }else if(sum == target){
            ++ct;
        }
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1623033592467.png" alt="" loading="lazy"></figure>
<p><s>时间效率非常的好。</s></p>
<p>使用动态规划优化一下（来自官方题解，本来是没想到的）：</p>
<pre><code class="language-java">public class Solution {
    public int findTargetSumWays(int[] nums, int target) {
        int sum = 0;
        for (int num : nums) {
            sum += num;
        }
        int diff = sum - target;
        if (diff &lt; 0 || (diff &amp; 1) == 1) {
            return 0;
        }
        int n = nums.length;
        int neg = diff &gt;&gt; 1;
        int[][] dp = new int[n + 1][neg + 1];
        dp[0][0] = 1;

        for (int i = 1; i &lt;= n; i++) {
            int num = nums[i - 1];
            for (int j = 0; j &lt;= neg; j++) {
                dp[i][j] = dp[i - 1][j];
                if (j &gt;= num) {
                    dp[i][j] += dp[i - 1][j - num];
                }
            }
        }

        return dp[n][neg];
    }
}
</code></pre>
<p>关键是计算<code>neg</code>，<code>neg = (sum-target)/2</code>：</p>
<ul>
<li>因为<code>nums</code>中所有数都是非负整数</li>
<li>因此<code>neg</code>也是非负整数</li>
<li>所以<code>sum-target</code>必须能整除2，也就是非负偶数</li>
</ul>
<p>用<code>diff</code>存储了<code>sum-target</code>的值，如果是负数或者正奇数直接返回<code>0</code>，否则进行动态规划的计算。</p>
<p><code>dp[i][j]</code>表示前<code>i</code>个数中选取元素，使得这些元素之和为<code>j</code>的方案数目，最终答案就是<code>dp[n][neg]</code>。</p>
<p>对于每个数组中的元素<code>num</code>（<code>nums[i-1]</code>，下标从1开始），在<code>[0,neg]</code>中遍历<code>j</code>，转移方程如下：</p>
<ul>
<li><code>j &lt; num</code>：<code>dp[i][j] = dp[i-1][j]</code></li>
<li><code>j &gt;= num</code>：<code>dp[i][j] = dp[i-1][j] + dp[i-1][j-num]</code></li>
</ul>
<p>优化版（来自某位大佬），一维<code>dp</code>，反向计算，从<code>[nums[i],bagSize]</code>反向遍历<code>j</code>：</p>
<pre><code class="language-java">public class Solution {
    public int findTargetSumWays(int[] nums, int target) {
        int sum = 0;
        for (int num : nums) {
            sum += num;
        }
        if (sum &lt; target || ((sum + target) &amp; 1) == 1) {
            return 0;
        }
        int bagSize = (sum+target) &gt;&gt; 1;
        int n = nums.length;
        int[] dp = new int[bagSize+1];
        dp[0] = 1;

        for (int i = 0; i &lt; n; i++) {
            int num = nums[i];
            for (int j = bagSize; j &gt;= num; --j) {
                dp[j] += dp[j-num];
            }
        }

        return dp[bagSize];
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第357期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-357-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-357-qi/">
        </link>
        <updated>2021-06-06T14:21:38.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>纵然人生坎坷，但我从不会向命运屈服！我通常都是直接屈膝Orz。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>山头明月来，本在天高处。<br>
——辛弃疾《生查子·独游西岩》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>讨厌酒的味道，却爱上醉的感觉。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1622989628335.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>试过贪心，试过<code>dp</code>，也试过<code>dp</code>加上堆，就是死活不能<code>AC</code>：</p>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1622990009270.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="https://2293736867.github.io/post-images/1622990012069.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="4"><img src="https://2293736867.github.io/post-images/1622990015020.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="5"><img src="https://2293736867.github.io/post-images/1622990018276.png" alt="" loading="lazy"></figure>
<p>看了题解才知道是01背包~~（回去得好好看一下01背包）~~，下面给出一个题解优化过的版本：</p>
<pre><code class="language-java">public class Solution {
    public int findMaxForm(String[] strs, int m, int n) {
        int total0 = 0;
        int total1 = 0;
        int len = strs.length;
        int []num0 = new int[len];
        int []num1 = new int[len];
        for (int i = 0; i &lt; len; i++) {
            for (char c:strs[i].toCharArray()){
                if(c=='0'){
                    ++num0[i];
                }else{
                    ++num1[i];
                }
            }
            total0 += num0[i];
            total1 += num1[i];
        }

        if(total0 &lt; m &amp;&amp; total1 &lt; n){
            return len;
        }
        int [][] dp = new int[m+1][n+1];
        dp[0][0] = 1;
        for (int i = 0; i &lt; len; i++) {
            int n0 = num0[i];
            int n1 = num1[i];
            for (int j = m; j &gt;= n0; --j) {
                for (int k = n; k &gt;= n1; --k) {
                    int temp = dp[j-n0][k-n1];
                    if(temp != 0){
                        if(j == n0 &amp;&amp; k == n1){
                            dp[j][k] = Math.max(dp[j][k],temp);
                        }else{
                            dp[j][k] = Math.max(dp[j][k],temp+1);
                        }
                    }
                }
            }
        }
        int max = 0;
        for (int j = m; j &gt; 0; --j) {
            for (int k = n; k &gt; 0; --k) {
                if(dp[j][k] &gt; max) {
                    max = dp[j][k];
                }
            }
        }
        return max;
    }
}
</code></pre>
<figure data-type="image" tabindex="6"><img src="https://2293736867.github.io/post-images/1622992117028.png" alt="" loading="lazy"></figure>
<h1 id="赛氪的算法比赛">赛氪的算法比赛</h1>
<p>今天和队友做了赛氪的一个比赛，</p>
<p>真的菜的一比。</p>
<p>才4题。</p>
<p><s>完犊子。</s></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第356期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-356-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-356-qi/">
        </link>
        <updated>2021-06-05T02:00:22.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>当生活压得你喘不过气，一定要挺直腰杆，这样被压死时才不难看。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>万顷波光，岳阳楼上，一快披襟。<br>
——戴复古《柳梢青·岳阳楼》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>卑屈游戏谁是先该离场的呢？</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1622858538512.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>没什么好说的。。。</p>
<pre><code class="language-java">public class Solution {
    public ListNode removeElements(ListNode head, int val) {
        ListNode temp = head;
        ListNode newHead = null;
        ListNode pre = null;
        while (temp != null){
            while (temp != null &amp;&amp; temp.val == val){
                temp = temp.next;
            }
            if(temp != null) {
                if (newHead == null) {
                    newHead = temp;
                    pre = temp;
                } else {
                    pre.next = temp;
                    pre = pre.next;
                }
                temp = temp.next;
            }else{
                break;
            }
        }
        if(pre != null){
            pre.next = null;
        }
        return newHead;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1622858547671.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第355期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-355-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-355-qi/">
        </link>
        <updated>2021-06-04T04:20:18.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>你喜欢我哪一点啊？我喜欢你离我远一点。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>春不断、亭台成趣，翠阴蒙密。<br>
——吴文英《满江红·翠幕深庭》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>只要你想，你就是在天涯海角，我都会追去。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1622780512189.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>采用一个非常神奇的思路：</p>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1622780619089.gif" alt="" loading="lazy"></figure>
<p>只能说妙啊，采用一种“绕回去的处理”，知道两个链表相交。</p>
<pre><code class="language-java">public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        ListNode A = headA, B = headB;
        while (A != B) {
            A = A != null ? A.next : headB;
            B = B != null ? B.next : headA;
        }
        return A;
    }
}
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://2293736867.github.io/post-images/1622780533033.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第354期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-354-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-354-qi/">
        </link>
        <updated>2021-06-03T01:03:24.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>不说没人陪你勇闯天涯，你能找到人陪你喝雪花吗？</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>云日相晖映，空水共澄鲜。<br>
——谢灵运《登江中孤屿》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>多巴胺不等于爱情，爱情却一定有多巴胺！</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1622682361367.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>昨天做了那么多前缀和+哈希表做了个寂寞。</p>
<p>才过了493个：</p>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1622682403568.png" alt="" loading="lazy"></figure>
<p><s>做了个寂寞</s></p>
<p>下面是官方题解的优化版，使用数组模拟哈希表<code>HashMap</code>：</p>
<pre><code class="language-java">import java.util.Arrays;

public class Solution {
    public int findMaxLength(int[] nums) {
        int res = 0;
        int n = nums.length;
        int mapLen = (n&lt;&lt;1) + 1;
        int [] map = new int[mapLen];
        for (int i = 0; i &lt; mapLen; i++) {
            map[i] = -n;
        }
        int count = n;
        map[n] = -1;
        for (int i = 0; i &lt; n; i++) {
            count += (nums[i] == 1 ? 1 : -1);
            if(map[count] != -n){
                res = Math.max(res,i - map[count]);
            }else{
                map[count] = i;
            }
        }
        return res;
    }
}
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://2293736867.github.io/post-images/1622682649872.png" alt="" loading="lazy"></figure>
<p><s>心态崩了</s></p>
<p>本质上是维护一个计数器（前缀和），遇到1就加1，遇到0就减1，当哈希表中的计数器出现过时，计算下标之差并与<code>res</code>比较，如果没有出现过就直接放进哈希表中。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第353期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-353-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-353-qi/">
        </link>
        <updated>2021-06-02T02:02:59.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>别说你一无所有，你还有一身债。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>秀色掩今古，荷花羞玉颜。<br>
——李白《西施/咏苎蒙山》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>你说一声，我也默认，我们在这月光下十指生根。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1622599403795.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>毫无疑问前缀和，使用同余定理，将所有前缀和的余数和对应的下标放进哈希表中，遍历的时候判断有没有出现了相同的余数，出现了就直接返回<code>true</code>，否则判断余数是否出现过，没有出现过就放进哈希表：</p>
<pre><code class="language-java">import java.util.HashMap;
import java.util.Map;

public class Solution {
    public boolean checkSubarraySum(int[] nums, int k) {
        int n = nums.length;
        long [] sum = new long[n];
        Map&lt;Long,Integer&gt; map = new HashMap&lt;&gt;();
        map.put((sum[0] = nums[0]) % k,0);
        for (int i = 1; i &lt; n; i++) {
            sum[i] = nums[i] + sum[i-1];
            long mod = sum[i] % k;
            if(mod == 0 || (map.containsKey(mod) &amp;&amp; (i - map.get(mod) &gt; 1))){
                return true;
            }
            if(!map.containsKey(mod)){
                map.put(mod,i);
            }
        }

        return false;
    }
}
</code></pre>
<p>然并卵：</p>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1622599553489.png" alt="" loading="lazy"></figure>
<p>看了一下最快的答案：（哈希表？哈个der）</p>
<pre><code class="language-java">class Solution {
    public boolean checkSubarraySum(int[] nums, int k) {
        for (int i = 0; i &lt; nums.length - 1; i++) {
            if (nums[i] == 0 &amp;&amp; nums[i + 1] == 0) {
                return true;
            }
        }
        for (int i = 0; i &lt; nums.length; i++) {
            int sum = nums[i];
            for (int j = i + 1; j &lt; nums.length; j++) {
                sum += nums[j];
                if (sum % k == 0) {
                    return true;
                }
            }
            if (sum &lt; k) {
                break;
            }
        }
        return false;
    }
}
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://2293736867.github.io/post-images/1622599684876.png" alt="" loading="lazy"></figure>
<p>我当时就惊呆了，这不就是<code>O(n^2)</code>的优化版吗？怎么这么快？？？</p>
<p><s>好家伙</s></p>
<p>如果将</p>
<pre><code class="language-java">if (sum &lt; k) {
    break;
}
</code></pre>
<p>去掉，就是妥妥的<code>O(n^2)</code>，但是这个判断是真的强，也就是第<code>i</code>个到最后一个的和如果小于<code>k</code>，这样第<code>i+1</code>个到最后一个、第<code>i+2</code>个到最后一个也一定会小于<code>k</code>，换句话说就没有答案出现了，可以直接跳出循环返回<code>false</code>，只是没有想到居然会这么快。。。</p>
<p><s>好家伙</s></p>
<p><s>我爱暴力</s></p>
<p><s>爱个der</s></p>
<h1 id="一位大佬的杂文">一位大佬的杂文</h1>
<h2 id="地址">地址</h2>
<p><a href="https://www.lucienshui.cn/">https://www.lucienshui.cn/</a></p>
<h2 id="一些感想">一些感想</h2>
<p>腾讯实习然后阿里工作的大佬，在学校的时候担任过文体部部长，会吉他，大学谈到现在的女朋友（不知道有没有结婚，好像里面没写），也是个<code>ACM</code>大佬。</p>
<p>怎么说呢，这大佬好像从13年就开始写博客了（那时候他应该是初中？），只不过大概一年一篇的频率，估计没什么时间更。感想的话，羡慕肯定多少有一点的，不过从以前的文章看，多少感觉有点“孤独”的样子：</p>
<figure data-type="image" tabindex="4"><img src="https://2293736867.github.io/post-images/1622600260814.png" alt="" loading="lazy"></figure>
<p>果然是有故事的男人。</p>
<figure data-type="image" tabindex="5"><img src="https://2293736867.github.io/post-images/1622600318188.png" alt="" loading="lazy"></figure>
<p>不过就算是有故事，也不太希望主动提起，想回到以前那个无忧无虑的时代，起码笔者本人是这样想的。</p>
<p>有故事又如何？</p>
<p>没有，又如何？</p>
<p>反正，</p>
<p>又回不去了。</p>
<p>。</p>
<p>无论，是谈过恋爱，还是分手，</p>
<p>无论，是榜上有名，还是倒数第一，</p>
<p>无论，是经历过，还是没有经历过，</p>
<p>都回不去了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日一句  351-400期合集]]></title>
        <id>https://2293736867.github.io/post/mei-ri-yi-ju-351-400-qi-he-ji/</id>
        <link href="https://2293736867.github.io/post/mei-ri-yi-ju-351-400-qi-he-ji/">
        </link>
        <updated>2021-06-01T06:06:27.000Z</updated>
        <content type="html"><![CDATA[<h1 id="第351期">第351期</h1>
<blockquote>
<p>梦与现实是不同的，所以才能够为了把梦变为现实而努力。</p>
</blockquote>
<h1 id="第352期">第352期</h1>
<blockquote>
<p>多少岁月与轻狂交织的梦，被遗忘在大海的尽头，随时光匆匆而去。</p>
</blockquote>
<h1 id="第353期">第353期</h1>
<blockquote>
<p>你说一声，我也默认，我们在这月光下十指生根。</p>
</blockquote>
<h1 id="第354期">第354期</h1>
<blockquote></blockquote>
<h1 id="第355期">第355期</h1>
<blockquote></blockquote>
<h1 id="第356期">第356期</h1>
<blockquote></blockquote>
<h1 id="第357期">第357期</h1>
<blockquote></blockquote>
<h1 id="第358期">第358期</h1>
<blockquote></blockquote>
<h1 id="第359期">第359期</h1>
<blockquote></blockquote>
<h1 id="第360期">第360期</h1>
<blockquote></blockquote>
<h1 id="第361期">第361期</h1>
<blockquote></blockquote>
<h1 id="第362期">第362期</h1>
<blockquote></blockquote>
<h1 id="第363期">第363期</h1>
<blockquote></blockquote>
<h1 id="第364期">第364期</h1>
<blockquote></blockquote>
<h1 id="第365期">第365期</h1>
<blockquote></blockquote>
<h1 id="第366期">第366期</h1>
<blockquote></blockquote>
<h1 id="第367期">第367期</h1>
<blockquote></blockquote>
<h1 id="第368期">第368期</h1>
<blockquote></blockquote>
<h1 id="第369期">第369期</h1>
<blockquote></blockquote>
<h1 id="第370期">第370期</h1>
<blockquote></blockquote>
<h1 id="第371期">第371期</h1>
<blockquote></blockquote>
<h1 id="第372期">第372期</h1>
<blockquote></blockquote>
<h1 id="第373期">第373期</h1>
<blockquote></blockquote>
<h1 id="第374期">第374期</h1>
<blockquote></blockquote>
<h1 id="第375期">第375期</h1>
<blockquote></blockquote>
<h1 id="第376期">第376期</h1>
<blockquote></blockquote>
<h1 id="第377期">第377期</h1>
<blockquote></blockquote>
<h1 id="第378期">第378期</h1>
<blockquote></blockquote>
<h1 id="第379期">第379期</h1>
<blockquote></blockquote>
<h1 id="第380期">第380期</h1>
<blockquote></blockquote>
<h1 id="第381期">第381期</h1>
<blockquote></blockquote>
<h1 id="第382期">第382期</h1>
<blockquote></blockquote>
<h1 id="第383期">第383期</h1>
<blockquote></blockquote>
<h1 id="第384期">第384期</h1>
<blockquote></blockquote>
<h1 id="第385期">第385期</h1>
<blockquote></blockquote>
<h1 id="第386期">第386期</h1>
<blockquote></blockquote>
<h1 id="第387期">第387期</h1>
<blockquote></blockquote>
<h1 id="第388期">第388期</h1>
<blockquote></blockquote>
<h1 id="第389期">第389期</h1>
<blockquote></blockquote>
<h1 id="第390期">第390期</h1>
<blockquote></blockquote>
<h1 id="第391期">第391期</h1>
<blockquote></blockquote>
<h1 id="第392期">第392期</h1>
<blockquote></blockquote>
<h1 id="第393期">第393期</h1>
<blockquote></blockquote>
<h1 id="第394期">第394期</h1>
<blockquote></blockquote>
<h1 id="第395期">第395期</h1>
<blockquote></blockquote>
<h1 id="第396期">第396期</h1>
<blockquote></blockquote>
<h1 id="第397期">第397期</h1>
<blockquote></blockquote>
<h1 id="第398期">第398期</h1>
<blockquote></blockquote>
<h1 id="第399期">第399期</h1>
<blockquote></blockquote>
<h1 id="第400期">第400期</h1>
<blockquote></blockquote>
]]></content>
    </entry>
</feed>