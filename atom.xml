<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://2293736867.github.io</id>
    <title>氷泠&apos;s blog</title>
    <updated>2020-06-02T21:12:19.438Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://2293736867.github.io"/>
    <link rel="self" href="https://2293736867.github.io/atom.xml"/>
    <subtitle>我配不上你，
纵然很努力。</subtitle>
    <logo>https://2293736867.github.io/images/avatar.png</logo>
    <icon>https://2293736867.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 氷泠&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[ssh+scp基本使用]]></title>
        <id>https://2293736867.github.io/post/sshscp-ji-ben-shi-yong/</id>
        <link href="https://2293736867.github.io/post/sshscp-ji-ben-shi-yong/">
        </link>
        <updated>2020-06-02T21:10:51.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-ssh">1 ssh</h1>
<p>ssh一般用于连接服务器，可以使用密码认证与密钥认证的方式。</p>
<h2 id="11-密码认证">1.1 密码认证</h2>
<p>直接使用ssh即可：</p>
<pre><code class="language-bash">ssh username@xxx.xxx.xxx.xxx
</code></pre>
<p>username为用户名，后面为公网ip.<br>
若需要使用特定端口登录，加上p参数，比如使用12345端口：</p>
<pre><code class="language-bash">ssh -p 12345 username@xxx.xxx.xxx.xxx
</code></pre>
<h2 id="12-密钥认证">1.2 密钥认证</h2>
<p>密钥认证需要先生成密钥，然后把公钥使用scp上传到服务器，接着修改服务器的ssh配置文件。</p>
<h3 id="121-生成密钥">1.2.1 生成密钥</h3>
<pre><code class="language-bash">ssh-keygen -t rsa -b 4096 -C &quot;email&quot; -f /xxx/id_rsa
</code></pre>
<p>t表示加密算法，b指定位数，C表示注释，识别这个密钥，一般用邮箱即可。f表示生成的私钥文件位置（需要加上文件名），公钥会放在同一文件夹下。<br>
<img src="https://img-blog.csdnimg.cn/20200322150759345.png" alt="在这里插入图片描述" loading="lazy"></p>
<h3 id="122-上传公钥">1.2.2 上传公钥</h3>
<p>使用scp上传公钥到服务器，注意是公钥，ssh-keygen会生成一个公钥与私钥，pub结尾的文件就是公钥，默认叫id_rsa.pub .</p>
<pre><code class="language-bash">scp /xxxx/id_rsa.pub username@xxx.xxx.xxx.xxx:/root/
</code></pre>
<p>这里就直接放到服务器上的/root下。</p>
<h3 id="123-修改ssh配置文件">1.2.3 修改ssh配置文件</h3>
<p>先使用ssh密码认证的方式登录服务器，然后修改/etc/ssh/sshd_config：</p>
<pre><code class="language-bash">cd /etc/ssh
cp sshd_config sshd_config.bak
vim sshd_config
</code></pre>
<p>找到PubKeyAuthentication这一行，修改如下：<br>
<img src="https://img-blog.csdnimg.cn/2020032215152956.png" alt="在这里插入图片描述" loading="lazy"><br>
如果需要修改端口的，搜索Port，直接修改：<br>
<img src="https://img-blog.csdnimg.cn/20200322151709569.png" alt="在这里插入图片描述" loading="lazy"><br>
接着重启sshd服务：</p>
<pre><code class="language-bash">systemctl restart sshd
</code></pre>
<h3 id="124-测试连接">1.2.4 测试连接</h3>
<pre><code class="language-bash">ssh -i /xxx/id_rsa -p port username@xxx.xxx.xxx.xxx
</code></pre>
<p>其中i后为私钥的位置，p参数如果修改了默认的端口（22）则需要加上自定义端口。<br>
如果在windows上生成的私钥，可能会有如下问题：<br>
<img src="https://img-blog.csdnimg.cn/20200322151915913.png" alt="在这里插入图片描述" loading="lazy"><br>
这里提示私钥的权限是755，也就是其他用户可读，需要修改为600：</p>
<pre><code class="language-bash">chmod 600 /xxx/id_rsa
</code></pre>
<p>如果用的是wsl可能会修改失败，需要加上wsl的配置，修改/etc/wsl.conf（如果没有就新建）</p>
<pre><code class="language-bash">vim /etc/wsl.conf
</code></pre>
<p>输入：</p>
<pre><code class="language-bash">[automount]
enabled = true
options = &quot;metadata,umask=22,fmask=11&quot;
mountFsTab = false
</code></pre>
<p>退出wsl重启，然后再修改权限，应该就没问题了。</p>
<h1 id="2-scp">2 scp</h1>
<p>scp是secure copy的缩写，一般用于从服务器下载文件或上传文件到服务器，与ssh类似，可以使用密码认证或密钥认证或指定端口。</p>
<h2 id="21-上传文件夹到服务器">2.1 上传文件（夹）到服务器</h2>
<pre><code class="language-bash">scp localFile username@xxx.xxx.xxx.xxx:/xxxx
scp -r localDir username@xxx.xxx.xxx.xxx:/xxx
</code></pre>
<p>上面是密码认证的方式，密钥认证请加上i参数，指定私钥位置：</p>
<pre><code class="language-bash">scp localFile username@xxx.xxx.xxx.xxx:/xxx
scp -i /xxx/id_rsa -r localDir username@xxx.xxx.xxx.xxx:/xxxx
</code></pre>
<p>需要特定端口请加上P参数（注意是大写，不是ssh的小写p端口参数）</p>
<pre><code class="language-bash">scp -i /xxx/id_rsa -P xx localFile username@xxx.xxx.xxx.xxx
</code></pre>
<h2 id="22-从服务器下载文件夹">2.2 从服务器下载文件（夹）</h2>
<pre><code class="language-bash">scp username@xxx.xxx.xxx.xxx:/xxx   /localDir
scp -r username@xxx.xxx.xxx:/xxx  /localDir
</code></pre>
<p>第一个是下载文件，第二个是下载文件夹，需要加上r参数。<br>
同理，密钥认证加i参数，端口加P参数：</p>
<pre><code class="language-bash">scp -i /xxx/id_rsa -P xx username@xxx.xxx.xxx.xxx:/xxx  /localDir
scp -i /xxx/id_rsa -P xx -r username@xxx.xxx.xxx.xxx:/xxx  /localDir
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nginx/Apache + acme.sh 实现https访问]]></title>
        <id>https://2293736867.github.io/post/nginxapache-acmesh-shi-xian-https-fang-wen/</id>
        <link href="https://2293736867.github.io/post/nginxapache-acmesh-shi-xian-https-fang-wen/">
        </link>
        <updated>2020-06-02T21:10:03.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#1-%E6%A6%82%E8%BF%B0">1 概述</a></li>
<li><a href="#2-%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C">2 准备工作</a>
<ul>
<li><a href="#21-%E5%9F%9F%E5%90%8D%E4%B8%8E%E6%9C%8D%E5%8A%A1%E5%99%A8">2.1 域名与服务器</a></li>
<li><a href="#22-%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90">2.2 域名解析</a></li>
<li><a href="#22-%E7%AB%AF%E5%8F%A3">2.2 端口</a></li>
</ul>
</li>
<li><a href="#3-nginx">3 Nginx</a>
<ul>
<li><a href="#31-%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E7%9A%84nginx1179">3.1 编译安装的Nginx(1.17.9)</a>
<ul>
<li><a href="#311-%E5%AE%89%E8%A3%85nginx">3.1.1 安装Nginx</a></li>
<li><a href="#312-%E8%AF%81%E4%B9%A6%E5%A4%84%E7%90%86">3.1.2 证书处理</a></li>
<li><a href="#313-nginx%E9%85%8D%E7%BD%AE">3.1.3 Nginx配置</a></li>
<li><a href="#314-%E6%B5%8B%E8%AF%95">3.1.4 测试</a></li>
</ul>
</li>
<li><a href="#32-%E4%BB%8E%E4%BB%93%E5%BA%93%E5%AE%89%E8%A3%85nginx1161">3.2 从仓库安装Nginx(1.16.1)</a>
<ul>
<li><a href="#321-%E5%AE%89%E8%A3%85nginx">3.2.1 安装Nginx</a></li>
<li><a href="#322-%E8%AF%81%E4%B9%A6%E5%A4%84%E7%90%86">3.2.2 证书处理</a></li>
<li><a href="#323-nginx%E9%85%8D%E7%BD%AE">3.2.3 Nginx配置</a></li>
<li><a href="#324-%E6%B5%8B%E8%AF%95">3.2.4 测试</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#4-apache">4 Apache</a>
<ul>
<li><a href="#41-%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E7%9A%84apache2441">4.1 编译安装的Apache(2.4.41)</a>
<ul>
<li><a href="#411-%E5%AE%89%E8%A3%85apache">4.1.1 安装Apache</a></li>
<li><a href="#412-%E8%AF%81%E4%B9%A6%E5%A4%84%E7%90%86">4.1.2 证书处理</a></li>
<li><a href="#413-apache%E9%85%8D%E7%BD%AE">4.1.3 Apache配置</a></li>
<li><a href="#414-%E6%B5%8B%E8%AF%95">4.1.4 测试</a></li>
</ul>
</li>
<li><a href="#42-%E4%BB%8E%E4%BB%93%E5%BA%93%E5%AE%89%E8%A3%85%E7%9A%84apache246">4.2 从仓库安装的Apache(2.4.6)</a>
<ul>
<li><a href="#421-%E5%AE%89%E8%A3%85apache">4.2.1 安装Apache</a></li>
<li><a href="#422-%E8%AF%81%E4%B9%A6%E5%A4%84%E7%90%86">4.2.2 证书处理</a></li>
<li><a href="#423-apache%E9%85%8D%E7%BD%AE">4.2.3 Apache配置</a></li>
<li><a href="#424-%E6%B5%8B%E8%AF%95">4.2.4 测试</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#5-%E6%80%BB%E7%BB%93">5 总结</a></li>
</ul>
</p>
<h1 id="1-概述">1 概述</h1>
<p>acme.sh实现了acme协议，可以从Let‘s Encrypt生成免费的ssl证书用于实现https，本文介绍了常见的两种服务器Apache与Nginx上利用acme.sh配置https服务。<br>
约定:</p>
<pre><code class="language-bash">APACHE_INSTALL_DIR  ---   Apache安装目录
NGINX_INSTALL_DIR   ---   Nginx安装目录
www.test.com        ---   测试域名,请按需要换成自己的域名
</code></pre>
<h1 id="2-准备工作">2 准备工作</h1>
<ul>
<li>一个域名</li>
<li>一台云服务器</li>
</ul>
<h2 id="21-域名与服务器">2.1 域名与服务器</h2>
<p>域名与服务器直接买就好了，笔者的都是在阿里云上买的。</p>
<h2 id="22-域名解析">2.2 域名解析</h2>
<p>需要确保域名可以解析到对应的ip上面，一般的域名购买商会提供解析服务，按图形界面操作即可，以阿里云为例，选择域名进行解析：<br>
<img src="https://img-blog.csdnimg.cn/20200317005748607.png" alt="在这里插入图片描述" loading="lazy"><br>
主机记录填www，记录值填服务器公网ip.<br>
<img src="https://img-blog.csdnimg.cn/20200317005817155.png" alt="在这里插入图片描述" loading="lazy"><br>
间隔十分钟左右可以ping一下自己的域名，如果显示服务器ip则解析成功。</p>
<h2 id="22-端口">2.2 端口</h2>
<p>服务器要开启80与443端口，80用于HTTP测试，443用于HTTPS访问。以阿里云为例:<br>
<img src="https://img-blog.csdnimg.cn/20200317135937646.png" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200317140139818.png" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200317140205495.png" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200317140231194.png" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200317140246326.png" alt="在这里插入图片描述" loading="lazy"></p>
<h1 id="3-nginx">3 Nginx</h1>
<p>Nginx有两种安装方式，一种是仓库形式安装，另一种是从源码编译安装。</p>
<h2 id="31-编译安装的nginx1179">3.1 编译安装的Nginx(1.17.9)</h2>
<h3 id="311-安装nginx">3.1.1 安装Nginx</h3>
<p>先去<a href="http://nginx.org/en/download.html">下载源码</a>，上传到服务器，解压：</p>
<pre><code class="language-bash">tar -zxvf nginx-1.17.9.tar.gz
cd nginx-1.17.9
</code></pre>
<p>可以先使用</p>
<pre><code class="language-bash">./configure --help
</code></pre>
<p>查看选项帮助，这里要注意一下pcre与openssl，是源码目录，不是安装目录，安装之后删了源码的，重新来<a href="https://sourceforge.net/projects/pcre/">这里下载pcre</a>与<a href="https://www.openssl.org/source/">这里下载openssl</a>，注意一定需要http_ssl_module这个模块，不要漏了。</p>
<pre><code class="language-bash">./configure --prefix=/xxxxx --with-pcre=/xxxxx --with-openssl=/xxxx --with-http_ssl_module
make
sudo make install
</code></pre>
<p>好了之后进入安装目录下的sbin，启动服务。</p>
<pre><code class="language-bash">cd NGINX_INSTALL_DIR/sin
./nginx
</code></pre>
<p>然后可以在浏览器输入服务器公网ip测试一下：<br>
<img src="https://img-blog.csdnimg.cn/20200317004956936.png" alt="在这里插入图片描述" loading="lazy"></p>
<h3 id="312-证书处理">3.1.2 证书处理</h3>
<p>首先安装acme.sh</p>
<pre><code class="language-bash">curl https://get.acme.sh | sh
. ~/.bashrc
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200317005319462.png" alt="在这里插入图片描述" loading="lazy"><br>
生成证书</p>
<pre><code class="language-bash">acme.sh --issue -d www.test.com --webroot NGINX_INSTALL_DIR/html
</code></pre>
<p>webroot的话就直接使用Nginx的默认文档根目录。好了之后会看到这样的提示：<br>
<img src="https://img-blog.csdnimg.cn/20200317010637741.png" alt="在这里插入图片描述" loading="lazy"><br>
接着安装证书：</p>
<pre><code class="language-bash">acme.sh --installcert \
-d www.test.com \
--keypath /xxxx/xxx.key \
--fullchainpath /xxx/xxx.pem
</code></pre>
<p>路径与名字随便，后缀不能变。<br>
<img src="https://img-blog.csdnimg.cn/2020031701091843.png" alt="在这里插入图片描述" loading="lazy"></p>
<h3 id="313-nginx配置">3.1.3 Nginx配置</h3>
<p>修改Nginx配置文件：</p>
<pre><code class="language-bash">cd NGINX_INSTALL_DIR/conf
cp nginx.conf nginx.conf.bak
vim nginx.conf
</code></pre>
<p>找到HTTPS server这一行，这里是96行，把从server开始到最后一个花括号的代码全部去掉注释。<br>
<img src="https://img-blog.csdnimg.cn/20200317011257305.png" alt="在这里插入图片描述" loading="lazy"><br>
然后修改这三行，server_name填域名，ssl_certificate填刚才的pem文件路径，ssl_certificate_key填刚才的key文件路径。路径建议绝对路径，可以不加双引号。<br>
<img src="https://img-blog.csdnimg.cn/20200317011502176.png" alt="在这里插入图片描述" loading="lazy"><br>
记得记得要加上一行ssl协议：<br>
<img src="https://img-blog.csdnimg.cn/20200317014031227.png" alt="在这里插入图片描述" loading="lazy"></p>
<h3 id="314-测试">3.1.4 测试</h3>
<p>可以先使用-t测试语法错误：</p>
<pre><code class="language-bash">cd NGINX_INSTALL_DIR/sbin
./nginx -t
</code></pre>
<p>ok的话，重启服务并输入域名测试：</p>
<pre><code class="language-bash">cd NGINX_INSTALL_DIR/sbin
./nginx -s stop
./nginx
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200317014120675.png" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/2020031701405932.png" alt="在这里插入图片描述" loading="lazy"><br>
成功！</p>
<h2 id="32-从仓库安装nginx1161">3.2 从仓库安装Nginx(1.16.1)</h2>
<h3 id="321-安装nginx">3.2.1 安装Nginx</h3>
<p>从仓库安装就简单多了，一行就可以了，系统Centos，其他自行搜索：</p>
<pre><code class="language-bash">yum install nginx
</code></pre>
<p>可以先测试一下，直接用</p>
<pre><code class="language-bash">nginx
</code></pre>
<p>开启服务，然后浏览器输入公网ip：<br>
<img src="https://img-blog.csdnimg.cn/20200317014949623.png" alt="在这里插入图片描述" loading="lazy"><br>
（笔者有点怀疑是不是装了个假的Nginx，两个的主页居然不一样。。。。）</p>
<h3 id="322-证书处理">3.2.2 证书处理</h3>
<p>没安装acme.sh的先安装：</p>
<pre><code class="language-bash">curl https://get.acme.sh | sh
. ~/.bashrc
</code></pre>
<p>申请证书：</p>
<pre><code class="language-bash">acme.sh --issue -d www.test.com --webroot /usr/share/nginx/html
</code></pre>
<p>安装证书：</p>
<pre><code class="language-bash">acme.sh --installcert \
-d www.test.com \
--keypath /xxxx/xxx.key \
--fullchainpath /xxx/xxx.pem
</code></pre>
<h3 id="323-nginx配置">3.2.3 Nginx配置</h3>
<p>同样先备份：</p>
<pre><code class="language-bash">cd /etc/nginx
cp nginx.conf nginx.conf.bak
vim nginx.conf
</code></pre>
<p>这里的配置比编译安装的又多了不少，一样从server（61行）开始去掉注释：<br>
<img src="https://img-blog.csdnimg.cn/20200317015539790.png" alt="在这里插入图片描述" loading="lazy"><br>
然后修改三行：<br>
<img src="https://img-blog.csdnimg.cn/20200317015723131.png" alt="在这里插入图片描述" loading="lazy"><br>
server_name填域名，ssl_certificate填pem文件，ssl_certificate_key填key文件。<br>
最后增加一行ssl协议：<br>
<img src="https://img-blog.csdnimg.cn/20200317025303324.png" alt="在这里插入图片描述" loading="lazy"></p>
<h3 id="324-测试">3.2.4 测试</h3>
<p>可以先用-t测试语法错误：</p>
<pre><code class="language-bash">nginx -t
</code></pre>
<p>ok的话重启服务：</p>
<pre><code class="language-bash">nginx -s stop
nginx
</code></pre>
<p>浏览器输入域名访问：<br>
<img src="https://img-blog.csdnimg.cn/20200317025240627.png" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200317025401531.png" alt="在这里插入图片描述" loading="lazy"></p>
<h1 id="4-apache">4 Apache</h1>
<p>Apache也有两种安装方式，从源码编译安装与从仓库安装。</p>
<h2 id="41-编译安装的apache2441">4.1 编译安装的Apache(2.4.41)</h2>
<h3 id="411-安装apache">4.1.1 安装Apache</h3>
<p>编译安装Apache比较麻烦，需要安装pcre，apr，apr-util，生成Makefile时需要指定以下几个选项：</p>
<pre><code class="language-bash">--with-apr \
--with-apr-util \
--with-pcre \
--enable-ssl \
--with-ssl 
</code></pre>
<p>具体可以看<a href="https://blog.csdn.net/qq_27525611/article/details/104716600">这里</a>。<br>
安装好了之后需要先确定ssl模块是否存在：</p>
<pre><code class="language-bash">cd APACHE_INSTALL_DIR/modules
ls | grep ssl
</code></pre>
<p>如果没有显示mod_ssl.so，则需要重新安装，确定生成Makefile时没有漏掉</p>
<pre><code class="language-bash">--enable-ssl
与
--with-ssl
</code></pre>
<p>如果有ssl模块，直接修改配置文件测试一下。</p>
<pre><code class="language-bash">cd APACHE_INSTALL_DIR/conf
vim httpd.conf
</code></pre>
<p>修改ServerName为</p>
<pre><code class="language-bash">localhost:80
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200317112929230.png" alt="在这里插入图片描述" loading="lazy"><br>
启动服务输入localhost测试：</p>
<pre><code class="language-bash">cd APACHE_INSTALL_DIR/bin
./apachectl
</code></pre>
<p>页面只有一行It works!：<br>
<img src="https://img-blog.csdnimg.cn/20200317113052882.png" alt="在这里插入图片描述" loading="lazy"><br>
（话说这和仓库安装的Apache首页差距这么大。。。）</p>
<h3 id="412-证书处理">4.1.2 证书处理</h3>
<p>没安装acme.sh的先安装：</p>
<pre><code class="language-bash">curl https://get.acme.sh | sh
. ~/.bashrc
</code></pre>
<p>申请证书：</p>
<pre><code class="language-bash">acme.sh --issue -d www.test.com --webroot APACHE_INSTALL_DIR/htdocs
</code></pre>
<p>这里webroot为Apache默认的文档根目录.<br>
安装证书：</p>
<pre><code class="language-bash">acme.sh --installcert -d www.test.com \
--key-file /xxxx/xxx.key \
--cert-file /xxxx/xxxx.crt \
--fullchain-file /xxx/xxxfullchain.crt 
</code></pre>
<p>路径与名字随便，后缀名不能变。</p>
<h3 id="413-apache配置">4.1.3 Apache配置</h3>
<p>首先修改conf/httpd.conf：</p>
<pre><code class="language-bash">cd APACHE_INSTALL_DIR/conf
cp httpd.conf httpd.conf.bak
vim httpd.conf
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200317133511616.png" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200317132738142.png" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200317132745841.png" alt="在这里插入图片描述" loading="lazy"><br>
找到这三行，去掉注释。<br>
然后修改httpd-ssl.conf:</p>
<pre><code class="language-bash">cd extra
cp http-ssl.conf http-ssl.conf.bak
vim httpd-ssl.conf
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200317133012729.png" alt="在这里插入图片描述" loading="lazy"><br>
DocumentRoot可以默认，ServerName改成</p>
<pre><code class="language-bash">www.test.com:443
</code></pre>
<p>然后修改这三行，把证书的文件相应填入。<br>
<img src="https://img-blog.csdnimg.cn/20200317133145247.png" alt="在这里插入图片描述" loading="lazy"></p>
<h3 id="414-测试">4.1.4 测试</h3>
<p>语法检查：</p>
<pre><code class="language-bash">cd APACHE_INSTALL_DIR/bin
./apachectl -t
</code></pre>
<p>没有错误之后重启服务：</p>
<pre><code class="language-bash">./apachectl stop
./apachectl
</code></pre>
<p>浏览器输入域名访问：<br>
<img src="https://img-blog.csdnimg.cn/20200317133911280.png" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200317133855215.png" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="42-从仓库安装的apache246">4.2 从仓库安装的Apache(2.4.6)</h2>
<h3 id="421-安装apache">4.2.1 安装Apache</h3>
<pre><code class="language-bash">yum install httpd
</code></pre>
<p>修改配置文件并进行测试：</p>
<pre><code class="language-bash">cd /etc/httpd/conf
cp httpd.conf httpd.conf.bak
vim httpd.conf
</code></pre>
<p>找到ServerName改成</p>
<pre><code class="language-bash">localhost:80
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200317030501258.png" alt="在这里插入图片描述" loading="lazy"><br>
开启服务后输入localhost:80.</p>
<pre><code class="language-bash">systemctl start httpd
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200317030857326.png" alt="在这里插入图片描述" loading="lazy"><br>
另外要确保ssl模块存在：</p>
<pre><code class="language-bash">cd /etc/httpd/modules
ls | grep ssl
</code></pre>
<p>如果没有输出的话，证明没有ssl模块，需要安装：</p>
<pre><code class="language-bash">yum install mod_ssl
</code></pre>
<p>再一次grep：</p>
<pre><code class="language-bash">ls | grep ssl
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200317031220343.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h3 id="422-证书处理">4.2.2 证书处理</h3>
<p>没安装acme.sh的先安装：</p>
<pre><code class="language-bash">curl https://get.acme.sh | sh
. ~/.bashrc
</code></pre>
<p>申请证书：</p>
<pre><code class="language-bash">acme.sh --issue -d www.test.com --webroot /var/www/html
</code></pre>
<p>其中/var/www/html为Apache默认文档根目录。<br>
安装证书：</p>
<pre><code class="language-bash">acme.sh --installcert -d www.test.com \
--key-file /xxxx/xxx.key \
--cert-file /xxxx/xxxx.crt \
--fullchain-file /xxx/xxxfullchain.crt 
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200317032615967.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h3 id="423-apache配置">4.2.3 Apache配置</h3>
<p>修改ssl.conf:</p>
<pre><code class="language-bash">cd /etc/httpd/conf.d
cp ssl.conf ssl.conf.bak
vim ssl.conf
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200317034408977.png" alt="在这里插入图片描述" loading="lazy"><br>
修改ServerName与DocumentRoot，ServerName填域名，DocumentRoot直接去掉注释。接着修改以下三行，根据刚才生成的三个文件对应填入即可。<br>
<img src="https://img-blog.csdnimg.cn/2020031703450263.png" alt="在这里插入图片描述" loading="lazy"></p>
<h3 id="424-测试">4.2.4 测试</h3>
<pre><code class="language-bash">apachectl -t
</code></pre>
<p>没有语法错误就重启服务：</p>
<pre><code class="language-bash">systemctl stop httpd
systemctl start httpd
</code></pre>
<p>浏览器输入访问：<br>
<img src="https://img-blog.csdnimg.cn/20200317034119940.png" alt="在这里插入图片描述" loading="lazy"></p>
<h1 id="5-总结">5 总结</h1>
<p>其实这里采用了比较麻烦的方式手动安装证书，acme.sh其实还有更简单的不需要webroot的命令：</p>
<pre><code class="language-bash">acme.sh --issue -d www.test.com --apache
acme.sh --issue -d www.test.com --nginx
</code></pre>
<p>另外还可以通过手动dns的方式：</p>
<pre><code class="language-bash">acme.sh --issue -d www.test.com --dns dns_xxx
</code></pre>
<p>这种方式可以利用域名解析商提供的api自动添加记录完成认证，可以参考<a href="https://calfsoft.com/2018/12/06/Acme-Aliyun/#%E5%AE%89%E8%A3%85-acme-sh">这里</a>。<br>
另外文章没有说到证书过期更新的问题，可以看官方中文说明，<a href="https://github.com/acmesh-official/acme.sh/wiki/%E8%AF%B4%E6%98%8E">这里</a>。<br>
除此之外还可以利用openssl使安全性的评分更高，<a href="https://www.ssllabs.com/ssltest/">测试网站这里</a>，<a href="https://www.jianshu.com/p/b6b172f69c14">修改配置这里</a>。<br>
还有最后一个,现有云服务器厂商提供了免费的证书购买，如阿里云，可以直接购买免费证书然后利用文档安装到服务器上。</p>
<p>祝你们早日有一个属于自己的https的网站。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Github Pages+Gridea搭建个人博客]]></title>
        <id>https://2293736867.github.io/post/github-pagesgridea-da-jian-ge-ren-bo-ke/</id>
        <link href="https://2293736867.github.io/post/github-pagesgridea-da-jian-ge-ren-bo-ke/">
        </link>
        <updated>2020-06-02T21:09:32.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-概述">1 概述</h1>
<p>Github Pages可以用来托管个人网站，静态的，便于用来实现博客，可以在一个仓库的settings中开启：<br>
<img src="https://img-blog.csdnimg.cn/2020031520214830.png" alt="在这里插入图片描述" loading="lazy"><br>
Gridea是一个静态博客写作客户端，所有文件都在本地，没有数据库，实现简单，支持Markdown。<br>
<img src="https://img-blog.csdnimg.cn/20200315202345239.png" alt="在这里插入图片描述" loading="lazy"><br>
好了不多说开始动手。</p>
<h1 id="2-准备工作">2 准备工作</h1>
<ul>
<li>一个Gthub账号</li>
<li>一个Github Pages的仓库</li>
<li>一个Gridea客户端（支持Mac，Windows，Linux）</li>
<li>（可选）一个域名</li>
</ul>
<h1 id="3-github-pages">3 Github Pages</h1>
<p><img src="https://img-blog.csdnimg.cn/20200315203349869.png" alt="在这里插入图片描述" loading="lazy"><br>
仓库名是:</p>
<pre><code>用户名.github.io
</code></pre>
<p>需要公开仓库与一个REDAME文件,然后创建.<br>
<img src="https://img-blog.csdnimg.cn/20200315203610218.png" alt="在这里插入图片描述" loading="lazy"><br>
进入设置开启Github Pages:<br>
<img src="https://img-blog.csdnimg.cn/20200315203501765.png" alt="在这里插入图片描述" loading="lazy"><br>
下拉找到Github Pages:<br>
<img src="https://img-blog.csdnimg.cn/20200315203715972.png" alt="在这里插入图片描述" loading="lazy"><br>
默认使用master分支,可以选择主题.<br>
<img src="https://img-blog.csdnimg.cn/20200315203800731.png" alt="在这里插入图片描述" loading="lazy"><br>
然后在浏览器输入刚才创建的仓库名就可以访问了.<br>
<img src="https://img-blog.csdnimg.cn/20200315203855310.png" alt="在这里插入图片描述" loading="lazy"></p>
<h1 id="4-gridea">4 Gridea</h1>
<p>理论上来说这样就完成了,但是如果想更好看和更方便管理一些,就要用Gridea.<br>
先去下载,<a href="https://gridea.dev/">官网这里</a>.<br>
下载之后直接打开,进入设置:<br>
<img src="https://img-blog.csdnimg.cn/2020031520443512.png" alt="在这里插入图片描述" loading="lazy"><br>
域名与仓库名一样,分支填master,email自己填,这里说一下Token.打开设置中的开发者设置:<br>
<img src="https://img-blog.csdnimg.cn/20200315204535121.png" alt="在这里插入图片描述" loading="lazy"><br>
新建一个Token:<br>
<img src="https://img-blog.csdnimg.cn/20200315204615866.png" alt="在这里插入图片描述" loading="lazy"><br>
只需要勾选仓库相关的权限,名字可以随便.<br>
<img src="https://img-blog.csdnimg.cn/20200315204643285.png" alt="在这里插入图片描述" loading="lazy"><br>
复制填入.<br>
<img src="https://img-blog.csdnimg.cn/2020031520472566.png" alt="在这里插入图片描述" loading="lazy"><br>
然后可以测试一下连接:<br>
<img src="https://img-blog.csdnimg.cn/20200315205359751.png" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200315205343447.png" alt="在这里插入图片描述" loading="lazy"><br>
若失败请返回前几步看看哪里出错.<br>
设置好了之后可以设置主题等,自定义美化.<br>
<img src="https://img-blog.csdnimg.cn/20200315205847245.png" alt="在这里插入图片描述" loading="lazy"><br>
设置好了之后可以先预览再同步.<br>
<img src="https://img-blog.csdnimg.cn/20200315210305371.png" alt="在这里插入图片描述" loading="lazy"><br>
同步完成后就可以在浏览器输入</p>
<pre><code class="language-bash">用户名.github.io
</code></pre>
<p>进行访问了.</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200315234157577.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="5-绑定域名可选">5 绑定域名(可选)</h1>
<p>如果购买了域名的话,可以绑定到自己的域名上面,笔者的域名是阿里云上购买的,因此这里以阿里云的为例,进入域名的解析页面,添加两个记录:<br>
<img src="https://img-blog.csdnimg.cn/20200316000331100.png" alt="在这里插入图片描述" loading="lazy"><br>
第一个记录类型是CNAME,主机记录是www,记录值为仓库的名字.<br>
第二个记录类型是A,主机记录是@,记录值为ping仓库名字得到的ip.<br>
若成功的话会这样显示:<br>
<img src="https://img-blog.csdnimg.cn/20200316000551553.png" alt="在这里插入图片描述" loading="lazy"><br>
添加之后在Gridea的客户端中设置的CNAME添加域名:<br>
<img src="https://img-blog.csdnimg.cn/20200316000202462.png" alt="在这里插入图片描述" loading="lazy"><br>
使用左下角的按钮测试一下,测试通过之后就可以通过域名访问了.<br>
如果想通过https访问,直接在Github Pages中设置Enforce HTTPS即可(解析域名之后需要一定时间才可以勾选).<br>
<img src="https://img-blog.csdnimg.cn/20200316143452174.png" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200316143701802.png" alt="在这里插入图片描述" loading="lazy"><br>
之后就可以通过https访问了.<br>
<img src="https://img-blog.csdnimg.cn/20200316145611495.png" alt="在这里插入图片描述" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[编译安装Apache遇到的缺少expat.h与undefined reference to `XML_GetErrorCode'错误]]></title>
        <id>https://2293736867.github.io/post/bian-yi-an-zhuang-apache-yu-dao-de-que-shao-expath-yu-undefined-reference-to-xml_geterrorcodecuo-wu/</id>
        <link href="https://2293736867.github.io/post/bian-yi-an-zhuang-apache-yu-dao-de-que-shao-expath-yu-undefined-reference-to-xml_geterrorcodecuo-wu/">
        </link>
        <updated>2020-06-02T21:09:07.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-缺少expath">1 缺少expat.h</h1>
<p>编译安装Apache需要apr-util，而在编译安装apr-util时提示说缺少expat.h，此时直接安装expat库即可（centos）：</p>
<pre><code class="language-bash">yum install expat-devel
</code></pre>
<h1 id="2-undefined-reference-to-xml_geterrorcode">2 undefined reference to `XML_GetErrorCode'</h1>
<p>首先安装libxml2-devel包：</p>
<pre><code class="language-bash">yum install libxml2-devel
</code></pre>
<p>接着删除apr-util安装目录并重新编译安装：</p>
<pre><code class="language-bash">sudo rm -rf /usr/local/apr-util
cd apr-util
make clean
./configure --prefix=/usr/local/apr-util --with-apr=/usr/local/apr
make
make install
</code></pre>
<p>目录的话根据需要修改，最后重新编译安装apache：</p>
<pre><code class="language-bash">cd httpd-xxxxx
make clean
./configure \
--prefix=/usr/local/apache \
--with-apr=/usr/local/apr \
--with-apr-util=/usr/local/apr-util \
--with-pcre=/usr/local/pcre
</code></pre>
<p>同样目录按需修改。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Android Activity间跳转与传递数据]]></title>
        <id>https://2293736867.github.io/post/android-activity-jian-tiao-zhuan-yu-chuan-di-shu-ju/</id>
        <link href="https://2293736867.github.io/post/android-activity-jian-tiao-zhuan-yu-chuan-di-shu-ju/">
        </link>
        <updated>2020-06-02T21:08:41.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#1-%E6%A6%82%E8%BF%B0">1 概述</a></li>
<li><a href="#2-activity%E9%97%B4%E8%B7%B3%E8%BD%AC">2 Activity间跳转</a>
<ul>
<li><a href="#21-%E7%9B%B4%E6%8E%A5%E8%B7%B3%E8%BD%AC">2.1 直接跳转</a></li>
<li><a href="#22-%E5%9B%9E%E8%B0%83">2.2 回调</a></li>
</ul>
</li>
<li><a href="#3-activity%E9%97%B4%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE">3 Activity间传递数据</a>
<ul>
<li><a href="#31-%E4%BC%A0%E9%80%92%E6%99%AE%E9%80%9A%E6%95%B0%E6%8D%AE">3.1 传递普通数据</a></li>
<li><a href="#32-%E4%BC%A0%E9%80%92%E4%B8%80%E7%BB%84%E6%95%B0%E6%8D%AE">3.2 传递一组数据</a></li>
<li><a href="#33-%E4%BC%A0%E9%80%92%E5%AF%B9%E8%B1%A1">3.3 传递对象</a></li>
</ul>
</li>
<li><a href="#4-%E6%BA%90%E7%A0%81">4 源码</a></li>
</ul>
</p>
<h1 id="1-概述">1 概述</h1>
<p>Activity之间的跳转主要使用</p>
<pre><code class="language-java">startActivity(Intent intent);
startActivityForResult(Intent intent,int requestCode);
</code></pre>
<p>这两个函数,传递数据的话利用Intent进行传递,负责数据需要配合Bundle使用.这篇文章讲述了如何利用这两个函数在Activity之间的跳转以及传递数据.</p>
<h1 id="2-activity间跳转">2 Activity间跳转</h1>
<h2 id="21-直接跳转">2.1 直接跳转</h2>
<p>这里有两个Activity:FirstActivity与SecondActivity,从FirstActivity中跳转到SecondActivity中只需要一个startActivity()即可:</p>
<pre><code class="language-java">startActivity(new Intent(this,SecondActivity.class));
</code></pre>
<p>一般需要在SecondActivity中加上finish()函数,表示这个Activity结束,比如这里直接在SecondActivity的按钮事件里面加上了finish():<br>
<img src="https://img-blog.csdnimg.cn/20200313175708560.png" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200313175544752.gif" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="22-回调">2.2 回调</h2>
<p>很多情况下需要在FirstActivity跳转到SecondActivity后,在SecondActivity进行相应的操作,如更新数据之类,然后返回FirstActivity,通知FirstActivity执行某些操作,这时候就需要使用startActivityForResult().<br>
startActivityForResult有两个参数,一个是Intent,表示将要跳转的Activity,一个是requestCode(int类型),表示请求码,用于调用Activity的onActivityResult()函数.<br>
如FirstActivity中:</p>
<pre><code class="language-java">startActivityForResult(new Intent(this,SecondActivity.class),11);
</code></pre>
<p>这里11就是请求码,然后在SecondActivity中,使用setResult()函数:</p>
<pre><code class="language-java">setResult(22,new Intent().putExtra(&quot;str&quot;,&quot;from second activity&quot;));
</code></pre>
<p>setResult()接受两个参数,第一个参数表示resultCode,从这个SecondActivity返回的结果码,另一个Intent,表示要返回给FirstActivity的数据.<br>
最后在FirstActivity中重载onActivityResult():<br>
<img src="https://img-blog.csdnimg.cn/20200313181120869.png" alt="在这里插入图片描述" loading="lazy"><br>
onActivityResult中判断请求码与结果码后进行相应操作.<br>
<img src="https://img-blog.csdnimg.cn/2020031319241029.gif" alt="在这里插入图片描述" loading="lazy"></p>
<h1 id="3-activity间传递数据">3 Activity间传递数据</h1>
<h2 id="31-传递普通数据">3.1 传递普通数据</h2>
<p>传递普通类型的数据直接使用Intent的putExtra()即可,putExtra接受两个参数,第一个是一个String,表示键,第二个是值,类型可以是byte,char,short,long等基本类型与这些基本类型组成的数组,当然String也可以.<br>
<img src="https://img-blog.csdnimg.cn/20200313192606644.png" alt="在这里插入图片描述" loading="lazy"><br>
比如在FirstActivity中,传递数据给SecondActivity:<br>
<img src="https://img-blog.csdnimg.cn/20200313194509387.png" alt="在这里插入图片描述" loading="lazy"><br>
然后在SecondActivity中使用getIntent()获取Intent后,再从里面获取数据:<br>
<img src="https://img-blog.csdnimg.cn/20200313193039193.png" alt="在这里插入图片描述" loading="lazy"><br>
如果想从SecondActivity中返回数据给FirstActivity,也就是从被调用的Activity中返回数据,可以使用前面介绍过的setResult()方法.<br>
其中第二个参数是一个用于存储数据的Intent,把数据put进去即可.<br>
<img src="https://img-blog.csdnimg.cn/20200313194352444.png" alt="在这里插入图片描述" loading="lazy"><br>
最后记得在onActivityResult做相应的判断处理:<br>
<img src="https://img-blog.csdnimg.cn/20200313194455707.png" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200313194804122.gif" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="32-传递一组数据">3.2 传递一组数据</h2>
<p>当数据的种类变多时,比如混合了int,String,byte,char等,可以对逐个类型使用putExtra(),但更好的方法是使用Bundle.<br>
Bundle的使用与Intent类似,也是对于不同的类型采用键值对的添加方法,直接putXXX:<br>
<img src="https://img-blog.csdnimg.cn/20200313193559947.png" alt="在这里插入图片描述" loading="lazy"><br>
数据添加完毕之后,在intent中使用putExtras(bundle):<br>
<img src="https://img-blog.csdnimg.cn/20200313193640307.png" alt="在这里插入图片描述" loading="lazy"><br>
然后就可以在SecondActivity中接收数据了.<br>
首先需要使用getIntent().getExtras()获取Bundle,再获取里面的数据.<br>
<img src="https://img-blog.csdnimg.cn/20200313193854303.png" alt="在这里插入图片描述" loading="lazy"><br>
注意一下获取到的Bundle有可能为null,取数据前需要判断一下.<br>
<img src="https://img-blog.csdnimg.cn/20200313194206415.gif" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="33-传递对象">3.3 传递对象</h2>
<p>如果想要传递的数据是一个对象怎么办?难道对每一个属性都使用getter再放进去吗?<br>
并不是,Bundle提供了一个处理序列化对象的方法:<br>
<img src="https://img-blog.csdnimg.cn/20200313195006276.png" alt="在这里插入图片描述" loading="lazy"><br>
只要对象实现了Serializable,就可以被Bundle处理,比如这里有一个测试类Student:<br>
<img src="https://img-blog.csdnimg.cn/20200313195514596.png" alt="在这里插入图片描述" loading="lazy"><br>
然后在FirstActivity中直接new一个,并使用Bundle的putSerializable即可.<br>
<img src="https://img-blog.csdnimg.cn/20200313195505432.png" alt="在这里插入图片描述" loading="lazy"><br>
接着再SecondActivity中通过Intent取出Bundle后,使用其中的getSerializable()取出对象,最后使用强制类型转换:<br>
<img src="https://img-blog.csdnimg.cn/20200313200439154.png" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200313200747507.gif" alt="在这里插入图片描述" loading="lazy"></p>
<h1 id="4-源码">4 源码</h1>
<p><a href="https://github.com/2293736867/AndroidActivityJump">github</a><br>
<a href="https://gitee.com/imykr/AndroidActivityJump">码云</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[一文吃透jQuery选择器!]]></title>
        <id>https://2293736867.github.io/post/yi-wen-chi-tou-jquery-xuan-ze-qi/</id>
        <link href="https://2293736867.github.io/post/yi-wen-chi-tou-jquery-xuan-ze-qi/">
        </link>
        <updated>2020-06-02T21:08:22.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#1-jquery%E9%80%89%E6%8B%A9%E5%99%A8">1 jQuery选择器</a></li>
<li><a href="#2-%E5%9F%BA%E6%9C%AC%E9%80%89%E6%8B%A9%E5%99%A8">2 基本选择器</a>
<ul>
<li><a href="#21-id%E9%80%89%E6%8B%A9%E5%99%A8">2.1 id选择器</a></li>
<li><a href="#22-%E5%85%83%E7%B4%A0%E9%80%89%E6%8B%A9%E5%99%A8">2.2 元素选择器</a></li>
<li><a href="#23-%E7%B1%BB%E9%80%89%E6%8B%A9%E5%99%A8">2.3 类选择器</a></li>
<li><a href="#24-%E9%80%9A%E9%85%8D%E7%AC%A6%E9%80%89%E6%8B%A9%E5%99%A8">2.4 通配符选择器</a></li>
<li><a href="#25-%E7%BB%84%E5%90%88%E9%80%89%E6%8B%A9%E5%99%A8">2.5 组合选择器</a></li>
</ul>
</li>
<li><a href="#3-%E5%B1%82%E7%BA%A7%E9%80%89%E6%8B%A9%E5%99%A8">3 层级选择器</a>
<ul>
<li><a href="#31-%E5%90%8E%E4%BB%A3%E9%80%89%E6%8B%A9%E5%99%A8">3.1 后代选择器</a></li>
<li><a href="#32-%E5%AD%90%E4%BB%A3%E9%80%89%E6%8B%A9%E5%99%A8">3.2 子代选择器</a></li>
<li><a href="#33-%E7%9B%B8%E9%82%BB%E9%80%89%E6%8B%A9%E5%99%A8">3.3 相邻选择器</a></li>
<li><a href="#34-%E5%85%84%E5%BC%9F%E9%80%89%E6%8B%A9%E5%99%A8">3.4 兄弟选择器</a></li>
</ul>
</li>
<li><a href="#4-%E8%BF%87%E6%BB%A4%E9%80%89%E6%8B%A9%E5%99%A8">4 过滤选择器</a>
<ul>
<li><a href="#41-%E5%9F%BA%E6%9C%AC%E8%BF%87%E6%BB%A4%E5%99%A8">4.1 基本过滤器</a>
<ul>
<li><a href="#411-%E4%B8%A4%E7%AB%AF%E7%B1%BB">4.1.1 两端类</a></li>
<li><a href="#412-%E8%8C%83%E5%9B%B4%E7%B4%A2%E5%BC%95%E7%B1%BB">4.1.2 范围索引类</a></li>
<li><a href="#413-%E5%A5%87%E5%81%B6%E7%B1%BB">4.1.3 奇偶类</a></li>
<li><a href="#414-%E5%85%B6%E4%BB%96">4.1.4 其他</a></li>
</ul>
</li>
<li><a href="#42-%E5%86%85%E5%AE%B9%E8%BF%87%E6%BB%A4%E5%99%A8">4.2 内容过滤器</a></li>
<li><a href="#43-%E5%8F%AF%E8%A7%81%E6%80%A7%E8%BF%87%E6%BB%A4%E5%99%A8">4.3 可见性过滤器</a></li>
<li><a href="#44-%E5%B1%9E%E6%80%A7%E8%BF%87%E6%BB%A4%E5%99%A8">4.4 属性过滤器</a></li>
<li><a href="#45-%E5%AD%90%E5%85%83%E7%B4%A0%E8%BF%87%E6%BB%A4%E5%99%A8">4.5 子元素过滤器</a>
<ul>
<li><a href="#451-%E7%B4%A2%E5%BC%95%E8%BF%87%E6%BB%A4%E5%99%A8">4.5.1 索引过滤器</a>
<ul>
<li><a href="#4511-first-child%E4%B8%8Elast-child">4.5.1.1 first-child与last-child</a></li>
<li><a href="#4512-nth-child%E4%B8%8Enth-last-child19">4.5.1.2 nth-child与nth-last-child(1.9+)</a></li>
</ul>
</li>
<li><a href="#452-%E7%B1%BB%E5%9E%8B%E8%BF%87%E6%BB%A4%E5%99%A819">4.5.2 类型过滤器(1.9+)</a></li>
<li><a href="#453-%E5%94%AF%E4%B8%80%E8%BF%87%E6%BB%A4%E5%99%A8">4.5.3 唯一过滤器</a></li>
</ul>
</li>
<li><a href="#46-%E8%A1%A8%E5%8D%95%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E8%BF%87%E6%BB%A4%E5%99%A8">4.6 表单对象属性过滤器</a></li>
</ul>
</li>
<li><a href="#5-%E8%A1%A8%E5%8D%95%E9%80%89%E6%8B%A9%E5%99%A8">5 表单选择器</a>
<ul>
<li><a href="#51-%E6%96%87%E6%9C%AC%E6%A1%86%E7%B1%BB">5.1 文本框类</a></li>
<li><a href="#52-%E9%80%89%E6%8B%A9%E6%A1%86%E7%B1%BB">5.2 选择框类</a></li>
<li><a href="#53-%E6%8C%89%E9%92%AE%E7%B1%BB">5.3 按钮类</a></li>
<li><a href="#54-%E5%85%B6%E4%BB%96">5.4 其他</a></li>
<li><a href="#55-%E4%BE%8B%E5%AD%90">5.5 例子</a></li>
</ul>
</li>
</ul>
</p>
<h1 id="1-jquery选择器">1 jQuery选择器</h1>
<p>jQuery选择器用于选择DOM元素进行相应操作,允许通过多种方式选择,包括标签名,属性名,类名,id等对元素进行选择,基于CSS选择器.jQuery中所有的选择器都以$符号开头,后面加一对括号.<br>
jQuery选择器可以分为基本选择器,层次选择器,过滤选择器与表单选择器.</p>
<h1 id="2-基本选择器">2 基本选择器</h1>
<p>基本选择器可以分成五个:</p>
<ul>
<li>id选择器</li>
<li>元素选择器</li>
<li>类选择器</li>
<li>通配符选择器</li>
<li>组合选择器</li>
</ul>
<h2 id="21-id选择器">2.1 id选择器</h2>
<p>id选择器根据给定的id匹配一个元素,以</p>
<pre><code>#
</code></pre>
<p>开头,如有:</p>
<pre><code class="language-html">&lt;div id=&quot;div1&quot;&gt;&lt;/div&gt;
</code></pre>
<p>则选择器</p>
<pre><code class="language-js">$(&quot;#div1&quot;)
</code></pre>
<p>会选择<br>
<img src="https://img-blog.csdnimg.cn/20200312085650883.png" alt="在这里插入图片描述" loading="lazy"><br>
如果id中含有特殊字符,比如点:</p>
<pre><code class="language-html">&lt;div id=&quot;div1.1.1&quot;&gt;&lt;/div&gt;
</code></pre>
<p>则需要使用双反斜杠转义:</p>
<pre><code class="language-js">$(&quot;#div1\\.1\\.1&quot;)
</code></pre>
<h2 id="22-元素选择器">2.2 元素选择器</h2>
<p>根据元素的标签名查找所有符合的元素.假设有:</p>
<pre><code class="language-html">&lt;div&gt;1&lt;/div&gt;
&lt;div&gt;2&lt;/div&gt;
&lt;div&gt;3&lt;/div&gt;
</code></pre>
<p>选择器</p>
<pre><code class="language-js">$(&quot;div&quot;)
</code></pre>
<p>会选择所有div元素.<br>
<img src="https://img-blog.csdnimg.cn/20200312090242302.png" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="23-类选择器">2.3 类选择器</h2>
<p>根据给定的css类名匹配元素,以</p>
<pre><code>.
</code></pre>
<p>开头.如有:</p>
<pre><code class="language-html">&lt;div class=&quot;class1&quot;&gt;&lt;/div&gt;
&lt;p class=&quot;class1&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;class2&quot;&gt;&lt;/div&gt;
</code></pre>
<p>选择器</p>
<pre><code class="language-js">$(&quot;.class1&quot;)
</code></pre>
<p>会选择:<br>
<img src="https://img-blog.csdnimg.cn/20200312090622567.png" alt="在这里插入图片描述" loading="lazy"><br>
选择器</p>
<pre><code class="language-js">$(&quot;.class2&quot;)
</code></pre>
<p>会选择:<br>
<img src="https://img-blog.csdnimg.cn/20200312090659823.png" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="24-通配符选择器">2.4 通配符选择器</h2>
<p>选择所有的元素.</p>
<pre><code class="language-html">&lt;div&gt;div&lt;/div&gt;
&lt;p&gt;p&lt;/p&gt;
&lt;span&gt;span&lt;/span&gt;
</code></pre>
<pre><code class="language-js">$(&quot;*&quot;)
</code></pre>
<p>会显示<br>
<img src="https://img-blog.csdnimg.cn/20200312090926891.png" alt="在这里插入图片描述" loading="lazy"><br>
也就是说整个&lt;html&gt;都在选择范围内,不仅仅是&lt;body&gt;.<br>
若要选择&lt;body&gt;内的元素,可用</p>
<pre><code class="language-js">$(&quot;body *&quot;)
</code></pre>
<h2 id="25-组合选择器">2.5 组合选择器</h2>
<p>组合选择器就是多个选择器的组合,用</p>
<pre><code>,
</code></pre>
<p>分隔每一个选择器,如有:</p>
<pre><code class="language-html">&lt;div id=&quot;div1&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;class1&quot;&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;
&lt;div class=&quot;class2&quot;&gt;&lt;/div&gt;
</code></pre>
<pre><code class="language-js">$(&quot;#div1,p,.class2&quot;)
</code></pre>
<p>会选择<br>
<img src="https://img-blog.csdnimg.cn/20200312091320971.png" alt="在这里插入图片描述" loading="lazy"></p>
<h1 id="3-层级选择器">3 层级选择器</h1>
<p>层级选择器共有四种:后代选择器,子代选择器,相邻选择器,兄弟选择器.</p>
<h2 id="31-后代选择器">3.1 后代选择器</h2>
<p>根据祖先元素选择所有的后代元素,使用空格分隔,如有</p>
<pre><code class="language-html">&lt;div id=&quot;div1&quot;&gt;
    &lt;div id=&quot;div2&quot;&gt;
        &lt;div&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div id=&quot;div3&quot;&gt;
        &lt;div&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<pre><code class="language-js">$(&quot;#div1 div&quot;)
</code></pre>
<p>会选择<br>
<img src="https://img-blog.csdnimg.cn/20200312093623872.png" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="32-子代选择器">3.2 子代选择器</h2>
<p>选择给定父元素下的所有子元素,使用</p>
<pre><code>&gt;
</code></pre>
<p>分隔,同样上面的例子:</p>
<pre><code class="language-js">$(&quot;#div1&gt;div&quot;)
</code></pre>
<p>会选择<br>
<img src="https://img-blog.csdnimg.cn/20200312093753914.png" alt="在这里插入图片描述" loading="lazy"><br>
<strong>两者的区别在于后代选择器会选择所有的后代,不管里面有多少后代(层),而子选择器只会选择直接后代,也就是只选择&quot;一代&quot;后代(层).</strong></p>
<h2 id="33-相邻选择器">3.3 相邻选择器</h2>
<p>选择紧接在指定元素后面的元素,用</p>
<pre><code>+
</code></pre>
<p>分隔,如有</p>
<pre><code class="language-html">&lt;div id=&quot;div1&quot;&gt;
    &lt;p&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p id=&quot;p1&quot;&gt;&lt;/p&gt;
&lt;p id=&quot;p2&quot;&gt;&lt;/p&gt;
&lt;div id=&quot;div2&quot;&gt;&lt;/div&gt;
&lt;p id=&quot;p3&quot;&gt;&lt;/p&gt;
</code></pre>
<pre><code class="language-js">$(&quot;#div1+p&quot;)
</code></pre>
<p>会选择<br>
<img src="https://img-blog.csdnimg.cn/20200312102652496.png" alt="在这里插入图片描述" loading="lazy"><br>
可用</p>
<pre><code class="language-js">.next()
</code></pre>
<p>代替,如上面的例子可以变为</p>
<pre><code class="language-js">$(&quot;#div1&quot;).next()
</code></pre>
<h2 id="34-兄弟选择器">3.4 兄弟选择器</h2>
<p>选择之后的所有兄弟元素,用</p>
<pre><code>~
</code></pre>
<p>分隔,如有</p>
<pre><code class="language-html">&lt;div&gt;
	&lt;p&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p id=&quot;p1&quot;&gt;&lt;/p&gt;
&lt;p id=&quot;p2&quot;&gt;&lt;/p&gt;
&lt;div&gt;&lt;/div&gt;
&lt;p id=&quot;p3&quot;&gt;&lt;/p&gt;
</code></pre>
<p>则</p>
<pre><code class="language-js">$(&quot;div~p&quot;)
</code></pre>
<p>会选择<br>
<img src="https://img-blog.csdnimg.cn/20200312094857604.png" alt="在这里插入图片描述" loading="lazy"><br>
可用</p>
<pre><code class="language-js">.nextAll()
</code></pre>
<p>代替,如上面的例子可以表示为:</p>
<pre><code class="language-js">$(&quot;div&quot;).nextAll(&quot;p&quot;)
</code></pre>
<p>如果没有加上p选择器:</p>
<pre><code class="language-js">$(&quot;div&quot;).nextAll()
</code></pre>
<p>会选择<br>
<img src="https://img-blog.csdnimg.cn/20200312095431456.png" alt="在这里插入图片描述" loading="lazy"><br>
等价于</p>
<pre><code class="language-js">$(&quot;div~*&quot;)
</code></pre>
<p><strong>与相邻选择器的区别:兄弟选择器会选择后面所有的兄弟,而相邻选择器只选择第一个兄弟.</strong></p>
<h1 id="4-过滤选择器">4 过滤选择器</h1>
<p>过滤选择器种类最多,可以分为:</p>
<ul>
<li>基本过滤器</li>
<li>内容过滤器</li>
<li>可见性过滤器</li>
<li>属性过滤器</li>
<li>子元素过滤器</li>
<li>表单对象属性过滤器</li>
</ul>
<p>下面一个个进行说明.</p>
<h2 id="41-基本过滤器">4.1 基本过滤器</h2>
<p>根据某类过滤规则进行选择,以</p>
<pre><code>:
</code></pre>
<p>开头.</p>
<h3 id="411-两端类">4.1.1 两端类</h3>
<table>
<thead>
<tr>
<th>过滤器</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>:first</td>
<td>选择第一个元素</td>
</tr>
<tr>
<td>:last</td>
<td>选择最后一个元素</td>
</tr>
</tbody>
</table>
<p>html:</p>
<pre><code class="language-html">&lt;div&gt;
    &lt;p id=&quot;p1&quot;&gt;&lt;/p&gt;
    &lt;p id=&quot;p2&quot;&gt;&lt;/p&gt;
    &lt;p id=&quot;p3&quot;&gt;&lt;/p&gt;
&lt;/div&gt;
</code></pre>
<p>选择器</p>
<pre><code class="language-js">$(&quot;div&gt;p:first&quot;)
$(&quot;div&gt;p:last&quot;)
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200312104229381.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h3 id="412-范围索引类">4.1.2 范围索引类</h3>
<table>
<thead>
<tr>
<th>过滤器</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>:eq(index)</td>
<td>选择指定索引值元素</td>
</tr>
<tr>
<td>:gt(index)</td>
<td>选择大于给定索引值元素</td>
</tr>
<tr>
<td>:lt(index)</td>
<td>选择小于给定索引值元素</td>
</tr>
</tbody>
</table>
<p>注意索引从0开始,要与下面的:nth-child/:nth-last-child/:nth-of-type/:n-last-of-type区分.<br>
html:</p>
<pre><code class="language-html">&lt;div&gt;
    &lt;p id=&quot;index0&quot;&gt;&lt;/p&gt;
    &lt;p id=&quot;index1&quot;&gt;&lt;/p&gt;
    &lt;p id=&quot;index2&quot;&gt;&lt;/p&gt;
    &lt;p id=&quot;index3&quot;&gt;&lt;/p&gt;
    &lt;p id=&quot;index4&quot;&gt;&lt;/p&gt;
    &lt;p id=&quot;index5&quot;&gt;&lt;/p&gt;
&lt;/div&gt;
</code></pre>
<p>选择器</p>
<pre><code class="language-js">$(&quot;div&gt;p:eq(3)&quot;)
$(&quot;div&gt;p:lt(2)&quot;)
$(&quot;div&gt;p:gt(4)&quot;)
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200312105231149.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h3 id="413-奇偶类">4.1.3 奇偶类</h3>
<p>选择索引值为奇/偶的元素,从0开始计数.</p>
<table>
<thead>
<tr>
<th>过滤器</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>:odd</td>
<td>选择索引值为奇数的元素</td>
</tr>
<tr>
<td>:even</td>
<td>选择索引值为偶数的元素</td>
</tr>
</tbody>
</table>
<p>html:</p>
<pre><code class="language-html">&lt;div&gt;
    &lt;p id=&quot;p1&quot;&gt;&lt;/p&gt;
    &lt;p id=&quot;p2&quot;&gt;&lt;/p&gt;
    &lt;p id=&quot;p3&quot;&gt;&lt;/p&gt;
    &lt;p id=&quot;p4&quot;&gt;&lt;/p&gt;
    &lt;p id=&quot;p5&quot;&gt;&lt;/p&gt;
    &lt;p id=&quot;p6&quot;&gt;&lt;/p&gt;
&lt;/div&gt;
</code></pre>
<p>选择器:</p>
<pre><code class="language-js">$(&quot;div&gt;p:odd&quot;)
$(&quot;div&gt;p:even&quot;)
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200312104446666.png" alt="在这里插入图片描述" loading="lazy"><br>
odd为什么是246?even为什么是135?<br>
难道结果错了?</p>
<p>并不是,下标从0开始计数,下标为0的&lt;p&gt;的id为p1,算进去偶数里了.<br>
<img src="https://img-blog.csdnimg.cn/20200312104740554.png" alt="在这里插入图片描述" loading="lazy"></p>
<h3 id="414-其他">4.1.4 其他</h3>
<table>
<thead>
<tr>
<th>过滤器</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>:header</td>
<td>选择标题元素,如&lt;h1&gt;,&lt;h2&gt;</td>
</tr>
<tr>
<td>:animated</td>
<td>选择正在执行动画效果的元素</td>
</tr>
<tr>
<td>:focus(1.6+)</td>
<td>选择当前获取焦点的元素</td>
</tr>
<tr>
<td>:root(1.9+)</td>
<td>选择根元素,也就是&lt;html&gt;</td>
</tr>
<tr>
<td>:target(1.9+)</td>
<td>这个比较特殊,与URI有关,选择ID和特定标识符相匹配的元素<br>比如给定了URI http://xxx.com#ttt , $(&quot;p:ttt&quot;)会选择&lt;p id=&quot;ttt&quot;&gt;</td>
</tr>
<tr>
<td>:lang(language)(1.9+)</td>
<td>选择指定语言的所有元素</td>
</tr>
<tr>
<td>:not(selector)</td>
<td>反选器</td>
</tr>
</tbody>
</table>
<p>挑取一些简单演示,html:</p>
<pre><code class="language-html">&lt;div lang=&quot;en&quot;&gt;
    &lt;h1 id=&quot;h1&quot;&gt;&lt;/h1&gt;
    &lt;h2 id=&quot;h2&quot;&gt;&lt;/h2&gt;
&lt;/div&gt;
&lt;div lang=&quot;zh-CN&quot;&gt;&lt;/div&gt;
&lt;div lang=&quot;en&quot;&gt;&lt;/div&gt;
</code></pre>
<p>选择器:</p>
<pre><code class="language-js">$(&quot;:header&quot;)
$(&quot;:root div&quot;)
$(&quot;div:not(:lang(zh-CN))&quot;)
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20200312110701888.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="42-内容过滤器">4.2 内容过滤器</h2>
<p>四种:</p>
<table>
<thead>
<tr>
<th>过滤器</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>:contains(text)</td>
<td>选择包含给定文本的元素</td>
</tr>
<tr>
<td>:has(selector)</td>
<td>选择含有过滤器所匹配的元素的元素</td>
</tr>
<tr>
<td>:empty</td>
<td>选择不包含子元素或文本为空的元素</td>
</tr>
<tr>
<td>:parent</td>
<td>选择含有子元素或文本为的元素</td>
</tr>
</tbody>
</table>
<p>html:</p>
<pre><code class="language-html">&lt;div id=&quot;div1&quot;&gt;123&lt;/div&gt;
&lt;div id=&quot;div2&quot;&gt;
    &lt;div id=&quot;div3&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;div4&quot;&gt;123&lt;/div&gt;
&lt;div id=&quot;div5&quot;&gt;&lt;/div&gt;
&lt;p id=&quot;p1&quot;&gt;&lt;/p&gt;
</code></pre>
<p>选择器:</p>
<pre><code class="language-js">$(&quot;body *:contains(123)&quot;)
$(&quot;body *:has(#div3)&quot;)
$(&quot;body *:empty&quot;)
$(&quot;div:parent&quot;)
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20200312113250180.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="43-可见性过滤器">4.3 可见性过滤器</h2>
<table>
<thead>
<tr>
<th>过滤器</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>:visible</td>
<td>选择可见元素</td>
</tr>
<tr>
<td>:hidden</td>
<td>选择不可见元素</td>
</tr>
</tbody>
</table>
<p>html:</p>
<pre><code class="language-html">&lt;div id=&quot;div1&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;div2&quot; style=&quot;display: none;&quot;&gt;&lt;/div&gt;
</code></pre>
<p>选择器:</p>
<pre><code class="language-js">$(&quot;body *:hidden&quot;);
$(&quot;body *:visible&quot;);
</code></pre>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/20200312113649997.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="44-属性过滤器">4.4 属性过滤器</h2>
<p>属性过滤器针对元素的属性进行过滤,包括有没有该属性,该属性的值,以某些值开头/结尾,包含某些值等,使用</p>
<pre><code>[]
</code></pre>
<p>表示属性过滤器.</p>
<table>
<thead>
<tr>
<th>过滤器</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>[attr]</td>
<td>选择包含attr属性的元素,常见的是[id],选择包含id属性的元素.</td>
</tr>
<tr>
<td>[attr=value]</td>
<td>选择attr属性为value的元素,如[name=123],[id=div1]</td>
</tr>
<tr>
<td>[attr!=value]</td>
<td><strong>选择不含有attr属性,或含有attr属性,但是值不为value的元素.等价于:not([attr=vale])</strong><br><br><strong>如果想要选择包含特定属性但是属性值不为value的元素请使用[attr]:not([attr=value])</strong></td>
</tr>
<tr>
<td>[attr^=value]</td>
<td>选择attr属性值是以value开始的元素</td>
</tr>
<tr>
<td>[attr$=value]</td>
<td>选择attr属性值是以value结尾的元素</td>
</tr>
<tr>
<td>[attr*=value]</td>
<td>选择attr属性值是包含value的元素</td>
</tr>
</tbody>
</table>
<p>html:</p>
<pre><code class="language-html">&lt;div id=&quot;div1&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;div2&quot; name=&quot;div2&quot;&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div id=&quot;div3&quot; name=&quot;div3&quot;&gt;&lt;/div&gt;
</code></pre>
<p>选择器:</p>
<pre><code class="language-js">$(&quot;[id]&quot;)
$(&quot;[id$=3]&quot;)
$(&quot;body *[name!=div2]&quot;)
$(&quot;body *[name*=div]&quot;)
</code></pre>
<figure data-type="image" tabindex="6"><img src="https://img-blog.csdnimg.cn/20200312115227135.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="45-子元素过滤器">4.5 子元素过滤器</h2>
<p>可以按照索引顺序(即第一个,倒数第几个等)或者按照类型或者按照唯一性对子元素进行过滤.</p>
<h3 id="451-索引过滤器">4.5.1 索引过滤器</h3>
<table>
<thead>
<tr>
<th>过滤器</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>:first-child</td>
<td>选择第一个子元素,等价于:nth-child(1)</td>
</tr>
<tr>
<td>:last-child</td>
<td>选择最后一个子元素</td>
</tr>
<tr>
<td>:nth-child</td>
<td>选择第n个子元素</td>
</tr>
<tr>
<td>:nth-last-child</td>
<td>选择倒数第n个子元素</td>
</tr>
</tbody>
</table>
<h4 id="4511-first-child与last-child">4.5.1.1 first-child与last-child</h4>
<p>先来看看first-child与last-child:</p>
<pre><code class="language-html">&lt;div id=&quot;div1&quot;&gt;
    &lt;p id=&quot;p1&quot;&gt;&lt;/p&gt;
    &lt;p id=&quot;p2&quot;&gt;&lt;/p&gt;
    &lt;p id=&quot;p3&quot;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;div2&quot;&gt;
    &lt;p id=&quot;p4&quot;&gt;&lt;/p&gt;
    &lt;p id=&quot;p5&quot;&gt;&lt;/p&gt;
&lt;/div&gt;
</code></pre>
<p>选择器:</p>
<pre><code class="language-js">$(&quot;div p:first-child&quot;)
$(&quot;div p:last-child&quot;)
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200312141417731.png" alt="在这里插入图片描述" loading="lazy"><br>
<strong>注意与:first/:last的区别,:first/:last只会选择整个父级元素的第一个/最后一个元素,但是:first-child/:last-child会选择每个父级元素的第一个/最后一个元素.<br>
:first/:last把所有符合的元素看作一个整体,即使其中有并列的父级元素,而:first-child/:last-child把每个父级元素单独看待,选择每个父级元素的第一个/最后一个元素.</strong><br>
<img src="https://img-blog.csdnimg.cn/20200312141942463.png" alt="在这里插入图片描述" loading="lazy"></p>
<h4 id="4512-nth-child与nth-last-child19">4.5.1.2 nth-child与nth-last-child(1.9+)</h4>
<p>nth-child选择父元素下第n个元素,注意,<strong>从1开始计数</strong>.</p>
<pre><code class="language-html">&lt;div id=&quot;div1&quot;&gt;
    &lt;p id=&quot;p1&quot;&gt;&lt;/p&gt;
    &lt;p id=&quot;p2&quot;&gt;&lt;/p&gt;
    &lt;p id=&quot;p3&quot;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;div2&quot;&gt;
    &lt;p id=&quot;p4&quot;&gt;&lt;/p&gt;
    &lt;p id=&quot;p5&quot;&gt;&lt;/p&gt;
    &lt;p id=&quot;p6&quot;&gt;&lt;/p&gt;
&lt;/div&gt;
</code></pre>
<p>选择器:</p>
<pre><code class="language-js">$(&quot;div p:nth-child(3)&quot;)
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/2020031214274542.png" alt="在这里插入图片描述" loading="lazy"><br>
注意与:eq的区别,有点类似:first/:first-child的区别,:eq会把所有符合条件的元素看作一个整体,而且不要忘记:eq是<strong>从0开始计数</strong>.<br>
<img src="https://img-blog.csdnimg.cn/2020031214285558.png" alt="在这里插入图片描述" loading="lazy"><br>
另一方面,nth-child支持奇偶与代数表达式,比如:</p>
<pre><code class="language-html">&lt;div id=&quot;div1&quot;&gt;
    &lt;p id=&quot;p1&quot;&gt;&lt;/p&gt;
    &lt;p id=&quot;p2&quot;&gt;&lt;/p&gt;
    &lt;p id=&quot;p3&quot;&gt;&lt;/p&gt;
    &lt;p id=&quot;p4&quot;&gt;&lt;/p&gt;
    &lt;p id=&quot;p5&quot;&gt;&lt;/p&gt;
    &lt;p id=&quot;p6&quot;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;div2&quot;&gt;
    &lt;p id=&quot;p7&quot;&gt;&lt;/p&gt;
    &lt;p id=&quot;p8&quot;&gt;&lt;/p&gt;
    &lt;p id=&quot;p9&quot;&gt;&lt;/p&gt;
    &lt;p id=&quot;p10&quot;&gt;&lt;/p&gt;
    &lt;p id=&quot;p11&quot;&gt;&lt;/p&gt;
&lt;/div&gt;
</code></pre>
<p>选择器:</p>
<pre><code class="language-js">$(&quot;div p:nth-child(odd)&quot;)
$(&quot;div p:nth-child(even)&quot;)
$(&quot;div p:nth-child(3n+1)&quot;)
$(&quot;div p:nth-child(4n-3)&quot;)
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200312143318644.png" alt="在这里插入图片描述" loading="lazy"><br>
计数也是从1开始.<br>
nth-last-child与nth-child类似,需要1.9以上的版本,看名字就知道,是选择倒数第n个的,同样支持奇偶与代数表达式.</p>
<pre><code class="language-js">$(&quot;div p:nth-last-child(2)&quot;)
$(&quot;div p:nth-last-child(odd)&quot;)
$(&quot;div p:nth-last-child(even)&quot;)
$(&quot;div p:nth-last-child(3n+1)&quot;)
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200312143759526.png" alt="在这里插入图片描述" loading="lazy"><br>
对于nth-last-child的odd/even/代数表达式来说,从最后一个符合条件的开始选择,但是按原来的顺序排列.</p>
<h3 id="452-类型过滤器19">4.5.2 类型过滤器(1.9+)</h3>
<p>有四种:</p>
<ul>
<li>:first-of-type</li>
<li>:last-of-type</li>
<li>:nth-of-type</li>
<li>:nth-last-of-type</li>
</ul>
<p>first-of-type会选择符合条件的元素的父元素的第一个该类型的子元素.<br>
例如,</p>
<pre><code class="language-html">&lt;div id=&quot;div1&quot;&gt;
    &lt;p id=&quot;p1&quot;&gt;&lt;/p&gt;
    &lt;p id=&quot;p2&quot;&gt;&lt;/p&gt;
    &lt;p id=&quot;p3&quot;&gt;&lt;/p&gt;
&lt;/div&gt;
</code></pre>
<p>选择器:</p>
<pre><code class="language-js">$(&quot;p:first-of-type&quot;)
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200312144917586.png" alt="在这里插入图片描述" loading="lazy"><br>
若使用id选择器:</p>
<pre><code class="language-js">$(&quot;#p2:first-of-type&quot;)
</code></pre>
<p>则结果为空.<br>
<img src="https://img-blog.csdnimg.cn/20200312145529893.png" alt="在这里插入图片描述" loading="lazy"><br>
为什么?<br>
因为此时选择的是id为p2的元素,但是这个</p>
<pre><code class="language-html">&lt;p id=&quot;p2&quot;&gt;&lt;/p&gt;
</code></pre>
<p>的前面有一个</p>
<pre><code class="language-html">&lt;p id=&quot;p1&quot;&gt;&lt;/p&gt;
</code></pre>
<p>也就是说</p>
<pre><code class="language-html">&lt;p id=&quot;p2&quot;&gt;&lt;/p&gt;
</code></pre>
<p>不是第一个孩子,因此选择为空,此时若把第一个孩子注释:</p>
<pre><code class="language-html">&lt;div id=&quot;div1&quot;&gt;
    &lt;!-- &lt;p id=&quot;p1&quot;&gt;&lt;/p&gt; --&gt;
    &lt;p id=&quot;p2&quot;&gt;&lt;/p&gt;
    &lt;p id=&quot;p3&quot;&gt;&lt;/p&gt;
&lt;/div&gt;
</code></pre>
<p>则</p>
<pre><code class="language-js">$(&quot;#p2:first-of-type&quot;)
</code></pre>
<p>会选择<br>
<img src="https://img-blog.csdnimg.cn/20200312145801254.png" alt="在这里插入图片描述" loading="lazy"><br>
多个父级元素也是一样的道理:</p>
<pre><code class="language-html">&lt;div id=&quot;div1&quot;&gt;
    &lt;p id=&quot;p1&quot;&gt;&lt;/p&gt;
    &lt;p class=&quot;a&quot; id=&quot;p2&quot;&gt;&lt;/p&gt;
    &lt;p class=&quot;a&quot; id=&quot;p3&quot;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;div2&quot;&gt;
    &lt;p class=&quot;a&quot; id=&quot;p4&quot;&gt;&lt;/p&gt;
    &lt;p class=&quot;a&quot; id=&quot;p5&quot;&gt;&lt;/p&gt;
&lt;/div&gt;
</code></pre>
<pre><code class="language-js">$(&quot;.a:first-of-type&quot;)
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200312150052381.png" alt="在这里插入图片描述" loading="lazy"><br>
last-of-type/nth-of-child/nth-last-of-type类似,要注意的是nth-of-child/nth-last-of-type都支持奇偶与代数表达式,计数从1开始.</p>
<h3 id="453-唯一过滤器">4.5.3 唯一过滤器</h3>
<p>两种:</p>
<ul>
<li>only-child</li>
<li>only-of-type(1.9+)</li>
</ul>
<p>如果某个元素是它父元素的唯一子元素,则only-child会选择该(子)元素.</p>
<pre><code class="language-html">&lt;div&gt;
    &lt;p id=&quot;p1&quot;&gt;&lt;/p&gt;
    &lt;p id=&quot;p2&quot;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
    &lt;p id=&quot;p3&quot;&gt;&lt;/p&gt;
&lt;/div&gt;
</code></pre>
<p>选择器</p>
<pre><code class="language-js">$(&quot;div p:only-child&quot;)
</code></pre>
<p>会选择<br>
<img src="https://img-blog.csdnimg.cn/20200312150931231.png" alt="在这里插入图片描述" loading="lazy"><br>
注意文本并不会影响选择的结果,也就是说,改成</p>
<pre><code class="language-html">&lt;div&gt;
    &lt;p id=&quot;p1&quot;&gt;&lt;/p&gt;
    &lt;p id=&quot;p2&quot;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
	456
    &lt;p id=&quot;p3&quot;&gt;123&lt;/p&gt;
    456
&lt;/div&gt;
</code></pre>
<p>后,选择器不变,选择的结果只是p里面多了文字:<br>
<img src="https://img-blog.csdnimg.cn/20200312151041648.png" alt="在这里插入图片描述" loading="lazy"><br>
<strong>而如果某个元素的父元素只有唯一一个该元素类型的子元素,则only-of-type会选择该元素,注意是类型,不是数量.<br>
上面的only-child指的是数量,也就是只有一个孩子,这里only-of-type指的是类型,只有一个这种类型的孩子,而不管孩子数量.</strong></p>
<pre><code class="language-html">&lt;div&gt;
   &lt;p id=&quot;p1&quot;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
    &lt;p id=&quot;p2&quot;&gt;&lt;/p&gt;
    &lt;p id=&quot;p3&quot;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
    &lt;p id=&quot;p4&quot;&gt;&lt;/p&gt;
    &lt;div&gt;&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<pre><code class="language-js">$(&quot;div p:only-of-type&quot;)
</code></pre>
<p>会选择<br>
<img src="https://img-blog.csdnimg.cn/20200312152126590.png" alt="在这里插入图片描述" loading="lazy"><br>
而如果选择器换成only-child:</p>
<pre><code class="language-js">$(&quot;div p:only-child&quot;)
</code></pre>
<p>则会选择<br>
<img src="https://img-blog.csdnimg.cn/20200312152208985.png" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="46-表单对象属性过滤器">4.6 表单对象属性过滤器</h2>
<p>选择以下三种状态的元素:</p>
<ul>
<li>可用</li>
<li>不可用</li>
<li>选中</li>
</ul>
<table>
<thead>
<tr>
<th>过滤器</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>:enabled</td>
<td>选择可用元素</td>
</tr>
<tr>
<td>:disabled</td>
<td>选择不可用元素</td>
</tr>
<tr>
<td>:checked</td>
<td>选择所有被选中的元素</td>
</tr>
<tr>
<td>:selected</td>
<td>选择所有被选中的option元素(针对&lt;select&gt;)</td>
</tr>
</tbody>
</table>
<pre><code class="language-html">&lt;input type=&quot;checkbox&quot; checked/&gt;
&lt;input type=&quot;radio&quot; checked&gt;
&lt;input type=&quot;radio&quot; id=&quot;disabled&quot; disabled/&gt;
&lt;input type=&quot;checkbox&quot;&gt;
&lt;select&gt;
    &lt;option value=&quot;1&quot;&gt;&lt;/option&gt;
    &lt;option value=&quot;2&quot; selected&gt;&lt;/option&gt;
    &lt;option value=&quot;3&quot;&gt;&lt;/option&gt;
&lt;/select&gt;
</code></pre>
<pre><code class="language-js">$(&quot;body *:enabled&quot;)
$(&quot;:disabled&quot;)
$(&quot;:selected&quot;)
$(&quot;:checked&quot;)
</code></pre>
<figure data-type="image" tabindex="7"><img src="https://img-blog.csdnimg.cn/20200312134635678.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="5-表单选择器">5 表单选择器</h1>
<h2 id="51-文本框类">5.1 文本框类</h2>
<table>
<thead>
<tr>
<th>过滤器</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>:text</td>
<td>选择所有文本框</td>
</tr>
<tr>
<td>:password</td>
<td>选择所有密码框</td>
</tr>
</tbody>
</table>
<h2 id="52-选择框类">5.2 选择框类</h2>
<table>
<thead>
<tr>
<th>过滤器</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>:radio</td>
<td>选择所有单选框</td>
</tr>
<tr>
<td>:checkbox</td>
<td>选择所有多选框</td>
</tr>
</tbody>
</table>
<h2 id="53-按钮类">5.3 按钮类</h2>
<table>
<thead>
<tr>
<th>过滤器</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>:submit</td>
<td>选择所有提交按钮</td>
</tr>
<tr>
<td>:reset</td>
<td>选择所有重置按钮</td>
</tr>
<tr>
<td>:button</td>
<td>选择所有按钮</td>
</tr>
</tbody>
</table>
<h2 id="54-其他">5.4 其他</h2>
<table>
<thead>
<tr>
<th>过滤器</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>:image</td>
<td>选择所有图像域</td>
</tr>
<tr>
<td>:file</td>
<td>选择所有文件域</td>
</tr>
</tbody>
</table>
<h2 id="55-例子">5.5 例子</h2>
<pre><code class="language-html">&lt;input type=&quot;text&quot; /&gt;
&lt;input type=&quot;password&quot; /&gt;
&lt;input type=&quot;radio&quot; /&gt;
&lt;input type=&quot;checkbox&quot; /&gt;
&lt;input type=&quot;submit&quot; /&gt;
&lt;input type=&quot;reset&quot; /&gt;
&lt;input type=&quot;button&quot; /&gt;
&lt;input type=&quot;image&quot; /&gt;
&lt;input type=&quot;file&quot; /&gt;
</code></pre>
<pre><code class="language-js">$(&quot;:text&quot;)
$(&quot;:password&quot;)
$(&quot;:radio&quot;)
$(&quot;:checkbox&quot;)
$(&quot;:submit&quot;)
$(&quot;:reset&quot;)
$(&quot;:button&quot;)
$(&quot;:image&quot;)
$(&quot;:file&quot;)
</code></pre>
<figure data-type="image" tabindex="8"><img src="https://img-blog.csdnimg.cn/20200312135946749.png" alt="在这里插入图片描述" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[android studio sync失败]]></title>
        <id>https://2293736867.github.io/post/android-studio-sync-shi-bai/</id>
        <link href="https://2293736867.github.io/post/android-studio-sync-shi-bai/">
        </link>
        <updated>2020-06-02T21:06:49.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-原因">1 原因</h1>
<p>sync失败或gradle同步慢的原因基本上就是网络的问题,这里采用的办法是在Maven的设置文件添加国内镜像.</p>
<h1 id="2-添加镜像">2 添加镜像</h1>
<p>Maven的settings.xml中,在&lt;mirrors&gt;中添加:</p>
<pre><code class="language-xml">&lt;mirror&gt;
	&lt;id&gt;alimaven&lt;/id&gt;
	&lt;name&gt;aliyun maven&lt;/name&gt;
	&lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;
	&lt;mirrorOf&gt;central&lt;/mirrorOf&gt;
&lt;/mirror&gt;

&lt;mirror&gt;
    &lt;id&gt;uk&lt;/id&gt;
    &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;
    &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;
    &lt;url&gt;http://uk.maven.org/maven2/&lt;/url&gt;
&lt;/mirror&gt;

&lt;mirror&gt;
    &lt;id&gt;CN&lt;/id&gt;
    &lt;name&gt;OSChina Central&lt;/name&gt;
    &lt;url&gt;http://maven.oschina.net/content/groups/public/&lt;/url&gt;
    &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;
&lt;/mirror&gt;

&lt;mirror&gt;
    &lt;id&gt;nexus&lt;/id&gt;
    &lt;name&gt;internal nexus repository&lt;/name&gt;
    &lt;url&gt;http://repo.maven.apache.org/maven2&lt;/url&gt;
    &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;
&lt;/mirror&gt;
</code></pre>
<p>这样android studio同步的速度就会很快了.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[jquery hello world]]></title>
        <id>https://2293736867.github.io/post/jquery-hello-world/</id>
        <link href="https://2293736867.github.io/post/jquery-hello-world/">
        </link>
        <updated>2020-06-02T21:06:08.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-jquery">1 jQuery</h1>
<p>jQuery是一个js库,一个js文件,极大地简化了编程,<a href="https://jquery.com/download/">官网链接</a>在这里,有compressed,uncompressed版本,使用时一样.</p>
<h1 id="2-hello-world">2 hello world</h1>
<pre><code class="language-html">&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;jquery hello world&lt;/title&gt;
        &lt;script type=&quot;text/javascript&quot; src=&quot;https://code.jquery.com/jquery-3.4.1.min.js&quot;&gt;&lt;/script&gt;
        &lt;script type=&quot;text/javascript&quot;&gt;
            $(function()
            {
                $(&quot;p&quot;).html(&quot;hello world&quot;);
            });
        &lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;p&gt;&lt;/p&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>jQuery使用时直接从官网引入文件即可,这里用的是3.4.1版本.</p>
<pre><code class="language-js">$(function())
</code></pre>
<p>是</p>
<pre><code class="language-js">$(document).ready(function(){})
</code></pre>
<p>的缩写,这个函数会在DOM加载完成后执行.</p>
<pre><code class="language-js">$(&quot;p&quot;)
</code></pre>
<p>表示选择页面的所有&lt;p&gt;元素,html()可以设置元素的内容.<br>
<img src="https://img-blog.csdnimg.cn/20200311193454323.png" alt="在这里插入图片描述" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MySQL数据类型全解析]]></title>
        <id>https://2293736867.github.io/post/mysql-shu-ju-lei-xing-quan-jie-xi/</id>
        <link href="https://2293736867.github.io/post/mysql-shu-ju-lei-xing-quan-jie-xi/">
        </link>
        <updated>2020-06-02T21:05:41.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-概述">1 概述</h1>
<p>本文主要介绍了MySQL的各种数据类型,版本为8.x,<br>
MySQL的数据类型可以分为六类:数值类型,日期时间类型,字符串类型,二进制类型,JSON类型与空间数据类型.</p>
<h1 id="2-数值类型">2 数值类型</h1>
<p>数值类型是最基本的类型,可以分为整数类型与浮点数类型.</p>
<h2 id="21-整型">2.1 整型</h2>
<table>
<thead>
<tr>
<th>类型</th>
<th>字节数</th>
<th>无符号范围</th>
<th>有符号范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>TINYINT</td>
<td>1</td>
<td>[0,255]</td>
<td>[-128,127]</td>
</tr>
<tr>
<td>SMALLINT</td>
<td>2</td>
<td>[0,65535]</td>
<td>[-32768,32767]</td>
</tr>
<tr>
<td>MEDIUMINT</td>
<td>3</td>
<td>0-1677w</td>
<td>+-838w</td>
</tr>
<tr>
<td>INT/INTEGER</td>
<td>4</td>
<td>0-42e</td>
<td>+-21e</td>
</tr>
<tr>
<td>BIGINT</td>
<td>8</td>
<td>0-18446744e</td>
<td>+-9223372e</td>
</tr>
</tbody>
</table>
<p>没写出的具体的精确值无符号的范围计算公式如下:</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200309150453284.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>有符号的计算公式如下:</p>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200309150501675.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>所有整形如果允许NULL的话默认为NULL,不允许为NULL的需要手动设置默认值.</p>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20200309151859330.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>如果插入或修改的数据范围不符合会提示操作失败,如上图提示列c_mediumint的数据超出范围.</p>
<h2 id="22-浮点型">2.2 浮点型</h2>
<p>可以用两种方式来表示小数,分别是浮点数类型与定点数类型.</p>
<p>浮点数用于不需要太精确的小数场合,类型包括FLOAT与DOUBLE,定点数类型就是DECIMAL.</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>字节数</th>
<th>范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>FLOAT</td>
<td>4</td>
<td>+- 1.17e-38 - 3.4e+38 和 0</td>
</tr>
<tr>
<td>DOUBLE</td>
<td>8</td>
<td>+- 2.22e-308 - 1.79e+308 和 0</td>
</tr>
<tr>
<td>DEC(M,D)/DECIMAL(M,D)</td>
<td>取决于M与D</td>
<td>取决于M与D</td>
</tr>
</tbody>
</table>
<p>下面是测试的待插入的数据:</p>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20200309153655569.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>插入之后再查询:</p>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/20200309153711324.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>可以看到,float的精度最高为6位,后面的进行四舍五入,DOUBLE的最高精度为15位.</p>
<p>下面来说一下DECIMAL.</p>
<h2 id="23-decimal">2.3 DECIMAL</h2>
<p>DECIMAL也可用DEC来表示,用于计算精确的小数值,DECIMAL通常如下表示:</p>
<pre><code class="language-sql">DECIMAL(M,D)
</code></pre>
<table>
<thead>
<tr>
<th>类型</th>
<th>含义</th>
<th>取值范围</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>M</td>
<td>十进制有效数字总个数</td>
<td>1-65</td>
<td>10</td>
</tr>
<tr>
<td>D</td>
<td>小数点后十进制数字个数</td>
<td>0-30(D&lt;=M)</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>如果要计算所占用的字节数,需要分为整数与小数两部分,分开计算再相加,每部分又按照9位数字去拆分,计算规则如下:</p>
<table>
<thead>
<tr>
<th>位数</th>
<th>占用字节数</th>
</tr>
</thead>
<tbody>
<tr>
<td>1-2</td>
<td>1</td>
</tr>
<tr>
<td>3-4</td>
<td>2</td>
</tr>
<tr>
<td>5-6</td>
<td>3</td>
</tr>
<tr>
<td>7-9</td>
<td>4</td>
</tr>
</tbody>
</table>
<p>也就是说对于</p>
<pre><code class="language-sql">DECIMAL(24,8)
</code></pre>
<p>整数部分24-8=16位,小数部分8位,小数部分的8位根据规则所占用的字节数为4个,整数部分按每9位进行拆分,16=9+7,9位的部分占4个字节,7位的部分按照规则也占4个字节,所以整数部分占8个字节,加上小数部分的4个字节,总共占12个字节.</p>
<p>至于NUMERIC,在MySQL中,NUMERIC被实现为DECIMAL:</p>
<figure data-type="image" tabindex="6"><img src="https://img-blog.csdnimg.cn/20200310010544290.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="3-日期与时间类型">3 日期与时间类型</h1>
<p>总共有五类:YEAR,TIME,DATE,DATETIME,TIMESTAMP.</p>
<h2 id="31-日期">3.1 日期</h2>
<p>日期有两种类型:YEAR与DATE,YEAR表示年,DATE表示日期.</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>字节数</th>
<th>取值范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>YEAR</td>
<td>1</td>
<td>[1901,2155]</td>
</tr>
<tr>
<td>DATE</td>
<td>3</td>
<td>[1000-01-01,9999-12-31]</td>
</tr>
</tbody>
</table>
<p>DATE中的年月日插入时可以不分隔或者用各种符号进行分隔,比如</p>
<pre><code>! @ # $ % ^ &amp; * ( ) - / \ [ ] { } : ; ' &quot; |  , . &lt; &gt; ?
</code></pre>
<figure data-type="image" tabindex="7"><img src="https://img-blog.csdnimg.cn/2020030919130056.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>上图中的date都是合法的,插入之后MySQL都会统一用横杠代替:</p>
<figure data-type="image" tabindex="8"><img src="https://img-blog.csdnimg.cn/20200309191403324.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>YEAR的话MySQL其实允许两位数的YEAR,其中00-69表示2000-2069,70-99表示1970-1999.</p>
<p>其他插入方式的话可以用CURRENT_DATE,CURRENT_DATE(),CURDATE(),NOW(),CURTIME(),CURRENT_TIME,CURRENT_TIME():</p>
<figure data-type="image" tabindex="9"><img src="https://img-blog.csdnimg.cn/20200310103517135.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="10"><img src="https://img-blog.csdnimg.cn/20200310103529133.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="32-时间">3.2 时间</h2>
<p>时间就一种类型:TIME.</p>
<p>TIME所占的字节数为3个字节,取值范围为:</p>
<pre><code>[-838:59:59,838:59:59]
</code></pre>
<p>插入时时分秒可以不分隔或者必须以冒号分隔.</p>
<figure data-type="image" tabindex="11"><img src="https://img-blog.csdnimg.cn/20200309192901773.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>插入后统一变为冒号分隔:</p>
<figure data-type="image" tabindex="12"><img src="https://img-blog.csdnimg.cn/20200309192920996.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>可以使用CURRENT_TIME或CURRENT_TIME(),CURTIME()或NOW()插入:</p>
<figure data-type="image" tabindex="13"><img src="https://img-blog.csdnimg.cn/20200310103949962.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="14"><img src="https://img-blog.csdnimg.cn/20200310104123855.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>甚至也可以使用CURDATE(),不过此时插入的是零值:</p>
<figure data-type="image" tabindex="15"><img src="https://img-blog.csdnimg.cn/20200310104255682.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="33-日期时间">3.3 日期+时间</h2>
<p>TIMESTAMP与DATETIME:</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>字节数</th>
<th>取值范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>DATETIME</td>
<td>8</td>
<td>[1000-01-01 00:00:00,9999-12-31 23:59:59]</td>
</tr>
<tr>
<td>TIMESTAMP</td>
<td>4</td>
<td>[19700101080001,20380119111407]</td>
</tr>
</tbody>
</table>
<p>DATETIME就是DATE与TIME的结合,先DATE再TIME,空格分隔.</p>
<p>TIMESTAMP表示时间戳,表示当前时间到1970年1月1日0时0分0秒经过的秒数,中的写法是年月日时分秒,比如</p>
<pre><code>19700101080001
</code></pre>
<p>表示</p>
<pre><code>1970年1月1日8时0分01秒
</code></pre>
<p>这里之所以使用080001是因为中国的时区.</p>
<pre><code>19700101000000
</code></pre>
<p>会报错,范围不允许.</p>
<figure data-type="image" tabindex="16"><img src="https://img-blog.csdnimg.cn/20200310104801863.png" alt="在这里插入图片描述" loading="lazy"></figure>
<pre><code>19700101080000
</code></pre>
<p>也不行.</p>
<figure data-type="image" tabindex="17"><img src="https://img-blog.csdnimg.cn/20200310104836434.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>在插入时可以指定默认值,使用now()或CURRENT_TIMESTAMP:</p>
<figure data-type="image" tabindex="18"><img src="https://img-blog.csdnimg.cn/20200309194103501.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>插入后DATETIME与TIMESTAMP存储的形式一致,横杠分隔日期,冒号分隔时间,时间与日期用空格隔开.</p>
<p>也可以使用CURTIME()或CURDATE()插入,对于CURTIME(),日期采用当前日期,对于CURDATE(),时间采用</p>
<pre><code class="language-bash">00:00:00
</code></pre>
<figure data-type="image" tabindex="19"><img src="https://img-blog.csdnimg.cn/20200310105052112.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="20"><img src="https://img-blog.csdnimg.cn/20200310105103360.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="21"><img src="https://img-blog.csdnimg.cn/20200310105115368.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="4-字符串类型">4 字符串类型</h1>
<h2 id="41-charvarchar">4.1 CHAR/VARCHAR</h2>
<table>
<thead>
<tr>
<th>类型</th>
<th>最大长度</th>
<th>特点</th>
</tr>
</thead>
<tbody>
<tr>
<td>CHAR</td>
<td>255个字符</td>
<td>长度固定,CHAR(M)表明CHAR的长度为M个字符,所占用的字节数为字符个数*每个字符所占用字节数,也就是说与字符集有关,定长的效率较高,一般用于存储固定位数的数据或经常需要更新的数据,如电话号码,身份证,MD5值等.保存CHAR时,会在末尾填充空格用于对齐,查询时自动把空格删除</td>
</tr>
<tr>
<td>VARCHAR</td>
<td>65535字节,字符个数为(最大行大小-NULL标识-长度标识)/字符集单字符最大字节数,可以看<a href="https://learn.blog.csdn.net/article/details/103341778">这里</a></td>
<td>长度不固定,实际占用的空间为字符串实际长度+1/2,也就是说需要额外的1或2个字节记录字符串的长度.相对来说VARCHAR比CHAR更节省空间,但是在UPDATE时可能会使行变得更长,需要做额外的工作.VARCHAR适合存储字段更新少,字符串平均长度不稳定的情况</td>
</tr>
</tbody>
</table>
<p>无论是CHAR还是VARCHAR,超过了创建时指定的长度便插入失败:</p>
<figure data-type="image" tabindex="22"><img src="https://img-blog.csdnimg.cn/20200309200811823.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="23"><img src="https://img-blog.csdnimg.cn/20200309200849689.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="42-text">4.2 TEXT</h2>
<p>TEXT是一种专用于存储长文本的变长数据类型,包括TINYTEXT,TEXT,MEDIUMTEXT,LONGTEXT:</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>允许长度(字节)</th>
<th>存储空间</th>
</tr>
</thead>
<tbody>
<tr>
<td>TINYTEXT</td>
<td>[0,255]</td>
<td>长度+2字节</td>
</tr>
<tr>
<td>TEXT</td>
<td>[0,65535]</td>
<td>长度+2字节</td>
</tr>
<tr>
<td>MEDIUMTEXT</td>
<td>0-1677w</td>
<td>长度+3字节</td>
</tr>
<tr>
<td>LONGTEXT</td>
<td>0-42e</td>
<td>长度+4字节</td>
</tr>
</tbody>
</table>
<p>TEXT在插入时超过最大允许长度会插入失败.</p>
<h2 id="43-enum">4.3 ENUM</h2>
<p>枚举类型,在创建表时enum的取值范围以列表的形式指定:</p>
<pre><code class="language-sql">ENUM('value1','value2',...,'valuen')
</code></pre>
<p>ENUM占用1或2个字节,列表中最多能有65535个值,每个值末尾的空格都会被删除,列表中的每个值独有一个顺序排列的编号,MySQL会存入这个编号而不是对应的值.</p>
<figure data-type="image" tabindex="24"><img src="https://img-blog.csdnimg.cn/20200309210144560.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="25"><img src="https://img-blog.csdnimg.cn/20200309210013736.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>等价于</p>
<figure data-type="image" tabindex="26"><img src="https://img-blog.csdnimg.cn/20200309210104709.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>即取值列表的编号从1开始.</p>
<h2 id="44-set">4.4 SET</h2>
<p>SET占用1或2或3或4或8个字节,取决于里面元素的数量,最大数量为64.SET可以是一个或多个元素的组合,值后面多余的空格会被删除,取多个元素时,不同元素用逗号隔开.</p>
<p>如:</p>
<figure data-type="image" tabindex="27"><img src="https://img-blog.csdnimg.cn/20200309220709295.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>插入前:</p>
<figure data-type="image" tabindex="28"><img src="https://img-blog.csdnimg.cn/20200309220642491.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>插入后:</p>
<figure data-type="image" tabindex="29"><img src="https://img-blog.csdnimg.cn/20200309220651250.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="5-二进制类型">5 二进制类型</h1>
<h2 id="51-bit">5.1 BIT</h2>
<p>BIT在创建时指定最大长度:</p>
<pre><code>BIT(M)
</code></pre>
<p>M表示最大二进制数的位数,M取值1-64,默认1,插入数据时,如果数据在BIT允许的范围则插入成功,否则插入失败.</p>
<p>插入时需要加上b前缀,后面跟的字符串由0与1组成:</p>
<figure data-type="image" tabindex="30"><img src="https://img-blog.csdnimg.cn/20200309222955594.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>查询之后就变成了十进制:</p>
<figure data-type="image" tabindex="31"><img src="https://img-blog.csdnimg.cn/20200309223004928.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="52-blob">5.2 BLOB</h2>
<p>BLOB是特殊的二进制数据类型,用来保存数据量很大的二进制数据,如图片等,BLOB包括TINYBLOB,BLOB,MEDIUMBLOB,LONGBLOG,与TEXT类似:</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>允许长度(字节)</th>
<th>存储空间</th>
</tr>
</thead>
<tbody>
<tr>
<td>TINYBLOB</td>
<td>[0,255]</td>
<td>长度+2字节</td>
</tr>
<tr>
<td>BLOB</td>
<td>[0,65535]</td>
<td>长度+2字节</td>
</tr>
<tr>
<td>MEDIUMBLOB</td>
<td>0-1677w</td>
<td>长度+3字节</td>
</tr>
<tr>
<td>LONGBLOB</td>
<td>0-42e</td>
<td>长度+4字节</td>
</tr>
</tbody>
</table>
<h2 id="53-binaryvarbinary">5.3 BINARY/VARBINARY</h2>
<p>BINARY(M)/VARBINARY(M)中的M指的是字节长度,由于BINARY/VARBINARY存储的是二进制字符串,因此没有字符集的概念.</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>最大长度</th>
<th>特点</th>
</tr>
</thead>
<tbody>
<tr>
<td>BINARY</td>
<td>255字节</td>
<td>定长,允许长度0-M的二进制字符串,不足最大长度的空间由0x00补全,查询时不会截断后面的0x00,比较时所有字节都有效</td>
</tr>
<tr>
<td>VARBINARY</td>
<td>65535字节</td>
<td>变长,不会在后面填充0x00.</td>
</tr>
</tbody>
</table>
<p>下面的例子演示了插入时填充0x00:</p>
<figure data-type="image" tabindex="32"><img src="https://img-blog.csdnimg.cn/20200310115610953.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>这里的BINARY为3个字节,插入了a,等价是插入了</p>
<pre><code class="language-sql">a\0\0
</code></pre>
<p>两个\0填充后面两个字节,因此,前面两个比较的结果都为0.</p>
<p>比较时按照二进制值进行比较,这与CHAR/VARCHAR有很大不同.</p>
<figure data-type="image" tabindex="33"><img src="https://img-blog.csdnimg.cn/2020031011452984.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>CHAR/VARCHAR比较的是字符值,忽略后面的空格,因此比较结果为1,但是BINARY比较的是二进制值,'a'的二进制值化为十六进制为61,'a '的二进制值化为十六进制为6120,因此比较结果为0.</p>
<h1 id="6-json类型">6 JSON类型</h1>
<p>JSON存储的数据不能是NULL,只能是JSON格式的数据,否则会报错,</p>
<p>创建很简单,直接为JSON类型:</p>
<figure data-type="image" tabindex="34"><img src="https://img-blog.csdnimg.cn/20200309231111993.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>插入时可以使用一个JSON对象或JSON数组,数组用方括号,一个对象用花括号:</p>
<figure data-type="image" tabindex="35"><img src="https://img-blog.csdnimg.cn/20200309231123689.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>MySQL同时提供了一组操作JSON的函数,具体看<a href="https://dev.mysql.com/doc/refman/8.0/en/json-function-reference.html">这里</a>.</p>
<p>这里演示了json_object函数,用来创建一个JSON对象:</p>
<figure data-type="image" tabindex="36"><img src="https://img-blog.csdnimg.cn/20200310120504269.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>插入后:</p>
<figure data-type="image" tabindex="37"><img src="https://img-blog.csdnimg.cn/20200310120513867.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="7-空间数据类型">7 空间数据类型</h1>
<p>Spatial数据,又叫空间或几何数据,包含的数据类型有</p>
<ul>
<li>GEOMETRY</li>
<li>POINT</li>
<li>LINESTRING</li>
<li>POLYGON</li>
</ul>
<p>其中GEOMETRY可用于存储任意几何类型.其他集合类型的空间数据类型如下:</p>
<ul>
<li>MULTIPOINT</li>
<li>MULTILINESTRING</li>
<li>MULTIPOLYGON</li>
<li>GEOMETRYCOLLECTION</li>
</ul>
<p>其中GEOMETRYCOLLECTION可以存储任意类型的集合.</p>
<p>下面仅对POINT的使用作简单介绍.</p>
<figure data-type="image" tabindex="38"><img src="https://img-blog.csdnimg.cn/20200310004610365.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>插入数据使用st_geomfromtext()函数,参数是一个point(),里面的参数标识x,y坐标,空格分隔.</p>
<p>查询时直接</p>
<pre><code class="language-sql">SELECT * FROM
</code></pre>
<p>会返回BLOB数据,需要使用st_astext(),参数为列名.</p>
<p>增加几行数据后,继续查询:</p>
<figure data-type="image" tabindex="39"><img src="https://img-blog.csdnimg.cn/20200310004919534.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="40"><img src="https://img-blog.csdnimg.cn/20200310005104166.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>使用了st_x()与st_y()两个函数,分别取得point的x,y坐标.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Chrome/Chromium的实验性功能+扩展推荐，让你的Chrome/Chromium起飞!]]></title>
        <id>https://2293736867.github.io/post/chromechromium-de-shi-yan-xing-gong-neng-kuo-zhan-tui-jian-rang-ni-de-chromechromium-qi-fei/</id>
        <link href="https://2293736867.github.io/post/chromechromium-de-shi-yan-xing-gong-neng-kuo-zhan-tui-jian-rang-ni-de-chromechromium-qi-fei/">
        </link>
        <updated>2020-06-02T21:05:18.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#1-%E5%AE%9E%E9%AA%8C%E6%80%A7%E5%8A%9F%E8%83%BD">1 实验性功能</a>
<ul>
<li><a href="#11-%E5%B9%B3%E6%BB%91%E6%BB%9A%E5%8A%A8">1.1 平滑滚动</a></li>
<li><a href="#12-%E6%82%AC%E5%81%9C%E6%A0%87%E7%AD%BE">1.2 悬停标签</a></li>
<li><a href="#14-%E5%B9%B6%E8%A1%8C%E4%B8%8B%E8%BD%BD">1.4 并行下载</a></li>
<li><a href="#15-%E5%BC%BA%E5%88%B6%E9%BB%91%E6%9A%97%E6%A8%A1%E5%BC%8F">1.5 强制黑暗模式</a></li>
<li><a href="#16-%E9%98%85%E8%AF%BB%E6%A8%A1%E5%BC%8F">1.6 阅读模式</a></li>
<li><a href="#17-%E6%89%A9%E5%B1%95%E8%8F%9C%E5%8D%95%E6%A0%8F">1.7 扩展菜单栏</a></li>
<li><a href="#18-%E6%B8%B2%E6%9F%93%E7%BA%A7%E5%88%AB%E6%95%B0%E6%8D%AE%E4%BC%98%E5%8C%96">1.8 渲染级别数据优化</a></li>
</ul>
</li>
<li><a href="#2-%E6%89%A9%E5%B1%95%E6%8E%A8%E8%8D%90">2 扩展推荐</a>
<ul>
<li><a href="#21-adguardublock">2.1 AdGuard/uBlock</a></li>
<li><a href="#22-better-onetab">2.2 better-onetab</a></li>
<li><a href="#23-dark-reader">2.3 Dark Reader</a></li>
<li><a href="#24-extensions-manager">2.4 Extensions Manager</a></li>
<li><a href="#25-imagus">2.5 Imagus</a></li>
<li><a href="#26-infinity-pro">2.6 Infinity Pro</a></li>
<li><a href="#27-minimal-scrollbar">2.7 Minimal Scrollbar</a></li>
<li><a href="#28-similar-sites">2.8 Similar Sites</a></li>
<li><a href="#29-tampermonkey">2.9 Tampermonkey</a></li>
<li><a href="#210-vimuim">2.10 Vimuim</a></li>
</ul>
</li>
<li><a href="#3-%E6%9C%80%E5%90%8E">3 最后</a></li>
</ul>
</p>
<h1 id="1-实验性功能">1 实验性功能</h1>
<p>Chrome/Chromium内置了一些很酷的实验性功能,打开</p>
<pre><code class="language-bash">chrome://flags
</code></pre>
<p>即可访问.打开这些实验性功能后,浏览器的使用体验会更好,这里Chrome的版本为80.0.3987.132,<br>
Chromium的版本为82.0.4080.0,不同的版本中有不同的实验性功能,具体每一项请打开上面的访问地址进行查看.</p>
<h2 id="11-平滑滚动">1.1 平滑滚动</h2>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200308230035381.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="12-悬停标签">1.2 悬停标签</h2>
<p><img src="https://img-blog.csdnimg.cn/20200308230138896.png" alt="在这里插入图片描述" loading="lazy"><br>
鼠标悬停标签显示网址与网页缩略图.</p>
<h2 id="14-并行下载">1.4 并行下载</h2>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200308230326521.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="15-强制黑暗模式">1.5 强制黑暗模式</h2>
<p><img src="https://img-blog.csdnimg.cn/20200308230416164.png" alt="在这里插入图片描述" loading="lazy"><br>
对所有内容使用黑暗模式.</p>
<h2 id="16-阅读模式">1.6 阅读模式</h2>
<p><img src="https://img-blog.csdnimg.cn/20200308231106685.png" alt="在这里插入图片描述" loading="lazy"><br>
开启之后会在某些页面的地址栏的在最右边的收藏五角星符号旁边多一个阅读视图的符号。</p>
<h2 id="17-扩展菜单栏">1.7 扩展菜单栏</h2>
<p><img src="https://img-blog.csdnimg.cn/20200308231407418.png" alt="在这里插入图片描述" loading="lazy"><br>
这样就不用每次都打开&quot;更多工具&quot;了.<br>
<img src="https://img-blog.csdnimg.cn/20200308234541365.png" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="18-渲染级别数据优化">1.8 渲染级别数据优化</h2>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20200308231942914.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="2-扩展推荐">2 扩展推荐</h1>
<p>先来一张图，这是笔者自用的扩展：<br>
<img src="https://img-blog.csdnimg.cn/20200309020220830.png" alt="在这里插入图片描述" loading="lazy"><br>
扩展不在多而在精，原本是有20多个的，然后不断精简，优化，替换，就剩下了13个扩展。</p>
<h2 id="21-adguardublock">2.1 AdGuard/uBlock</h2>
<p>去广告的扩展，原本用的是什么广告终结者，AdBlock，后来就改成了这两个。</p>
<h2 id="22-better-onetab">2.2 better-onetab</h2>
<p>原本用的是onetab，onetab其实做的不错了，只是UI确实比better-onetab差。。。<br>
这个扩展是用于标签管理的，最常见的功能是，需要关闭浏览器，但是目前开了很多个标签，想在下一次打开浏览器时恢复这些标签，但是又不想一个一个加进收藏夹，因为完全没必要而且大部分都是一次性使用，此时better-onetab便派上了用场，单击扩展存储全部标签即可。<br>
<img src="https://img-blog.csdnimg.cn/20200309020837151.png" alt="在这里插入图片描述" loading="lazy"><br>
由于这个可能经常使用，建议打开</p>
<pre><code class="language-bash">chrome://extensions/shortcuts
</code></pre>
<p>增加快捷键。<br>
<img src="https://img-blog.csdnimg.cn/20200309021032966.png" alt="在这里插入图片描述" loading="lazy"><br>
笔者这里加了两个，一个是显示扩展页面的，一个是存储所有标签的。</p>
<h2 id="23-dark-reader">2.3 Dark Reader</h2>
<p>这个嘛，看名字就知道了，黑暗模式，支持一键切换，支持不同站点，也支持亮度，对比度等的调节，非常实用，也建议加上快捷键。<br>
<img src="https://img-blog.csdnimg.cn/2020030902121062.png" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200309021250493.png" alt="在这里插入图片描述" loading="lazy"><br>
比如这里加的快捷键为alt+q，然后按一下就可以切换黑暗/正常模式了。</p>
<h2 id="24-extensions-manager">2.4 Extensions Manager</h2>
<p>扩展管理器，可以管理所有的扩展，一键开启/关闭，同时也支持不同环境下的快速切换扩展，常见的场景是一般浏览使用默认配置，然后开发环境使用另一套扩展，切换非常的简单，首先在设置里添加。<br>
<img src="https://img-blog.csdnimg.cn/20200309021623523.png" alt="在这里插入图片描述" loading="lazy"><br>
然后单击该扩展就可以进行切换了：<br>
<img src="https://img-blog.csdnimg.cn/202003090306061.png" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="25-imagus">2.5 Imagus</h2>
<p>这个扩展主要用于预览图片，鼠标悬停可以放大预览图片，还可以对临时的预览图片进行缩放，旋转等功能。<br>
<img src="https://img-blog.csdnimg.cn/20200309021834577.png" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200309022047462.png" alt="在这里插入图片描述" loading="lazy"><br>
可以打开设置修改默认的快捷键，默认q垂直翻转，w水平翻转，e逆时针旋转，r顺时针旋转，剩下的就不说了，按需要自定义。</p>
<h2 id="26-infinity-pro">2.6 Infinity Pro</h2>
<p>一个非常漂亮的新标签页扩展，建议注册一个账号去开启Pro功能，开启Pro后可以支持文件夹的创建，还可以把数据备份到云端，然后切换浏览器可以一键恢复数据。<br>
<img src="https://img-blog.csdnimg.cn/20200309022517485.png" alt="在这里插入图片描述" loading="lazy"><br>
可以自定义的设置非常丰富，包括布局行列数，行宽，列宽，图标大小，阴影，圆角，透明度，字体大小，阴影，颜色，自定义/随机壁纸，搜索栏显隐等，自行体会。</p>
<h2 id="27-minimal-scrollbar">2.7 Minimal Scrollbar</h2>
<p>最小化滚动条，这个没啥好说的，自己对比一下安装扩展后的变化就好了。</p>
<h2 id="28-similar-sites">2.8 Similar Sites</h2>
<p>可以发现类似的网站，比如，打开csdn时，显示了github，stackoverflow，博客园等网站。<br>
<img src="https://img-blog.csdnimg.cn/20200309023041551.png" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="29-tampermonkey">2.9 Tampermonkey</h2>
<p>这个很出名啊，油猴，有一个类似的，叫暴力猴。油猴这个扩展主要是用来管理脚本的，也就是说，单单安装这个扩展啥用也没有，需要安装脚本，这里推荐这个网站：<a href="https://greasyfork.org/zh-CN">Greasy Fork</a>.<br>
具体就不多说了，有些奥秘需要自己去探个究竟。</p>
<h2 id="210-vimuim">2.10 Vimuim</h2>
<p>这个压轴登场的扩展，是vim与chromium的结合体，换句话说，在浏览器中集成vim的操作。<br>
比如hjkl是最常见的vim操作，对应页面的滚动，分别是左/下/上/右滚，f是页面跳转功能，比如一个页面按f前：<br>
<img src="https://img-blog.csdnimg.cn/20200309024053284.png" alt="在这里插入图片描述" loading="lazy"><br>
按了f后：<br>
<img src="https://img-blog.csdnimg.cn/20200309024116944.png" alt="在这里插入图片描述" loading="lazy"><br>
可以看到多了很多字母对吧，如果此时再输入对应的字母，便会在当前页面跳转到目标页面，比如此时再输入le，便会跳转到“这份Android Studio快捷键大全....”这个页面，大写F实现的功能类似，不过是在新标签页打开。<br>
另一个非常实用的功能是搜索框，按下o/O即可出现：<br>
<img src="https://img-blog.csdnimg.cn/20200309024531165.png" alt="在这里插入图片描述" loading="lazy"><br>
这个框可以直接输入链接跳转，或者输入字符进去搜索，可以在vimuim的设置里设置默认的搜索引擎：<br>
<img src="https://img-blog.csdnimg.cn/20200309024658987.png" alt="在这里插入图片描述" loading="lazy"><br>
这里默认的搜索引擎是百度，下面的设置可以自定义搜索引擎，比如第一行为</p>
<pre><code class="language-bash">g : https://www......
</code></pre>
<p>冒号前面的g表示关键字，后面的搜索关键字用</p>
<pre><code class="language-bash">%s
</code></pre>
<p>代替，然后在搜索框中输入关键字+空格+字符就可以用该关键字对应的搜索引擎进去搜索了。<br>
这里演示一下添加搜索引擎的方法，以github为例，打开github随便搜索123：<br>
<img src="https://img-blog.csdnimg.cn/20200309025131406.png" alt="在这里插入图片描述" loading="lazy"><br>
复制这个地址，加上关键字与替换123：<br>
<img src="https://img-blog.csdnimg.cn/2020030902520092.png" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200309031239662.png" alt="在这里插入图片描述" loading="lazy"><br>
别忘了底部的保存按钮。<br>
<img src="https://img-blog.csdnimg.cn/2020030902522413.png" alt="在这里插入图片描述" loading="lazy"><br>
然后输入关键字+空格+搜索字符进行搜索即可。<br>
<img src="https://img-blog.csdnimg.cn/20200309025308465.png" alt="在这里插入图片描述" loading="lazy"><br>
再说一下书签功能，输入b/B可以直接访问书签（强大吧），比如笔者这里的书签有四个文件夹：<br>
<img src="https://img-blog.csdnimg.cn/20200309025504765.png" alt="在这里插入图片描述" loading="lazy"><br>
输入的标签以斜杠符号开始，后面加对应的文件夹以及对应的网站，这里不用担心输错，因为有自动显示的功能，输错的话下面没有书签显示：<br>
<img src="https://img-blog.csdnimg.cn/20200309025704247.png" alt="在这里插入图片描述" loading="lazy"><br>
还有很多功能就不逐一介绍了，可以输入?查看帮助：<br>
<img src="https://img-blog.csdnimg.cn/2020030902581057.png" alt="在这里插入图片描述" loading="lazy"></p>
<h1 id="3-最后">3 最后</h1>
<p>现在主流的Chrome已经很强大了，加上这些实验性功能与推荐的扩展，希望你们能有一个更舒服的上网冲浪的环境。</p>
]]></content>
    </entry>
</feed>