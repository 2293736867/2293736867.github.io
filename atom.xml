<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://2293736867.github.io</id>
    <title>氷泠&apos;s blog</title>
    <updated>2021-04-13T01:14:16.730Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://2293736867.github.io"/>
    <link rel="self" href="https://2293736867.github.io/atom.xml"/>
    <subtitle>我配不上你，
纵然很努力。</subtitle>
    <logo>https://2293736867.github.io/images/avatar.png</logo>
    <icon>https://2293736867.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 氷泠&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[每日一句 301-350期合集]]></title>
        <id>https://2293736867.github.io/post/mei-ri-yi-ju-301-350-qi-he-ji/</id>
        <link href="https://2293736867.github.io/post/mei-ri-yi-ju-301-350-qi-he-ji/">
        </link>
        <updated>2021-04-13T01:06:05.000Z</updated>
        <content type="html"><![CDATA[<h1 id="第301期">第301期</h1>
<blockquote>
<p>如果最开始我没欺骗你，我们会怎样？</p>
</blockquote>
<h1 id="第302期">第302期</h1>
<blockquote>
<p>我会穿越那七大海洋，去和你相见。</p>
</blockquote>
<h1 id="第303期">第303期</h1>
<blockquote>
<p>踏碎零花，执剑称皇！</p>
</blockquote>
<h1 id="第304期">第304期</h1>
<blockquote></blockquote>
<h1 id="第305期">第305期</h1>
<blockquote></blockquote>
<h1 id="第306期">第306期</h1>
<blockquote></blockquote>
<h1 id="第307期">第307期</h1>
<blockquote></blockquote>
<h1 id="第308期">第308期</h1>
<blockquote></blockquote>
<h1 id="第309期">第309期</h1>
<blockquote></blockquote>
<h1 id="第310期">第310期</h1>
<blockquote></blockquote>
<h1 id="第311期">第311期</h1>
<blockquote></blockquote>
<h1 id="第312期">第312期</h1>
<blockquote></blockquote>
<h1 id="第313期">第313期</h1>
<blockquote></blockquote>
<h1 id="第314期">第314期</h1>
<blockquote></blockquote>
<h1 id="第315期">第315期</h1>
<blockquote></blockquote>
<h1 id="第316期">第316期</h1>
<blockquote></blockquote>
<h1 id="第317期">第317期</h1>
<blockquote></blockquote>
<h1 id="第318期">第318期</h1>
<blockquote></blockquote>
<h1 id="第319期">第319期</h1>
<blockquote></blockquote>
<h1 id="第320期">第320期</h1>
<blockquote></blockquote>
<h1 id="第321期">第321期</h1>
<blockquote></blockquote>
<h1 id="第322期">第322期</h1>
<blockquote></blockquote>
<h1 id="第323期">第323期</h1>
<blockquote></blockquote>
<h1 id="第324期">第324期</h1>
<blockquote></blockquote>
<h1 id="第325期">第325期</h1>
<blockquote></blockquote>
<h1 id="第326期">第326期</h1>
<blockquote></blockquote>
<h1 id="第327期">第327期</h1>
<blockquote></blockquote>
<h1 id="第328期">第328期</h1>
<blockquote></blockquote>
<h1 id="第329期">第329期</h1>
<blockquote></blockquote>
<h1 id="第330期">第330期</h1>
<blockquote></blockquote>
<h1 id="第331期">第331期</h1>
<blockquote></blockquote>
<h1 id="第332期">第332期</h1>
<blockquote></blockquote>
<h1 id="第333期">第333期</h1>
<blockquote></blockquote>
<h1 id="第334期">第334期</h1>
<blockquote></blockquote>
<h1 id="第335期">第335期</h1>
<blockquote></blockquote>
<h1 id="第336期">第336期</h1>
<blockquote></blockquote>
<h1 id="第337期">第337期</h1>
<blockquote></blockquote>
<h1 id="第338期">第338期</h1>
<blockquote></blockquote>
<h1 id="第339期">第339期</h1>
<blockquote></blockquote>
<h1 id="第340期">第340期</h1>
<blockquote></blockquote>
<h1 id="第341期">第341期</h1>
<blockquote></blockquote>
<h1 id="第342期">第342期</h1>
<blockquote></blockquote>
<h1 id="第343期">第343期</h1>
<blockquote></blockquote>
<h1 id="第344期">第344期</h1>
<blockquote></blockquote>
<h1 id="第345期">第345期</h1>
<blockquote></blockquote>
<h1 id="第346期">第346期</h1>
<blockquote></blockquote>
<h1 id="第347期">第347期</h1>
<blockquote></blockquote>
<h1 id="第348期">第348期</h1>
<blockquote></blockquote>
<h1 id="第349期">第349期</h1>
<blockquote></blockquote>
<h1 id="第350期">第350期</h1>
<blockquote></blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第303期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-303-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-303-qi/">
        </link>
        <updated>2021-04-13T00:20:13.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>其实你讨厌的并不是广场舞，而是广场舞大妈。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>霜月定相知，先识春风面。<br>
——辛弃疾《生查子·重叶梅》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>踏碎零花，执剑称皇！</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1618275375531.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>直接暴力（当然更好的方法是中序遍历）：</p>
<pre><code class="language-java">public class Solution {
    private int min = 10_0000;
    public int minDiffInBST(TreeNode root) {
        f(root);
        return min;
    }

    private void f(TreeNode root){
        if(root != null){
            min = Math.min(Math.min(Math.abs(root.val - rightChild(root.left)),Math.abs(root.val - leftChild(root.right))),min);
            f(root.left);
            f(root.right);
        }
    }

    private int rightChild(TreeNode root){
        int temp = 10_0000;
        while(root != null){
            temp = root.val;
            root = root.right;
        }
        return temp;
    }

    private int leftChild(TreeNode root){
        int temp = 10_0000;
        while (root != null){
            temp = root.val;
            root = root.left;
        }
        return temp;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1618275385211.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【2w字干货】ArrayList与LinkedList的区别以及JDK11中的底层实现]]></title>
        <id>https://2293736867.github.io/post/2w-zi-gan-huo-arraylist-yu-linkedlist-de-qu-bie-yi-ji-jdk11-zhong-de-di-ceng-shi-xian/</id>
        <link href="https://2293736867.github.io/post/2w-zi-gan-huo-arraylist-yu-linkedlist-de-qu-bie-yi-ji-jdk11-zhong-de-di-ceng-shi-xian/">
        </link>
        <updated>2021-04-12T08:12:03.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-概述">1 概述</h1>
<p>本文主要讲述了<code>ArrayList</code>与<code>LinkedList</code>的相同以及不同之处，以及两者的底层实现（环境<code>OpenJDK 11.0.10</code>）。</p>
<h1 id="2-两者区别">2 两者区别</h1>
<p>在详细介绍两者的底层实现之前，先来简单看一下两者的异同。</p>
<h2 id="21-相同点">2.1 相同点</h2>
<ul>
<li>两者都实现了<code>List</code>接口，都继承了<code>AbstractList</code>（<code>LinkedList</code>间接继承，<code>ArrayList</code>直接继承）</li>
<li>都是线程不安全的</li>
<li>都具有增删查改方法</li>
</ul>
<h2 id="22-不同点">2.2 不同点</h2>
<ul>
<li>底层数据结构不同：<code>ArrayList</code>基于<code>Object[]</code>数组，<code>LinkedList</code>基于<code>LinkedList.Node</code>双向链表</li>
<li>随机访问效率不同：<code>ArrayList</code>随机访问能做到<code>O(1)</code>，因为可以直接通过下标找到元素，而<code>LinkedList</code>需要从头指针开始遍历，时间<code>O(n)</code></li>
<li>初始化操作不同：<code>ArrayList</code>初始化时需要指定一个初始化容量（默认为10），而<code>LinkedList</code>不需要</li>
<li>扩容：<code>ArrayList</code>当长度不足以容纳新元素的时候，会进行扩容，而<code>LinkedList</code>不会</li>
</ul>
<h1 id="3-arraylist底层">3 <code>ArrayList</code>底层</h1>
<h2 id="31-基本结构">3.1 基本结构</h2>
<p>底层使用<code>Object[]</code>数组实现，成员变量如下：</p>
<pre><code class="language-java">private static final long serialVersionUID = 8683452581122892189L;
private static final int DEFAULT_CAPACITY = 10;
private static final Object[] EMPTY_ELEMENTDATA = new Object[0];
private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = new Object[0];
transient Object[] elementData;
private int size;
private static final int MAX_ARRAY_SIZE = 2147483639;
</code></pre>
<p>默认的初始化容量为10，接下来是两个空数组，供默认构造方法以及带初始化容量的构造方法使用：</p>
<pre><code class="language-java">public ArrayList(int initialCapacity) {
    if (initialCapacity &gt; 0) {
        this.elementData = new Object[initialCapacity];
    } else {
        if (initialCapacity != 0) {
            throw new IllegalArgumentException(&quot;Illegal Capacity: &quot; + initialCapacity);
        }

        this.elementData = EMPTY_ELEMENTDATA;
    }
}

public ArrayList() {
    this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;
}
</code></pre>
<p>下面再来看一些重要方法，包括：</p>
<ul>
<li><code>add()</code></li>
<li><code>remove()</code></li>
<li><code>indexOf()/lastIndexOf()/contains()</code></li>
</ul>
<h2 id="32-add">3.2 <code>add()</code></h2>
<p><code>add()</code>方法有四个：</p>
<ul>
<li><code>add(E e)</code></li>
<li><code>add(int index,E e)</code></li>
<li><code>addAll(Collection&lt;? extends E&gt; c)</code></li>
<li><code>addAll(int index, Collection&lt;? extends E&gt; c</code></li>
</ul>
<h3 id="321-单一元素add">3.2.1 单一元素<code>add()</code></h3>
<p>先来看一下<code>add(E e)</code>以及<code>add(int index,E eelment)</code>：</p>
<pre><code class="language-java">private void add(E e, Object[] elementData, int s) {
    if (s == elementData.length) {
        elementData = this.grow();
    }

    elementData[s] = e;
    this.size = s + 1;
}

public boolean add(E e) {
    ++this.modCount;
    this.add(e, this.elementData, this.size);
    return true;
}

public void add(int index, E element) {
    this.rangeCheckForAdd(index);
    ++this.modCount;
    int s;
    Object[] elementData;
    if ((s = this.size) == (elementData = this.elementData).length) {
        elementData = this.grow();
    }

    System.arraycopy(elementData, index, elementData, index + 1, s - index);
    elementData[index] = element;
    this.size = s + 1;
}
</code></pre>
<p><code>add(E e)</code>实际调用的是一个私有方法，判断是否需要扩容之后，直接添加到末尾。而<code>add(int index,E element)</code>会首先检查下标是否合法，合法的话，再判断是否需要扩容，之后调用<code>System.arraycopy</code>对数组进行复制，最后进行赋值并将长度加1。</p>
<p>关于<code>System.arraycopy</code>，官方文档如下：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20210411101015909.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>一共有5个参数：</p>
<ul>
<li>第一个参数：原数组</li>
<li>第二个参数：原数组需要开始复制的位置</li>
<li>第三个参数：目标数组</li>
<li>第四个参数：复制到目标数组的开始位置</li>
<li>第五个参数：需要复制的数目</li>
</ul>
<p>也就是说：</p>
<pre><code class="language-java">System.arraycopy(elementData, index, elementData, index + 1, s - index);
</code></pre>
<p>的作用是将原数组在<code>index</code>后面的元素“往后挪”，空出一个位置让<code>index</code>进行插入。</p>
<h3 id="322-addall">3.2.2 <code>addAll()</code></h3>
<p>下面来看一下两个<code>addAll()</code>：</p>
<pre><code class="language-java">public boolean addAll(Collection&lt;? extends E&gt; c) {
    Object[] a = c.toArray();
    ++this.modCount;
    int numNew = a.length;
    if (numNew == 0) {
        return false;
    } else {
        Object[] elementData;
        int s;
        if (numNew &gt; (elementData = this.elementData).length - (s = this.size)) {
            elementData = this.grow(s + numNew);
        }

        System.arraycopy(a, 0, elementData, s, numNew);
        this.size = s + numNew;
        return true;
    }
}

public boolean addAll(int index, Collection&lt;? extends E&gt; c) {
    this.rangeCheckForAdd(index);
    Object[] a = c.toArray();
    ++this.modCount;
    int numNew = a.length;
    if (numNew == 0) {
        return false;
    } else {
        Object[] elementData;
        int s;
        if (numNew &gt; (elementData = this.elementData).length - (s = this.size)) {
            elementData = this.grow(s + numNew);
        }

        int numMoved = s - index;
        if (numMoved &gt; 0) {
            System.arraycopy(elementData, index, elementData, index + numNew, numMoved);
        }

        System.arraycopy(a, 0, elementData, index, numNew);
        this.size = s + numNew;
        return true;
    }
}
</code></pre>
<p>在第一个<code>addAll</code>中，首先判断是否需要扩容，接着也是直接调用目标集合添加到尾部。而在第二个<code>addAll</code>中，由于多了一个下标参数，处理步骤稍微多了一点：</p>
<ul>
<li>首先判断下标是否合法</li>
<li>接着判断是否需要扩容</li>
<li>再计算是否需要把原来的数组元素“往后挪”，也就是<code>if</code>里面的<code>System.arraycopy</code></li>
<li>最后把目标数组复制到指定的<code>index</code>位置</li>
</ul>
<h3 id="323-扩容">3.2.3 扩容</h3>
<p>上面的<code>add()</code>方法都涉及到了扩容，也就是<code>grow</code>方法，下面来看一下：</p>
<pre><code class="language-java">private Object[] grow(int minCapacity) {
    return this.elementData = Arrays.copyOf(this.elementData, this.newCapacity(minCapacity));
}

private Object[] grow() {
    return this.grow(this.size + 1);
}

private int newCapacity(int minCapacity) {
    int oldCapacity = this.elementData.length;
    int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);
    if (newCapacity - minCapacity &lt;= 0) {
        if (this.elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {
            return Math.max(10, minCapacity);
        } else if (minCapacity &lt; 0) {
            throw new OutOfMemoryError();
        } else {
            return minCapacity;
        }
    } else {
        return newCapacity - 2147483639 &lt;= 0 ? newCapacity : hugeCapacity(minCapacity);
    }
}

private static int hugeCapacity(int minCapacity) {
    if (minCapacity &lt; 0) {
        throw new OutOfMemoryError();
    } else {
        return minCapacity &gt; 2147483639 ? 2147483647 : 2147483639;
    }
}
</code></pre>
<p><code>grow()</code>首先通过<code>newCapacity</code>计算需要扩容的容量，接着调用<code>Arrays.copyOf</code>将旧元素复制过去，并将返回值覆盖到原来的数组。而在<code>newCapacity</code>中，有两个变量：</p>
<ul>
<li><code>newCapacity</code>：新的容量，默认是旧容量的1.5倍，也就是默认扩容1.5倍</li>
<li><code>minCapacity</code>：最低需要的容量</li>
</ul>
<p>如果最低容量大于等于新容量，则是如下情况之一：</p>
<ul>
<li>通过默认构造初始化的数组：返回<code>minCapacity</code>与10的最大值</li>
<li>溢出：直接抛<code>OOM</code></li>
<li>否则返回最小容量值</li>
</ul>
<p>如果不是，则判断新容量是否达到最大值（这里有点好奇为什么不用<code>MAX_ARRAY_SIZE</code>，猜测是反编译的问题），如果没有到达最大值，则返回新容量，如果到达了最大值，调用<code>hugeCapacity</code>。</p>
<p><code>hugeCapacity</code>同样会首先判断最小容量是否小于0，小于则抛<code>OOM</code>，否则将其与最大值（<code>MAX_ARRAY_SIZE</code>）判断，如果大于返回<code>Integer.MAX_VALUE</code>，否则返回<code>MAX_ARRAY_SIZE</code>。</p>
<h2 id="33-remove">3.3 <code>remove()</code></h2>
<p><code>remove()</code>包含四个方法：</p>
<ul>
<li><code>remove(int index)</code></li>
<li><code>remove(Object o)</code></li>
<li><code>removeAll()</code></li>
<li><code>removeIf()</code></li>
</ul>
<h3 id="331-单一元素remove">3.3.1 单一元素<code>remove()</code></h3>
<p>也就是<code>remove(int index)</code>以及<code>remove(Object o)</code>：</p>
<pre><code class="language-java">public E remove(int index) {
    Objects.checkIndex(index, this.size);
    Object[] es = this.elementData;
    E oldValue = es[index];
    this.fastRemove(es, index);
    return oldValue;
}

public boolean remove(Object o) {
    Object[] es = this.elementData;
    int size = this.size;
    int i = 0;
    if (o == null) {
        while(true) {
            if (i &gt;= size) {
                return false;
            }

            if (es[i] == null) {
                break;
            }

            ++i;
        }
    } else {
        while(true) {
            if (i &gt;= size) {
                return false;
            }

            if (o.equals(es[i])) {
                break;
            }

            ++i;
        }
    }

    this.fastRemove(es, i);
    return true;
}
</code></pre>
<p>其中<code>remove(int index)</code>的逻辑比较简单，先检查下标合法性，然后保存需要<code>remove</code>的值，并调用<code>fastRemove()</code>进行移除，而在<code>remove(Object o)</code>中，直接对数组进行遍历，并判断是否存在对应的元素，如果不存在直接返回<code>false</code>，如果存在，调用<code>fastRemove()</code>，并返回<code>true</code>。</p>
<p>下面看一下<code>fastRemove()</code>：</p>
<pre><code class="language-java">private void fastRemove(Object[] es, int i) {
    ++this.modCount;
    int newSize;
    if ((newSize = this.size - 1) &gt; i) {
        System.arraycopy(es, i + 1, es, i, newSize - i);
    }

    es[this.size = newSize] = null;
}
</code></pre>
<p>首先修改次数加1，然后将数组长度减1，并判断新长度是否是最后一个，如果是最后一个则不需要移动，如果不是，调用<code>System.arraycopy</code>将数组向前“挪”1位，最后将末尾多出来的一个值置为<code>null</code>。</p>
<h3 id="332-removeall">3.3.2 <code>removeAll()</code></h3>
<pre><code class="language-java">public boolean removeAll(Collection&lt;?&gt; c) {
    return this.batchRemove(c, false, 0, this.size);
}

boolean batchRemove(Collection&lt;?&gt; c, boolean complement, int from, int end) {
    Objects.requireNonNull(c);
    Object[] es = this.elementData;

    for(int r = from; r != end; ++r) {
        if (c.contains(es[r]) != complement) {
            int w = r++;

            try {
                for(; r &lt; end; ++r) {
                    Object e;
                    if (c.contains(e = es[r]) == complement) {
                        es[w++] = e;
                    }
                }
            } catch (Throwable var12) {
                System.arraycopy(es, r, es, w, end - r);
                w += end - r;
                throw var12;
            } finally {
                this.modCount += end - w;
                this.shiftTailOverGap(es, w, end);
            }

            return true;
        }
    }

    return false;
}
</code></pre>
<p><code>removeAll</code>实际上调用的是<code>batchRemove()</code>，在<code>batchRemove()</code>中，有四个参数，含义如下：</p>
<ul>
<li><code>Collection&lt;?&gt; c</code>：目标集合</li>
<li><code>boolean complement</code>：如果取值<code>true</code>，表示保留数组中包含在目标集合<code>c</code>中的元素，如果为<code>false</code>，表示删除数组中包含在目标集合<code>c</code>中的元素</li>
<li><code>from/end</code>：区间范围，左闭右开</li>
</ul>
<p>所以传递的<code>(c,false,0,this.size)</code>表示删除数组里面在目标集合<code>c</code>中的元素。下面简单说一下执行步骤：</p>
<ul>
<li>首先进行判空操作</li>
<li>接着找到第一符合要求的元素（这里是找到第一个需要删除的元素）</li>
<li>找到后从该元素开始继续向后查找，同时记录删除后的数组中最后一个元素的下标<code>w</code></li>
<li><code>try/catch</code>是一种保护性行为，因为<code>contains()</code>在<code>AbstractCollection</code>的实现中，会使用<code>Iterator</code>，这里<code>catch</code>异常后仍然调用<code>System.arraycopy</code>，使得已经处理的元素“挪到”前面</li>
<li>最后会增加修改的次数，并调用<code>shiftTailOverGap</code>，该方法在后面会详解</li>
</ul>
<h3 id="333-removeif">3.3.3 <code>removeIf()</code></h3>
<pre><code class="language-java">public boolean removeIf(Predicate&lt;? super E&gt; filter) {
    return this.removeIf(filter, 0, this.size);
}

boolean removeIf(Predicate&lt;? super E&gt; filter, int i, int end) {
    Objects.requireNonNull(filter);
    int expectedModCount = this.modCount;

    Object[] es;
    for(es = this.elementData; i &lt; end &amp;&amp; !filter.test(elementAt(es, i)); ++i) {
    }

    if (i &lt; end) {
        int beg = i;
        long[] deathRow = nBits(end - i);
        deathRow[0] = 1L;
        ++i;

        for(; i &lt; end; ++i) {
            if (filter.test(elementAt(es, i))) {
                setBit(deathRow, i - beg);
            }
        }

        if (this.modCount != expectedModCount) {
            throw new ConcurrentModificationException();
        } else {
            ++this.modCount;
            int w = beg;

            for(i = beg; i &lt; end; ++i) {
                if (isClear(deathRow, i - beg)) {
                    es[w++] = es[i];
                }
            }

            this.shiftTailOverGap(es, w, end);
            return true;
        }
    } else if (this.modCount != expectedModCount) {
        throw new ConcurrentModificationException();
    } else {
        return false;
    }
}
</code></pre>
<p>在<code>removeIf</code>中，删除符合条件的元素，首先会进行判空操作，然后找到第一个符合条件的元素下标，如果找不到（<code>i&gt;=end</code>），判断是否有并发操作问题，没有的话返回<code>false</code>，如果<code>i&lt;end</code>，也就是正式进入删除流程：</p>
<ul>
<li>记录开始下标<code>beg</code></li>
<li><code>deathRow</code>是一个标记数组，长度为<code>(end-i-1)&gt;&gt;6 + 1</code>，从<code>beg</code>开始如果遇到符合条件的元素就对下标进行标记（调用<code>setBit</code>）</li>
<li>标记后进行删除，所谓的删除其实就是把后面不符合条件的元素逐个移动到<code>beg</code>之后的位置上</li>
<li>调用<code>shiftTailOverGap</code>处理末尾的元素</li>
<li>返回<code>true</code>，表示存在符合条件的元素并进行了删除操作</li>
</ul>
<h3 id="334-shifttailovergap">3.3.4 <code>shiftTailOverGap()</code></h3>
<p>上面的<code>removeAll()</code>以及<code>removeIf()</code>都涉及到了<code>shiftTailOverGap()</code>，下面来看一下实现：</p>
<pre><code class="language-java">private void shiftTailOverGap(Object[] es, int lo, int hi) {
    System.arraycopy(es, hi, es, lo, this.size - hi);
    int to = this.size;

    for(int i = this.size -= hi - lo; i &lt; to; ++i) {
        es[i] = null;
    }

}
</code></pre>
<p>该方法将<code>es</code>数组中的元素向前移动<code>hi-lo</code>位，并将移动之后的在末尾多出来的那部分元素置为<code>null</code>。</p>
<h2 id="34-indexof系列">3.4 <code>indexOf()</code>系列</h2>
<p>包括：</p>
<ul>
<li><code>indexOf()</code></li>
<li><code>lastIndexOf()</code></li>
<li><code>contains()</code></li>
</ul>
<h3 id="341-indexof">3.4.1 <code>indexOf</code></h3>
<pre><code class="language-java">public int indexOf(Object o) {
    return this.indexOfRange(o, 0, this.size);
}

int indexOfRange(Object o, int start, int end) {
    Object[] es = this.elementData;
    int i;
    if (o == null) {
        for(i = start; i &lt; end; ++i) {
            if (es[i] == null) {
                return i;
            }
        }
    } else {
        for(i = start; i &lt; end; ++i) {
            if (o.equals(es[i])) {
                return i;
            }
        }
    }

    return -1;
}
</code></pre>
<p><code>indexOf()</code>实际上是一个包装好的方法，会调用内部的<code>indexOfRange()</code>进行查找，逻辑很简单，首先判断需要查找的值是否为空，如果不为空，使用<code>equals()</code>判断，否则使用<code>==</code>判断，找到就返回下标，否则返回<code>-1</code>。</p>
<h3 id="342-contains">3.4.2 <code>contains()</code></h3>
<p><code>contains()</code>实际上是<code>indexOf()</code>的包装：</p>
<pre><code class="language-java">public boolean contains(Object o) {
    return this.indexOf(o) &gt;= 0;
}
</code></pre>
<p>调用<code>indexOf()</code>方法，根据返回的下标判断是否大于等于0，如果是则返回存在，否则返回不存在。</p>
<h3 id="343-lastindexof">3.4.3 <code>lastIndexOf()</code></h3>
<p><code>lastIndexOf()</code>实现与<code>indexOf()</code>类似，只不过是从尾部开始遍历，内部调用的是<code>lastIndexOfRange()</code>：</p>
<pre><code class="language-java">public int lastIndexOf(Object o) {
    return this.lastIndexOfRange(o, 0, this.size);
}

int lastIndexOfRange(Object o, int start, int end) {
    Object[] es = this.elementData;
    int i;
    if (o == null) {
        for(i = end - 1; i &gt;= start; --i) {
            if (es[i] == null) {
                return i;
            }
        }
    } else {
        for(i = end - 1; i &gt;= start; --i) {
            if (o.equals(es[i])) {
                return i;
            }
        }
    }

    return -1;
}
</code></pre>
<h1 id="4-linkedlist底层">4 <code>LinkedList</code>底层</h1>
<h2 id="41-基本结构">4.1 基本结构</h2>
<p>首先来看一下里面的成员变量：</p>
<pre><code class="language-java">transient int size;
transient LinkedList.Node&lt;E&gt; first;
transient LinkedList.Node&lt;E&gt; last;
private static final long serialVersionUID = 876323262645176354L;
</code></pre>
<p>一个表示长度，一个头指针和一个尾指针。</p>
<p>其中<code>LinkedList.Node</code>实现如下：</p>
<pre><code class="language-java">private static class Node&lt;E&gt; {
    E item;
    LinkedList.Node&lt;E&gt; next;
    LinkedList.Node&lt;E&gt; prev;

    Node(LinkedList.Node&lt;E&gt; prev, E element, LinkedList.Node&lt;E&gt; next) {
        this.item = element;
        this.next = next;
        this.prev = prev;
    }
}
</code></pre>
<p>可以看到<code>LinkedList</code>实际是基于双链表实现的。</p>
<p>下面再来看一些重要方法，包括：</p>
<ul>
<li><code>add()</code></li>
<li><code>remove()</code></li>
<li><code>get()</code></li>
</ul>
<h2 id="42-add">4.2 <code>add()</code></h2>
<p><code>add()</code>方法包括6个：</p>
<ul>
<li><code>add(E e)</code></li>
<li><code>add(int index,E e)</code></li>
<li><code>addFirst(E e)</code></li>
<li><code>addLast(E e)</code></li>
<li><code>addAll(Collection&lt;? extends E&gt; c)</code></li>
<li><code>addAll(int index, Collection&lt;? extends E&gt; c)</code></li>
</ul>
<h3 id="421-linkfirstlinklastlinkbefore实现的add">4.2.1 <code>linkFirst</code>/<code>linkLast</code>/<code>linkBefore</code>实现的<code>add()</code></h3>
<p>先看一下比较简单的四个<code>add()</code>：</p>
<pre><code class="language-java">public void addFirst(E e) {
    this.linkFirst(e);
}

public void addLast(E e) {
    this.linkLast(e);
}

public boolean add(E e) {
    this.linkLast(e);
    return true;
}

public void add(int index, E element) {
    this.checkPositionIndex(index);
    if (index == this.size) {
        this.linkLast(element);
    } else {
        this.linkBefore(element, this.node(index));
    }
}
</code></pre>
<p>可以看到，上面的四个<code>add()</code>不进行任何的添加元素操作，<code>add()</code>只是添加元素的封装，真正实现<code>add</code>操作的是<code>linkLast()</code>、<code>linkFirst()</code>和<code>linkBefore()</code>，这些方法顾名思义就是把元素链接到链表的末尾或者头部，或者链表某个节点的前面：</p>
<pre><code class="language-java">void linkLast(E e) {
    LinkedList.Node&lt;E&gt; l = this.last;
    LinkedList.Node&lt;E&gt; newNode = new LinkedList.Node(l, e, (LinkedList.Node)null);
    this.last = newNode;
    if (l == null) {
        this.first = newNode;
    } else {
        l.next = newNode;
    }

    ++this.size;
    ++this.modCount;
}

private void linkFirst(E e) {
    LinkedList.Node&lt;E&gt; f = this.first;
    LinkedList.Node&lt;E&gt; newNode = new LinkedList.Node((LinkedList.Node)null, e, f);
    this.first = newNode;
    if (f == null) {
        this.last = newNode;
    } else {
        f.prev = newNode;
    }

    ++this.size;
    ++this.modCount;
}

void linkBefore(E e, LinkedList.Node&lt;E&gt; succ) {
    LinkedList.Node&lt;E&gt; pred = succ.prev;
    LinkedList.Node&lt;E&gt; newNode = new LinkedList.Node(pred, e, succ);
    succ.prev = newNode;
    if (pred == null) {
        this.first = newNode;
    } else {
        pred.next = newNode;
    }

    ++this.size;
    ++this.modCount;
}
</code></pre>
<p>实现大体相同，一个是添加到尾部，一个是添加头部，一个是插入到前面。另外，三者在方法的最后都有如下操作：</p>
<pre><code class="language-java">++this.size;
++this.modCount;
</code></pre>
<p>第一个表示节点的个数加1，而第二个，则表示对链表的修改次数加1。</p>
<p>比如，在<code>unlinkLast</code>方法的最后，有如下代码：</p>
<pre><code class="language-java">--this.size;
++this.modCount;
</code></pre>
<p><code>unlinkLast</code>操作就是移除最后一个节点，节点个数减1的同时，对链表的修改次数加1。</p>
<p>另一方面，通常来说链表插入操作需要找到链表的位置，但是在三个<code>link</code>方法里面，都看不到<code>for</code>循环找到插入位置的代码，这是为什么呢？</p>
<p>由于保存了头尾指针，<code>linkFirst()</code>以及<code>linkLast()</code>并不需要遍历找到插入的位置，但是对于<code>linkBefore()</code>来说，需要找到插入的位置，不过<code>linkBefore()</code>并没有类似“插入位置/插入下标”之类的参数，而是只有一个元素值以及一个后继节点。换句话说，这个后继节点就是通过循环得到的插入位置，比如，调用的代码如下：</p>
<pre><code class="language-java">this.linkBefore(element, this.node(index));
</code></pre>
<p>可以看到在<code>this.node()</code>中，传入了一个下标，并返回了一个后继节点，也就是遍历操作在该方法完成：</p>
<pre><code class="language-java">LinkedList.Node&lt;E&gt; node(int index) {
    LinkedList.Node x;
    int i;
    if (index &lt; this.size &gt;&gt; 1) {
        x = this.first;

        for(i = 0; i &lt; index; ++i) {
            x = x.next;
        }

        return x;
    } else {
        x = this.last;

        for(i = this.size - 1; i &gt; index; --i) {
            x = x.prev;
        }

        return x;
    }
}
</code></pre>
<p>这里首先通过判断下标是位于“哪一边”，如果靠近头部，从头指针开始往后遍历，如果靠近尾部，从尾指针开始向后遍历。</p>
<h3 id="422-遍历实现的addall">4.2.2 遍历实现的<code>addAll()</code></h3>
<pre><code class="language-java">public boolean addAll(Collection&lt;? extends E&gt; c) {
    return this.addAll(this.size, c);
}

public boolean addAll(int index, Collection&lt;? extends E&gt; c) {
    this.checkPositionIndex(index);
    Object[] a = c.toArray();
    int numNew = a.length;
    if (numNew == 0) {
        return false;
    } else {
        LinkedList.Node pred;
        LinkedList.Node succ;
        if (index == this.size) {
            succ = null;
            pred = this.last;
        } else {
            succ = this.node(index);
            pred = succ.prev;
        }

        Object[] var7 = a;
        int var8 = a.length;

        for(int var9 = 0; var9 &lt; var8; ++var9) {
            Object o = var7[var9];
            LinkedList.Node&lt;E&gt; newNode = new LinkedList.Node(pred, o, (LinkedList.Node)null);
            if (pred == null) {
                this.first = newNode;
            } else {
                pred.next = newNode;
            }

            pred = newNode;
        }

        if (succ == null) {
            this.last = pred;
        } else {
            pred.next = succ;
            succ.prev = pred;
        }

        this.size += numNew;
        ++this.modCount;
        return true;
    }
}
</code></pre>
<p>首先可以看到两个<code>addAll</code>实际上调用的是同一个方法，步骤简述如下：</p>
<ul>
<li>首先通过<code>checkPositionIndex</code>判断下标是否合法</li>
<li>接着把目标集合转为<code>Object[]</code>数组</li>
<li>进行一些特判处理，判断<code>index</code>的范围是插入中间，还是在末尾插入</li>
<li><code>for</code>循环遍历目标数组，并插入到链表中</li>
<li>修改节点长度，并返回</li>
</ul>
<h2 id="43-remove">4.3 <code>remove()</code></h2>
<p>与<code>add()</code>类似，<code>remove</code>包括：</p>
<ul>
<li><code>remove()</code></li>
<li><code>remove(int index)</code></li>
<li><code>remove(Object o)</code></li>
<li><code>removeFirst()</code></li>
<li><code>removeLast()</code></li>
<li><code>removeFirstOccurrence(Object o)</code></li>
<li><code>removeLastOccurrence(Object o)</code></li>
</ul>
<p>当然其实还有两个<code>removeAll</code>与<code>removeIf</code>，但实际上是父类的方法，这里就不分析了。</p>
<h3 id="431-unlinkfirstunlinklast实现的remove">4.3.1 <code>unlinkFirst()</code>/<code>unlinkLast()</code>实现的<code>remove()</code></h3>
<p><code>remove()</code>、<code>removeFirst()</code>、<code>removeLast()</code>实际上是通过调用<code>unlinkFirst()</code>/<code>unlinkLast()</code>进行删除的，其中<code>remove()</code>只是<code>removeFirst()</code>的一个别名：</p>
<pre><code class="language-java">public E remove() {
    return this.removeFirst();
}

public E removeFirst() {
    LinkedList.Node&lt;E&gt; f = this.first;
    if (f == null) {
        throw new NoSuchElementException();
    } else {
        return this.unlinkFirst(f);
    }
}

public E removeLast() {
    LinkedList.Node&lt;E&gt; l = this.last;
    if (l == null) {
        throw new NoSuchElementException();
    } else {
        return this.unlinkLast(l);
    }
}
</code></pre>
<p>逻辑很简单，判空之后，调用<code>unlinkFirst()</code>/<code>unlinkLast()</code>：</p>
<pre><code class="language-java">private E unlinkFirst(LinkedList.Node&lt;E&gt; f) {
    E element = f.item;
    LinkedList.Node&lt;E&gt; next = f.next;
    f.item = null;
    f.next = null;
    this.first = next;
    if (next == null) {
        this.last = null;
    } else {
        next.prev = null;
    }

    --this.size;
    ++this.modCount;
    return element;
}

private E unlinkLast(LinkedList.Node&lt;E&gt; l) {
    E element = l.item;
    LinkedList.Node&lt;E&gt; prev = l.prev;
    l.item = null;
    l.prev = null;
    this.last = prev;
    if (prev == null) {
        this.first = null;
    } else {
        prev.next = null;
    }

    --this.size;
    ++this.modCount;
    return element;
}
</code></pre>
<p>而在这两个<code>unlink</code>中，由于已经保存了头指针和尾指针的位置，因此两者可以直接在<code>O(1)</code>内进行移除操作，最后将节点长度减1，修改次数加1，并返回旧元素。</p>
<h3 id="432-unlink实现的remove">4.3.2 <code>unlink()</code>实现的<code>remove()</code></h3>
<p>再来看一下<code>remove(int index)</code>、<code>remove(Object o)</code>、<code>removeFirstOccurrence(Object o)</code>、<code>removeLastOccurrence(Object o)</code>：</p>
<pre><code class="language-java">public E remove(int index) {
    this.checkElementIndex(index);
    return this.unlink(this.node(index));
}

public boolean remove(Object o) {
    LinkedList.Node x;
    if (o == null) {
        for(x = this.first; x != null; x = x.next) {
            if (x.item == null) {
                this.unlink(x);
                return true;
            }
        }
    } else {
        for(x = this.first; x != null; x = x.next) {
            if (o.equals(x.item)) {
                this.unlink(x);
                return true;
            }
        }
    }

    return false;
}

public boolean removeFirstOccurrence(Object o) {
    return this.remove(o);
}

public boolean removeLastOccurrence(Object o) {
    LinkedList.Node x;
    if (o == null) {
        for(x = this.last; x != null; x = x.prev) {
            if (x.item == null) {
                this.unlink(x);
                return true;
            }
        }
    } else {
        for(x = this.last; x != null; x = x.prev) {
            if (o.equals(x.item)) {
                this.unlink(x);
                return true;
            }
        }
    }

    return false;
}
</code></pre>
<p>这几个方法实际上都是调用<code>unlink</code>去移除元素，其中<code>removeFirstOccurrence(Object o)</code>等价于<code>remove(Object o)</code>，先说一下<code>remove(int index)</code>，该方法逻辑比较简单，先检查下标合法性，再通过下标找到节点并进行<code>unlnk</code>。</p>
<p>而在<code>remove(Object o)</code>中，需要首先对元素的值是否为<code>null</code>进行判断，两个循环实际上效果等价，会移除遇到的第一个与目标值相同的元素。在<code>removeLastOccurrence(Object o)</code>中，代码大体一致，只是<code>remove(Object o)</code>从头指针开始遍历，而<code>removeLastOccurrence(Object o)</code>从尾指针开始遍历。</p>
<p>可以看到，这几个<code>remove</code>方法实际上是找到要删除的节点，最后调用<code>unlink()</code>进行删除，下面看一下<code>unlink()</code>：</p>
<pre><code class="language-java">E unlink(LinkedList.Node&lt;E&gt; x) {
    E element = x.item;
    LinkedList.Node&lt;E&gt; next = x.next;
    LinkedList.Node&lt;E&gt; prev = x.prev;
    if (prev == null) {
        this.first = next;
    } else {
        prev.next = next;
        x.prev = null;
    }

    if (next == null) {
        this.last = prev;
    } else {
        next.prev = prev;
        x.next = null;
    }

    x.item = null;
    --this.size;
    ++this.modCount;
    return element;
}
</code></pre>
<p>实现逻辑与<code>unlinkFirst()</code>/<code>unlinkLast()</code>类似，在<code>O(1)</code>内进行删除，里面只是一些比较简单的特判操作，最后将节点长度减1，并将修改次数加1，最后返回旧值。</p>
<h2 id="44-get">4.4 <code>get()</code></h2>
<p><code>get</code>方法比较简单，对外提供了三个：</p>
<ul>
<li><code>get(int index)</code></li>
<li><code>getFirst()</code></li>
<li><code>getLast()</code></li>
</ul>
<p>其中<code>getFirst()</code>以及<code>getLast()</code>由于保存了头尾指针，特判后，直接<code>O(1)</code>返回：</p>
<pre><code class="language-java">public E getFirst() {
    LinkedList.Node&lt;E&gt; f = this.first;
    if (f == null) {
        throw new NoSuchElementException();
    } else {
        return f.item;
    }
}

public E getLast() {
    LinkedList.Node&lt;E&gt; l = this.last;
    if (l == null) {
        throw new NoSuchElementException();
    } else {
        return l.item;
    }
}
</code></pre>
<p>而<code>get(int index)</code>毫无疑问需要<code>O(n)</code>时间：</p>
<pre><code class="language-java">public E get(int index) {
    this.checkElementIndex(index);
    return this.node(index).item;
}
</code></pre>
<p><code>get(int index)</code>判断下标后，实际上进行操作的是<code>this.node()</code>，由于该方法是通过下标找到对应的节点，源码前面也写上了，这里就不分析了，需要<code>O(n)</code>的时间。</p>
<h1 id="5-总结">5 总结</h1>
<ul>
<li><code>ArrayList</code>基于<code>Object[]</code>实现，<code>LinkedList</code>基于双链表实现</li>
<li><code>ArrayList</code>随机访问效率要高于<code>LinkedList</code></li>
<li><code>LinkedList</code>提供了比<code>ArrayList</code>更多的插入方法，而且头尾插入效率要高于<code>ArrayList</code></li>
<li>两者的删除元素方法并不完全相同，<code>ArrayList</code>提供了独有的<code>removeIf()</code>，而<code>LinkedList</code>提供了独有的<code>removeFirstOccurrence()</code>以及<code>removeLastOccurrence()</code></li>
<li><code>ArrayList</code>的<code>get()</code>方法始终为<code>O(1)</code>，而<code>LinkedList</code>只有<code>getFirst()</code>/<code>getLast()</code>为<code>O(1)</code></li>
<li><code>ArrayList</code>中的两个核心方法是<code>grow()</code>以及<code>System.arraycopy</code>，前者是扩容方法，默认为1.5倍扩容，后者是复制数组方法，是一个<code>native</code>方法，插入、删除等等操作都需要使用</li>
<li><code>LinkedList</code>中很多方法需要对头尾进行特判，创建比<code>ArrayList</code>简单，无须初始化，不涉及扩容问题</li>
</ul>
<h1 id="6-附录关于插入与删除的一个实验">6 附录：关于插入与删除的一个实验</h1>
<p>关于插入与删除，通常认为<code>LinkedList</code>的效率要比<code>ArrayList</code>高，但实际上并不是这样，下面是一个测试插入与删除时间的小实验。</p>
<p>相关说明：</p>
<ul>
<li>测试次数：1000次</li>
<li>数组长度：4000、40w、4000w</li>
<li>测试数组：随机生成</li>
<li>插入与删除下标：随机生成</li>
<li>结果值：插入与删除1000次的平均时间</li>
</ul>
<p>代码：</p>
<pre><code class="language-java">import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class Main {
    public static void main(String[] args){
        int len = 40_0000;
        Random random = new Random();
        List&lt;Integer&gt; list = Stream.generate(random::nextInt).limit(len).collect(Collectors.toList());
        LinkedList&lt;Integer&gt; linkedList = new LinkedList&lt;&gt;(list);
        ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;(list);

        long start;
        long end;

        double linkedListTotalInsertTime = 0.0;
        double arrayListTotalInsertTime = 0.0;

        int testTimes = 1000;
        for (int i = 0; i &lt; testTimes; i++) {
            int index = random.nextInt(len);
            int element = random.nextInt();
            start = System.nanoTime();
            linkedList.add(index,element);
            end = System.nanoTime();
            linkedListTotalInsertTime += (end-start);

            start = System.nanoTime();
            arrayList.add(index,element);
            end = System.nanoTime();
            arrayListTotalInsertTime += (end-start);
        }
        System.out.println(&quot;LinkedList average insert time:&quot;+linkedListTotalInsertTime/testTimes+&quot; ns&quot;);
        System.out.println(&quot;ArrayList average insert time:&quot;+arrayListTotalInsertTime/testTimes + &quot; ns&quot;);

        linkedListTotalInsertTime = arrayListTotalInsertTime = 0.0;

        for (int i = 0; i &lt; testTimes; i++) {
            int index = random.nextInt(len);
            start = System.nanoTime();
            linkedList.remove(index);
            end = System.nanoTime();
            linkedListTotalInsertTime += (end-start);

            start = System.nanoTime();
            arrayList.remove(index);
            end = System.nanoTime();
            arrayListTotalInsertTime += (end-start);
        }
        System.out.println(&quot;LinkedList average delete time:&quot;+linkedListTotalInsertTime/testTimes+&quot; ns&quot;);
        System.out.println(&quot;ArrayList average delete time:&quot;+arrayListTotalInsertTime/testTimes + &quot; ns&quot;);
    }
}
</code></pre>
<p>在数组长度为<code>4000</code>的时候，输出如下：</p>
<pre><code class="language-bash">LinkedList average insert time:4829.938 ns
ArrayList average insert time:745.529 ns
LinkedList average delete time:3142.988 ns
ArrayList average delete time:1703.76 ns
</code></pre>
<p>而在数组长度<code>40w</code>的时候（参数<code>-Xmx512m -Xms512m</code>），输出如下：</p>
<pre><code class="language-bash">LinkedList average insert time:126620.38 ns
ArrayList average insert time:25955.014 ns
LinkedList average delete time:119281.413 ns
ArrayList average delete time:25435.593 ns
</code></pre>
<p>而将数组长度调到<code>4000w</code>（参数<code>-Xmx16g -Xms16g</code>），时间如下：</p>
<pre><code class="language-bash">LinkedList average insert time:5.6048377238E7 ns
ArrayList average insert time:2.5303627956E7 ns
LinkedList average delete time:5.4753230158E7 ns
ArrayList average delete time:2.5912990133E7 ns
</code></pre>
<p>虽然这个实验有一定的局限性，但也是证明了<code>ArrayList</code>的插入以及删除性能并不会比<code>LinkedList</code>差。实际上，通过源码（看下面分析）可以知道，<code>ArrayList</code>插入以及删除的主要耗时在于<code>System.arraycopy</code>，而<code>LinkedList</code>主要耗时在于<code>this.node()</code>，实际上两者需要的都是<code>O(n)</code>时间。</p>
<p>至于为什么<code>ArrayList</code>的插入和删除速度要比<code>LinkedList</code>快，笔者猜测，是<code>System.arraycopy</code>的速度快于<code>LinkedList</code>中的<code>for</code>循环遍历速度，因为<code>LinkedList</code>中找到插入/删除的位置是通过<code>this.node()</code>，而该方法是使用简单的<code>for</code>循环实现的（当然底层是首先判断是位于哪一边，靠近头部的话从头部开始遍历，靠近尾部的话从尾部开始遍历）。相对于<code>System.arraycopy</code>的原生<code>C++</code>方法实现，可能会慢于<code>C++</code>，因此造成了速度上的差异。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第302期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-302-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-302-qi/">
        </link>
        <updated>2021-04-12T07:01:43.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>不想恋爱是假的，没人要是真的。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>乱条犹未变初黄，倚得东风势便狂。<br>
——曾巩《咏柳》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>我会穿越那七大海洋，去和你相见。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1618211166749.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>其实就是一个简单的排序，规则是<code>x+y</code>与<code>y+x</code>的较大值（<code>compareTo</code>比较，且这里的加号表示拼接，而不是两个数字相加）：</p>
<pre><code class="language-java">import java.util.Arrays;

public class Solution {
    public String largestNumber(int[] nums) {
        StringBuilder ans = new StringBuilder();
        int n = nums.length;
        String [] num = new String[n];
        for (int i = 0; i &lt; n; i++) {
            num[i] = String.valueOf(nums[i]);
        }
        Arrays.sort(num,(x,y)-&gt; (y+x).compareTo(x+y));
        if(num[0].charAt(0) == '0'){
            return &quot;0&quot;;
        }
        for (int i = 0; i &lt; n; i++) {
            ans.append(num[i]);
        }
        return ans.toString();
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1618211176806.png" alt="" loading="lazy"></figure>
<p>题解区看到有一个手写快排的，完爆<code>compareTo</code>：</p>
<figure data-type="image" tabindex="3"><img src="https://2293736867.github.io/post-images/1618211580134.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="4"><img src="https://2293736867.github.io/post-images/1618211592176.png" alt="" loading="lazy"></figure>
<h1 id="关于笔者的笔记本">关于笔者的笔记本</h1>
<p>最近笔记本出了点问题，拿去实体店维修了一下。是显卡风扇的问题，老是“咔咔咔”的响，跑了几家，第一家说风扇可能上下摆动不平衡，碰到某些东西了，然后本来想换风扇的，给了定金后他说没货，于是又跑了一家，那个老板说“我99年就开始帮别人装<code>Win98</code>了”。。。</p>
<p>然后亲眼看见了自己电脑被“肢解”的过程，蓝天的模具，只要拧开五颗螺丝就可以打开D面的盖板了，然后很熟练的把螺丝全拧开，整个散热铜管拿了出来，再把风扇拿出去清灰。清完灰后就上了硅胶装回去了。</p>
<p>期间还发现了一个隐藏功能，按下<code>Fn+数字1</code>居然可以把风扇全开？？？好家伙这个真不知道。。。</p>
<h1 id="关于昨天的字节笔试">关于昨天的字节笔试</h1>
<p>上个月月底投了字节，然后昨天笔试（本来昨天应该写的但是并没有太累了），感觉发挥不是特别好（准确来说是特别不好），因为下午还有一个<code>CSP</code>，晚上又笔试。。。</p>
<h1 id="音乐推荐">音乐推荐</h1>
<blockquote>
<p>歌曲：还是会想你<br>
歌手：林达浪/h3R3</p>
</blockquote>
<blockquote>
<p>还是会想你<br>
还是会怪你<br>
怪你轻而易举潇洒抽离<br>
还是爱着你<br>
想走进你心里<br>
拨开迷雾抓住你的声音</p>
</blockquote>
<blockquote>
<p>几百遍<br>
重复了几百遍<br>
重复的情绪重复的熬过想你的夜<br>
这思念难道直到感受不到痛为止<br>
可这过程我怎么可能装作没事<br>
你教会我怎么爱你你却没教会遗忘<br>
随意的举动撕碎我所有的立场<br>
我心知肚明不愿戳穿你的另一面<br>
却没想到如今变成我的nightmare</p>
</blockquote>
<blockquote>
<p>昏黄的路灯照不亮整条街<br>
我怎么用力也走不到你心里<br>
倾盘的雨下了一整夜<br>
我们离得这么近你却看不清我的泪滴<br>
我知道我可以随时被代替<br>
却还是接受不了这种落差<br>
我们的爱就像是流星落下<br>
随烟火消失的火花</p>
</blockquote>
<blockquote>
<p>还是会想你<br>
还是会怪你<br>
怪你轻而易举潇洒抽离<br>
还是爱着你<br>
想走进你心里<br>
拨开迷雾抓住你的声音</p>
</blockquote>
<blockquote>
<p>曾在我怀里看着我撒娇的你<br>
慢一秒接电话都会生气的你<br>
那场在公交站台下不停的雨<br>
每一次许的愿望都会关于你<br>
im liar<br>
世界最大的liar<br>
说过最痛的慌是绝对不会放开你<br>
like fire we burning like fire<br>
我们从3000 degrees骤降到零下<br>
你说你早都放下了任何猜疑<br>
这份牵挂只会让你崩溃<br>
由始至终的选择权都在你<br>
我早都流够了只属于你的泪</p>
</blockquote>
<blockquote>
<p>这份爱最好的结尾用这段文字来作纪念<br>
放下了所有的偏执放下你有没有时间来限制<br>
伪装住这份情绪你不懂有多累<br>
shawty its so freaking heartache</p>
</blockquote>
<blockquote>
<p>还是会想你<br>
还是会怪你<br>
怪你轻而易举潇洒抽离<br>
还是爱着你<br>
想走进你心里<br>
拨开迷雾抓住你的声音</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第301期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-301-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-301-qi/">
        </link>
        <updated>2021-04-11T00:35:14.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>由于性格太内向，一直做不出，抢着结账这种事。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>桃花仙人种桃树，又折花枝当酒钱。<br>
——唐寅《桃花庵歌》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>如果最开始我没欺骗你，我们会怎样？</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1618101450341.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>动态规划：</p>
<pre><code class="language-java">public class Solution {
    public int nthUglyNumber(int n) {
        int [] dp = new int[n+1];
        dp[1] = 1;
        int p2 = 1;
        int p3 = 1;
        int p5 = 1;
        for (int t = 2; t &lt;= n;++t ) {
            int a = dp[p2] * 2;
            int b = dp[p3] * 3;
            int c = dp[p5] * 5;
            dp[t] = Math.min(Math.min(a,b),c);
            if(dp[t] == a){
                ++p2;
            }
            if(dp[t] == b){
                ++p3;
            }
            if(dp[t] == c){
                ++p5;
            }
        }
        return dp[n];
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1618101473806.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java中的绑定]]></title>
        <id>https://2293736867.github.io/post/java-zhong-de-bang-ding/</id>
        <link href="https://2293736867.github.io/post/java-zhong-de-bang-ding/">
        </link>
        <updated>2021-04-10T14:58:57.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-前言">1 前言</h1>
<p>做了一次笔试题，发现了一题问答题，是关于<code>Java</code>绑定的：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20210410200801611.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>当时做的时候是完全不会的。。。</p>
<p>于是这里补上一篇<code>Java</code>绑定的文章。</p>
<h1 id="2-绑定">2 绑定</h1>
<p>首先来了解一下绑定的概念。绑定是指<strong>一个方法的调用与方法所在的类关联起来</strong>。</p>
<p>很抽象吧，举个例子，如果父类与子类存在同名方法，子类对父类方法进行了重写，那么就需要绑定来区分调用的到底是父类的方法还是子类的方法。相对简单的一种理解是，绑定是一个方法的调用与调用这个方法的类连接在一起的过程。</p>
<p>而绑定具体又可以分为：</p>
<ul>
<li>静态绑定：就是程序执行前，方法已经被绑定，可以简单理解成编译期绑定</li>
<li>动态绑定：在运行时根据具体对象的类型进行绑定，通过一些机制去运行时判断对象的类型，并分别调用适当的方法</li>
</ul>
<h1 id="3-静态绑定">3 静态绑定</h1>
<p>静态绑定也叫前期绑定、编译期绑定，在程序运行之前，也就是编译时期<code>JVM</code>能够确认方法由谁调用，这种机制就叫静态绑定。</p>
<p>如果一个方法由<code>private</code>、<code>static</code>、<code>final</code>任意一个关键字修饰，那么这个方法就是静态绑定的，原因很简单，因为：</p>
<ul>
<li><code>private</code>修饰的方法，无法由本类以外的类调用，也就是调用者只能是该类</li>
<li><code>static</code>修饰的方法，通过<code>类名.方法名</code>进行调用，也可以唯一确定了调用的类</li>
<li><code>final</code>修饰的方法，不能被子类进行重写，在编译期就能确定了调用的类</li>
</ul>
<p>这三个关键字修饰的方法，都可以在编译时期就能唯一确定了调用的类，不存在子类调用的问题，因此使用静态绑定，而不是动态绑定。</p>
<h1 id="4-动态绑定">4 动态绑定</h1>
<p>动态绑定就是运行时根据对象的类型进行绑定，简单来说，<code>JVM</code>在运行时期决定由哪个对象调用的过程称为动态绑定。</p>
<p>比如：</p>
<pre><code class="language-java">public class Main {
    public static void main(String[] args){
        A b = new B();
        b.print();
    }
}

class A{
    public void print(){
        System.out.println(&quot;A&quot;);
    }
}

class B extends A{
    @Override
    public void print(){
        System.out.println(&quot;B&quot;);
    }
}
</code></pre>
<p>由于B类继承了A类，因此创建对象的时候：</p>
<pre><code class="language-java">A b = new B();
</code></pre>
<p>编译期并不知道b真正引用的是A类还是B类，在运行的时候才知道b是一个A类对象，但是指向了B类的引用。</p>
<p>在<code>Java</code>中，所有的非<code>final</code>、<code>private</code>、<code>static</code>的方法都是动态绑定的，因为只要继承了就能重写。</p>
<h1 id="5-区别">5 区别</h1>
<ul>
<li>发生时期：静态绑定发生在编译时期，动态绑定发生在运行时期</li>
<li>灵活性：动态绑定的灵活性要比静态绑定高，因为静态绑定在编译的时期就确定了，而动态绑定在编译的时候并不知道是调用哪一个类的方法</li>
<li>速度：静态绑定调用方法的速度要快于动态绑定，因为静态绑定可以直接调用，而动态绑定需要去搜索方法表</li>
</ul>
<h1 id="6-动态绑定的过程">6 动态绑定的过程</h1>
<p>在了解动态绑定的过程之前，先了解一些前置知识。</p>
<h2 id="61-方法调用">6.1 方法调用</h2>
<p><code>Java</code>中的方法调用有两类：</p>
<ul>
<li>静态方法调用</li>
<li>动态方法调用</li>
</ul>
<p>而方法调用的指令有四个，分别是：</p>
<ul>
<li><code>invokestatic</code></li>
<li><code>invokespecial</code></li>
<li><code>invokevirtual</code></li>
<li><code>invokeinterface</code></li>
</ul>
<p>前两个是静态绑定的，而后两个是动态绑定的。</p>
<h2 id="62-方法表">6.2 方法表</h2>
<p>方法表是字节码文件的一部分，每个类都有一个方法表，方法表是为<code>invokevirtual</code>以及<code>invokeinterface</code>指令服务的。由于<code>Java</code>中的类都继承于<code>Object</code>，因此，在默认情况下，所有类的方法表中都有<code>Object</code>的方法，如果重写了其中的方法，就会改变其中的描述符。比如，<code>Object</code>类的方法表可以简单理解如下：</p>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20210410220749370.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>而加载了A类的字节码后，因为A类并没有重写任何的<code>Object</code>方法，因此只是添加了A类本身的方法：</p>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20210410220926793.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>而加载了B类的字节码后，因为重写了<code>print()</code>，因此方法表如下：</p>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20210410221217622.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="63-具体过程">6.3 具体过程</h2>
<p>了解了前置知识后看具体过程就会相对简单一点了，动态绑定的过程可以分为三步：</p>
<ul>
<li>虚拟机提取对象实际类型的方法表：<code>JVM</code>获取到对象的实际类型后，再获取该类型的方法表</li>
<li>虚拟机搜索方法签名：当调用<code>b.print()</code>时，通过方法表发现实际方法是<code>B.print()</code></li>
<li>调用方法：调用<code>B.print()</code></li>
</ul>
<h1 id="7-参考">7 参考</h1>
<ul>
<li><a href="https://stackoverflow.com/questions/18082651/how-does-dynamic-binding-happens-in-jvm">StackOverflow-How does dynamic binding happens in JVM?</a></li>
<li><a href="https://www.cnblogs.com/kaleidoscope/p/9790766.html">博客园-Java多态实现原理</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第300期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-300-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-300-qi/">
        </link>
        <updated>2021-04-10T02:23:10.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>你认真的样子，就像天桥上贴膜的。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>白日放歌须纵酒，青春作伴好还乡。<br>
——杜甫《闻官军收河南河北》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>猎人永不孤单。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1618021493011.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>负数全都不是丑数，0也不是，直接从正整数开始判断。</p>
<pre><code class="language-java">class Solution {
    public boolean isUgly(int n) {
        if(n &gt; 0){
            while(n &gt; 1){
                if(n % 5 == 0){
                    n /= 5;
                }else if(n % 3 == 0){
                    n /= 3;
                }else if(n % 2 == 0){
                    n /= 2;
                }else{
                    break;
                }
            }
            return n == 1;
        }
        return false;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1618021543005.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第299期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-299-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-299-qi/">
        </link>
        <updated>2021-04-09T00:33:33.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>凡是不赚钱的，都说自己在创业。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>春水碧于天，画船听雨眠。<br>
——韦庄《菩萨蛮·人人尽说江南好》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>和绝望，和睦相处。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1617928474795.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>二分，中间值与右边值比较：</p>
<ul>
<li>如果中间值小于右边值，则忽略右半区间</li>
<li>如果中间值大于右边值，则忽略左半区间</li>
<li>如果中间值等于右边值，因为允许重复值的存在，不能判断忽略哪一边的区间，只能将右指针减1，并继续循环</li>
</ul>
<pre><code class="language-java">class Solution {
    public int findMin(int[] nums) {
        int n = nums.length;
        int l = 0;
        int r = n-1;
        while(l&lt;r){
            int m = (l+r)/2;
            if(nums[m] &gt; nums[r]){
                l = m+1;
            }else if(nums[m] &lt; nums[r]){
                r = m;
            }else{
                --r;
            }
        }
        return nums[l];
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1617928450436.png" alt="" loading="lazy"></figure>
<h1 id="蚂蚁电话面">蚂蚁电话面</h1>
<p>昨天晚上电话面了蚂蚁，感觉自己有很多答不上来，或者说答上来的不怎么全面，比如，问了一下<code>JVM</code>，然后答了方法区、直接内存、堆区、栈区、本地方法区、<code>PC</code>寄存器。</p>
<p>然后就问了里面有什么。</p>
<p>好吧只是看过不记得了，怎么就不问堆组成，<code>GC</code>算法，<code>G1</code>回收器，类加载器，，，，，，</p>
<p><s>太菜了太菜了，，，，</s></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第298期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-298-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-298-qi/">
        </link>
        <updated>2021-04-08T11:52:56.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>以前我每天都会买彩票，终于有一天，我连彩票也买不起了。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>唯有相思似春色，江南江北送君归。<br>
——王维《送沈子归江东》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>爸爸我也不是一生下来就是爸爸，爸爸也是头一次当爸爸。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1617841682575.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<pre><code class="language-java">class Solution {
    public int findMin(int[] nums) {
        int n = nums.length;
        if(n == 1){
            return nums[0];
        }
        int l = 0;
        int r = n-1;
        int m = (l+r)/2;
        while(l&lt;r){
            if(nums[m] &gt; nums[r]){
                l = m+1;
            }else{
                r = m;
            }
            m = (l+r)/2;
        }
        return nums[l];
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1617841475684.png" alt="" loading="lazy"></figure>
<h1 id="关于一些一行代码ac的题目">关于一些一行代码AC的题目</h1>
<figure data-type="image" tabindex="3"><img src="https://2293736867.github.io/post-images/1617796838448.png" alt="" loading="lazy"></figure>
<pre><code class="language-java">class Solution {
    public int maximumWealth(int[][] accounts) {
        return Arrays.stream(accounts).mapToInt(t -&gt; Arrays.stream(t).sum()).max().orElse(0);
    }
}
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://2293736867.github.io/post-images/1617797331792.png" alt="" loading="lazy"></figure>
<pre><code class="language-java">class Solution {
    public int maximum(int a, int b) {
        return (int)(((long) a + (long) b +Math.abs((long) a - (long) b))/2);
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux pgrep命令]]></title>
        <id>https://2293736867.github.io/post/linux-pgrep-ming-ling/</id>
        <link href="https://2293736867.github.io/post/linux-pgrep-ming-ling/">
        </link>
        <updated>2021-04-07T04:07:28.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-pgrep">1 <code>pgrep</code></h1>
<p><code>pgrep</code>是一个根据名称查找进程<code>ID</code>的命令，返回的是进程<code>ID</code>，若存在当个进程，则分为不同的行返回<code>ID</code>（默认实现）。</p>
<h1 id="2-示例">2 示例</h1>
<p>查找<code>java</code>进程：</p>
<pre><code class="language-bash">pgrep java
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20210407110625110.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>上图还显示了<code>ps</code>与<code>pgrep</code>的区别，简单来说：</p>
<pre><code class="language-bash">pgrep name
等价于
ps -e | grep name | awk '{print $1}'
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20210407110833970.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="3-常用参数">3 常用参数</h1>
<ul>
<li><code>-l</code>：显示<code>PID</code>和进程名称</li>
<li><code>-a</code>：显示详细信息</li>
<li><code>-c</code>：计算进程数量</li>
<li><code>-n/-o</code>：显示进程号最大与最小的进程</li>
</ul>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20210407111454587.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="4-与其他命令配合">4 与其他命令配合</h1>
<p>一般<code>pgrep</code>需要和其他命令配合使用，最常见的是<code>kill</code>：</p>
<pre><code class="language-bash">pgrep name | xargs kill -15
</code></pre>
<p>注意需要使用<code>xargs</code>传递参数，而不能只使用管道，这样是话会提示<code>not enough arguments</code>：</p>
<pre><code class="language-bash">pgrep name | kill -15
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20210407111927228.png" alt="在这里插入图片描述" loading="lazy"></figure>
]]></content>
    </entry>
</feed>