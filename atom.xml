<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://2293736867.github.io</id>
    <title>氷泠&apos;s blog</title>
    <updated>2021-07-19T01:04:03.212Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://2293736867.github.io"/>
    <link rel="self" href="https://2293736867.github.io/atom.xml"/>
    <subtitle>几百遍，重复了几百遍
重复的情绪重复的熬过想你的夜</subtitle>
    <logo>https://2293736867.github.io/images/avatar.png</logo>
    <icon>https://2293736867.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 氷泠&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[每日分享 第399期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-399-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-399-qi/">
        </link>
        <updated>2021-07-19T00:09:21.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>英雄一怒为红颜，红颜一怒，得花钱。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>若耶溪傍采莲女，笑隔荷花共人语。<br>
——李白《采莲曲》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>看看人间的苦难，听听人民的呐喊！</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1626653492734.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>笔者使用的方法是先排序，再结合滑动窗口计算最大值。</p>
<p>方法的核心就是要知道每一次的增加操作是在<code>k</code>的范围内出现尽可能多相同的值，因此，在允许的情况下，会先把当前下标之前的数尽可能变为相同的数，比如下面的数组：</p>
<pre><code class="language-bash">[1,3,7,8,9]
</code></pre>
<p>解释：</p>
<ul>
<li>从下标为<code>1</code>的地方开始遍历，因为从下标为<code>0</code>开始没有意义，值为1</li>
<li>遍历<code>3</code>之前，把<code>3</code>前面的所有数变为<code>3</code>，同时累减<code>k</code>的值</li>
<li>遍历<code>7</code>之前，把<code>7</code>前面的所有数变为<code>7</code>，因为经过前一步的遍历，<code>[1,3]</code>已经变成了<code>[3,3]</code>，这时候需要把两个<code>3</code>变为<code>7</code>，同时累减<code>k</code>的值</li>
<li>遍历<code>8</code>之前，把<code>8</code>前面的所有数字变为<code>8</code>，因为经过前两步的遍历，<code>[1,3,7]</code>已经变成了<code>[7,7,7]</code>，这时候需要把三个<code>7</code>变为<code>8</code>，同时累减<code>k</code>的值</li>
<li>以此类推，直到遍历结束</li>
</ul>
<p>大概流程就是上面的步骤，但是这里又引出了另一个核心的问题，如果<code>k</code>不够减怎么办？</p>
<p>答案就是将左指针右移。</p>
<p>在上面的步骤中，一开始初始化左指针为下标<code>0</code>，右指针为下标<code>1</code>，遍历移动右指针，区间为<code>[1,n)</code>，如果碰到<code>k</code>不够减的情况，将左指针右移，同时归还<code>k</code>值。</p>
<p>比如：</p>
<pre><code class="language-bash">[1,3,7,8,9]   k=5
</code></pre>
<p>流程：</p>
<ul>
<li>遍历下标<code>1</code>的位置，将<code>1</code>变为<code>3</code>，数组变为<code>[3,3,7,8,9]</code>，此时<code>k=3</code></li>
<li>遍历下标<code>2</code>的位置，将<code>3</code>变为<code>7</code>，但是需要的数值为<code>(7-3) * 2 = 8 &gt; k = 3</code></li>
<li>此时就需要将左指针右移，回收从<code>1</code>变为<code>3</code>所消耗的<code>k</code>值，回收后的<code>k</code>值为<code>k = 3 + 2 = 5</code></li>
<li>此时将<code>3</code>变为<code>7</code>消耗的<code>k</code>为<code>4</code>，当前<code>k</code>的值满足，数组就变为<code>[1,7,7,8,9]</code>，此时<code>k=1</code></li>
<li>以此类推</li>
</ul>
<p>在实际操作中，数值的增加并不需要在原数组中进行操作，只需要一个临时变量<code>total</code>保存即可，核心代码：</p>
<pre><code class="language-java">for (int r = 1, l = 0, total = 0; r &lt; n; r++) {
    total += (nums[r] - nums[r - 1]) * (r - l);                       // 1
    while (total &gt; k) {                                               // 2
        total -= (nums[r] - nums[l]);                                 // 3
        ++l;                                                          // 4
    }
    res = Math.max(res, r - l);                                       // 5
}
</code></pre>
<p>解释：</p>
<ul>
<li>第一行是计算将下标为<code>[l,r]</code>的值全部变为<code>nums[r]</code>所消耗的<code>k</code>值</li>
<li>第二行计算是否超过了<code>k</code>值</li>
<li>第三行就是归还<code>k</code>值，归还的同时第四行将左指针进行右移</li>
<li>第五行就是更新结果</li>
</ul>
<p>完整代码：</p>
<pre><code class="language-java">public class Solution {
    public int maxFrequency(int[] nums, int k) {
        int[] count = new int[100_000 + 1];
        int n = nums.length;
        int max = 0;
        for (int v : nums) {
            ++count[v];
            if (v &gt; max) {
                max = v;
            }
        }

        int index = 0;
        for (int i = 1; i &lt;= max; i++) {
            int c = count[i];
            for (int j = 0; j &lt; c; j++) {
                nums[index++] = i;
            }
            if (index &gt;= n) {
                break;
            }
        }

        int res = 0;
        for (int r = 1, l = 0, total = 0; r &lt; n; r++) {
            total += (nums[r] - nums[r - 1]) * (r - l);
            while (total &gt; k) {
                total -= (nums[r] - nums[l]);
                ++l;
            }
            res = Math.max(res, r - l);
        }
        return res + 1;
    }
}
</code></pre>
<p>没想到计排的优化效果如此明显，直接从<code>Arrays.sort()</code>的29ms变为计排的8ms，计排yyds：</p>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1626656630552.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第398期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-398-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-398-qi/">
        </link>
        <updated>2021-07-18T00:32:31.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>没钱了来找我，让我告诉你没钱的日子，怎么过。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>绿叶阴阴占得春，草满莺啼处。<br>
——徐俯《卜算子·天生百种愁》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>温柔解救不了这个世界。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1626568373187.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>裂开，用纯质数模拟哈希表，结果死在109样例。。。</p>
<p><s>为什么要模拟啊？？？</s></p>
<p><s>裂开</s></p>
<p>用<code>hashCode</code>不香吗？？</p>
<pre><code class="language-java">import java.util.*;

public class Solution {
    public List&lt;List&lt;String&gt;&gt; groupAnagrams(String[] strs) {
        Map&lt;Integer, List&lt;String&gt;&gt; map = new HashMap&lt;&gt;(strs.length);
        List&lt;List&lt;String&gt;&gt; res = new LinkedList&lt;&gt;();
        for (String s : strs) {
            int key = hash(s);
            if (map.containsKey(key)) {
                map.get(key).add(s);
            } else {
                List&lt;String&gt; list = new LinkedList&lt;&gt;();
                list.add(s);
                res.add(list);
                map.put(key, list);
            }
        }
        return res;
    }

    private int hash(String s) {
        int h = 0;
        char[] ch = s.toCharArray();
        Arrays.sort(ch);
        for (char c : ch) {
            h = h * 31 + c;
        }
        return h;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1626568575824.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第397期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-397-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-397-qi/">
        </link>
        <updated>2021-07-17T01:26:11.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>世上无难事只怕有钱人，物以类聚人以穷分。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>绿树阴浓夏日长，楼台倒影入池塘。<br>
——高骈《山亭夏日》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>你的故事很长，如果能由我来首尾就好了。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1626485828254.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>简单题，判断累加和是否小于当前值即可：</p>
<ul>
<li>如果小于，将累加值替换为当前值</li>
<li>否则将当前值累加</li>
</ul>
<p>最后将累加值与最大值比较即可。</p>
<pre><code class="language-java">public class Solution {
    public int maxSubArray(int[] nums) {
        int sum = 0;
        int max = Integer.MIN_VALUE;

        for (int v:nums){
            if(v+sum &lt; v){
                sum = v;
            }else{
                sum += v;
            }
            if(sum &gt; max){
                max = sum;
            }
        }
        return max;
    }
}
</code></pre>
<p>还有一个分治的方法，就不介绍了，具体可以去看题解，因为时间复杂度并没有好于这个“动态规划”的方法。</p>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1626485191028.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第396期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-396-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-396-qi/">
        </link>
        <updated>2021-07-16T00:57:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>我连名牌都不认识几个，有时候，别人在炫富我都不知道。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>清风明月无人管，并作南楼一味凉。<br>
——黄庭坚《鄂州南楼记事》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>物质之外亦有精神的世界。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1626397136865.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>简单题，直接二分：</p>
<pre><code class="language-java">public class Solution {
    public int search(int[] nums, int target) {
        int n = nums.length;
        if(n == 0){
            return 0;
        }
        int l = 0;
        int r = n - 1;
        while (l &lt; r) {
            int m = (l + r) &gt;&gt; 1;
            if (nums[m] == target) {
                int times = 1;
                for (int i = m - 1; i &gt;= 0 &amp;&amp; nums[i] == target; --i) {
                    ++times;
                }

                for (int i = m + 1; i &lt; n &amp;&amp; nums[i] == target; i++) {
                    ++times;
                }
                return times;
            } else if (nums[m] &gt; target) {
                r = m - 1;
            } else {
                l = m + 1;
            }
        }
        if(nums[l] == target){
            int times = 1;
            for (int i = l - 1; i &gt;= 0 &amp;&amp; nums[i] == target; --i) {
                ++times;
            }

            for (int i = l + 1; i &lt; n &amp;&amp; nums[i] == target; i++) {
                ++times;
            }
            return times;
        }
        return 0;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1626397168276.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第395期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-395-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-395-qi/">
        </link>
        <updated>2021-07-15T00:48:28.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>男人单身叫单身狗，女的单身叫狗不理。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>端午临中夏，时清日复长。<br>
——李隆基《端午》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>我们在努力扩大自己，以靠近，以触及我们自身以外的世界。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1626396879917.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>直接排序然后累加就好了。</p>
<p>但是感觉优点慢，使用计排优化了一下：</p>
<pre><code class="language-java">public class Solution {
    public int maximumElementAfterDecrementingAndRearranging(int[] arr) {
        int n = arr.length;
        int [] count = new int[n+1];
        int index = n-1;
        for (int i = 0; i &lt; n; i++) {
            if(arr[i] &lt; n){
                ++count[arr[i]];
            }else{
                arr[index--] = arr[i];
            }
        }
        index = 0;
        for (int i = 1; i &lt;= n; i++) {
            int val = count[i];
            for (int j = 0; j &lt; val; j++) {
                arr[index++] = i;
            }
        }
        arr[0] = 1;
        for (int i = 1; i &lt; n; i++) {
            if(Math.abs(arr[i] - arr[i-1]) &gt; 1){
                arr[i] = arr[i-1] + 1;
            }
        }
        return arr[n-1];
    }
}
</code></pre>
<p>需要注意的是这不是一个完整版的计排，因为超过了数组长度的数字可以不需要理会，到最后会变成前面的数+1，不然的话空间会爆，因为数字大小限制<code>10^9</code>，数组长度限制<code>10^5</code>。</p>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1626396919639.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第394期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-394-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-394-qi/">
        </link>
        <updated>2021-07-14T07:50:46.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>我知道虚度年华不对，但是这样，真的过得好瘾啊。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>千家山郭静朝晖，日日江楼座翠微。<br>
——杜甫《秋兴八首》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>真正走掉那次，关门声最小。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1626249211179.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>排序+二分搜索，<code>O(n log n)</code>：</p>
<pre><code class="language-java">import java.util.*;

public class Solution {
    public int minAbsoluteSumDiff(int[] nums1, int[] nums2) {
        long diff = 0;
        int n = nums1.length;
        int[] nums1Copy = Arrays.copyOf(nums1, n);
        Arrays.sort(nums1Copy);
        for (int i = 0; i &lt; n; i++) {
            diff += Math.abs(nums1[i] - nums2[i]);
        }
        if (diff == 0) {
            return 0;
        }

//        int[] nums2Copy = Arrays.copyOf(nums2, n);
//        Arrays.sort(nums2Copy);
//        System.out.println(Arrays.toString(nums1Copy));
//        System.out.println(Arrays.toString(nums2Copy));
//        System.out.println(&quot;diff is &quot; + diff);
        int max = 0;
        int originDiff = 0;
        for (int i = 0; i &lt; n; i++) {
            int closest = find(nums1Copy, nums2[i]);
//            System.out.println(&quot;closest is &quot;+closest);
//            System.out.println(&quot;nums[i] is &quot;+nums1[i]);
            int abs = Math.abs(nums1[i] - nums2[i]) - Math.abs(closest - nums2[i]);
//            if(nums2[i] == 7){
//                System.out.println(&quot;closest is &quot;+closest);
//                System.out.println(&quot;abs is &quot;+abs);
//            }
//            int abs = Math.min(Math.abs(closest-nums2[i]),Math.abs(nums1[i]-nums2[i]));
//            if(closest &lt; nums1[i]){
//                abs = nums2[i] - closest;
//            }else{
//                abs = closest - nums2[i];
//            }
//            int abs = Math.max(Math.abs(nums1[i] - closest),);
            if (abs &gt; max) {
                max = abs;
//                System.out.println(&quot;max is &quot;+max);
//            System.out.println(&quot;closest is &quot;+closest);
//            System.out.println(&quot;nums[i] is &quot;+nums1[i]);
//                originDiff = Math.abs(nums2[i] - nums1[i]);
//                System.out.println(&quot;max is &quot;+max);
//                System.out.println(&quot;originDiff is &quot;+originDiff);
//                System.out.println(&quot;nums1[i] is &quot;+nums1[i]);
//                System.out.println(&quot;nums2[i] is &quot;+nums2[i]);
            }
        }
//        System.out.println(&quot;max is &quot;+max);
        return (int) ((diff - max) % 1_000_000_007);
    }

    private int find(int[] arr, int val) {
        int n = arr.length;
        int l = 0;
        int r = n - 1;
        while (l &lt; r) {
            int m = (l + r) &gt;&gt; 1;
            if (arr[m] == val) {
                return arr[m];
            } else if (arr[m] &gt; val) {
                r = m - 1;
            } else {
                l = m + 1;
            }
        }
//        if (val == 97) {
//            System.out.println(&quot;arr[l] is &quot; + arr[l]);
//        }
//        System.out.println(&quot;arr[l] is &quot;+arr[l]);
        if (n == 1) {
            return arr[0];
        }
        if (l &gt; 0) {
            if (Math.abs(arr[l - 1] - val) &lt; Math.abs(arr[l] - val)) {
                return arr[l - 1];
            }
        }
        if(l &lt; n-1){
            if(Math.abs(arr[l+1] - val) &lt; Math.abs(arr[l] - val)){
                return arr[l+1];
            }
        }
        return arr[l];
    }
}
</code></pre>
<p>核心思想是遍历<code>nums2</code>中的每一个数，在<code>nums1</code>中找到一个最接近的，同时计算它们的差值，如果大于最大值，则更新最大值，公式为：</p>
<pre><code class="language-java">int abs = Math.abs(nums1[i] - nums2[i]) - Math.abs(closest - nums2[i])
</code></pre>
<p>其中<code>closest</code>表示<code>nums1</code>中最接近<code>nums2[i]</code>的那个数。</p>
<p>找到<code>closest</code>的算法如下：</p>
<pre><code class="language-java">private int find(int[] arr, int val) {
        int n = arr.length;
        int l = 0;
        int r = n - 1;
        while (l &lt; r) {
            int m = (l + r) &gt;&gt; 1;
            if (arr[m] == val) {
                return arr[m];
            } else if (arr[m] &gt; val) {
                r = m - 1;
            } else {
                l = m + 1;
            }
        }
        if (l &gt; 0) {
            if (Math.abs(arr[l - 1] - val) &lt; Math.abs(arr[l] - val)) {
                return arr[l - 1];
            }
        }
        if (l &lt; n - 1) {
            if (Math.abs(arr[l + 1] - val) &lt; Math.abs(arr[l] - val)) {
                return arr[l + 1];
            }
        }
        return arr[l];
}
</code></pre>
<p><code>arr</code>从<code>nums1</code>复制而来，并且已进行排序，搜索算法为二分搜索。注意找到索引下标后，需要判断前一个以及后一个，也就是假设找到下标<code>i</code>为最接近的数的下标，需要判断<code>i-1</code>以及<code>i+1</code>是不是比<code>i</code>更接近。</p>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1626249812199.png" alt="" loading="lazy"></figure>
<p>因为数字不大，使用计排优化，同时进行小幅度优化：</p>
<pre><code class="language-java">public class Solution {
    public int minAbsoluteSumDiff(int[] nums1, int[] nums2) {
        long diff = 0;
        int n = nums1.length;
        int[] nums1Copy = new int[n];
        int[] count = new int[100_000 + 1];
        int max = 0;
        for (int i = 0; i &lt; n; i++) {
            diff += Math.abs(nums1[i] - nums2[i]);
            ++count[nums1[i]];
            max = Math.max(nums1[i], max);
        }

        if (diff == 0) {
            return 0;
        }

        int index = 0;
        for (int i = 1; i &lt;= max; i++) {
            int val = count[i];
            for (int j = 0; j &lt; val; j++) {
                nums1Copy[index++] = i;
            }
        }

        max = 0;
        for (int i = 0; i &lt; n; i++) {
            int closest = find(nums1Copy, nums2[i]);
            int abs = Math.abs(nums1[i] - nums2[i]) - Math.abs(closest - nums2[i]);
            if (abs &gt; max) {
                max = abs;
            }
        }
        return (int) ((diff - max) % 1_000_000_007);
    }

    private int find(int[] arr, int val) {
        int n = arr.length;
        int l = 0;
        int r = n - 1;
        while (l &lt; r) {
            int m = (l + r) &gt;&gt; 1;
            if (arr[m] == val) {
                return arr[m];
            } else if (arr[m] &gt; val) {
                r = m - 1;
            } else {
                l = m + 1;
            }
        }
        if (l &gt; 0) {
            if (Math.abs(arr[l - 1] - val) &lt; Math.abs(arr[l] - val)) {
                return arr[l - 1];
            }
        }
        if (l &lt; n - 1) {
            if (Math.abs(arr[l + 1] - val) &lt; Math.abs(arr[l] - val)) {
                return arr[l + 1];
            }
        }
        return arr[l];
    }
}
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://2293736867.github.io/post-images/1626249849956.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第393期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-393-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-393-qi/">
        </link>
        <updated>2021-07-13T08:59:43.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>别人一看你就说你是学生，不是因为你看着年轻，而是因为穿的土。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>竹色溪下绿，荷花镜里香。<br>
——李白《别储邕之剡中》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>我会穿越那七大海洋，去和你相见。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1626166806315.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>真心不会做，直接放官方题解了：</p>
<pre><code class="language-java">class Solution {
    public List&lt;List&lt;Integer&gt;&gt; getSkyline(int[][] buildings) {
        PriorityQueue&lt;int[]&gt; pq = new PriorityQueue&lt;int[]&gt;((a, b) -&gt; b[1] - a[1]);
        List&lt;Integer&gt; boundaries = new ArrayList&lt;Integer&gt;();
        for (int[] building : buildings) {
            boundaries.add(building[0]);
            boundaries.add(building[1]);
        }
        Collections.sort(boundaries);

        List&lt;List&lt;Integer&gt;&gt; ret = new ArrayList&lt;List&lt;Integer&gt;&gt;();
        int n = buildings.length, idx = 0;
        for (int boundary : boundaries) {
            while (idx &lt; n &amp;&amp; buildings[idx][0] &lt;= boundary) {
                pq.offer(new int[]{buildings[idx][1], buildings[idx][2]});
                idx++;
            }
            while (!pq.isEmpty() &amp;&amp; pq.peek()[0] &lt;= boundary) {
                pq.poll();
            }

            int maxn = pq.isEmpty() ? 0 : pq.peek()[1];
            if (ret.size() == 0 || maxn != ret.get(ret.size() - 1).get(1)) {
                ret.add(Arrays.asList(boundary, maxn));
            }
        }
        return ret;
    }
}
</code></pre>
<p>不明白为什么是遇到左端点就入栈/入队，然后遇到右端点就出栈/出队。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第392期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-392-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-392-qi/">
        </link>
        <updated>2021-07-12T00:29:48.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>世界上脑残那么多，你却成了佼佼者。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>此花此叶常相映，翠减红哀愁杀人。<br>
——李商隐《赠荷花》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>少年心意，一如明月松间的青石流水，那些年里看到了，却看不懂。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1626050178521.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>昨天顺便做了，直接上二分：</p>
<pre><code class="language-java">class Solution {
    public int hIndex(int[] citations) {
        int n = citations.length;
        int l = 0;
        int r = n - 1;
        while (l &lt;= r) {
            int m = (r + l) &gt;&gt; 1;
            if (citations[m] == n - m) {
                return n - m;
            }
            if (citations[m] &lt; n - m) {
                l = m + 1;
            } else {
                r = m - 1;
            }
        }
        return n - l;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1626050206739.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第391期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-391-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-391-qi/">
        </link>
        <updated>2021-07-11T03:06:12.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>出身好的努力是为了成功，而你是为了活下去。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>荷叶罗裙一色裁，芙蓉向脸两边开。<br>
——王昌龄《采莲曲》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>小太阳很忙，小云朵想吃糖，长颈鹿嫌脖子不够长，喜欢你太难忘。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1625972805479.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>其实一开始是没什么思路的，看了一下<code>275</code>题，<code>275</code>题是已经排序好的，并且有提示时间<code>O(log N)</code>，所以就直接排序上二分：</p>
<pre><code class="language-java">import java.util.Arrays;

public class Solution {
    public int hIndex(int[] citations) {
        Arrays.sort(citations);
        int n = citations.length;
        int l = 0;
        int r = n - 1;
        while (l &lt;= r) {
            int m = (r + l) &gt;&gt; 1;
            if (citations[m] == n - m) {
                return n - m;
            }
            if (citations[m] &lt; n - m) {
                l = m + 1;
            } else {
                r = m - 1;
            }
        }
        return n - l;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1625972789942.png" alt="" loading="lazy"></figure>
<p>第一次的1ms是因为直接<code>O(n)</code>扫描。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第390期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-390-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-390-qi/">
        </link>
        <updated>2021-07-09T17:21:57.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>和对象吵架，先不要追究吵架原因，要弄明白他胆子怎么肥了。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>五月畲田收火米，三更津吏报潮鸡。<br>
——李德裕《请岭南道中作》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>夕阳真实耀眼无比啊。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1625851358861.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>简单题，因为时间戳单调递增，使用双链表存储即可，也就是<code>LinkedList</code>，操作如下：</p>
<ul>
<li><code>set</code>：首先判断是否出现过，出现过直接调用<code>addLast</code>，否则新增链表</li>
<li><code>get</code>：首先判断是否存在<code>key</code>，不存在返回空，存在的话从链表末尾开始遍历，直到找到结点的时间戳小于给定的时间戳的结点值，并返回，如果没有找到，也就是链表遍历结束，则返回空</li>
</ul>
<pre><code class="language-java">import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;

public class TimeMap {
    private final Map&lt;String, LinkedList&lt;Node&gt;&gt; map = new HashMap&lt;&gt;();

    public void set(String key, String value, int timestamp) {
        Node node = new Node(value,timestamp);
        if(map.containsKey(key)){
            map.get(key).addLast(node);
        }else{
            LinkedList&lt;Node&gt; list = new LinkedList&lt;&gt;();
            list.add(node);
            map.put(key,list);
        }
    }

    public String get(String key, int timestamp) {
        if(!map.containsKey(key)){
            return &quot;&quot;;
        }
        LinkedList&lt;Node&gt; list = map.get(key);
        for (int i = list.size()-1; i &gt;= 0; --i) {
            Node node = list.get(i);
            if(node.timestamp &lt;= timestamp){
                return node.value;
            }
        }
        return &quot;&quot;;
    }

    private static class Node{
        String value;
        int timestamp;

        public Node(String value,int timestamp){
            this.value = value;
            this.timestamp = timestamp;
        }
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1625851346173.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
</feed>