<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://2293736867.github.io</id>
    <title>氷泠&apos;s blog</title>
    <updated>2020-12-28T00:32:56.713Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://2293736867.github.io"/>
    <link rel="self" href="https://2293736867.github.io/atom.xml"/>
    <subtitle>我配不上你，
纵然很努力。</subtitle>
    <logo>https://2293736867.github.io/images/avatar.png</logo>
    <icon>https://2293736867.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 氷泠&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[每日分享 第198期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-198-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-198-qi/">
        </link>
        <updated>2020-12-29T03:35:25.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>你虽有没有出过国，但是你每天都在倒时差。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>青青园中葵，朝露待日晞。<br>
——佚名《长歌行》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>你凭什么喜欢我，就凭你眼光好吗？</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第197期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-197-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-197-qi/">
        </link>
        <updated>2020-12-28T03:32:57.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>熟练地运用，关我屁事和关你屁事，可以节省人生80%的时间。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>早杨柳，趁晴飞絮。<br>
——杨炎正《贺新郎》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>一场秋雨一场凉，秋心酌满泪为霜。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Node.js/Vue.js使用jsSHA库进行SHA1/2/3加密]]></title>
        <id>https://2293736867.github.io/post/nodejsvuejs-shi-yong-jssha-ku-jin-xing-sha123-jia-mi/</id>
        <link href="https://2293736867.github.io/post/nodejsvuejs-shi-yong-jssha-ku-jin-xing-sha123-jia-mi/">
        </link>
        <updated>2020-12-28T00:29:55.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-概述">1 概述</h1>
<p><code>jsSHA</code>是一个用<code>JS</code>+<code>TS</code>实现完整<code>SHA</code>系列加密算法的加密库，包括：</p>
<ul>
<li><code>SHA1</code></li>
<li><code>SHA-224/256/384/512</code></li>
<li><code>SHA3-224/256/384/512</code></li>
<li><code>SHAKE128/256</code></li>
<li><code>cSHAKE128/256</code></li>
<li><code>KMAC128/256</code></li>
</ul>
<p>官方Github<a href="https://github.com/Caligatio/jsSHA">戳这里</a>，目前已有2k的star，这里是一些使用加密算法的例子。</p>
<h1 id="2-安装并引入">2 安装并引入</h1>
<p>安装使用<code>npm</code>或<code>cnpm</code>：</p>
<pre><code class="language-bash">npm install --save jssha
# 或
cnpm install --save jssha
</code></pre>
<p>引入时，根据<code>package.json</code>中的<code>type</code>进行相应引入：</p>
<pre><code class="language-js">const jsSHA = require(&quot;jssha&quot;) //commonjs
import jsSHA from &quot;jssha&quot;      //module
</code></pre>
<p>若为</p>
<pre><code class="language-js">&quot;type&quot;:&quot;commonjs&quot;
</code></pre>
<p>则使用</p>
<pre><code class="language-js">const jsSHA = require(&quot;jssha&quot;)
</code></pre>
<h1 id="3-哈希">3 哈希</h1>
<p>一个简单的例子如下：</p>
<pre><code class="language-js">const jsSHA = require(&quot;jssha&quot;)
const shaObj = new jsSHA(&quot;SHA-512&quot;,&quot;TEXT&quot;,{encoding:&quot;UTF8&quot;})

shaObj.update(&quot;test&quot;)
console.log(shaObj.getHash(&quot;HEX&quot;))
</code></pre>
<p>首先声明了一个<code>shaObj</code>，通过<code>update</code>传递明文，并通过<code>getHash(&quot;HEX&quot;)</code>即得到哈希值，另外<code>update</code>可以调用多次，最后使用<code>getHash</code>即可。</p>
<p><code>jsSHA()</code>有三个参数：哈希算法、输入格式以及参数设置（可选）。</p>
<h2 id="31-哈希算法">3.1 哈希算法</h2>
<p>第一个参数是哈希算法，支持的算法如下：</p>
<ul>
<li><code>SHA-1</code></li>
<li><code>SHA-224</code></li>
<li><code>SHA-256</code></li>
<li><code>SHA-384</code></li>
<li><code>SHA-512</code></li>
<li><code>SHA3-224</code></li>
<li><code>SHA3-256</code></li>
<li><code>SHA3-384</code></li>
<li><code>SHA3-512</code></li>
<li><code>SHAKE128</code></li>
<li><code>SHAKE256</code></li>
</ul>
<p>目前不建议使用<code>SHA-1</code>，建议使用<code>SHA-2</code>（<code>SHA-224、256/384/512</code>）或<code>SHA-3</code>（<code>SHA3-224/256/384/512</code>）。</p>
<p>而<code>SHAKE</code>是<code>Secure Hash Algorithm and KECCAK</code>的缩写，在<code>FISP 202</code><a href="https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf">标准</a>中定义，与<code>SHA-3</code>类似，但是输出是无限位数的。因此定义的时候需要指定输出的位数，不然的话会得到如下报错：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20201227165049196.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>在<code>getHash</code>中加上参数即可：</p>
<pre><code class="language-js">const jsSHA = require(&quot;jssha&quot;)
const shaObj = new jsSHA(&quot;SHAKE128&quot;,&quot;TEXT&quot;,{encoding:&quot;UTF8&quot;})

shaObj.update(&quot;test&quot;)
console.log(shaObj.getHash(&quot;HEX&quot;,{outputLen:1024}))
</code></pre>
<h2 id="32-输入格式">3.2 输入格式</h2>
<p>输入格式的取值如下：</p>
<ul>
<li><code>HEX</code></li>
<li><code>TEXT</code></li>
<li><code>B64</code></li>
<li><code>BYTES</code></li>
<li><code>ARRAYBUFFER</code></li>
<li><code>UNIT8ARRAY</code></li>
</ul>
<h2 id="33-参数选项">3.3 参数选项</h2>
<p>一般常用两个：</p>
<ul>
<li><code>encoding</code>：编码，允许取值<code>UTF8</code>/<code>UTF16BE</code>/<code>UTF16LE</code></li>
<li><code>numRounds</code>：哈希轮数</li>
</ul>
<p>其他的参数可以查看源码。</p>
<h2 id="34-gethash">3.4 <code>getHash</code></h2>
<p><code>getHash</code>是获取哈希结果的函数，第一个参数可以是：</p>
<ul>
<li><code>HEX</code></li>
<li><code>B64</code></li>
<li><code>BYTES</code></li>
<li><code>UINT8ARRAY</code></li>
<li><code>ARRAYBUFFER</code></li>
</ul>
<p>与上面的输入格式对应，可以带上输出长度选项，对于<code>HEX</code>可以带上<code>outputUpper</code>表示是否大写：</p>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20201227170912988.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="4-hmac">4 <code>HMAC</code></h1>
<p><code>HMAC</code>是一种基于哈希函数和密钥进行消息认证的方法，使用时需要指定密钥：</p>
<pre><code class="language-js">const jsSHA = require(&quot;jssha&quot;)
const shaObj = new jsSHA(&quot;SHA3-512&quot;,&quot;TEXT&quot;,{
    hmacKey:{value:'secret key',format:'TEXT'}
})

shaObj.update(&quot;test&quot;)
console.log(shaObj.getHash(&quot;HEX&quot;))
</code></pre>
<h1 id="5-cshake">5 <code>cSHAKE</code></h1>
<p><code>cSHAKE</code>可以看作一个&quot;定制版&quot;的<code>SHAKE</code>，需要使用额外的<code>customization</code>参数：</p>
<pre><code class="language-js">const jsSHA = require(&quot;jssha&quot;)
const shaObj = new jsSHA(&quot;CSHAKE128&quot;,&quot;TEXT&quot;,{
    customization:{value:&quot;test&quot;,format:&quot;TEXT&quot;}
})

shaObj.update(&quot;test&quot;)
console.log(shaObj.getHash(&quot;HEX&quot;,{outputLen:1024}))
</code></pre>
<h1 id="6-kmac">6 <code>KMAC</code></h1>
<p><code>KMAC</code>（<code>KECCAK Message Authentication Code</code>）是一个基于<code>KECCAK</code>的算法，需要提供<code></code>kmacKey`参数：</p>
<pre><code class="language-js">const jsSHA = require(&quot;jssha&quot;)
const shaObj = new jsSHA(&quot;KMAC128&quot;,&quot;TEXT&quot;,{
    kmacKey:{value:&quot;secret key&quot;,format:&quot;TEXT&quot;}
})

shaObj.update(&quot;test&quot;)
console.log(shaObj.getHash(&quot;HEX&quot;,{outputLen:1024}))
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第196期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-196-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-196-qi/">
        </link>
        <updated>2020-12-27T03:30:22.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>大学生啊你要知道，学习不一定能收获，但剁手一定能收货。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>借与门前磐石坐，柳阴亭午正风凉。<br>
——范成大《夏日田园杂兴》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>循此苦旅，直抵群星。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第195期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-195-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-195-qi/">
        </link>
        <updated>2020-12-26T11:35:37.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>付出就会有回报，比如一倍的奢望，换两倍的失望。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>夜窗垂练，何用交光明月。<br>
——周邦彦《三部乐·商调梅雪》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>大佬永远觉得自己是萌新。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第194期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-194-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-194-qi/">
        </link>
        <updated>2020-12-25T11:32:34.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>他们笑我长的丑，我笑他们讲的对。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>月下飞天镜，云生结海楼。<br>
——李白《渡荆门送别》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>程序漏洞叫特性，设计漏洞叫特色。</p>
</blockquote>
<h1 id="圣诞快乐">圣诞快乐</h1>
<p>害。</p>
<p>不关程序员的事。</p>
<p>修个圣诞Bug。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Github仓库master分支到main分支迁移指南]]></title>
        <id>https://2293736867.github.io/post/github-cang-ku-master-fen-zhi-dao-main-fen-zhi-qian-yi-zhi-nan/</id>
        <link href="https://2293736867.github.io/post/github-cang-ku-master-fen-zhi-dao-main-fen-zhi-qian-yi-zhi-nan/">
        </link>
        <updated>2020-12-24T14:28:33.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-概述">1 概述</h1>
<p>2020年10月1日后，<code>Github</code>会将所有新建的仓库的默认分支从<code>master</code>修改为<code>main</code>，这就导致了一些旧仓库主分支是<code>master</code>，新仓库主分支是<code>main</code>的问题，这在有时候会带来一些麻烦，因此这里提供一种方案将旧仓库的<code>master</code>分支迁移到<code>main</code>分支。</p>
<h1 id="2-具体步骤">2 具体步骤</h1>
<p>四步：</p>
<ul>
<li>克隆原仓库</li>
<li>创建并推送<code>main</code>分支</li>
<li>修改默认分支</li>
<li>删除<code>master</code>分支</li>
</ul>
<h2 id="21-克隆">2.1 克隆</h2>
<p>首先克隆一份原仓库到本地进行操作：</p>
<pre><code class="language-bash">git clone xxxxxxx.git
</code></pre>
<h2 id="22-创建并推送main">2.2 创建并推送<code>main</code></h2>
<p>创建并切换到<code>main</code>：</p>
<pre><code class="language-bash">git checkout -b main
</code></pre>
<p>推送<code>main</code>：</p>
<pre><code class="language-bash">git push origin main
</code></pre>
<h2 id="23-修改默认分支">2.3 修改默认分支</h2>
<p>这一步需要到<code>Github</code>中进行操作，进入仓库的设置，点击分支选项：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20201224220523300.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>将其中的默认分支修改为<code>main</code>，并点击右边的<code>Update</code>，点击<code>Update</code>后会有提示有可能会影响<code>PR</code>和克隆：</p>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20201224220523170.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>确认修改后可以看到默认分支已经修改为了<code>main</code>：</p>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/2020122422152362.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20201224220523165.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="24-删除master">2.4 删除<code>master</code></h2>
<p>删除本地<code>master</code>：</p>
<pre><code class="language-bash">git branch -d master
</code></pre>
<p>删除远程<code>master</code>：</p>
<pre><code class="language-bash">git push origin :master
</code></pre>
<p>这样就算成功迁移到<code>main</code>分支了。</p>
<h2 id="25-测试">2.5 测试</h2>
<p>在仓库做一些修改后进行提交：</p>
<pre><code class="language-bash">git add -A 
git commit -m &quot;test main branch&quot;
git push origin main
</code></pre>
<p>可以看到<code>Github</code>上会有对应更新。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第193期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-193-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-193-qi/">
        </link>
        <updated>2020-12-24T04:46:19.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>好看的皮囊与你无关，有趣的灵魂你又没有。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>迟日江山丽，春风花草香。<br>
——杜甫《绝句二首》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>不管对什么事情都不能有先入为主的观念。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第192期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-192-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-192-qi/">
        </link>
        <updated>2020-12-23T00:40:20.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>三百六十行，行行出BUG。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>林表明霁色，城中增暮寒。<br>
——祖泳《终南望余雪》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>梦想不会逃跑，会逃跑的只有人。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第191期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-191-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-191-qi/">
        </link>
        <updated>2020-12-22T00:35:57.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>钱包里放老婆的照片，是为了提醒自己记住，钱包里的钱是怎么没的。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>细雨斜风作晓寒，淡烟疏柳媚晴滩。<br>
——苏轼《浣溪沙·细雨斜风作晓寒》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>爱，其实很简单，困难的是去接受它。</p>
</blockquote>
]]></content>
    </entry>
</feed>