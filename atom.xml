<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://2293736867.github.io</id>
    <title>氷泠&apos;s blog</title>
    <updated>2020-11-11T09:52:20.351Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://2293736867.github.io"/>
    <link rel="self" href="https://2293736867.github.io/atom.xml"/>
    <subtitle>我配不上你，
纵然很努力。</subtitle>
    <logo>https://2293736867.github.io/images/avatar.png</logo>
    <icon>https://2293736867.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 氷泠&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[每日分享 第151期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-151-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-151-qi/">
        </link>
        <updated>2020-11-12T09:49:29.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>天没降什么大任于我，照样苦我心智，劳我筋骨。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>低声问向谁行宿，城上已三更。<br>
——周邦彦《少年游·并刀如水》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>你说过等我的......</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue+Spring Boot简单用户登录Demo]]></title>
        <id>https://2293736867.github.io/post/vuespring-boot-jian-dan-yong-hu-deng-lu-demo/</id>
        <link href="https://2293736867.github.io/post/vuespring-boot-jian-dan-yong-hu-deng-lu-demo/">
        </link>
        <updated>2020-11-11T09:48:10.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-概述">1 概述</h1>
<p>前后端分离的一个简单用户登录<code>Demo</code>。</p>
<h1 id="2-技术栈">2 技术栈</h1>
<ul>
<li><code>Vue</code></li>
<li><code>BootstrapVue</code></li>
<li><code>Kotlin</code></li>
<li><code>Spring Boot</code></li>
<li><code>MyBatis Plus</code></li>
</ul>
<h1 id="3-前端">3 前端</h1>
<h2 id="31-创建工程">3.1 创建工程</h2>
<p>使用<code>vue-cli</code>创建，没安装的可以先安装：</p>
<pre><code class="language-bash">sudo cnpm install -g vue @vue/cli
</code></pre>
<p>查看版本：</p>
<pre><code class="language-bash">vue -V
</code></pre>
<p>出现版本就安装成功了。</p>
<p>创建初始工程：</p>
<pre><code class="language-bash">vue create bvdemo
</code></pre>
<p>由于目前<code>Vue3</code>还没有发布正式版本，推荐使用<code>Vue2</code>：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20201111075536833.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>等待一段时间构建好了之后会提示进行文件夹并直接运行：</p>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20201111075804673.png" alt="在这里插入图片描述" loading="lazy"></figure>
<pre><code class="language-bash">cd bvdemo
yarn serve
</code></pre>
<p>直接通过本地的<code>8080</code>端口即可访问：</p>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20201111075857540.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20201111075935937.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="32-依赖">3.2 依赖</h2>
<p>进入项目文件夹：</p>
<pre><code class="language-bash">cd bvdemo
</code></pre>
<p>安装依赖：</p>
<pre><code class="language-bash">cnpm install bootstrap-vue axios jquery vue-router
</code></pre>
<p>应该会出现<code>popper.js</code>过期的警告，这是<code>bootstrap-vue</code>的原因，可以忽略：</p>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/20201111141109622.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>依赖说明如下：</p>
<ul>
<li><code>bootstrap-vue</code>：一个结合了<code>Vue</code>与<code>Bootstrap</code>的前端<code>UI</code>框架</li>
<li><code>axios</code>是一个简洁易用高效的<code>http</code>库，本项目使用其发送登录请求</li>
<li><code>jquery</code>：一个强大的<code>JS</code>库</li>
<li><code>vue-router</code>：<code>Vue</code>的官方路由管理器</li>
</ul>
<h2 id="33-开启补全">3.3 开启补全</h2>
<p>在正式编写代码之前开启对<code>bootstrap-vue</code>的补全支持，打开设置：</p>
<figure data-type="image" tabindex="6"><img src="https://img-blog.csdnimg.cn/20201111142136472.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>将项目路径下的<code>node_modules</code>添加到库中，把前面的勾给勾上，接着更新缓存并重启（<code>File-&gt;Invalidate Cache/Restart</code>）。</p>
<h2 id="34-appvue">3.4 <code>App.vue</code></h2>
<p>去掉默认的<code>HelloWorld</code>组件，并修改<code>App.vue</code>如下：</p>
<pre><code class="language-html">&lt;template&gt;
    &lt;div id=&quot;app&quot;&gt;
        &lt;router-view&gt;&lt;/router-view&gt;
    &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
export default {
    name: 'App',
}
&lt;/script&gt;

&lt;style&gt;
#app {
    font-family: Avenir, Helvetica, Arial, sans-serif;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    text-align: center;
    color: #2c3e50;
    margin-top: 60px;
}
&lt;/style&gt;
</code></pre>
<p><code>&lt;router-view&gt;</code>是一个<code>functional</code>组件，渲染路径匹配到的视图组件，这里使用<code>&lt;router-view&gt;</code>根据访问路径（路由）的不同显示（渲染）相应的组件。</p>
<h2 id="35-新建vue组件">3.5 新建<code>vue</code>组件</h2>
<p>删除默认的<code>HelloWorld.vue</code>，新建<code>Index.vue</code>以及<code>Login.vue</code>：</p>
<figure data-type="image" tabindex="7"><img src="https://img-blog.csdnimg.cn/20201111143038399.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="36-添加路由">3.6 添加路由</h2>
<p>在<code>main.js</code>同级目录下新建<code>router.js</code>，内容如下：</p>
<pre><code class="language-js">import Vue from &quot;vue&quot;
import VueRouter from &quot;vue-router&quot;
import Login from &quot;@/components/Login&quot;
import Index from &quot;@/components/Index&quot;

Vue.use(VueRouter)

const routes = [
    {
        path: '/',
        component: Login,
        props: true
    },
    {
        path:'/index/:val',
        name:'index',
        component: Index,
        props: true
    }
]

const router = new VueRouter({
    mode:'history',
    routes:routes
})

export default router
</code></pre>
<p><code>routes</code>表示路由，其中包含了两个路由，一个是<code>Login</code>组件的路由<code>/</code>，一个是<code>Index</code>组件的路由<code>/index/:val</code>，后者中的<code>:val</code>是占位符，用于传递参数。<code>router</code>表示路由器，<code>mode</code>可以选择<code>hash</code>或<code>history</code>：</p>
<ul>
<li><code>hash</code>会使用<code>URL</code>的<code>hash</code>来模拟一个完整的<code>URL</code>，当<code>URL</code>改变时页面不会重新加载</li>
<li><code>history</code>就是普通的正常<code>URL</code></li>
</ul>
<p><code>router</code>中的<code>routes</code>参数声明了对应的路由，最后要记得把<code>router</code>添加到<code>main.js</code>中。</p>
<h2 id="37-vueconfigjs">3.7 <code>vue.config.js</code></h2>
<p>在<code>package.json</code>同级目录下创建<code>vue.config.js</code>，内容如下：</p>
<pre><code class="language-js">module.exports = {
    chainWebpack: config =&gt; {
        config.module
            .rule('vue')
            .use('vue-loader')
            .loader('vue-loader')
            .tap(options =&gt; {
                options.transformAssetUrls = {
                    img: 'src',
                    image: 'xlink:href',
                    'b-img': 'src',
                    'b-img-lazy': ['src', 'blank-src'],
                    'b-card': 'img-src',
                    'b-card-img': 'src',
                    'b-card-img-lazy': ['src', 'blank-src'],
                    'b-carousel-slide': 'img-src',
                    'b-embed': 'src'
                }
                return options
            })
    }
}
</code></pre>
<p>使用该配置文件主要是因为<code>&lt;b-img&gt;</code>的<code>src</code>属性不能正常读取图片，添加了该配置文件后即可按路径正常读取。</p>
<h2 id="38-mainjs">3.8 <code>main.js</code></h2>
<p>添加依赖以及路由：</p>
<pre><code class="language-js">import Vue from 'vue'
import App from './App.vue'

import {BootstrapVue, BootstrapVueIcons} from 'bootstrap-vue'
import router from &quot;@/router&quot;;
import 'bootstrap/dist/css/bootstrap.css'
import 'bootstrap-vue/dist/bootstrap-vue.css'

Vue.use(BootstrapVue)
Vue.use(BootstrapVueIcons)
Vue.config.productionTip = false

new Vue({
    render: h =&gt; h(App),
    router
}).$mount('#app')
</code></pre>
<p>引入<code>BootstrapVue</code>，并把路由注册到<code>Vue</code>实例中（就是倒数第2行，作为创建<code>Vue</code>实例的参数，注意这个很重要，不然路由功能不能正常使用）。</p>
<h2 id="39-登录组件">3.9 登录组件</h2>
<p>也就是<code>Login.vue</code>，内容如下：</p>
<pre><code class="language-html">&lt;template&gt;
    &lt;div&gt;
        &lt;b-img src=&quot;../assets/logo.png&quot;&gt;&lt;/b-img&gt;
        &lt;br&gt;
        &lt;b-container&gt;
            &lt;b-row&gt;
                &lt;b-col offset=&quot;3&quot; cols=&quot;6&quot;&gt;
                    &lt;b-input-group size=&quot;lg&quot;&gt;
                        &lt;b-input-group-text&gt;用户名&lt;/b-input-group-text&gt;
                        &lt;b-form-input type=&quot;text&quot; v-model=&quot;username&quot;&gt;&lt;/b-form-input&gt;
                    &lt;/b-input-group&gt;
                &lt;/b-col&gt;
            &lt;/b-row&gt;
            &lt;br&gt;
            &lt;b-row&gt;
                &lt;b-col offset=&quot;3&quot; cols=&quot;6&quot;&gt;
                    &lt;b-input-group size=&quot;lg&quot;&gt;
                        &lt;b-input-group-text&gt;密码&lt;/b-input-group-text&gt;
                        &lt;b-form-input type=&quot;password&quot; v-model=&quot;password&quot;&gt;&lt;/b-form-input&gt;
                    &lt;/b-input-group&gt;
                &lt;/b-col&gt;
            &lt;/b-row&gt;
            &lt;br&gt;
            &lt;b-row&gt;
                &lt;b-col offset=&quot;3&quot; cols=&quot;6&quot;&gt;
                    &lt;b-button variant=&quot;success&quot; @click=&quot;login&quot;&gt;
                        一键注册/登录
                    &lt;/b-button&gt;
                &lt;/b-col&gt;
            &lt;/b-row&gt;
        &lt;/b-container&gt;
    &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
import axios from 'axios'
import router from &quot;@/router&quot;

export default {
    name: &quot;Login.vue&quot;,
    data:function (){
        return{
            username:'',
            password:''
        }
    },
    methods:{
        login:function(){
            axios.post(&quot;http://localhost:8080/login&quot;,{
                username:this.username,
                password:this.password
            }).then(function (res){
                router.push({
                    name:&quot;index&quot;,
                    params:{
                        val:res.data.code === 1
                    }
                })
            })
        }
    }
}
&lt;/script&gt;

&lt;style scoped&gt;

&lt;/style&gt;
</code></pre>
<p>采用了网格系统布局<code>&lt;b-row&gt;</code>+<code>&lt;b-col&gt;</code>，其他组件就不说了，大部分组件官网都有说明（可以<a href="https://code.z01.com/bootstrap-vue/docs/components/">戳这里</a>），发送请求采用了<code>axios</code>，参数包装在请求体中，注意需要与后端（<code>@RequestBody</code>，写在请求头请使用<code>@RequestParm</code>）对应。</p>
<p>另外还需要注意的是跨域问题，这里的跨域问题交给后端处理：</p>
<pre><code class="language-java">@CrossOrigin(&quot;http://localhost:8081&quot;)
</code></pre>
<p>（本地测试中后端运行在<code>8080</code>端口，而前端运行在<code>8081</code>端口）</p>
<p>发送请求后使用路由进行跳转，携带的是<code>res.data.code</code>参数 ，其中<code>res.data</code>是响应中的数据，后面的<code>code</code>是后端自定义的数据，返回<code>1</code>表示注册成功，返回<code>2</code>表示登录成功。</p>
<h2 id="310-首页组件">3.10 首页组件</h2>
<p>首页简单地显示了登录或注册成功：</p>
<pre><code class="language-html">&lt;template&gt;
    &lt;div&gt;
        &lt;b-img src=&quot;../assets/logo.png&quot;&gt;&lt;/b-img&gt;
        &lt;b-container&gt;
            &lt;b-row align-h=&quot;center&quot;&gt;
                &lt;b-col&gt;
                    &lt;b-jumbotron header=&quot;注册成功&quot; lead=&quot;欢迎&quot; v-if=&quot;val&quot;&gt;&lt;/b-jumbotron&gt;
                    &lt;b-jumbotron header=&quot;登录成功&quot; lead=&quot;欢迎&quot; v-else&gt;&lt;/b-jumbotron&gt;
                &lt;/b-col&gt;
            &lt;/b-row&gt;
        &lt;/b-container&gt;
    &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
export default {
    name: &quot;Index.vue&quot;,
    props:['val']
}
&lt;/script&gt;

&lt;style scoped&gt;

&lt;/style&gt;
</code></pre>
<p><code>props</code>表示<code>val</code>是来自其他组件的参数，并将其作为在<code>v-if</code>中进行条件渲染的参数。</p>
<p>这样前端就做好了。下面开始介绍后端。</p>
<h1 id="4-后端">4 后端</h1>
<h2 id="41-创建工程">4.1 创建工程</h2>
<p>采用<code>Kotlin</code>+<code>Gradle</code>+<code>MyBatisPlus</code>构建，新建工程如下：</p>
<figure data-type="image" tabindex="8"><img src="https://img-blog.csdnimg.cn/20201111154530471.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="9"><img src="https://img-blog.csdnimg.cn/20201111153017637.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="10"><img src="https://img-blog.csdnimg.cn/20201111154601137.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="42-依赖">4.2 依赖</h2>
<p>引入<code>MyBatis Plus</code>依赖即可：</p>
<pre><code class="language-bash">implementation(&quot;com.baomidou:mybatis-plus-boot-starter:3.4.0&quot;)
</code></pre>
<h2 id="43-数据表">4.3 数据表</h2>
<pre><code class="language-sql">create database if not exists test;
use test;
drop table if exists user;
create table user(
    id int auto_increment primary key ,
    username varchar(30) default '',
    password varchar(30) default ''
)
</code></pre>
<h2 id="44-配置文件">4.4 配置文件</h2>
<p>数据库用户名+密码+<code>url</code>：</p>
<pre><code class="language-yaml">spring:
  datasource:
    url: jdbc:mysql://localhost:3306/test
    username: root
    password: 123456
</code></pre>
<h2 id="45-新建包">4.5 新建包</h2>
<p>新建如下六个包，分别表示配置类、控制层、持久层、实体类、响应类、业务层。</p>
<figure data-type="image" tabindex="11"><img src="https://img-blog.csdnimg.cn/20201111160519944.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="46-实体类">4.6 实体类</h2>
<pre><code class="language-kotlin">package com.example.demo.entity

class User(var username:String,var password:String)
</code></pre>
<h2 id="47-持久层">4.7 持久层</h2>
<pre><code class="language-kotlin">package com.example.demo.dao

import com.baomidou.mybatisplus.core.mapper.BaseMapper
import com.example.demo.entity.User
import org.apache.ibatis.annotations.Mapper
import org.apache.ibatis.annotations.Select

@Mapper
interface DemoMapper :BaseMapper&lt;User&gt;{
    @Select(&quot;select * from user where username=#{username} and password = #{password}&quot;)
    fun selectByUsernameAndPassword(username:String,password:String):List&lt;User&gt;
}
</code></pre>
<p><code>@Mapper</code>表示给<code>Mapper</code>接口生成一个实现类，并且不需要编写<code>xml</code>配置文件。<code>@Select</code>表示进行查询的<code>sql</code>语句。</p>
<h2 id="48-响应体">4.8 响应体</h2>
<pre><code class="language-kotlin">package com.example.demo.response

class DemoResponse
{
    var data = Any()
    var code = 0
    var message = &quot;&quot;
}
</code></pre>
<pre><code class="language-kotlin">package com.example.demo.response

class DemoResponseBuilder {
    private var response = DemoResponse()

    fun data(t:Any): DemoResponseBuilder
    {
        response.data = t
        return this
    }
    fun code(t:Int): DemoResponseBuilder
    {
        response.code = t
        return this
    }
    fun message(t:String): DemoResponseBuilder
    {
        response.message = t
        return this
    }
    fun build() = response
}
</code></pre>
<p>这里响应体分为：</p>
<ul>
<li>响应码</li>
<li>响应体数据</li>
<li>其他信息</li>
</ul>
<p>与前端约定即可。生成响应体通过一个<code>Builder</code>类生成。</p>
<h2 id="49-业务层">4.9 业务层</h2>
<pre><code class="language-kotlin">package com.example.demo.service

import com.demo.response.DemoResponse
import com.demo.response.DemoResponseBuilder
import com.example.demo.dao.DemoMapper
import com.example.demo.entity.User
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.stereotype.Service
import org.springframework.transaction.annotation.Transactional

@Service
@Transactional
class DemoService
{
    @Autowired
    lateinit var mapper: DemoMapper

    fun login(username:String, password:String): DemoResponse
    {
        val result = mapper.selectByUsernameAndPassword(username,password).size
        if(result == 0)
            mapper.insert(User(username,password))
        return DemoResponseBuilder().code(if(result == 0) 1 else 2).message(&quot;&quot;).data(true).build()
    }
}
</code></pre>
<p><code>@Service</code>标记为业务层，<code>@Transactional</code>表示添加了事务管理，持久层操作失败会进行回滚。<code>@Autowired</code>表示自动注入，在<code>Java</code><br>
中可以使用直接使用<code>@Autowired</code>，而在<code>Kotlin</code>中需要使用<code>lateinit var</code>。</p>
<h2 id="410-控制层">4.10 控制层</h2>
<pre><code class="language-kotlin">package com.example.demo.controller

import com.demo.response.DemoResponse
import com.example.demo.entity.User
import com.example.demo.service.DemoService
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.web.bind.annotation.*

@RestController
@RequestMapping(&quot;/&quot;)
@CrossOrigin(&quot;http://localhost:8081&quot;)
class DemoController {
    @Autowired
    lateinit var service: DemoService

    @PostMapping(&quot;login&quot;)
    fun login(@RequestBody user: User):DemoResponse
    {
        return service.login(user.username, user.password)
    }
}
</code></pre>
<p>主要就是添加了一个跨域处理<code>@CrossOrigin</code>，开发时请对应上前端的端口。</p>
<h2 id="411-配置类">4.11 配置类</h2>
<pre><code class="language-kotlin">package com.example.demo.config

import org.mybatis.spring.annotation.MapperScan
import org.springframework.context.annotation.Configuration

@Configuration
@MapperScan(&quot;com.example.demo.dao&quot;)
class MyBatisConfig
</code></pre>
<p><code>@MapperScan</code>表示扫描对应包下的<code>@Mapper</code>。</p>
<h2 id="412-测试">4.12 测试</h2>
<pre><code class="language-kotlin">package com.example.demo

import com.example.demo.service.DemoService
import org.junit.jupiter.api.Test
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.boot.test.context.SpringBootTest

@SpringBootTest
class DemoApplicationTests {

    @Autowired
    lateinit var service: DemoService

    @Test
    fun contextLoads() {
        println(service.login(&quot;123&quot;, &quot;456&quot;))
    }

}
</code></pre>
<p>测试通过后后端就算完成了。</p>
<h1 id="5-总测试">5 总测试</h1>
<p>先运行后端，<code>Kotlin</code>不像<code>Java</code>，生成工程时能自动配置了启动配置，需要手动运行启动类中的<code>main</code>：</p>
<figure data-type="image" tabindex="12"><img src="https://img-blog.csdnimg.cn/20201111161821428.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>再运行前端：</p>
<pre><code class="language-bash">npm run serve
</code></pre>
<p>不想用命令行的话可以使用图形界面配置一下：</p>
<figure data-type="image" tabindex="13"><img src="https://img-blog.csdnimg.cn/20201111162013408.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>根据控制台输出打开<code>localhost:8081</code>：</p>
<figure data-type="image" tabindex="14"><img src="https://img-blog.csdnimg.cn/20201111162049656.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="15"><img src="https://img-blog.csdnimg.cn/2020111116212940.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>随便输入用户名与密码，不存在则创建，存在则登录：</p>
<figure data-type="image" tabindex="16"><img src="https://img-blog.csdnimg.cn/20201111162149278.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="17"><img src="https://img-blog.csdnimg.cn/20201111162249361.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>注册的同时后端数据库会生成一条记录：</p>
<figure data-type="image" tabindex="18"><img src="https://img-blog.csdnimg.cn/20201111162522626.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>再次输入相同的用户名和密码会显示登录成功：</p>
<figure data-type="image" tabindex="19"><img src="https://img-blog.csdnimg.cn/20201111162335626.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>这样就正式完成了一个简单的前后端分离登录<code>Demo</code>。</p>
<h1 id="5-源码">5 源码</h1>
<ul>
<li><a href="https://github.com/2293736867/VueSpringBootLoginDemo">Github</a></li>
<li><a href="https://gitee.com/u6b7b5fc3/VueSpringBootLoginDemo">码云</a></li>
<li><a href="https://codechina.csdn.net/qq_27525611/VueSpringBootLoginDemo">CODE.CHINA</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第150期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-150-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-150-qi/">
        </link>
        <updated>2020-11-11T00:26:17.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>蠢萌的前提是萌，不是蠢。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>海日生残夜，看卧龙和梦，飞入秋冥。<br>
——张炎《忆旧游·登蓬莱阁》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>我还在原地等你，你却已经忘记来过这里</p>
</blockquote>
<h1 id="双11">双11</h1>
<p>又是一年双11，大伙买了什么呢？</p>
<p>年年双11都是新高的数据，真的佩服马爸爸。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第149期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-149-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-149-qi/">
        </link>
        <updated>2020-11-10T15:22:26.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>心灵鸡汤是给惯了吃鲍参翅肚的人做的换口味小菜，屌丝一维喝一碗鸡汤就营养全面提升了？</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>谁念西风独自凉，萧萧黄叶闭疏窗，沉思往事立残阳。<br>
——纳兰性德《浣溪沙·谁念西风独自凉》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>我爱的人也爱着我，对我来说这简直是个奇迹。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第148期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-148-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-148-qi/">
        </link>
        <updated>2020-11-08T22:46:37.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>你不能总看那些你没有的，多看看你拥有的。算了你把眼睛闭上吧。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>尽虽设柴门，长是闭斜晖。<br>
——杨万里《归去来兮引》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>你说过，人最大的敌人是自己。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第147期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-00000146-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-00000146-qi/">
        </link>
        <updated>2020-11-07T16:26:07.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>当你觉得又丑又穷的时候，不要悲伤，至少你的判断还是正确的。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>渭水风生，洞庭波起，几番秋杪。<br>
——王沂孙《水龙吟·落叶》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>人最怕的是发现了自己想要的东西。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第146期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-0000146-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-0000146-qi/">
        </link>
        <updated>2020-11-06T16:26:07.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>我觉得失恋不可怕，眼瞎才可怕。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>菊垂今秋花，石戴古车辙。<br>
——杜甫《北征》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>忘记本身就是一件不可能的事情。</p>
</blockquote>
<h1 id="软考">软考</h1>
<p>抱歉今天去了软考所以晚更新了，感觉这次的难度并不难，上午的两小时过后有大半人交卷了（虽然整个试室三十多个位置但只有大概二十多个左右的考生），至于下午也基本同样的情况，笔者还看到大概4点10分的时候有试室的监考老师已经收完卷准备关门离开试室了（虽然不知道考的是不是同一科目，因为这间学校是有其他科目一起考的）。</p>
<p>嘛，考完就行，不要慌，</p>
<p>相信自己，</p>
<p>能过的。</p>
<p>冲冲冲！！！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第145期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-146-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-146-qi/">
        </link>
        <updated>2020-11-06T15:27:23.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>你要相信明天，一定会更好的，更好的把你虐成狗。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>东风且伴蔷薇住，到蔷薇，春已堪怜。<br>
——张炎《高阳台·西湖春感》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>人总是会变的，不要害怕改变哦。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第144期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-144-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-144-qi/">
        </link>
        <updated>2020-11-05T15:07:44.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>人都需要努力的，努力过后你就会发现，你还真的是很普通。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>天寒水鸟自相依，十百为群戏落晖。<br>
——秦观《还自广陵》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>即使这一切如此虚假，那又如何？</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第143期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-143-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-143-qi/">
        </link>
        <updated>2020-11-03T23:03:38.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>世界上最动听的话，不是我爱你，而是你的肿瘤是良性的。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>长风几万里，吹度玉门关。<br>
——李白《关山月》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>这东西是越嚼越有味哦~</p>
</blockquote>
]]></content>
    </entry>
</feed>