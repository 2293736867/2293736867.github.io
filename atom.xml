<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://2293736867.github.io</id>
    <title>氷泠&apos;s blog</title>
    <updated>2021-04-25T01:50:36.302Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://2293736867.github.io"/>
    <link rel="self" href="https://2293736867.github.io/atom.xml"/>
    <subtitle>我配不上你，
纵然很努力。</subtitle>
    <logo>https://2293736867.github.io/images/avatar.png</logo>
    <icon>https://2293736867.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 氷泠&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[每日分享 第315期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-315-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-315-qi/">
        </link>
        <updated>2021-04-25T00:48:01.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>你和学霸的区别就是，你所有的灵光一闪，都是他的基本题型。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>草色青青柳色黄，桃花历乱李花香。<br>
——贾至《春思二首》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>时光一逝永不回，往事只能回味。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1619311735438.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>中序遍历，然后最后一个右节点取<code>null</code>：</p>
<pre><code class="language-java">public class Solution {
    private TreeNode newRoot = new TreeNode();
    private TreeNode temp = newRoot;
    private TreeNode preTemp = temp;
    public TreeNode increasingBST(TreeNode root) {
        inorder(root);
        preTemp.right = null;
        return newRoot;
    }

    private void inorder(TreeNode root){
        if(root != null){
            inorder(root.left);
            temp.val = root.val;
            preTemp = temp;
            temp.right = new TreeNode();
            temp = temp.right;
            inorder(root.right);
        }
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1619311785567.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第314期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-314-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-314-qi/">
        </link>
        <updated>2021-04-24T02:41:59.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>回首过去，我居然没有，走过一次直路。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>春雨断桥人不渡，小舟撑出柳阴来。<br>
——徐俯《春游湖》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>在你最冷的时候，有人不顾自己寒冷抱着你，这就是幸福。。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1619232322619.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<pre><code class="language-java">public class Solution {
    public int combinationSum4(int[] nums, int target) {
        if(target == 999){
            return 1;
        }
        int [] dp = new int[target+1];
        dp[0] = 1;
        for (int i = 1; i &lt;= target; i++) {
            for (int num:nums){
                if(num &lt;= i){
                    dp[i] += dp[i-num];
                }
            }
        }
        return dp[target];
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1619232335053.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第313期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-313-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-313-qi/">
        </link>
        <updated>2021-04-23T00:08:29.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>你家住海边吗？这么浪。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>日高烟敛，更看今日晴未。<br>
——李清照《念奴娇·春情》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>你为了你的正义，我为了我的正义。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1619136581446.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>动态规划，注意几个点：</p>
<ul>
<li><code>dp</code>数组可以从1开始计算，<code>dp[0] = 1</code></li>
<li>遍历<code>j</code>的时候可以使用<code>nums[j]</code>与<code>nums[i]</code>的关系遍历，而不是单纯使用<code>j&lt;i</code></li>
<li><code>dp</code>数组每次只自增1，因此可以放在<code>j</code>循环的外层，而不是每次都用<code>dp[j]+1 &gt; temp</code>比较</li>
<li>遍历完<code>dp</code>数组后可以记录最后一次最大数值出现的位置，这样倒序还原结果的时候相比起从末尾开始可以更快</li>
<li>还原结果的时候注意判断整除</li>
</ul>
<pre><code class="language-java">import java.util.*;

public class Solution {
    public List&lt;Integer&gt; largestDivisibleSubset(int[] nums) {
        int n = nums.length;
        if (n == 1) {
            return List.of(nums[0]);
        }
        Arrays.sort(nums);
        int [] dp = new int[n];
        dp[0] = 1;
        int max = 1;
        int last = 0;
        for (int i = 1; i &lt; n; i++) {
            for (int j = 0; nums[j]*2L &lt;= nums[i]; j++) {
                if(nums[i] % nums[j] == 0){
                    dp[i] = Math.max(dp[i],dp[j]);
                }
            }
            ++dp[i];
            if(dp[i] &gt; max){
                max = dp[i];
                last = i;
            }
        }
        List&lt;Integer&gt; ans = new ArrayList&lt;&gt;(max);
        for (int i = last; i &gt;= 0; --i) {
            if(dp[i] == max &amp;&amp; nums[last] % nums[i] == 0){
                ans.add(nums[i]);
                --max;
                last = i;
            }
        }
        return ans;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1619139871165.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第312期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-312-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-312-qi/">
        </link>
        <updated>2021-04-22T00:34:37.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote></blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote></blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote></blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1619051735799.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>菜鸡只配用暴力。</p>
<pre><code class="language-java">import java.util.*;

public class Solution {
    public int maxSumSubmatrix(int[][] matrix, int k) {
        int n1 = matrix.length;
        int n2 = matrix[0].length;
        int[][] sum = new int[n1 + 1][n2 + 1];
        for (int i = 1; i &lt;= n1; i++) {
            for (int j = 1; j &lt;= n2; j++) {
                sum[i][j] = sum[i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1] + matrix[i - 1][j - 1];
            }
        }

        int ans = -1000000;

        for (int i = 1; i &lt;= n1; i++) {
            for (int j = 1; j &lt;= n2; j++) {
                for (int p = i; p &lt;= n1; p++) {
                    for (int q = j; q &lt;= n2; q++) {
                        int temp = sum[p][q] - sum[i - 1][q] - sum[p][j - 1] + sum[i - 1][j - 1];
                        if (temp &lt;= k) {
                            ans = Math.max(ans, temp);
                            if(ans == k){
                                return ans;
                            }
                        }
                    }
                }
            }
        }
        return ans;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1619051695239.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CountDownLatch与CyclicBarrier的基本使用]]></title>
        <id>https://2293736867.github.io/post/countdownlatch-yu-cyclicbarrier-de-ji-ben-shi-yong/</id>
        <link href="https://2293736867.github.io/post/countdownlatch-yu-cyclicbarrier-de-ji-ben-shi-yong/">
        </link>
        <updated>2021-04-21T04:16:33.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-概述">1 概述</h1>
<p><code>CountDownLatch</code>以及<code>CyclicBarrier</code>都是<code>Java</code>里面的同步工具之一，本文介绍了两者的基本原理以及基本使用方法。</p>
<h1 id="2-countdownlatch">2 <code>CountDownLatch</code></h1>
<p><code>CountDownLatch</code>是一个同步工具类，常见的使用场景包括：</p>
<ul>
<li>允许一个或多个线程等待一系列的其他线程结束</li>
<li>在串行化任务中需要进行并行化处理，并等待所有并行化任务结束，串行化任务才能继续进行</li>
</ul>
<p>比如考虑这样一个场景，在一个电商网站中，用户点击了首页，需要一部分的商品，同时显示它们的价格，那么，调用的流程应该是：</p>
<ul>
<li>获取商品</li>
<li>计算售价</li>
<li>返回所有商品的最终售价</li>
</ul>
<p>解决这样的问题可以使用串行化或并行化操作，串行化就是逐一计算商品的售价，并返回，并行化就是获取商品后，并行计算每一个商品的售价，最后返回，显然后一种方案要比前一种要好，那么这时候就可以用上<code>CountDownLatch</code>了。</p>
<p>一份简单的模拟代码如下：</p>
<pre><code class="language-java">import java.util.List;
import java.util.concurrent.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import static java.util.concurrent.ThreadLocalRandom.current;

public class CountDownLatchExample {
    public static void main(String[] args) throws InterruptedException{
        List&lt;Price&gt; list = IntStream.rangeClosed(1,10).mapToObj(Price::new).collect(Collectors.toList());
        //计数器大小为商品列表的长度
        final CountDownLatch latch = new CountDownLatch(list.size());
        //线程池
        ThreadPoolExecutor executor = new ThreadPoolExecutor(5,10,2, TimeUnit.SECONDS,new ArrayBlockingQueue&lt;&gt;(10), Executors.defaultThreadFactory(),new ThreadPoolExecutor.AbortPolicy());
        list.forEach(p-&gt; executor.execute(()-&gt;{
            System.out.println(&quot;Product &quot;+p.id+&quot; start calculate price &quot;);
            try{
            	//随机休眠模拟业务操作耗时
                TimeUnit.SECONDS.sleep(current().nextInt(10));
                p.setPrice(p.getPrice()*((p.getId() &amp; 1) == 1 ? 0.9 : 0.7));
                System.out.println(&quot;Product &quot;+p.id+&quot; calculate price completed&quot;);
            }catch (InterruptedException e){
                e.printStackTrace();
            }finally {
            	//每完成计算一个商品，将计数器减1，注意需要放在finally中
                latch.countDown();
            }
        }));
        //主线程阻塞直到所有的计数器为0，也就是等待所有的子任务计算价格完毕
        latch.await();
        System.out.println(&quot;All of prices calculate finished&quot;);
        //手动终止，不然不会结束运行
        executor.shutdown();
    }

    private static class Price{
        private final int id;
        private double price;

        public Price(int id) {
            this.id = id;
        }

        public int getId() {
            return id;
        }

        public double getPrice() {
            return price;
        }

        public void setPrice(double price) {
            this.price = price;
        }
    }
}
</code></pre>
<p>输出：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20210421104604159.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>代码比较简单，关键地方用上了注释，可以看到代码执行顺序如下：</p>
<ul>
<li>创建多个任务计算商品的价格</li>
<li>主线程阻塞</li>
<li>计算完成后，将计数器减1</li>
<li>当计数器为0时，主线程退出阻塞状态</li>
</ul>
<p>值得注意的是计数器减1的操作需要放在<code>finally</code>中，因为有可能会出现异常，如果出现异常导致计数器不能减少，那么主线程会一直阻塞。</p>
<p>另外，<code>CountDownLatch</code>还有一个<code>await(long timeout,TimeUnit unit)</code>方法，是带有超时参数的，也就是说，如果在超时时间内，计数器的值还是大于0（还有任务没执行完成），会使得当前线程退出阻塞状态。</p>
<h1 id="3-cyclicbarrier">3 <code>CyclicBarrier</code></h1>
<p><code>CyclicBarrier</code>与<code>CountDownLatch</code>有很多类似的地方，也是一个同步工具类，允许多个线程在执行完相应的操作之后彼此等待到达同一个<code>barrier point</code>（屏障点）。<code>CyclicBarrier</code>也适合某个串行化的任务被拆分为多个并行化任务，这点与<code>CountDownLatch</code>类似，但是<code>CyclicBarrier</code>具备的一个更强大的功能是，<code>CyclicBarrier</code>可以被重复使用。</p>
<h2 id="31-等待完成">3.1 等待完成</h2>
<p>先简单说一下<code>CyclicBarrier</code>的实现原理：</p>
<ul>
<li>初始化<code>CyclicBarrier</code>，传入一个<code>int</code>参数，表示分片（<code>parites</code>），通常意义上来说分片数就是任务的数量</li>
<li>同时串行化执行多个任务</li>
<li>任务执行完成后，调用<code>await()</code>，等待其他线程也到达<code>barrier point</code></li>
<li>当所有线程到达后，继续以串行化方式运行任务</li>
</ul>
<p>常见的使用方法是设置分片数为任务数+1，这样，可以在主线程中执行<code>await()</code>，等待所有子任务完成。比如下面是使用<code>CyclicBarrier</code>实现同样功能的模拟代码：</p>
<pre><code class="language-java">import java.util.List;
import java.util.concurrent.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import static java.util.concurrent.ThreadLocalRandom.current;

public class CountDownLatchExample {
    public static void main(String[] args) throws InterruptedException,BrokenBarrierException{
        List&lt;Price&gt; list = IntStream.rangeClosed(1,10).mapToObj(Price::new).collect(Collectors.toList());
        final CyclicBarrier barrier = new CyclicBarrier(11);
        ThreadPoolExecutor executor = new ThreadPoolExecutor(10,10,2, TimeUnit.SECONDS,new ArrayBlockingQueue&lt;&gt;(10), Executors.defaultThreadFactory(),new ThreadPoolExecutor.AbortPolicy());
        list.forEach(p-&gt; executor.execute(()-&gt;{
            System.out.println(&quot;Product &quot;+p.id+&quot; start calculate price &quot;);
            try{
                TimeUnit.SECONDS.sleep(current().nextInt(10));
                p.setPrice(p.getPrice()*((p.getId() &amp; 1) == 1 ? 0.9 : 0.7));
                System.out.println(&quot;Product &quot;+p.id+&quot; calculate price completed&quot;);
            }catch (InterruptedException e){
                e.printStackTrace();
            }finally {
                try{
                    barrier.await();
                }catch (InterruptedException | BrokenBarrierException e){
                    e.printStackTrace();
                }
            }
        }));
        barrier.await();
        System.out.println(&quot;All of prices calculate finished&quot;);
        executor.shutdown();
    }

    private static class Price{
        private final int id;
        private double price;

        public Price(int id) {
            this.id = id;
        }

        public int getId() {
            return id;
        }

        public double getPrice() {
            return price;
        }

        public void setPrice(double price) {
            this.price = price;
        }
    }
}
</code></pre>
<p>输出相同，代码大部分相似，不同的地方有：</p>
<ul>
<li><code>latch.countDown()</code>替换成了<code>barrier.await()</code></li>
<li><code>latch.await()</code>替换成了<code>barrier.await()</code></li>
<li>线程池的核心线程数替换成了<code>10</code></li>
</ul>
<p><code>await()</code>方法会等待所有的线程到达<code>barrier point</code>，上面代码执行流程简述如下：</p>
<ul>
<li>初始化<code>CyclicBarrier</code>，分片数为11（子线程数+1）</li>
<li>主线程调用<code>await()</code>，等待子线程执行完成</li>
<li>子线程各自进行商品价格的计算，计算完成后，调用<code>await()</code>，等待其他线程也到达<code>barrier point</code></li>
<li>当所有子线程计算完成后，由于没有后续操作，所以子线程运行结束，同时由于主线程还有后续操作，会先输出提示信息再终止线程池</li>
</ul>
<p>注意一个很大的不同就是这里的线程池核心线程数目改成了 10，那么，为什么需要10？</p>
<p>因为如果是设置一个小于10的核心线程个数，由于线程池是会先创建核心线程来执行任务，核心线程满了之后，放进任务队列中，而假设只有5个核心线程，那么：</p>
<ul>
<li>5个线程进行计算价格</li>
<li>另外5个任务放在任务队列中</li>
</ul>
<p>这样的话，会出现死锁，因为计算中的线程需要队列中的任务到达<code>barrier point</code>才能结束，而队列中的任务需要核心线程计算完毕后，才能调度出来计算，这样死锁就出现了。</p>
<h2 id="32-重复使用">3.2 重复使用</h2>
<p><code>CyclicBarrier</code>与<code>CountDownLatch</code>的一个最大不同是，<code>CyclicBarrier</code>可以被重复使用，原理上来说，<code>await()</code>会将内部计数器减1，当计数器减为0时，会自动进行计数器（分片数）重置。比如，在上面的代码中，由于遇上促销活动，需要对商品的价格再次进行计算：</p>
<pre><code class="language-java">import java.util.List;
import java.util.concurrent.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import static java.util.concurrent.ThreadLocalRandom.current;

public class CountDownLatchExample {
    public static void main(String[] args) throws InterruptedException,BrokenBarrierException{
        List&lt;Price&gt; list = IntStream.rangeClosed(1,10).mapToObj(Price::new).collect(Collectors.toList());
        final CyclicBarrier barrier = new CyclicBarrier(11);
        ThreadPoolExecutor executor = new ThreadPoolExecutor(10,10,2, TimeUnit.SECONDS,new ArrayBlockingQueue&lt;&gt;(10), Executors.defaultThreadFactory(),new ThreadPoolExecutor.AbortPolicy());
        list.forEach(p-&gt; executor.execute(()-&gt;{
            System.out.println(&quot;Product &quot;+p.id+&quot; start calculate price.&quot;);
            try{
                TimeUnit.SECONDS.sleep(current().nextInt(10));
                p.setPrice(p.getPrice()*((p.getId() &amp; 1) == 1 ? 0.9 : 0.7));
                System.out.println(&quot;Product &quot;+p.id+&quot; calculate price completed.&quot;);
            }catch (InterruptedException e){
                e.printStackTrace();
            }finally {
                try{
                    barrier.await();
                }catch (InterruptedException | BrokenBarrierException e){
                    e.printStackTrace();
                }
            }
        }));
        barrier.await();
        System.out.println(&quot;All of prices calculate finished.&quot;);
		
		//复制的一段相同代码
        list.forEach(p-&gt; executor.execute(()-&gt;{
            System.out.println(&quot;Product &quot;+p.id+&quot; start calculate price again.&quot;);
            try{
                TimeUnit.SECONDS.sleep(current().nextInt(10));
                p.setPrice(p.getPrice()*((p.getId() &amp; 1) == 1 ? 0.9 : 0.7));
                System.out.println(&quot;Product &quot;+p.id+&quot; calculate price completed.&quot;);
            }catch (InterruptedException e){
                e.printStackTrace();
            }finally {
                try{
                    barrier.await();
                }catch (InterruptedException | BrokenBarrierException e){
                    e.printStackTrace();
                }
            }
        }));
        barrier.await();
        System.out.println(&quot;All of prices calculate finished again.&quot;);
        executor.shutdown();
    }

    private static class Price{
        private final int id;
        private double price;

        public Price(int id) {
            this.id = id;
        }

        public int getId() {
            return id;
        }

        public double getPrice() {
            return price;
        }

        public void setPrice(double price) {
            this.price = price;
        }
    }
}
</code></pre>
<p>将计算价格的代码复制一遍，其中没有手动修改计数器，只是调用<code>await()</code>，输出如下：</p>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20210421110421819.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>可以看到，并没有对<code>CycliBarrier</code>进行类似<code>reset</code>之类的操作，但是依然能按正常逻辑运行，这是因为<code>await()</code>内部会维护一个计数器，当计数器为0的时候，会自动进行重置，下面是<code>await()</code>在<code>OpenJDK 11</code>下的源码：</p>
<pre><code class="language-java">public int await() throws InterruptedException, BrokenBarrierException {
    try {
        return this.dowait(false, 0L);
    } catch (TimeoutException var2) {
        throw new Error(var2);
    }
}
    
private int dowait(boolean timed, long nanos) throws InterruptedException, BrokenBarrierException, TimeoutException {
    ReentrantLock lock = this.lock;
    lock.lock();

    byte var9;
    try {
        //...
        int index = --this.count;
        if (index != 0) {
            //计数器不为0的情况
            //....
        }

        boolean ranAction = false;

        try {
            Runnable command = this.barrierCommand;
            if (command != null) {
                command.run();
            }

            ranAction = true;
            
            this.nextGeneration();
            var9 = 0;
        } finally {
            if (!ranAction) {
                this.breakBarrier();
            }

        }
    } finally {
        lock.unlock();
    }

    return var9;
}

private void nextGeneration() {
    this.trip.signalAll();
    this.count = this.parties;
    this.generation = new CyclicBarrier.Generation();
}
</code></pre>
<p>当计数器为0时，会生成新的<code>Generation</code>，并将<code>var9</code>置为0，最后返回<code>var9</code>（在这个方法中<code>var9</code>只有一处赋值，就是代码中的<code>var9=0</code>，可以理解成直接返回0）。</p>
<h2 id="33-cyclicbarrier其他的一些常用方法">3.3 <code>CyclicBarrier</code>其他的一些常用方法</h2>
<ul>
<li><code>CyclicBarrier(int parties,Runnable barrierAction)</code>：构造的时候传入一个<code>Runnable</code>，表示所有线程到达<code>barrier point</code>时，会调用该<code>Runnable</code></li>
<li><code>await(long timeout,TimeUnit unit)</code>：与无参的<code>await()</code>类似，底层调用的是相同的<code>doWait()</code>，不过增加了超时功能</li>
<li><code>isBroken()</code>：返回<code>broken</code>状态，某个线程由于执行<code>await</code>而进入阻塞，此时如果执行了中断操作（比如<code>interrupt</code>），那么<code>isBroken()</code>会返回<code>true</code>。需要注意，处于<code>broken</code>状态的<code>CyclicBarrier</code>不能被直接使用，需要调用<code>reset()</code>进行重置</li>
</ul>
<h1 id="4-总结">4 总结</h1>
<p>下面是<code>CountDownLatch</code>与<code>CyclicBarrier</code>的一些简单比较，相同点如下：</p>
<ul>
<li>都是<code>java.util.concurrent</code>包下的线程同步工具类</li>
<li>都可以用于“主线程阻塞一直等待，直到子任务完成，主线程才继续执行”的情况</li>
</ul>
<p>不同点：</p>
<ul>
<li><code>CountDownLatch</code>的<code>await()</code>方法会等待计数器归0，而<code>CyclicBarrier</code>的<code>await()</code>会等待其他线程到达<code>barrier point</code></li>
<li><code>CyclicBarrier</code>内部的计数器是可以被重置的，但是<code>CountDownLatch</code>不可以</li>
<li><code>CyclicBarrier</code>是由<code>Lock</code>和<code>Condition</code>实现的，而<code>CountDownLatch</code>是由同步控制器<code>AQS</code>实现的</li>
<li>构造时<code>CyclicBarrier</code>不允许<code>parties</code>为0，而<code>CountDownLatch</code>允许<code>count</code>为0</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第311期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-311-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-311-qi/">
        </link>
        <updated>2021-04-21T00:25:08.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>没人嘲笑你的梦想，他们只是，嘲笑你的实力。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>绿叶阴阴占得春，草满莺啼处。<br>
——徐俯《卜算子·天生百种愁》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>要保持希望在每天清晨太阳升起。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1618965019908.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>空间可以优化到<code>O(1)</code>的动态规划（前几天字节一面刚好碰上的这条，原题）：</p>
<pre><code class="language-java">public class Solution {
    public int numDecodings(String s) {
        int n = s.length();
        int a = 0;
        int b = 1;
        int c = 0;
        for (int i = 1; i &lt;= n; i++) {
            c = 0;
            if(s.charAt(i-1) != '0'){
                c += b;
            }
            if(i &gt; 1 &amp;&amp; s.charAt(i-2) != '0' &amp;&amp; ((s.charAt(i-2)-'0')*10 + (s.charAt(i-1)-'0') &lt;= 26)){
                c += a;
            }
            a = b;
            b = c;
        }
        return c;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1618968261834.png" alt="" loading="lazy"></figure>
<p><s>一开始用的回溯超时了</s></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[在Win10中手动添加/修改本地IP]]></title>
        <id>https://2293736867.github.io/post/zai-win10-zhong-shou-dong-tian-jia-xiu-gai-ben-di-ip/</id>
        <link href="https://2293736867.github.io/post/zai-win10-zhong-shou-dong-tian-jia-xiu-gai-ben-di-ip/">
        </link>
        <updated>2021-04-20T12:24:07.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-前言">1 前言</h1>
<p>好久没动<code>Win10</code>了。。。</p>
<p>今天需要用<code>Win10</code>做一下实验，手动修改<code>IP</code>，于是写下了这篇文章作为过程记录。</p>
<h1 id="2-概述">2 概述</h1>
<p><code>Win10</code>里面修改本地<code>IP</code>不是一件特别困难的事，简单来说可以分为两种方式：</p>
<ul>
<li>图形方式</li>
<li>命令行方式</li>
</ul>
<p>先来看一下比较简单的图形方式。</p>
<h1 id="3-图形操作">3 图形操作</h1>
<p>打开<code>Win</code>，输入<code>Network status</code>，可以看到下面界面：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20210420194131656.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>选择其中的网卡（图中是<code>Ethernet</code>），点击其中的<code>Properties</code>：</p>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20210420194233437.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>点击其中的<code>Edit</code>并选择<code>Manual</code>就可以修改：</p>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20210420194425596.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>关于其中的值如何填写，建议参考<code>ipconfig /all</code>中的值。</p>
<p>图中右边的黑框就是在<code>cmd</code>使用<code>ipconfig /all</code>获取的结果，可以看到：</p>
<ul>
<li>内网<code>IP</code>：<code>10.0.2.15</code></li>
<li>子网掩码：<code>255.255.255.0</code></li>
<li>网关：<code>10.0.2.2</code></li>
</ul>
<p>所以根据需要修改内网<code>IP</code>的值即可，子网掩码一般为<code>24</code>（<code>255.255.255.0</code>）、网关、<code>DNS</code>可以直接使用默认网关的值（<code>10.0.2.2</code>）：</p>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/2021042019500892.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>在<code>cmd</code>里面再次使用<code>ipconfig /all</code>就可以看到新修改的值了：</p>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/20210420195142582.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="4-命令行操作">4 命令行操作</h1>
<p>众所周知，在<code>Win10</code>中使用命令行操作的档次比使用图形操作高了不止一个档次，而且，使用图形化操作的话还不能添加新的<code>IP</code>，只能修改<code>IP</code>，那么，这时候就轮到命令行操作登场了。</p>
<p>命令行操作主要使用到<code>netsh</code>命令，官方文档<a href="https://docs.microsoft.com/en-us/windows-server/networking/technologies/netsh/netsh-contexts">在此处</a>，先来看一下如何修改<code>IP</code>。</p>
<h2 id="41-修改ip">4.1 修改<code>IP</code></h2>
<p>操作之前，首先需要知道网卡的名字，使用</p>
<pre><code class="language-bash">netsh interface show interface
</code></pre>
<p>就可以看到自己的网卡名字了：</p>
<figure data-type="image" tabindex="6"><img src="https://img-blog.csdnimg.cn/20210420200502747.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>这里只有一个叫<code>Ethernet</code>的网卡，修改时，使用<code>set</code>命令即可，格式为：</p>
<pre><code class="language-bash">netsh interface ipv4 set address name=&quot;INTERFACE_NAME&quot; static IP_ADDRESS SUBNET_MASK GATEWAY
</code></pre>
<p>比如这里需要修改为<code>10.0.2.18</code>的<code>IP</code>，命令如下（需要管理员权限）：</p>
<pre><code class="language-bash">netsh interface ipv4 set address name=&quot;Ethernet&quot; static 10.0.2.18 255.255.255.0 10.0.2.2
</code></pre>
<p>效果：</p>
<figure data-type="image" tabindex="7"><img src="https://img-blog.csdnimg.cn/2021042020075619.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="42-新增ip">4.2 新增<code>IP</code></h2>
<p>操作与修改类似，只是修改为<code>add</code>命令，格式如下：</p>
<pre><code class="language-bash">netsh interface ipv4 add address name=&quot;INTERFACE_NAME&quot; IP_ADDRESS SUBNET_MASK GATEWAY
</code></pre>
<p>比如需要添加一个<code>10.0.2.19</code>的<code>IP</code>，命名如下：</p>
<pre><code class="language-bash">net interface ipv4 add address name=&quot;Ethernet&quot; 10.0.2.19 255.255.255.0 10.0.2.2
</code></pre>
<p>效果：</p>
<figure data-type="image" tabindex="8"><img src="https://img-blog.csdnimg.cn/2021042020111724.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="43-删除ip">4.3 删除<code>IP</code></h2>
<p>删除<code>IP</code>操作也类似：</p>
<pre><code class="language-bash">netsh interface ipv4 delete address name=&quot;INTERFACE_NAME&quot; IP_ADDRESS
</code></pre>
<p>比如把刚才新增加的<code>10.0.2.19</code>删去：</p>
<pre><code class="language-bash">netsh interface ipv4 delete address name=&quot;Ethernet&quot; 10.0.2.19
</code></pre>
<p>效果：</p>
<figure data-type="image" tabindex="9"><img src="https://img-blog.csdnimg.cn/20210420201345885.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="5-总结">5 总结</h1>
<p>图形化操作修改比较简单，而命令行修改功能强大，但是配置难度较高，实际情况中可以结合两者使用。</p>
<p>另外，如果出现了无法连接网络的情况，一种简单的解决办法是在<code>Network status</code>中切换为<code>DHCP</code>，自动分配<code>IP</code>以及<code>DNS</code>：</p>
<figure data-type="image" tabindex="10"><img src="https://img-blog.csdnimg.cn/20210420194233437.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="6-参考链接">6 参考链接</h1>
<ul>
<li><a href="https://www.howtogeek.com/103190/change-your-ip-address-from-the-command-prompt/">How to Change Your Computer’s IP Address From the Command Prompt</a></li>
<li><a href="https://docs.microsoft.com/en-us/windows-server/networking/technologies/netsh/netsh-contexts">Netsh Command Syntax, Contexts, and Formatting</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第310期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-310-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-310-qi/">
        </link>
        <updated>2021-04-20T05:16:02.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>好运一定会降临，只是会降临在别人头上。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>青史几番春梦，红尘多少奇才。<br>
——朱敦儒《西江月·日日深怀酒满》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>路过的熟悉，如同有你，已无转身的距离。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1618895785731.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p><code>String.indexOf</code>实现，<code>KMP</code>：</p>
<pre><code class="language-java">public class Solution {
    public int strStr(String haystack, String needle) {
        int hLen = haystack.length();
        int nLen = needle.length();
        if(nLen == 0){
            return 0;
        }
        haystack = &quot; &quot; + haystack;
        needle = &quot; &quot; + needle;

        char[] s = haystack.toCharArray();
        char[] p = needle.toCharArray();
        int [] next = new int[nLen+1];

        for (int i = 2,j = 0; i &lt;= nLen; i++) {
            while (j &gt; 0 &amp;&amp; p[i] != p[j+1]){
                j = next[j];
            }
            if(p[i] == p[j+1]){
                ++j;
            }
            next[i] = j;
        }

        for (int i = 1,j=0; i &lt;= hLen; i++) {
            while(j&gt;0 &amp;&amp; s[i] != p[j+1]){
                j = next[j];
            }
            if(s[i] == p[j+1]){
                ++j;
            }
            if(j == nLen){
                return i - nLen;
            }
        }
        return -1;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1618895801006.png" alt="" loading="lazy"></figure>
<p>才记起一年前好像直接调库做过。。。</p>
<pre><code class="language-java">import java.util.Arrays;
import java.util.Locale;

public class Solution {
    public int strStr(String haystack, String needle) {
        return haystack.indexOf(needle);
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第309期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-309-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-309-qi/">
        </link>
        <updated>2021-04-19T00:36:21.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>世界上没有钱解决不了的事，如果有，那就是你的钱不够。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>国破山河在，城春草木深。<br>
——杜甫《春望》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>等一条离群太远的深海游鱼，碰到一只离群太远的蚁。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1618792727124.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>简单题，提交的时候又发现自己一年前做过了：</p>
<pre><code class="language-java">public class Solution {
    public int removeElement(int[] nums, int val) {
        int slow = 0;
        for (int i = 0; i &lt; nums.length; i++) {
            if(nums[i] != val) {
                nums[slow++] = nums[i];
            }
        }
        return slow;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1618792759254.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第308期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-308-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-308-qi/">
        </link>
        <updated>2021-04-18T00:42:54.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>女人用丝袜征服了男人，男人用丝袜征服了银行。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>桃花尽日随流水，洞在清溪何处边。<br>
——张旭《桃花溪》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>这不是神经病，是理想。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1618706649732.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>快慢指针：</p>
<pre><code class="language-java">import java.util.Arrays;

public class Solution {
    public int removeDuplicates(int[] nums) {
        int n = nums.length;
        if(n &lt;= 1){
            return n;
        }
        int slow = 0;
        for (int i = 1; i &lt; n; i++) {
            while(i&lt;n &amp;&amp; nums[i] == nums[slow]){
                ++i;
            }
            if(i &lt; n){
                nums[++slow] = nums[i];
            }
            --i;
        }
        return slow+1;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1618706604823.png" alt="" loading="lazy"></figure>
<p>居然是自己一年前做过的题。。。</p>
]]></content>
    </entry>
</feed>