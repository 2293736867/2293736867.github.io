<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://2293736867.github.io</id>
    <title>氷泠&apos;s blog</title>
    <updated>2020-06-02T20:16:03.244Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://2293736867.github.io"/>
    <link rel="self" href="https://2293736867.github.io/atom.xml"/>
    <subtitle>我配不上你，
纵然很努力。</subtitle>
    <logo>https://2293736867.github.io/images/avatar.png</logo>
    <icon>https://2293736867.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 氷泠&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[centos8搭建本地Web服务器]]></title>
        <id>https://2293736867.github.io/post/centos8-da-jian-ben-di-web-fu-wu-qi/</id>
        <link href="https://2293736867.github.io/post/centos8-da-jian-ben-di-web-fu-wu-qi/">
        </link>
        <updated>2020-06-02T20:15:38.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#1-%E6%A6%82%E8%BF%B0">1 概述</a></li>
<li><a href="#2-%E5%AE%89%E8%A3%85httpd">2 安装httpd</a></li>
<li><a href="#3-%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1">3 启动服务</a></li>
<li><a href="#4-%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8">4 设置开机启动</a></li>
<li><a href="#5-%E8%AE%BF%E9%97%AE">5 访问</a></li>
<li><a href="#6-%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E4%B8%BB%E9%A1%B5">6 修改默认主页</a></li>
</ul>
</p>
<h1 id="1-概述">1 概述</h1>
<p>系统centos8,利用httpd搭建本地web服务器.</p>
<h1 id="2-安装httpd">2 安装httpd</h1>
<pre><code class="language-bash">sudo yum install -y httpd
</code></pre>
<h1 id="3-启动服务">3 启动服务</h1>
<pre><code class="language-bash">service httpd start
</code></pre>
<h1 id="4-设置开机启动">4 设置开机启动</h1>
<p>先查看有没有设置开机启动:</p>
<pre><code class="language-bash">systemctl list-unit-files | grep httpd
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200101122534629.png" alt="在这里插入图片描述" loading="lazy"><br>
没有的话设置:</p>
<pre><code class="language-bash">chkconfig httpd on
</code></pre>
<p>再确认一下:</p>
<pre><code class="language-bash">systemctl list-unit-files | grep httpd
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200101122607986.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="5-访问">5 访问</h1>
<p>再浏览器输入内网ip地址(内网ip可以通过ifconfig查看).若出现以下页面则表示成功.<br>
<img src="https://img-blog.csdnimg.cn/20200101122706339.png" alt="在这里插入图片描述" loading="lazy"></p>
<h1 id="6-修改默认主页">6 修改默认主页</h1>
<p>默认的网站根目录位于/var/www/html下,可以通过修改/etc/httpd/conf/httpd.conf修改.这里只是修改主页.在/var/www/html创建一个index.html:</p>
<pre><code class="language-bash">cd /var/www/html
sudo vim index.html
</code></pre>
<p>随便输入一点内容,然后刷新在浏览器即可.</p>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200101123148250.png" alt="在这里插入图片描述" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CentOS8搭建FTP服务器]]></title>
        <id>https://2293736867.github.io/post/centos8-da-jian-ftp-fu-wu-qi/</id>
        <link href="https://2293736867.github.io/post/centos8-da-jian-ftp-fu-wu-qi/">
        </link>
        <updated>2020-06-02T20:15:12.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#1-%E6%A6%82%E8%BF%B0">1 概述</a></li>
<li><a href="#2-%E5%AE%89%E8%A3%85vsftpd">2 安装vsftpd</a></li>
<li><a href="#3-%E5%BC%80%E5%90%AF%E6%9C%8D%E5%8A%A1">3 开启服务</a></li>
<li><a href="#4-%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8">4 设置开机启动</a></li>
<li><a href="#5-%E4%BF%AE%E6%94%B9etcvsftpdvsftpdconf">5 修改/etc/vsftpd/vsftpd.conf</a></li>
<li><a href="#6-%E5%88%9B%E5%BB%BA%E6%B5%8B%E8%AF%95%E6%96%87%E4%BB%B6">6 创建测试文件</a></li>
<li><a href="#7-%E6%B5%8B%E8%AF%95">7 测试</a>
<ul>
<li><a href="#71-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B5%8B%E8%AF%95">7.1 浏览器测试</a>
<ul>
<li><a href="#711-%E5%8C%BF%E5%90%8D%E6%B5%8B%E8%AF%95">7.1.1 匿名测试</a></li>
<li><a href="#712-%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%B5%8B%E8%AF%95">7.1.2 用户登录测试</a></li>
</ul>
</li>
<li><a href="#72-ftp%E5%91%BD%E4%BB%A4%E6%B5%8B%E8%AF%95">7.2 ftp命令测试</a>
<ul>
<li><a href="#721-%E5%8C%BF%E5%90%8D%E6%B5%8B%E8%AF%95">7.2.1 匿名测试</a>
<ul>
<li><a href="#7211-%E4%B8%8A%E4%BC%A0%E6%B5%8B%E8%AF%95">7.2.1.1 上传测试</a></li>
<li><a href="#7212-%E4%B8%8B%E8%BD%BD%E6%B5%8B%E8%AF%95">7.2.1.2 下载测试</a></li>
</ul>
</li>
<li><a href="#722-%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%B5%8B%E8%AF%95">7.2.2 用户登录测试</a>
<ul>
<li><a href="#7221-%E4%B8%8A%E4%BC%A0%E6%B5%8B%E8%AF%95">7.2.2.1 上传测试</a></li>
<li><a href="#7222-%E4%B8%8B%E8%BD%BD%E6%B5%8B%E8%AF%95">7.2.2.2 下载测试</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#73-wget%E6%B5%8B%E8%AF%95">7.3 wget测试</a>
<ul>
<li><a href="#731-%E5%8C%BF%E5%90%8D%E6%B5%8B%E8%AF%95">7.3.1 匿名测试</a></li>
<li><a href="#732-%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%B5%8B%E8%AF%95">7.3.2 用户登录测试</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#8-%E6%80%BB%E7%BB%93">8 总结</a></li>
</ul>
</p>
<h1 id="1-概述">1 概述</h1>
<p>文章主要讲了CentOS8如何利用vsftpd搭建一个FTP服务器,然后进行简单的匿名上传/下载与用户上传/下载测试,还有使用了wget测试.</p>
<h1 id="2-安装vsftpd">2 安装vsftpd</h1>
<pre><code class="language-bash">yum install -y vsftpd
</code></pre>
<h1 id="3-开启服务">3 开启服务</h1>
<pre><code class="language-bash">service httpd start
</code></pre>
<h1 id="4-设置开机启动">4 设置开机启动</h1>
<p>可以用</p>
<pre><code class="language-bash">systemctl list-unit-files | grep vsftpd
</code></pre>
<p>查看是否开机启动.显示disabled.<br>
<img src="https://img-blog.csdnimg.cn/20200101030147305.png" alt="在这里插入图片描述" loading="lazy"><br>
通过</p>
<pre><code class="language-bash">chkconfig vsftpd on
</code></pre>
<p>开启自启,再次执行systemctl,可以看到变成了enabled.</p>
<h1 id="5-修改etcvsftpdvsftpdconf">5 修改/etc/vsftpd/vsftpd.conf</h1>
<pre><code class="language-bash">sudo vim /etc/vsftpd/vsftpd.conf
</code></pre>
<p>首先修改<br>
<img src="https://img-blog.csdnimg.cn/20200101030618606.png" alt="在这里插入图片描述" loading="lazy"><br>
为YES.<br>
再添加一行anon_upload_enable=YES<br>
<img src="https://img-blog.csdnimg.cn/20200101030851708.png" alt="在这里插入图片描述" loading="lazy"><br>
第一行的意思是允许匿名登录,第二行的意思是允许匿名上传.<br>
重启服务.</p>
<pre><code class="language-bash">service vsftpd restart
</code></pre>
<h1 id="6-创建测试文件">6 创建测试文件</h1>
<pre><code class="language-bash">cd /var/ftp/pub
sudo vim test
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200101031249233.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="7-测试">7 测试</h1>
<h2 id="71-浏览器测试">7.1 浏览器测试</h2>
<h3 id="711-匿名测试">7.1.1 匿名测试</h3>
<p>ifconfig获取内网ip,在浏览器中输入ftp://ip.<br>
<img src="https://img-blog.csdnimg.cn/20200101031730471.png" alt="在这里插入图片描述" loading="lazy"><br>
可以看到有一个pub文件夹,里面有刚才新建的test文件.<br>
<img src="https://img-blog.csdnimg.cn/20200101031838167.png" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200101031849294.png" alt="在这里插入图片描述" loading="lazy"><br>
右键保存即可下载文件.<br>
<img src="https://img-blog.csdnimg.cn/20200101031948461.png" alt="在这里插入图片描述" loading="lazy"><br>
下载完成.<br>
<img src="https://img-blog.csdnimg.cn/20200101032047324.png" alt="在这里插入图片描述" loading="lazy"><br>
去终端看看.<br>
<img src="https://img-blog.csdnimg.cn/20200101032137819.png" alt="在这里插入图片描述" loading="lazy"></p>
<h3 id="712-用户登录测试">7.1.2 用户登录测试</h3>
<p>输入</p>
<pre><code class="language-bash">ftp://username@ip
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200101032238241.png" alt="在这里插入图片描述" loading="lazy"><br>
再输入用户密码.<br>
默认访问的是用户根目录下的文件,这里显示出来了.<br>
<img src="https://img-blog.csdnimg.cn/20200101032414278.png" alt="在这里插入图片描述" loading="lazy"><br>
下载的话同上,右键选择即可.</p>
<h2 id="72-ftp命令测试">7.2 ftp命令测试</h2>
<p>首先安装ftp:</p>
<pre><code class="language-bash">sudo yum install ftp
</code></pre>
<h3 id="721-匿名测试">7.2.1 匿名测试</h3>
<pre><code class="language-bash">ftp ip
</code></pre>
<p>这里用户名选择ftp,密码为空,表示匿名登录.ftp为默认的匿名登录用户名,至于密码,可以在/etc/vsftpd/vsftpd.conf中设置一个</p>
<pre><code>no_anon_password=YES
</code></pre>
<p>这样匿名用户可以不用密码登录.<br>
<img src="https://img-blog.csdnimg.cn/20200101033958446.png" alt="在这里插入图片描述" loading="lazy"></p>
<h4 id="7211-上传测试">7.2.1.1 上传测试</h4>
<p>直接使用put命令,后面接上文件,这里的upload.txt是执行ftp之前的所在文件夹下的upload.txt<br>
<img src="https://img-blog.csdnimg.cn/20200101034153782.png" alt="在这里插入图片描述" loading="lazy"><br>
这里提示不能创建文件,是权限的原因,要确保/var/ftp/pub对&quot;other&quot;用户有写权限.<br>
<img src="https://img-blog.csdnimg.cn/20200101034507850.png" alt="在这里插入图片描述" loading="lazy"><br>
默认的/var/ftp/pub的权限是644,修改成647.</p>
<pre><code class="language-bash">sudo chmod 647 /var/ftp/pub
</code></pre>
<p>同时修改上传文件的权限,允许other用户可读.</p>
<pre><code class="language-bash">sudo chmod 644 /root/upload.txt
</code></pre>
<p>如果不行,使用selinux设置.</p>
<pre><code class="language-bash">getsebool -a | grep ftp
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200101041509763.png" alt="在这里插入图片描述" loading="lazy"><br>
把ftpd_full_access开启:</p>
<pre><code class="language-bash">setsebool ftpd_full_access on
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200101041325973.png" alt="在这里插入图片描述" loading="lazy"><br>
再进入upload.txt所在的文件夹,执行ftp,再次put.<br>
<img src="https://img-blog.csdnimg.cn/20200101041756274.png" alt="在这里插入图片描述" loading="lazy"><br>
成功!<br>
<img src="https://img-blog.csdnimg.cn/20200101041850446.png" alt="在这里插入图片描述" loading="lazy"></p>
<h4 id="7212-下载测试">7.2.1.2 下载测试</h4>
<p>直接get文件即可,由于上面已经设置好了权限,所以不会出现问题.<br>
<img src="https://img-blog.csdnimg.cn/20200101042052729.png" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200101042158684.png" alt="在这里插入图片描述" loading="lazy"><br>
若出现权限问题可从三方面入手:</p>
<ul>
<li>(1)<strong>/var/ftp/pub的对other用户的可读权限:因为是下载,而且匿名,所以只需要对other用户的可读权限</strong></li>
<li>(2)<strong>被下载文件的对other用户的可读权限</strong></li>
<li>(3)<strong>selinux的问题,设置ftpd_full_access为on</strong></li>
</ul>
<h3 id="722-用户登录测试">7.2.2 用户登录测试</h3>
<p>执行ftp时用对应用户名与密码登录.<br>
<img src="https://img-blog.csdnimg.cn/20200101042624970.png" alt="在这里插入图片描述" loading="lazy"><br>
默认进入了用户根目录.</p>
<h4 id="7221-上传测试">7.2.2.1 上传测试</h4>
<p>直接put即可.<br>
<img src="https://img-blog.csdnimg.cn/20200101042824793.png" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200101042907482.png" alt="在这里插入图片描述" loading="lazy"><br>
若出现权限问题参照上面7.2.1.2的那三条方法.</p>
<h4 id="7222-下载测试">7.2.2.2 下载测试</h4>
<p>随便在用户根目录新建一个文件,这里是kr.<br>
<img src="https://img-blog.csdnimg.cn/20200101043238911.png" alt="在这里插入图片描述" loading="lazy"><br>
直接get即可.<br>
<img src="https://img-blog.csdnimg.cn/20200101043337444.png" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200101043424416.png" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="73-wget测试">7.3 wget测试</h2>
<p>wget用来下载文件,初始下载的目录与ftp登录时的目录一致,比如匿名登录ftp,登录的是/var/ftp目录,则wget会从这个/var/ftp目录下载文件,下载到执行wget命令所在的目录.使用用户&quot;kr&quot;登录ftp,则登录的是/home/kr目录,wget会从/home/kr下载文件.</p>
<h3 id="731-匿名测试">7.3.1 匿名测试</h3>
<p>注意,请确保被下载文件对other用户有可读权限.</p>
<pre><code class="language-bash">sudo chmod o+w xxxxxx
</code></pre>
<p>然后使用wget</p>
<pre><code class="language-bash">wget ftp://ip/pub/xxxx
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200101044803421.png" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200101044830152.png" alt="在这里插入图片描述" loading="lazy"></p>
<h3 id="732-用户登录测试">7.3.2 用户登录测试</h3>
<p>使用--ftp-user,--ftp-password指定用户名与密码,其余同上.</p>
<pre><code class="language-bash">wget ftp://ip/xxx --ftp-user=xxxx --ftp-password=xxxx
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200101045316791.png" alt="在这里插入图片描述" loading="lazy"><br>
成功.</p>
<h1 id="8-总结">8 总结</h1>
<p>呃....简单来说,就是先安装好ftp与vsftpd,然后修改/etc/vsftpd/vsftpd.conf添加相应权限,对于不能上传与下载的原因,基本上都是权限的问题,主要就是三方面:</p>
<ul>
<li><strong>(1)ftp目录的权限:比如可以是/var/ftp/pub没有对应的写权限导致上传失败,没有对应读权限导致下载失败.</strong></li>
<li><strong>(2)被上传文件的权限:比如上传的文件没有读权限导致上传失败.</strong></li>
<li><strong>(3)selinux:使用setsebool设置为on.</strong></li>
</ul>
<p>解决权限问题后,基本就可以通过ftp或wget顺利地使用这个ftp服务器上传/下载文件了.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python基础(八)]]></title>
        <id>https://2293736867.github.io/post/python-ji-chu-ba/</id>
        <link href="https://2293736867.github.io/post/python-ji-chu-ba/">
        </link>
        <updated>2020-06-02T20:14:50.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#1-%E6%A8%A1%E5%9D%97">1 模块</a>
<ul>
<li><a href="#11-%E6%A8%A1%E5%9D%97">1.1 模块</a></li>
<li><a href="#12-%E6%A8%A1%E5%9D%97%E5%AD%98%E5%9C%A8%E5%BD%A2%E5%BC%8F">1.2 模块存在形式</a>
<ul>
<li><a href="#121-%E9%9D%9E%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97">1.2.1 非内置模块</a></li>
<li><a href="#122-%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97">1.2.2 内置模块</a></li>
</ul>
</li>
<li><a href="#13-%E6%A8%A1%E5%9D%97%E4%BD%BF%E7%94%A8">1.3 模块使用</a>
<ul>
<li><a href="#131-%E5%AF%BC%E5%85%A5%E6%95%B4%E4%B8%AA%E6%A8%A1%E5%9D%97">1.3.1 导入整个模块</a></li>
<li><a href="#132-%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%97%E4%B8%AD%E7%9A%84%E6%9F%90%E4%B8%AA%E5%87%BD%E6%95%B0">1.3.2 导入模块中的某个函数</a></li>
</ul>
</li>
<li><a href="#14-%E6%9F%A5%E7%9C%8B%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97">1.4 查看内置模块</a></li>
</ul>
</li>
<li><a href="#2-%E5%8C%85">2 包</a>
<ul>
<li><a href="#21-%E5%8C%85">2.1 包</a></li>
<li><a href="#22-%E5%8C%85%E7%AE%A1%E7%90%86">2.2 包管理</a></li>
<li><a href="#23-%E5%8C%85%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4">2.3 包管理命令</a>
<ul>
<li><a href="#231-%E5%88%97%E5%87%BA%E5%B7%B2%E5%AE%89%E8%A3%85%E7%9A%84%E5%8C%85">2.3.1 列出已安装的包</a></li>
<li><a href="#232-%E6%9B%B4%E6%96%B0%E5%8C%85">2.3.2 更新包</a></li>
<li><a href="#233-%E5%88%A0%E9%99%A4%E5%8C%85">2.3.3 删除包</a></li>
<li><a href="#234-%E5%AE%89%E8%A3%85%E5%8C%85">2.3.4 安装包</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</p>
<h1 id="1-模块">1 模块</h1>
<h2 id="11-模块">1.1 模块</h2>
<p>模块是一个python文件,其中包含对象定义与语句等.多个模块再加上__init__.py就变成了一个包.</p>
<h2 id="12-模块存在形式">1.2 模块存在形式</h2>
<p>模块可以分成两种:非内置模块与内置模块.</p>
<h3 id="121-非内置模块">1.2.1 非内置模块</h3>
<p>非内置模块以.py文件的形式存在,放在对应的包下.</p>
<h3 id="122-内置模块">1.2.2 内置模块</h3>
<p>内置模块就是内置到解释器中的模块,为了提高性能内置模块采用C语言而不是python编写.</p>
<h2 id="13-模块使用">1.3 模块使用</h2>
<p>先导入再调用里面的函数,可以一次导入整个模块,或者选择性导入其中的函数.</p>
<h3 id="131-导入整个模块">1.3.1 导入整个模块</h3>
<pre><code class="language-py">import math
import cmath as cm
</code></pre>
<p>使用as设置模块别名.</p>
<h3 id="132-导入模块中的某个函数">1.3.2 导入模块中的某个函数</h3>
<pre><code class="language-py">from math import sin
from cmath import sqrt as cs
</code></pre>
<p>使用as设置函数别名.</p>
<h2 id="14-查看内置模块">1.4 查看内置模块</h2>
<pre><code class="language-py">import sys
sys.builtin_module_names
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/2019123021420753.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="2-包">2 包</h1>
<h2 id="21-包">2.1 包</h2>
<p>包是含有一个特殊的__init__.py文件的文件夹,通常还含有其他.py文件,表示不同的模块.</p>
<h2 id="22-包管理">2.2 包管理</h2>
<p>包的下载,安装,更新,删除可通过包管理器进行操作,常用的包管理器为pip与conda.pip设计目的是仅管理Python语言的包,对应的包服务器为PyPI,Conda设计目的是管理多种语言的包,对应的包服务器为Conda.</p>
<h2 id="23-包管理命令">2.3 包管理命令</h2>
<h3 id="231-列出已安装的包">2.3.1 列出已安装的包</h3>
<pre><code class="language-py">pip list
conda list
</code></pre>
<h3 id="232-更新包">2.3.2 更新包</h3>
<pre><code class="language-bash">pip install --upgrade package_name
conda upgrade package_name
</code></pre>
<h3 id="233-删除包">2.3.3 删除包</h3>
<pre><code class="language-bash">pip uninstall package_name
conda uninstall package_name
</code></pre>
<h3 id="234-安装包">2.3.4 安装包</h3>
<pre><code class="language-shell">pip install package_name
conda install package_name
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python基础(七)]]></title>
        <id>https://2293736867.github.io/post/python-ji-chu-qi/</id>
        <link href="https://2293736867.github.io/post/python-ji-chu-qi/">
        </link>
        <updated>2020-06-02T20:14:26.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#1-%E6%A8%A1%E5%9D%97%E5%87%BD%E6%95%B0">1 模块函数</a>
<ul>
<li><a href="#11-%E6%A8%A1%E5%9D%97%E5%87%BD%E6%95%B0">1.1 模块函数</a></li>
<li><a href="#12-%E5%AF%BC%E5%85%A5">1.2 导入</a>
<ul>
<li><a href="#121-import-moudle">1.2.1 import moudle</a></li>
<li><a href="#122-import-module-as-alias">1.2.2 import module as alias</a></li>
<li><a href="#123-from-module-import-function">1.2.3 from module import function</a></li>
<li><a href="#124-from-module-import-function-as-alias">1.2.4 from module import function as alias</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#2-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0">2 自定义函数</a>
<ul>
<li><a href="#21-%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0">2.1 定义函数</a></li>
<li><a href="#22-%E8%AE%BE%E7%BD%AEdocstring">2.2 设置docstring</a></li>
<li><a href="#23-%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8">2.3 函数调用</a></li>
<li><a href="#24-%E8%BF%94%E5%9B%9E%E5%80%BC">2.4 返回值</a></li>
<li><a href="#25-%E5%BD%A2%E5%8F%82">2.5 形参</a>
<ul>
<li><a href="#251-%E5%BD%A2%E5%8F%82%E5%88%86%E7%B1%BB">2.5.1 形参分类</a></li>
<li><a href="#252-%E4%B8%8E">2.5.2 * 与 **</a></li>
<li><a href="#253-%E5%91%BD%E5%90%8D%E5%85%B3%E9%94%AE%E5%AD%97%E5%8F%82%E6%95%B0">2.5.3 命名关键字参数</a></li>
</ul>
</li>
<li><a href="#26-%E5%AE%9E%E5%8F%82">2.6 实参</a>
<ul>
<li><a href="#261-%E4%BD%8D%E7%BD%AE%E5%8F%82%E6%95%B0">2.6.1 位置参数</a></li>
<li><a href="#262-%E5%85%B3%E9%94%AE%E5%AD%97%E5%8F%82%E6%95%B0">2.6.2 关键字参数</a></li>
</ul>
</li>
<li><a href="#27-%E5%8F%98%E9%87%8F%E5%8F%AF%E8%A7%81%E6%80%A7">2.7 变量可见性</a>
<ul>
<li><a href="#271-%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F">2.7.1 局部变量</a></li>
<li><a href="#272-%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F">2.7.2 全局变量</a></li>
<li><a href="#273-%E9%9D%9E%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F">2.7.3 非局部变量</a></li>
</ul>
</li>
<li><a href="#28-%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E8%A7%84%E5%88%99">2.8 参数传递规则</a>
<ul>
<li><a href="#281-%E5%80%BC%E4%BC%A0%E9%80%92">2.8.1 值传递</a></li>
<li><a href="#282-%E5%9C%B0%E5%9D%80%E4%BC%A0%E9%80%92">2.8.2 地址传递</a></li>
</ul>
</li>
<li><a href="#29-lambda%E5%87%BD%E6%95%B0">2.9 lambda函数</a>
<ul>
<li><a href="#291-%E5%AE%9A%E4%B9%89">2.9.1 定义</a></li>
<li><a href="#292-%E8%B0%83%E7%94%A8">2.9.2 调用</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</p>
<h1 id="1-模块函数">1 模块函数</h1>
<h2 id="11-模块函数">1.1 模块函数</h2>
<p>模块函数指的是模块中的函数,模块函数有三种:</p>
<ul>
<li>内置模块:又叫标准库.</li>
<li>第三方开源模块:可以通过包管理工具进行安装.</li>
<li>自定义模块.</li>
</ul>
<h2 id="12-导入">1.2 导入</h2>
<p>导入方法主要有三种:</p>
<h3 id="121-import-moudle">1.2.1 import moudle</h3>
<pre><code class="language-py">import math
math.e
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20191230073425789.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h3 id="122-import-module-as-alias">1.2.2 import module as alias</h3>
<p>alias表示别名.<br>
<img src="https://img-blog.csdnimg.cn/20191230073558475.png" alt="在这里插入图片描述" loading="lazy"></p>
<h3 id="123-from-module-import-function">1.2.3 from module import function</h3>
<p>从模块导入函数.<br>
<img src="https://img-blog.csdnimg.cn/20191230073717961.png" alt="在这里插入图片描述" loading="lazy"></p>
<h3 id="124-from-module-import-function-as-alias">1.2.4 from module import function as alias</h3>
<p>与上一种类似,加上了别名.<br>
<img src="https://img-blog.csdnimg.cn/20191230073839933.png" alt="在这里插入图片描述" loading="lazy"></p>
<h1 id="2-自定义函数">2 自定义函数</h1>
<h2 id="21-定义函数">2.1 定义函数</h2>
<p>使用关键字def定义:</p>
<pre><code class="language-py">def func():
	print(1)
</code></pre>
<h2 id="22-设置docstring">2.2 设置docstring</h2>
<p>docstring就是注释,描述了函数的功能,使用三个单引号或三个双引号,可以用help()获取函数的docstring.</p>
<pre><code class="language-py">def func():
	'''
	func docstring
	'''
	print(1)
help(func)
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/2019123007484817.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="23-函数调用">2.3 函数调用</h2>
<p>直接使用函数名即可,需要的话要加上参数.</p>
<pre><code class="language-py">func()
func(22)
</code></pre>
<h2 id="24-返回值">2.4 返回值</h2>
<p>返回值在return里指定,可以返回多个值:</p>
<pre><code class="language-py">def f():
	return 1,2,3,4
</code></pre>
<p>相当于返回一个元组.若函数没有return,则返回None.</p>
<h2 id="25-形参">2.5 形参</h2>
<h3 id="251-形参分类">2.5.1 形参分类</h3>
<p>形参就是函数定义时的参数列表里面的参数,可以分为:</p>
<ul>
<li>可选形参:给出默认值的形参.</li>
<li>必选形参:没有给出默认的形参.</li>
</ul>
<pre><code class="language-py">def f(x1,x2,x3=3)
</code></pre>
<p>其中x1,x2必选形参,x3可选形参.</p>
<h3 id="252-与">2.5.2 * 与 **</h3>
<p>带一个 * 的形参表示该形参类型为元组,带两个 * 的形参表示该参数类型为字典.</p>
<h3 id="253-命名关键字参数">2.5.3 命名关键字参数</h3>
<p>出现在*后的参数.</p>
<pre><code class="language-py">def f(x1,*x2,x3,x4)
</code></pre>
<p>x3与x4就是命名关键字参数,在调用时必须显式使用参数名.</p>
<h2 id="26-实参">2.6 实参</h2>
<p>python实参可以分为位置实参与关键字实参.</p>
<h3 id="261-位置参数">2.6.1 位置参数</h3>
<p>位置参数就是没有指定形参名字的实参,每个实参基于顺序关联到一个形参.</p>
<h3 id="262-关键字参数">2.6.2 关键字参数</h3>
<p>关键字参数就是指定了形参名字的实参,用键值对的形式指定,可以不按顺序调用.</p>
<pre><code class="language-py">def f(x1,x2,x3):
    print(x1,x2,x3)
f(1,2,3)
f(x3=999,x1=888,x2=999999)
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20191230174558140.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="27-变量可见性">2.7 变量可见性</h2>
<p>python变量的可见性有三种:全局变量,局部变量,非局部变量.</p>
<h3 id="271-局部变量">2.7.1 局部变量</h3>
<p>在函数内的变量为局部变量,因此,以下代码会输出9:</p>
<pre><code class="language-py">x1 = 8
def f():
    x1 = 9
    print(x1)
f()
</code></pre>
<p>如果在x1之前输出呢?<br>
<img src="https://img-blog.csdnimg.cn/20191230175118159.jpg" alt="在这里插入图片描述" loading="lazy"><br>
直接提示没有定义x1,就是全局变量x1在函数内不可见,但笔者不死心,一定要运行一下.<br>
<img src="https://img-blog.csdnimg.cn/20191230175227371.png" alt="在这里插入图片描述" loading="lazy"><br>
它说局部变量x1没有被赋值,注意,是局部变量,因此,这也证明了全局变量在函数内不可见.</p>
<h3 id="272-全局变量">2.7.2 全局变量</h3>
<p>若要使全局变量在函数内可见,使用global:</p>
<pre><code class="language-py">x1 = 8
def f():
    global x1
    print(x1)
    x1 = 9
    print(x1)
f()
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/2019123017580553.png" alt="在这里插入图片描述" loading="lazy"><br>
global x1表示x1是一个全局变量,注意global x1需要单独占一行.</p>
<h3 id="273-非局部变量">2.7.3 非局部变量</h3>
<p>用于嵌套函数中,使用nonlocal声明,表示内层函数的这个变量是外层函数的.</p>
<pre><code class="language-py">x1 = 8
def f():
    x1 = 9
    print(x1)
    def f1():
        nonlocal x1
        print(x1)
        x1 = 10
        print(x1)
    return f1
f()
f()()
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20191230180030357.png" alt="在这里插入图片描述" loading="lazy"><br>
第一个与第二个9都是f()中的print()输出的,第三个9是f1()中的print()输出的.</p>
<h2 id="28-参数传递规则">2.8 参数传递规则</h2>
<p>当实参传递给形参时,有两种传递规则,一是值传递,而是地址传递.</p>
<h3 id="281-值传递">2.8.1 值传递</h3>
<p>当实参为不可变对象时,采用值传递规则,常见的不可变对象类型包括int,float,str,bool,tuple.</p>
<pre><code class="language-py">def f(x):
    x = 1
    print(x)
x = 3
print('-------int------')
f(x)
print(x)
print()

x = 'string'
print('-------str------')
f(x)
print(x)
print()

x = (3,4,5)
print('-------tuple------')
f(x)
print(x)
print()

x = 5.799
print('-------float------')
f(x)
print(x)
print()
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20191230180537175.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h3 id="282-地址传递">2.8.2 地址传递</h3>
<p>参数为可变对象时,采用地址传递规则,修改形参的值会同时改变实参的值.常见的可变对象类型包括list,set,dict.</p>
<pre><code class="language-py">def f(x):
    if type(x) == list:
        x = x.reverse()
    elif isinstance(x,set):
        x.add(8)
    else:
        x['0'] = 3
x = [1,2,3]
print('-------list------')
print(x)
f(x)
print(x)
print()

x = {4,5,6}
print('-------set------')
print(x)
f(x)
print(x)
print()

x = {'a':1,'b':2}
print('-------dict------')
print(x)
f(x)
print(x)
print()
</code></pre>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/20191230181450908.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="29-lambda函数">2.9 lambda函数</h2>
<p>lambda是一种特殊的自定义函数,使用关键字lambda进行定义,是一种匿名函数,函数体一般很短.</p>
<h3 id="291-定义">2.9.1 定义</h3>
<p>以关键字lambda开头,后面是参数列表,参数列表结束后加一个冒号,后面是返回值.</p>
<pre><code class="language-py">y = lambda x:x*3
z = lambda x,y:x*y
</code></pre>
<h3 id="292-调用">2.9.2 调用</h3>
<p>调用可以通过&quot;函数名&quot;调用,或者配合其他函数使用.<br>
<img src="https://img-blog.csdnimg.cn/20191230182622632.png" alt="在这里插入图片描述" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python基础(六)]]></title>
        <id>https://2293736867.github.io/post/python-ji-chu-liu/</id>
        <link href="https://2293736867.github.io/post/python-ji-chu-liu/">
        </link>
        <updated>2020-06-02T20:14:03.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#1-%E5%87%BD%E6%95%B0">1 函数</a>
<ul>
<li><a href="#11-%E5%87%BD%E6%95%B0%E7%9A%84%E5%88%86%E7%B1%BB">1.1 函数的分类</a></li>
<li><a href="#12-%E5%87%BD%E6%95%B0%E4%B8%8E%E6%96%B9%E6%B3%95">1.2 函数与方法</a></li>
<li><a href="#13-%E5%87%BD%E6%95%B0%E4%B9%9F%E6%98%AF%E5%AF%B9%E8%B1%A1">1.3 函数也是对象</a></li>
<li><a href="#14-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9">1.4 注意事项</a></li>
</ul>
</li>
<li><a href="#2-%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0">2 内置函数</a>
<ul>
<li><a href="#21-%E6%9F%A5%E7%9C%8B%E5%B8%AE%E5%8A%A9">2.1 查看帮助</a></li>
<li><a href="#22-%E6%95%B0%E5%AD%A6%E5%87%BD%E6%95%B0">2.2 数学函数</a>
<ul>
<li><a href="#221-abs">2.2.1 abs</a></li>
<li><a href="#222-maxmin">2.2.2 max/min</a></li>
<li><a href="#223-pow">2.2.3 pow</a></li>
<li><a href="#224-round">2.2.4 round</a></li>
</ul>
</li>
<li><a href="#23-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%87%BD%E6%95%B0">2.3 类型转换函数</a></li>
<li><a href="#24-%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0">2.4 其他函数</a>
<ul>
<li><a href="#241-type">2.4.1 type()</a></li>
<li><a href="#242-isinstance">2.4.2 isinstance()</a></li>
<li><a href="#243-dir">2.4.3 dir()</a></li>
<li><a href="#244-len">2.4.4 len()</a></li>
<li><a href="#245-range">2.4.5 range()</a></li>
<li><a href="#246-callable">2.4.6 callable()</a></li>
<li><a href="#247-bin">2.4.7 bin()</a></li>
<li><a href="#248-oct">2.4.8 oct()</a></li>
<li><a href="#249-hex">2.4.9 hex()</a></li>
<li><a href="#2410-int">2.4.10 int()</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</p>
<h1 id="1-函数">1 函数</h1>
<h2 id="11-函数的分类">1.1 函数的分类</h2>
<p>函数可以分成三种:</p>
<ul>
<li>内置函数(BIF):解释器中内置的函数,可以直接通过函数名调用,如len().</li>
<li>模块函数:定义在模块中的函数,通过模块名调用,如math.sin().</li>
<li>用户自定义函数.</li>
</ul>
<h2 id="12-函数与方法">1.2 函数与方法</h2>
<p>函数是指在类外定义的,可以独立调用的一组语句集合,另外通过类去调用的语句,也叫函数而不是方法.<br>
方法是指在类内定义的,需要通过对象与点调用的一组语句集合,方法中的self是隐式传递的.</p>
<h2 id="13-函数也是对象">1.3 函数也是对象</h2>
<p>在python中,函数也是对象,比如:</p>
<pre><code class="language-py">def xx():
    print(4)
print(type(xx))
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20191230024058760.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="14-注意事项">1.4 注意事项</h2>
<p>函数的参数带一个 * 时,表示元组,带两个 * 时,表示字典.函数的返回值可以为迭代器,元组等,如果没有return,默认返回None.<br>
另外就是docstring,docstring其实就是一堆注释,说明函数的作用,建议使用三引号.</p>
<h1 id="2-内置函数">2 内置函数</h1>
<p>内置函数就是内置在python解释器中的函数,可以直接通过函数名调用,不需要import.查看内置函数可以使用内置函数dir():</p>
<pre><code class="language-py">dir(__builtins__)
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20191230025011363.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="21-查看帮助">2.1 查看帮助</h2>
<p>可以使用help查看函数的帮助.<br>
<img src="https://img-blog.csdnimg.cn/20191230024805132.png" alt="在这里插入图片描述" loading="lazy"><br>
一般给出简单的帮助信息,详细信息可以去官网查询.</p>
<h2 id="22-数学函数">2.2 数学函数</h2>
<h3 id="221-abs">2.2.1 abs</h3>
<p>求绝对值.<br>
<img src="https://img-blog.csdnimg.cn/20191230025159181.png" alt="在这里插入图片描述" loading="lazy"></p>
<h3 id="222-maxmin">2.2.2 max/min</h3>
<p>求最大/小值,支持元组,列表,集合,字符串等.<br>
<img src="https://img-blog.csdnimg.cn/20191230025307134.png" alt="在这里插入图片描述" loading="lazy"></p>
<h3 id="223-pow">2.2.3 pow</h3>
<p>求次幂.<br>
<img src="https://img-blog.csdnimg.cn/20191230025535473.png" alt="在这里插入图片描述" loading="lazy"></p>
<h3 id="224-round">2.2.4 round</h3>
<p>四舍五入,两个参数,第一个参数是要四舍五入的数,第二个参数是保留的小数位数,第二个参数可以省略,省略的话相当于取整.</p>
<p>若保留的小数位数为2则保留2位,保留的小数位数为1则保留1位,保留的小数位数为0则保留....0...呃...不是,保留1位,保留1位0.<br>
<img src="https://img-blog.csdnimg.cn/20191230030010509.png" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="23-类型转换函数">2.3 类型转换函数</h2>
<p>就是常用的int(),bool()等函数,这些也是内置函数.<br>
<img src="https://img-blog.csdnimg.cn/20191230030538456.png" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="24-其他函数">2.4 其他函数</h2>
<h3 id="241-type">2.4.1 type()</h3>
<p>type()是查看类型的函数.<br>
<img src="https://img-blog.csdnimg.cn/20191230030833387.png" alt="在这里插入图片描述" loading="lazy"></p>
<h3 id="242-isinstance">2.4.2 isinstance()</h3>
<p>isinstance()判断一个的类型,与type()类似,但是isinstance()会考虑继承关系,而type()不会考虑.<br>
<img src="https://img-blog.csdnimg.cn/20191230031046214.png" alt="在这里插入图片描述" loading="lazy"></p>
<pre><code class="language-py">class a:
    pass
class b(a):
    pass
print('type(a()) == a is ',type(a()) == a)
print('type(b()) == a is ',type(b()) == a)
print('isinstance(a(),a) is ',isinstance(a(),a))
print('isinstance(b(),a) is ',isinstance(b(),a))
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20191230031357413.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h3 id="243-dir">2.4.3 dir()</h3>
<p>dir()查看搜索的路径.</p>
<h3 id="244-len">2.4.4 len()</h3>
<p>求长度.</p>
<h3 id="245-range">2.4.5 range()</h3>
<p>快速生成序列,返回一个迭代器.<br>
<img src="https://img-blog.csdnimg.cn/20191230031629532.png" alt="在这里插入图片描述" loading="lazy"></p>
<h3 id="246-callable">2.4.6 callable()</h3>
<p>判断对象是否可以被调用,因为函数也是一个对象,所以可以通过callable()判断函数是否可以被调用.<br>
<img src="https://img-blog.csdnimg.cn/20191230031858789.png" alt="在这里插入图片描述" loading="lazy"></p>
<h3 id="247-bin">2.4.7 bin()</h3>
<p>十进制--&gt;二进制.<br>
<img src="https://img-blog.csdnimg.cn/20191230032141960.png" alt="在这里插入图片描述" loading="lazy"></p>
<h3 id="248-oct">2.4.8 oct()</h3>
<p>十进制--&gt;八进制.<br>
<img src="https://img-blog.csdnimg.cn/20191230032517649.png" alt="在这里插入图片描述" loading="lazy"></p>
<h3 id="249-hex">2.4.9 hex()</h3>
<p>十进制--&gt;十六进制.<br>
<img src="https://img-blog.csdnimg.cn/20191230032553361.png" alt="在这里插入图片描述" loading="lazy"></p>
<h3 id="2410-int">2.4.10 int()</h3>
<p>n进制--&gt;十进制.<br>
<img src="https://img-blog.csdnimg.cn/20191230032807896.png" alt="在这里插入图片描述" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[pom.xml详解]]></title>
        <id>https://2293736867.github.io/post/pomxml-xiang-jie/</id>
        <link href="https://2293736867.github.io/post/pomxml-xiang-jie/">
        </link>
        <updated>2020-06-02T20:13:39.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#1pomxml%E6%98%AF%E4%BB%80%E4%B9%88">1.pom.xml是什么</a></li>
<li><a href="#2%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE">2.基本配置</a>
<ul>
<li><a href="#1project">(1)&lt;project&gt;</a></li>
<li><a href="#2modelversion">(2)&lt;modelVersion&gt;</a></li>
<li><a href="#3maven%E5%9D%90%E6%A0%87">(3)Maven坐标</a>
<ul>
<li><a href="#agroupid">A.&lt;groupId&gt;</a></li>
<li><a href="#bartifactid">B.&lt;artifactId&gt;</a></li>
<li><a href="#cversion">C.&lt;version&gt;</a></li>
</ul>
</li>
<li><a href="#4packaging">(4)&lt;packaging&gt;</a></li>
<li><a href="#5pom-%E5%85%B3%E7%B3%BB">(5)POM 关系</a>
<ul>
<li><a href="#a%E4%BE%9D%E8%B5%96">A.依赖</a>
<ul>
<li><a href="#agroupid%E4%B8%8Eartifactid">a.&lt;groupId&gt;与&lt;artifactId&gt;</a></li>
<li><a href="#bversion">b.&lt;version&gt;</a></li>
<li><a href="#cclassifier">c.&lt;classifier&gt;</a></li>
<li><a href="#dtype">d.&lt;type&gt;</a></li>
<li><a href="#escope">e.&lt;scope&gt;</a></li>
<li><a href="#fsystempath">f.&lt;systemPath&gt;</a></li>
<li><a href="#goptional">g.&lt;optional&gt;</a></li>
<li><a href="#hexclusions">h.&lt;exclusions&gt;</a></li>
</ul>
</li>
<li><a href="#b%E7%BB%A7%E6%89%BF">B.继承</a></li>
<li><a href="#c%E8%81%9A%E5%90%88%E6%88%96%E5%A4%9A%E6%A8%A1%E5%9D%97">C.聚合(或多模块)</a></li>
</ul>
</li>
<li><a href="#6%E5%B1%9E%E6%80%A7">(6)属性</a>
<ul>
<li><a href="#1envx">①env.x</a></li>
<li><a href="#2projectx">②project.x</a></li>
<li><a href="#3settingsx">③settings.x</a></li>
<li><a href="#4javax">④java.x</a></li>
<li><a href="#5x">⑤x</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#3%E6%9E%84%E5%BB%BA%E9%85%8D%E7%BD%AE">3.构建配置</a>
<ul>
<li><a href="#1basebuild%E5%85%83%E7%B4%A0">(1)BaseBuild元素</a>
<ul>
<li><a href="#adefaultgoal">A.&lt;defaultGoal&gt;</a></li>
<li><a href="#bdirectory">B.&lt;directory&gt;</a></li>
<li><a href="#cfinalname">C.&lt;finalName&gt;</a></li>
<li><a href="#dfilters">D.&lt;filters&gt;</a></li>
</ul>
</li>
<li><a href="#2%E8%B5%84%E6%BA%90">(2)资源</a>
<ul>
<li><a href="#aresource">A.&lt;resource&gt;</a></li>
<li><a href="#btargetpath">B.&lt;targetPath&gt;</a></li>
<li><a href="#cflitering">C.&lt;flitering&gt;</a></li>
<li><a href="#ddirectory">D.&lt;directory&gt;</a></li>
<li><a href="#einclude">E.&lt;include&gt;</a></li>
<li><a href="#fexcludes">F.&lt;excludes&gt;</a></li>
</ul>
</li>
<li><a href="#3%E6%8F%92%E4%BB%B6">(3)插件</a>
<ul>
<li><a href="#agroupid%E4%B8%8Eartifactid-2">A.&lt;groupId&gt;与&lt;artifactId&gt;</a></li>
<li><a href="#bversion-2">B.&lt;version&gt;</a></li>
<li><a href="#cextensions">C.&lt;extensions&gt;</a></li>
<li><a href="#dinherited">D.&lt;inherited&gt;</a></li>
<li><a href="#econfiguration">E.&lt;configuration&gt;</a></li>
<li><a href="#fdependencies">F.&lt;dependencies&gt;</a></li>
<li><a href="#gexecutions">G.&lt;executions&gt;</a></li>
</ul>
</li>
<li><a href="#4%E6%8F%92%E4%BB%B6%E7%AE%A1%E7%90%86">(4)插件管理</a></li>
<li><a href="#5%E7%9B%AE%E5%BD%95">(5)目录</a>
<ul>
<li><a href="#a%E9%A1%B9%E7%9B%AE%E6%BA%90%E7%A0%81%E7%9B%AE%E5%BD%95">A.项目源码目录</a></li>
<li><a href="#b%E6%B5%8B%E8%AF%95%E6%BA%90%E7%A0%81%E7%9B%AE%E5%BD%95">B.测试源码目录</a></li>
<li><a href="#cclass%E7%9B%AE%E5%BD%95">C.class目录</a></li>
<li><a href="#d%E6%B5%8B%E8%AF%95class">D.测试class</a></li>
</ul>
</li>
<li><a href="#6%E6%89%A9%E5%B1%95">(6)扩展</a></li>
<li><a href="#7%E6%8A%A5%E8%A1%A8">(7)报表</a>
<ul>
<li><a href="#aexcludedefaults">A.&lt;excludeDefaults&gt;</a></li>
<li><a href="#boutputdirectory">B.&lt;outputDirectory&gt;</a></li>
<li><a href="#cplugins">C.&lt;plugins&gt;</a></li>
<li><a href="#dreportsets">D.&lt;reportSets&gt;</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#4%E9%A1%B9%E7%9B%AE%E4%BF%A1%E6%81%AF">4.项目信息</a>
<ul>
<li><a href="#1%E8%AE%B8%E5%8F%AF%E8%AF%81">(1)许可证</a>
<ul>
<li><a href="#aname">A.&lt;name&gt;</a></li>
<li><a href="#burl">B.&lt;url&gt;</a></li>
<li><a href="#cdistribution">C.&lt;distribution&gt;</a></li>
<li><a href="#dcomments">D.&lt;comments&gt;</a></li>
</ul>
</li>
<li><a href="#2%E7%BB%84%E7%BB%87">(2)组织</a></li>
<li><a href="#3%E5%BC%80%E5%8F%91%E8%80%85">(3)开发者</a>
<ul>
<li><a href="#aid">A.&lt;id&gt;</a></li>
<li><a href="#bname">B.&lt;name&gt;</a></li>
<li><a href="#cemail">C.&lt;email&gt;</a></li>
<li><a href="#durl">D.&lt;url&gt;</a></li>
<li><a href="#eorganization">E.&lt;organization&gt;</a></li>
<li><a href="#forganizationurl">F.&lt;organizationUrl&gt;</a></li>
<li><a href="#groles">G.&lt;roles&gt;</a></li>
<li><a href="#htimezone">H.&lt;timeZone&gt;</a></li>
<li><a href="#iproperties">I.&lt;properties&gt;</a></li>
</ul>
</li>
<li><a href="#4%E8%B4%A1%E7%8C%AE%E8%80%85">(4)贡献者</a></li>
</ul>
</li>
<li><a href="#5%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE">5.环境配置</a>
<ul>
<li><a href="#1%E9%97%AE%E9%A2%98%E7%AE%A1%E7%90%86">(1)问题管理</a></li>
<li><a href="#2%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E7%AE%A1%E7%90%86">(2)持续集成管理</a>
<ul>
<li><a href="#asystem">A.&lt;system&gt;</a></li>
<li><a href="#burl-2">B.&lt;url&gt;</a></li>
<li><a href="#cnotifiers">C.&lt;notifiers&gt;</a>
<ul>
<li><a href="#atype">a.&lt;type&gt;</a></li>
<li><a href="#bsendonerror">b.&lt;sendOnError&gt;</a></li>
<li><a href="#csendonfailure">c.&lt;sendOnFailure&gt;</a></li>
<li><a href="#dsendonsuccess">d.&lt;sendOnSuccess&gt;</a></li>
<li><a href="#esendonwarning">e.&lt;sendOnWarning&gt;</a></li>
<li><a href="#fconfiguration">f.&lt;configuration&gt;</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#3%E9%82%AE%E4%BB%B6%E5%88%97%E8%A1%A8">(3)邮件列表</a>
<ul>
<li><a href="#aname-2">A.&lt;name&gt;</a></li>
<li><a href="#bsubscribe">B.&lt;subscribe&gt;</a></li>
<li><a href="#cunsubscribe">C.&lt;unsubscribe&gt;</a></li>
<li><a href="#dpost">D.&lt;post&gt;</a></li>
<li><a href="#earchive">E.&lt;archive&gt;</a></li>
</ul>
</li>
<li><a href="#4%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86scm">(4)软件配置管理(SCM)</a>
<ul>
<li><a href="#aconnection%E4%B8%8Edevelopconnection">A.&lt;connection&gt;与&lt;developConnection&gt;</a></li>
<li><a href="#btag">B.&lt;tag&gt;</a></li>
<li><a href="#curl">C.&lt;url&gt;</a></li>
</ul>
</li>
<li><a href="#5%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6">(5)前提条件</a></li>
<li><a href="#6%E4%BB%93%E5%BA%93">(6)仓库</a>
<ul>
<li><a href="#areleases">A.&lt;releases&gt;</a></li>
<li><a href="#bsnapshots">B.&lt;snapshots&gt;</a></li>
<li><a href="#cid">C.&lt;id&gt;</a></li>
<li><a href="#dname">D.&lt;name&gt;</a></li>
<li><a href="#eurl">E.&lt;url&gt;</a></li>
<li><a href="#flayout">F.&lt;layout&gt;</a></li>
</ul>
</li>
<li><a href="#7%E6%8F%92%E4%BB%B6%E4%BB%93%E5%BA%93">(7)插件仓库</a></li>
<li><a href="#8%E5%88%86%E5%8F%91%E7%AE%A1%E7%90%86">(8)分发管理</a>
<ul>
<li><a href="#a%E4%BB%93%E5%BA%93">A.仓库</a></li>
<li><a href="#b%E7%AB%99%E7%82%B9%E9%83%A8%E7%BD%B2">B.站点部署</a></li>
<li><a href="#c%E9%87%8D%E5%AE%9A%E4%BD%8D">C.重定位</a></li>
</ul>
</li>
<li><a href="#9%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">(9)配置文件</a>
<ul>
<li><a href="#aactivebydefault">A.&lt;activeByDefault&gt;</a></li>
<li><a href="#bjdk">B.&lt;jdk&gt;</a></li>
<li><a href="#cos">C.&lt;os&gt;</a></li>
<li><a href="#dproperty">D.&lt;property&gt;</a></li>
<li><a href="#efile">E.&lt;file&gt;</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</p>
<h1 id="1pomxml是什么">1.pom.xml是什么</h1>
<p>pom是Project Object Model(项目对象模型)的缩写,是Maven中的项目文件,可用于管理与配置依赖,组织信息,项目授权,远程仓库等等.一个Maven项目,可以没有任何代码,但不能没有pom.xml.</p>
<h1 id="2基本配置">2.基本配置</h1>
<h2 id="1project">(1)&lt;project&gt;</h2>
<p>&lt;project&gt;是pom.xml的根元素,包含了一些约束信息.</p>
<pre><code class="language-xml">&lt;project 
xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; 
xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;
&lt;/project&gt;
</code></pre>
<h2 id="2modelversion">(2)&lt;modelVersion&gt;</h2>
<pre><code class="language-xml">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
</code></pre>
<p>pom的版本,这是Maven 2&amp;3唯一支持的pom版本,而且不能忽略.</p>
<h2 id="3maven坐标">(3)Maven坐标</h2>
<p>&lt;groupId&gt;,&lt;artifactId&gt;与&lt;version&gt;标识了仓库中的一个特定位置,叫项目坐标.三个属性告诉了Maven项目中的一个特定版本,让Maven知道如何处理它们以及在生命周期内的哪一阶段需要它们.</p>
<h3 id="agroupid">A.&lt;groupId&gt;</h3>
<p>&lt;groupId&gt;表示项目所属的组,通常是一个公司或者组织的名称,如org.springframework.</p>
<h3 id="bartifactid">B.&lt;artifactId&gt;</h3>
<p>&lt;artifactId&gt;表示项目的唯一标识.</p>
<h3 id="cversion">C.&lt;version&gt;</h3>
<p>&lt;version&gt;表示项目的版本号,通常来说项目的版本号分成三段:<br>
主版本号.次版本号.修订版本号</p>
<ul>
<li>主版本号:代表架构变动或者不兼容的实现.</li>
<li>次版本号:兼容性修改,功能增强.</li>
<li>修订版本号:bug修复.</li>
</ul>
<p>版本号的后缀意味着项目的不同阶段:</p>
<ul>
<li>SNAPSHOT:开发中的版本</li>
<li>RELEASE:正式发布版</li>
<li>M1,M2:M指里程碑,表示即将发布</li>
<li>RC:Release Candidate,发布候选</li>
<li>GA:General Availablity,基本可用版本</li>
</ul>
<h2 id="4packaging">(4)&lt;packaging&gt;</h2>
<p>打包类型,没有提供的话默认值为jar,常见的有jar与war,也可以取值:</p>
<ul>
<li>maven-plugin</li>
<li>pom</li>
<li>ejb</li>
<li>ear</li>
<li>rar</li>
</ul>
<h2 id="5pom-关系">(5)POM 关系</h2>
<p>Maven的一个强大之处是处理项目关系的方式,可以通过一个公共的本地仓库去解决问题.</p>
<h3 id="a依赖">A.依赖</h3>
<p>POM的基础就是依赖列表,Maven下载与在编译时链接依赖与其他所需要的目标,而且可以处理传递性依赖,使列表可以专注于项目所需的依赖.依赖放在&lt;dependencies&gt;里面,包含若干个&lt;dependency&gt;.</p>
<pre><code class="language-xml">&lt;dependencies&gt;
	&lt;dependency&gt;
		....
	&lt;/dependency&gt;
	&lt;dependency&gt;
		....
	&lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>
<p>一个&lt;dependency&gt;通常包含:</p>
<h4 id="agroupid与artifactid">a.&lt;groupId&gt;与&lt;artifactId&gt;</h4>
<p>对应项目坐标</p>
<h4 id="bversion">b.&lt;version&gt;</h4>
<p>版本</p>
<h4 id="cclassifier">c.&lt;classifier&gt;</h4>
<p>可用于配置不同jdk的&lt;depenency&gt;,比如让一个&lt;dependency&gt;同时支持jdk8与jdk11,可以选择使用哪一个&lt;classifier&gt;,方便在不同jdk中使用.</p>
<h4 id="dtype">d.&lt;type&gt;</h4>
<p>对应的依赖类型,默认为jar,通常对应与&lt;packaging&gt;.</p>
<h4 id="escope">e.&lt;scope&gt;</h4>
<p>scope表示类库与项目的关系,可以取以下5个值:</p>
<ul>
<li>compile:默认值,编译依赖使其在所有类路径中可用,而且这些依赖项会传递到其他依赖项目,在编译和打包时都需要此类库.</li>
<li>provided:类似compile,但是期望JDK或一个容器会在运行时提供,仅在编译和测试类路径上可用,不可传递.</li>
<li>runtime:在运行时与测试类路径中可用,在编译类路径中不可用.</li>
<li>test:测试编译与执行阶段可用,不可传递.</li>
<li>system:类似于provided,但必须显式提供jar包.</li>
</ul>
<h4 id="fsystempath">f.&lt;systemPath&gt;</h4>
<p>当&lt;scope&gt;为system才需要这个,否则(当&lt;scope&gt;不为system时)会构建失败.路径必须为绝对路径.</p>
<h4 id="goptional">g.&lt;optional&gt;</h4>
<p>标记依赖的可选状态.</p>
<h4 id="hexclusions">h.&lt;exclusions&gt;</h4>
<p>排除不需要的依赖,包含子元素&lt;exclusion&gt;,每个&lt;exclusion&gt;都包含&lt;groupId&gt;与&lt;artifactId&gt;.</p>
<h3 id="b继承">B.继承</h3>
<p>使用&lt;parent&gt;指定需要继承的pom.</p>
<pre><code class="language-xml">&lt;parent&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
    &lt;version&gt;2.2.1.RELEASE&lt;/version&gt;
&lt;/parent&gt;
</code></pre>
<p>子pom会继承父pom的&lt;groupId&gt;,&lt;version&gt;,&lt;build&gt;等众多属性,具体包括:</p>
<ul>
<li>groupId</li>
<li>version</li>
<li>description</li>
<li>url</li>
<li>inceptionYear</li>
<li>organization</li>
<li>licenses</li>
<li>developers</li>
<li>contributors</li>
<li>mailingLists</li>
<li>scm</li>
<li>issueManagement</li>
<li>ciManagement</li>
<li>properties</li>
<li>dependencyManagement</li>
<li>dependencies</li>
<li>repositories</li>
<li>pluginRepositories</li>
<li>build</li>
<li>reporting</li>
<li>profiles</li>
</ul>
<p>但不能继承:</p>
<ul>
<li>artifactId</li>
<li>name</li>
<li>prerequisites</li>
</ul>
<p>另外,就像java中所有类都继承于java.lang.Object一样,所有POM都有一个&quot;Super POM&quot;,pom都从它继承而来,下面是Maven3.5.4的&quot;Super pom&quot;:</p>
<pre><code class="language-xml">&lt;project&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
 
  &lt;repositories&gt;
    &lt;repository&gt;
      &lt;id&gt;central&lt;/id&gt;
      &lt;name&gt;Central Repository&lt;/name&gt;
      &lt;url&gt;https://repo.maven.apache.org/maven2&lt;/url&gt;
      &lt;layout&gt;default&lt;/layout&gt;
      &lt;snapshots&gt;
        &lt;enabled&gt;false&lt;/enabled&gt;
      &lt;/snapshots&gt;
    &lt;/repository&gt;
  &lt;/repositories&gt;
 
  &lt;pluginRepositories&gt;
    &lt;pluginRepository&gt;
      &lt;id&gt;central&lt;/id&gt;
      &lt;name&gt;Central Repository&lt;/name&gt;
      &lt;url&gt;https://repo.maven.apache.org/maven2&lt;/url&gt;
      &lt;layout&gt;default&lt;/layout&gt;
      &lt;snapshots&gt;
        &lt;enabled&gt;false&lt;/enabled&gt;
      &lt;/snapshots&gt;
      &lt;releases&gt;
        &lt;updatePolicy&gt;never&lt;/updatePolicy&gt;
      &lt;/releases&gt;
    &lt;/pluginRepository&gt;
  &lt;/pluginRepositories&gt;
 
  &lt;build&gt;
    &lt;directory&gt;${project.basedir}/target&lt;/directory&gt;
    &lt;outputDirectory&gt;${project.build.directory}/classes&lt;/outputDirectory&gt;
    &lt;finalName&gt;${project.artifactId}-${project.version}&lt;/finalName&gt;
    &lt;testOutputDirectory&gt;${project.build.directory}/test-classes&lt;/testOutputDirectory&gt;
    &lt;sourceDirectory&gt;${project.basedir}/src/main/java&lt;/sourceDirectory&gt;
    &lt;scriptSourceDirectory&gt;${project.basedir}/src/main/scripts&lt;/scriptSourceDirectory&gt;
    &lt;testSourceDirectory&gt;${project.basedir}/src/test/java&lt;/testSourceDirectory&gt;
    &lt;resources&gt;
      &lt;resource&gt;
        &lt;directory&gt;${project.basedir}/src/main/resources&lt;/directory&gt;
      &lt;/resource&gt;
    &lt;/resources&gt;
    &lt;testResources&gt;
      &lt;testResource&gt;
        &lt;directory&gt;${project.basedir}/src/test/resources&lt;/directory&gt;
      &lt;/testResource&gt;
    &lt;/testResources&gt;
    &lt;pluginManagement&gt;
      &lt;!-- NOTE: These plugins will be removed from future versions of the super POM --&gt;
      &lt;!-- They are kept for the moment as they are very unlikely to conflict with lifecycle mappings (MNG-4453) --&gt;
      &lt;plugins&gt;
        &lt;plugin&gt;
          &lt;artifactId&gt;maven-antrun-plugin&lt;/artifactId&gt;
          &lt;version&gt;1.3&lt;/version&gt;
        &lt;/plugin&gt;
        &lt;plugin&gt;
          &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;
          &lt;version&gt;2.2-beta-5&lt;/version&gt;
        &lt;/plugin&gt;
        &lt;plugin&gt;
          &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;
          &lt;version&gt;2.8&lt;/version&gt;
        &lt;/plugin&gt;
        &lt;plugin&gt;
          &lt;artifactId&gt;maven-release-plugin&lt;/artifactId&gt;
          &lt;version&gt;2.5.3&lt;/version&gt;
        &lt;/plugin&gt;
      &lt;/plugins&gt;
    &lt;/pluginManagement&gt;
  &lt;/build&gt;
 
  &lt;reporting&gt;
    &lt;outputDirectory&gt;${project.build.directory}/site&lt;/outputDirectory&gt;
  &lt;/reporting&gt;
 
  &lt;profiles&gt;
    &lt;!-- NOTE: The release profile will be removed from future versions of the super POM --&gt;
    &lt;profile&gt;
      &lt;id&gt;release-profile&lt;/id&gt;
 
      &lt;activation&gt;
        &lt;property&gt;
          &lt;name&gt;performRelease&lt;/name&gt;
          &lt;value&gt;true&lt;/value&gt;
        &lt;/property&gt;
      &lt;/activation&gt;
 
      &lt;build&gt;
        &lt;plugins&gt;
          &lt;plugin&gt;
            &lt;inherited&gt;true&lt;/inherited&gt;
            &lt;artifactId&gt;maven-source-plugin&lt;/artifactId&gt;
            &lt;executions&gt;
              &lt;execution&gt;
                &lt;id&gt;attach-sources&lt;/id&gt;
                &lt;goals&gt;
                  &lt;goal&gt;jar-no-fork&lt;/goal&gt;
                &lt;/goals&gt;
              &lt;/execution&gt;
            &lt;/executions&gt;
          &lt;/plugin&gt;
          &lt;plugin&gt;
            &lt;inherited&gt;true&lt;/inherited&gt;
            &lt;artifactId&gt;maven-javadoc-plugin&lt;/artifactId&gt;
            &lt;executions&gt;
              &lt;execution&gt;
                &lt;id&gt;attach-javadocs&lt;/id&gt;
                &lt;goals&gt;
                  &lt;goal&gt;jar&lt;/goal&gt;
                &lt;/goals&gt;
              &lt;/execution&gt;
            &lt;/executions&gt;
          &lt;/plugin&gt;
          &lt;plugin&gt;
            &lt;inherited&gt;true&lt;/inherited&gt;
            &lt;artifactId&gt;maven-deploy-plugin&lt;/artifactId&gt;
            &lt;configuration&gt;
              &lt;updateReleaseInfo&gt;true&lt;/updateReleaseInfo&gt;
            &lt;/configuration&gt;
          &lt;/plugin&gt;
        &lt;/plugins&gt;
      &lt;/build&gt;
    &lt;/profile&gt;
  &lt;/profiles&gt;
&lt;/project&gt;
</code></pre>
<h3 id="c聚合或多模块">C.聚合(或多模块)</h3>
<p>模块是pom列出的项目,并作为一个组执行,每个模块通过pom文件或项目的相对路径进行列出.</p>
<pre><code class="language-xml">&lt;modules&gt;
    &lt;module&gt;my-project&lt;/module&gt;
    &lt;module&gt;another-project&lt;/module&gt;
    &lt;module&gt;third-project/pom-example.xml&lt;/module&gt;
&lt;/modules&gt;
</code></pre>
<p>不需要考虑模块间的依赖关系,Maven会对其进行拓扑排序以便在依赖模块之前构建依赖关系.</p>
<h2 id="6属性">(6)属性</h2>
<p>属性是Maven中的值占位符,像Ant一样,可以以</p>
<pre><code class="language-bash">${x}
</code></pre>
<p>这样的形式在pom.xml的任何位置访问一个值,也可以被用作默认值使用.<br>
有5种形式使用值:</p>
<h3 id="1envx">①env.x</h3>
<p>env会使用当前shell的环境变量的值.<br>
例如</p>
<pre><code class="language-bash">${env.PATH}
</code></pre>
<h3 id="2projectx">②project.x</h3>
<p>&lt;project&gt;下的x元素的值,如</p>
<pre><code class="language-bash">${project.version}
</code></pre>
<h3 id="3settingsx">③settings.x</h3>
<p>使用settings.xml中的元素的值</p>
<pre><code class="language-bash">${settings.offline}
</code></pre>
<h3 id="4javax">④java.x</h3>
<p>java系统属性值,通过java.lang.System.getProperties()获取,如</p>
<pre><code class="language-bash">${java.home}
</code></pre>
<h3 id="5x">⑤x</h3>
<p>直接使用x,用的是&lt;properties&gt;下的属性,比如</p>
<pre><code class="language-xml">&lt;properties&gt;
	&lt;aaa&gt;AAAAA&lt;/aaa&gt;
&lt;/properties&gt;
</code></pre>
<pre><code class="language-bash">${aaa}
</code></pre>
<h1 id="3构建配置">3.构建配置</h1>
<p>&lt;build&gt;,声明项目结构,管理插件等.</p>
<h2 id="1basebuild元素">(1)BaseBuild元素</h2>
<h3 id="adefaultgoal">A.&lt;defaultGoal&gt;</h3>
<p>目标的默认值,可以取值install,copile</p>
<h3 id="bdirectory">B.&lt;directory&gt;</h3>
<p>构建产生的文件存放目录</p>
<h3 id="cfinalname">C.&lt;finalName&gt;</h3>
<p>构建最终产生的项目名字,但有可能会被更改.</p>
<h3 id="dfilters">D.&lt;filters&gt;</h3>
<p>定义一组&lt;filter&gt;,&lt;filter&gt;内是.properties文件,项目中的占位符如xxx.xxx会被.properties中的xxx=xxx的具体值替换掉.</p>
<h2 id="2资源">(2)资源</h2>
<p>&lt;resources&gt;,项目相关的资源文件的位置.</p>
<h3 id="aresource">A.&lt;resource&gt;</h3>
<p>描述每个资源的根元素.</p>
<h3 id="btargetpath">B.&lt;targetPath&gt;</h3>
<p>构建资源的位置,对于jar包放在META-INF里面.</p>
<h3 id="cflitering">C.&lt;flitering&gt;</h3>
<p>取值true或false,表示是否开启过滤</p>
<h3 id="ddirectory">D.&lt;directory&gt;</h3>
<p>资源位置.</p>
<h3 id="einclude">E.&lt;include&gt;</h3>
<p>指定要包含的资源,使用*作为通配符.</p>
<h3 id="fexcludes">F.&lt;excludes&gt;</h3>
<p>与include相反,要排除的资源列表.</p>
<h2 id="3插件">(3)插件</h2>
<p>&lt;plugins&gt;下包含了若干个&lt;plugin&gt;,表示插件,每个&lt;plugin&gt;有以下元素:</p>
<h3 id="agroupid与artifactid-2">A.&lt;groupId&gt;与&lt;artifactId&gt;</h3>
<p>与上面的&lt;groupId&gt;与&lt;artifactId&gt;一样.</p>
<h3 id="bversion-2">B.&lt;version&gt;</h3>
<p>与上面的&lt;version&gt;一样.</p>
<h3 id="cextensions">C.&lt;extensions&gt;</h3>
<p>取值true或false,表示是否加载扩展,默认为false.</p>
<h3 id="dinherited">D.&lt;inherited&gt;</h3>
<p>取值ture或false,是否应用pom的继承关系,默认true.</p>
<h3 id="econfiguration">E.&lt;configuration&gt;</h3>
<p>插件项的相关配置,可以配置&lt;finalName&gt;,&lt;appendAssemblyld&gt;,&lt;descriptor&gt;等.</p>
<h3 id="fdependencies">F.&lt;dependencies&gt;</h3>
<p>引入插件的依赖,与前面的&lt;dependencies&gt;类似.</p>
<h3 id="gexecutions">G.&lt;executions&gt;</h3>
<p>插件可能有多个目标,&lt;executions&gt;配置每一个&lt;execution&gt;作为插件的目标,在&lt;execution&gt;中,用&lt;id&gt;指定执行目标的标识符,用&lt;goals&gt;指定目标,&lt;goals&gt;包含一组&lt;goal&gt;,&lt;phase&gt;用于指定阶段,&lt;inherited&gt;用于指定是否启用继承关系.另外&lt;execution&gt;也可以包含&lt;configuration&gt;,与上面类似,用于配置特定的目标,而不是插件的所有目标.</p>
<h2 id="4插件管理">(4)插件管理</h2>
<p>&lt;pluginManagement&gt;,包含一组&lt;plugins&gt;,继承于此项目的子项目都可以使用,子项目可以覆盖修改&lt;pluginManagement&gt;.</p>
<h2 id="5目录">(5)目录</h2>
<p>可以为pom设置各种目录,比如</p>
<h3 id="a项目源码目录">A.项目源码目录</h3>
<pre><code class="language-xml">&lt;sourceDirectory&gt;&lt;/sourceDirectory&gt;
</code></pre>
<p>构建项目时会编译该目录的源码,是相对于pom.xml的相对路径.</p>
<h3 id="b测试源码目录">B.测试源码目录</h3>
<pre><code class="language-xml">&lt;testSourceDirectory&gt;&lt;/testSourceDirectory&gt;
</code></pre>
<p>测试时会编译其中的源码,也是相对于pom.xml的相对路径.</p>
<h3 id="cclass目录">C.class目录</h3>
<pre><code class="language-xml">&lt;outputDirectory&gt;&lt;/outputDirectory&gt;
</code></pre>
<p>这里存放被编译过的class文件.</p>
<h3 id="d测试class">D.测试class</h3>
<pre><code class="language-xml">&lt;testOutputDirectory&gt;&lt;/testOutputDirectory&gt;
</code></pre>
<p>存放测试文件编译后的class文件.</p>
<h2 id="6扩展">(6)扩展</h2>
<p>&lt;extensions&gt;,将包含在运行中的构建的类路径中,在构建过程中可以激活扩展.比如可以为,例如这是支持ftp的wagon-ftp插件:</p>
<pre><code class="language-xml">&lt;build&gt;
	&lt;extensions&gt;
		&lt;extension&gt;
			&lt;groupId&gt;org.apache.maven.wagon&lt;/groudId&gt;
			&lt;artifactId&gt;wagon-ftp&lt;/artifactId&gt;
			&lt;version&gt;3.3.4&lt;/version&gt;
		&lt;/extension&gt;
	&lt;/extensions&gt;
&lt;/build&gt;
</code></pre>
<h2 id="7报表">(7)报表</h2>
<p>&lt;reporting&gt;,描述产生报表的规范等,执行&quot;mvn site&quot;时报表就会运行.</p>
<h3 id="aexcludedefaults">A.&lt;excludeDefaults&gt;</h3>
<p>是否包含默认报表.</p>
<h3 id="boutputdirectory">B.&lt;outputDirectory&gt;</h3>
<p>报表存放位置.</p>
<h3 id="cplugins">C.&lt;plugins&gt;</h3>
<p>报表包含的插件以及配置.</p>
<h3 id="dreportsets">D.&lt;reportSets&gt;</h3>
<p>包含一组&lt;reportSet&gt;,与&lt;execution&gt;类似,配置多个目标,每个&lt;reportSet&gt;包含&lt;id&gt;,&lt;configuration&gt;,&lt;inherited&gt;,以及&lt;reports&gt;,&lt;id&gt;指定报表集合的标识符,&lt;configuration&gt;表示使用的报表配置,&lt;inherited&gt;表示是否继承到子pom,&lt;reports&gt;包含一组&lt;report&gt;,表示使用哪些报表.</p>
<h1 id="4项目信息">4.项目信息</h1>
<h2 id="1许可证">(1)许可证</h2>
<p>&lt;licenses&gt;,包含一组&lt;license&gt;,每个&lt;license&gt;包含&lt;name&gt;,&lt;url&gt;,&lt;distribution&gt;,&lt;comments&gt;.</p>
<h3 id="aname">A.&lt;name&gt;</h3>
<p>名称.</p>
<h3 id="burl">B.&lt;url&gt;</h3>
<p>官方license页面的url.</p>
<h3 id="cdistribution">C.&lt;distribution&gt;</h3>
<p>项目分发的方式,可以选择</p>
<ul>
<li>repo:从Maven仓库下载.</li>
<li>manual:手动安装.</li>
</ul>
<h3 id="dcomments">D.&lt;comments&gt;</h3>
<p>一些补充信息.</p>
<h2 id="2组织">(2)组织</h2>
<p>&lt;organazation&gt;,包含&lt;name&gt;,&lt;url&gt;,与&lt;license&gt;的类似.</p>
<h2 id="3开发者">(3)开发者</h2>
<p>&lt;developers&gt;,包含一组&lt;developer&gt;,每个&lt;developer&gt;包含:</p>
<h3 id="aid">A.&lt;id&gt;</h3>
<p>开发者id.</p>
<h3 id="bname">B.&lt;name&gt;</h3>
<p>姓名.</p>
<h3 id="cemail">C.&lt;email&gt;</h3>
<p>邮箱.</p>
<h3 id="durl">D.&lt;url&gt;</h3>
<p>主页url.</p>
<h3 id="eorganization">E.&lt;organization&gt;</h3>
<p>所属组织.</p>
<h3 id="forganizationurl">F.&lt;organizationUrl&gt;</h3>
<p>所属组织的主页url.</p>
<h3 id="groles">G.&lt;roles&gt;</h3>
<p>角色,包含一组&lt;role&gt;,一个&lt;role&gt;描述一个角色.</p>
<h3 id="htimezone">H.&lt;timeZone&gt;</h3>
<p>时区,可以以America/New_York或Europe/Berlin这样的形式,或者设置一个整数,范围[-11,12].</p>
<h3 id="iproperties">I.&lt;properties&gt;</h3>
<p>开发者属性,如如何处理即时消息等.</p>
<h2 id="4贡献者">(4)贡献者</h2>
<p>&lt;contributors&gt;,包含一组&lt;contributor&gt;,类似于&lt;developer&gt;,包含&lt;name&gt;,&lt;email&gt;等元素.</p>
<h1 id="5环境配置">5.环境配置</h1>
<h2 id="1问题管理">(1)问题管理</h2>
<p>&lt;issueManagement&gt;,定义缺陷跟踪系统,如Bugzilla,TestTrack,ClearQuest等,包含&lt;system&gt;与&lt;url&gt;元素,&lt;system&gt;指定系统名字,&lt;url&gt;指定问题管理系统的url.</p>
<h2 id="2持续集成管理">(2)持续集成管理</h2>
<p>&lt;ciManagement&gt;,使用了触发器,包含了:</p>
<h3 id="asystem">A.&lt;system&gt;</h3>
<p>持续集成系统的名称.</p>
<h3 id="burl-2">B.&lt;url&gt;</h3>
<p>持续集成系统的url.</p>
<h3 id="cnotifiers">C.&lt;notifiers&gt;</h3>
<p>包含一组&lt;notifier&gt;,用来配置触发器,每个&lt;notifier&gt;包含:</p>
<h4 id="atype">a.&lt;type&gt;</h4>
<p>如何发送通知,比如可以取值mail.</p>
<h4 id="bsendonerror">b.&lt;sendOnError&gt;</h4>
<p>取值true/false,错误时发送.</p>
<h4 id="csendonfailure">c.&lt;sendOnFailure&gt;</h4>
<p>取值true/false,失败时发送.</p>
<h4 id="dsendonsuccess">d.&lt;sendOnSuccess&gt;</h4>
<p>取值true/false,成功时发送.</p>
<h4 id="esendonwarning">e.&lt;sendOnWarning&gt;</h4>
<p>取值true/false,发生警告时发送.</p>
<h4 id="fconfiguration">f.&lt;configuration&gt;</h4>
<p>相关配置,例如可以添加&lt;address&gt;,发送的地址.</p>
<h2 id="3邮件列表">(3)邮件列表</h2>
<p>&lt;mailingLists&gt;,包含一组&lt;mailingList&gt;,表示邮件信息,包括:</p>
<h3 id="aname-2">A.&lt;name&gt;</h3>
<p>邮件名称.</p>
<h3 id="bsubscribe">B.&lt;subscribe&gt;</h3>
<p>订阅邮件地址或链接.</p>
<h3 id="cunsubscribe">C.&lt;unsubscribe&gt;</h3>
<p>取消订阅邮件或链接.</p>
<h3 id="dpost">D.&lt;post&gt;</h3>
<p>要发送的邮件地址.</p>
<h3 id="earchive">E.&lt;archive&gt;</h3>
<p>查看旧的邮件的url.</p>
<h2 id="4软件配置管理scm">(4)软件配置管理(SCM)</h2>
<p>&lt;scm&gt;,也叫Source Code/Control Management,允许配置代码库供web站点和其他插件使用.包含:</p>
<h3 id="aconnection与developconnection">A.&lt;connection&gt;与&lt;developConnection&gt;</h3>
<p>描述如何通过Maven连接到版本控制系统,其中connection需要读权限,developConnection需要写权限.</p>
<h3 id="btag">B.&lt;tag&gt;</h3>
<p>代码标签,默认为HEAD.</p>
<h3 id="curl">C.&lt;url&gt;</h3>
<p>公开的可浏览的仓库,例如ViewVC或Fisheye.</p>
<h2 id="5前提条件">(5)前提条件</h2>
<p>&lt;prerequisites&gt;,这是Maven2中的元素,只有一个子元素&lt;maven&gt;,指定maven的版本,且规定是2.x版本.Maven3中不需要&lt;prerequisites&gt;了,可以用:</p>
<pre><code class="language-xml">&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
            &lt;artifactId&gt;maven-enforcer-plugin&lt;/artifactId&gt;
            &lt;version&gt;3.0.0-M3&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                &lt;id&gt;enforce-maven&lt;/id&gt;
                &lt;goals&gt;
                    &lt;goal&gt;enforce&lt;/goal&gt;
                &lt;/goals&gt;
                &lt;configuration&gt;
                &lt;rules&gt;
                    &lt;requireMavenVersion&gt;
                        &lt;version&gt;3.0&lt;/version&gt;
                    &lt;/requireMavenVersion&gt;
                &lt;/rules&gt;    
            &lt;/configuration&gt;
        &lt;/execution&gt;
      &lt;/executions&gt;
    &lt;/plugin&gt;
  &lt;/plugins&gt;
&lt;/build&gt;
</code></pre>
<p>代替.</p>
<h2 id="6仓库">(6)仓库</h2>
<p>&lt;repositories&gt;,包含一组&lt;repository&gt;,表示仓库的位置,每个&lt;repository&gt;包含:</p>
<h3 id="areleases">A.&lt;releases&gt;</h3>
<p>如何处理远征仓库的发布版本,包含:</p>
<ul>
<li>&lt;enabled&gt;<br>
true/false,是否启用.</li>
<li>&lt;updatePolicy&gt;<br>
更新频率,Maven将本地pom的时间戳与远程进行比较,可以选择:always,daily(默认),interval:X(X是一个整数,表示X分钟),never.</li>
<li>&lt;checksumPolicy&gt;<br>
校验错误或校验失败时的策略,可以选择ignore,fail或warn.</li>
</ul>
<h3 id="bsnapshots">B.&lt;snapshots&gt;</h3>
<p>如何处理远程仓库的快照版本,包含的元素与&lt;releases&gt;一样.</p>
<h3 id="cid">C.&lt;id&gt;</h3>
<p>远程仓库的标识符.</p>
<h3 id="dname">D.&lt;name&gt;</h3>
<p>远程仓库的名称.</p>
<h3 id="eurl">E.&lt;url&gt;</h3>
<p>远程仓库的url.</p>
<h3 id="flayout">F.&lt;layout&gt;</h3>
<p>仓库布局类型,可以是default或legacy,Maven2.x为仓库提供了默认布局.</p>
<h2 id="7插件仓库">(7)插件仓库</h2>
<p>&lt;pluginRepositories&gt;,插件的远程仓库列表,包含一组&lt;pluginRepository&gt;,与&lt;repositories&gt;中的&lt;repository&gt;类似.</p>
<h2 id="8分发管理">(8)分发管理</h2>
<p>&lt;distributeManagement&gt;,管理整个构建过程中的分发,可以把网站部署到远程服务器或者把构件部署到远程仓库.包含:</p>
<h3 id="a仓库">A.仓库</h3>
<p>&lt;repository&gt;,仓库信息,包含:</p>
<ul>
<li>&lt;uniqueVersion&gt;:唯一版本,取值true/false,表示是否生成一个唯一版本号或是使用部分地址作为版本号.</li>
<li>&lt;name&gt;:仓库名字.</li>
<li>&lt;id&gt;:仓库id.</li>
<li>&lt;url&gt;:指定仓库位置.</li>
<li>&lt;layout&gt;:布局,取值default或legacy.</li>
</ul>
<p>还有一个叫&lt;snapshotRepository&gt;的元素,与&lt;repository&gt;类似,表示快照仓库.</p>
<h3 id="b站点部署">B.站点部署</h3>
<p>&lt;site&gt;,定义了如何部署项目的站点与文档.包含:</p>
<ul>
<li>&lt;name&gt;:站点名称.</li>
<li>&lt;id&gt;:站点id.</li>
<li>&lt;url&gt;:站点url.</li>
</ul>
<h3 id="c重定位">C.重定位</h3>
<p>&lt;relocation&gt;,表示项目的新位置.包含:</p>
<ul>
<li>&lt;groupId&gt;:新的&lt;groupId&gt;.</li>
<li>&lt;artifactId&gt;:新的&lt;artifactId&gt;.</li>
<li>&lt;version&gt;:新版本.</li>
<li>&lt;message&gt;:提示信息.</li>
</ul>
<h2 id="9配置文件">(9)配置文件</h2>
<p>&lt;profiles&gt;,包含一组&lt;profile&gt;,每个&lt;profile&gt;可以定义不同的配置,包含的元素有:</p>
<ul>
<li>&lt;id&gt;:配置文件的id,比如测试的可以叫test.</li>
<li>&lt;build&gt;:相关构建信息.</li>
<li>&lt;modules&gt;:模块信息.</li>
<li>&lt;repositories&gt;:远程仓库信息.</li>
<li>&lt;pluginRepositories&gt;:插件仓库信息.</li>
<li>&lt;dependencies&gt;:依赖信息.</li>
<li>&lt;reporting&gt;:报表信息.</li>
<li>&lt;dependencyManagement&gt;:依赖管理信息.</li>
<li>&lt;distributeManagement&gt;:分发管理</li>
<li>&lt;activation&gt;:activation是profile的关键,profile的强大之处是某些情况下才可以修改基本pom,这些情况通过activation指定.</li>
</ul>
<p>&lt;activation&gt;包含以下元素:</p>
<h3 id="aactivebydefault">A.&lt;activeByDefault&gt;</h3>
<p>是否默认激活,true或false.</p>
<h3 id="bjdk">B.&lt;jdk&gt;</h3>
<p>指定jdk版本.</p>
<h3 id="cos">C.&lt;os&gt;</h3>
<p>&lt;os&gt;可以定义一些特定的操作系统属性,例如&lt;name&gt;,&lt;family&gt;,&lt;arch&gt;,&lt;version&gt;.</p>
<h3 id="dproperty">D.&lt;property&gt;</h3>
<p>若Maven检测到该属性就会激活该属性所在的配置文件,可以指定&lt;name&gt;与&lt;value&gt;.</p>
<h3 id="efile">E.&lt;file&gt;</h3>
<p>有&lt;exists&gt;与&lt;missing&gt;两个子元素,&lt;exists&gt;表示若存在&lt;exists&gt;元素中对应的文件,则激活此配置文件.&lt;miissing&gt;表示若不存在&lt;missing&gt;元素中对应的文件,则激活此配置文件.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python基础(五)]]></title>
        <id>https://2293736867.github.io/post/python-ji-chu-wu/</id>
        <link href="https://2293736867.github.io/post/python-ji-chu-wu/">
        </link>
        <updated>2020-06-02T20:13:16.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#1%E9%9B%86%E5%90%88">1.集合</a>
<ul>
<li><a href="#1%E9%9B%86%E5%90%88-2">(1)集合</a></li>
<li><a href="#2%E5%AE%9A%E4%B9%89">(2)定义</a></li>
<li><a href="#3%E7%89%B9%E7%82%B9">(3)特点</a>
<ul>
<li><a href="#a%E7%A1%AE%E5%AE%9A%E6%80%A7">A.确定性</a></li>
<li><a href="#b%E6%97%A0%E5%BA%8F%E6%80%A7">B.无序性</a></li>
<li><a href="#c%E4%BA%92%E5%BC%82%E6%80%A7">C.互异性</a></li>
<li><a href="#d%E6%94%AF%E6%8C%81%E9%9B%86%E5%90%88%E8%BF%90%E7%AE%97">D.支持集合运算</a></li>
<li><a href="#e%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1">E.可变对象</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#2%E5%AD%97%E5%85%B8">2.字典</a>
<ul>
<li><a href="#1%E5%AD%97%E5%85%B8">(1)字典</a></li>
<li><a href="#2%E5%AE%9A%E4%B9%89-2">(2)定义</a></li>
<li><a href="#3%E7%89%B9%E7%82%B9-2">(3)特点</a>
<ul>
<li><a href="#a%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E5%AF%B9%E5%BA%94%E7%9A%84key%E8%AE%BF%E9%97%AE%E5%AF%B9%E5%BA%94%E7%9A%84value">A.可以通过对应的key访问对应的value</a></li>
<li><a href="#b%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1">B.可变对象</a></li>
</ul>
</li>
<li><a href="#4%E7%94%A8%E4%BD%9C%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0">(4)用作函数参数</a></li>
</ul>
</li>
<li><a href="#3%E8%BF%AD%E4%BB%A3%E5%99%A8">3.迭代器</a>
<ul>
<li><a href="#1%E8%BF%AD%E4%BB%A3%E5%99%A8">(1)迭代器</a></li>
<li><a href="#2%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%AF%B9%E8%B1%A1">(2)可迭代对象</a></li>
<li><a href="#3%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%AF%B9%E8%B1%A1%E8%BD%AC%E6%8D%A2%E4%B8%BA%E8%BF%AD%E4%BB%A3%E5%99%A8">(3)可迭代对象转换为迭代器</a></li>
</ul>
</li>
<li><a href="#4%E7%94%9F%E6%88%90%E5%99%A8">4.生成器</a>
<ul>
<li><a href="#1%E7%94%9F%E6%88%90%E5%99%A8">(1)生成器</a></li>
<li><a href="#2%E7%89%B9%E7%82%B9">(2)特点</a></li>
<li><a href="#3%E4%BD%BF%E7%94%A8">(3)使用</a></li>
</ul>
</li>
</ul>
</p>
<h1 id="1集合">1.集合</h1>
<h2 id="1集合-2">(1)集合</h2>
<p>集合是一种可变的无序的容器.</p>
<h2 id="2定义">(2)定义</h2>
<pre><code class="language-py">x = {1,2,3} #第一种方法,使用{}
x = set([2,4,5]) #第二种方法,使用强制类型转换
</code></pre>
<h2 id="3特点">(3)特点</h2>
<h3 id="a确定性">A.确定性</h3>
<p>类似数学中的集合的确定性,集合描述得很清楚,不存在不能判断一个元素是否在一个集合中,具体来说就是in或not in运算符不会得不到确定的结果.</p>
<h3 id="b无序性">B.无序性</h3>
<p>因此不能通过下标访问.<br>
<img src="https://img-blog.csdnimg.cn/20191229170050687.png" alt="在这里插入图片描述" loading="lazy"><br>
subscriptable就是可以通过下标访问的.这里提示&quot;not subscriptable&quot;.</p>
<h3 id="c互异性">C.互异性</h3>
<p>没有重复元素.<br>
<img src="https://img-blog.csdnimg.cn/20191229170159979.png" alt="在这里插入图片描述" loading="lazy"></p>
<h3 id="d支持集合运算">D.支持集合运算</h3>
<p>包括==,!=,判断子集,真子集,超集,真超集,交集与并集,差集,对称差分.<br>
<img src="https://img-blog.csdnimg.cn/20191229170455496.png" alt="在这里插入图片描述" loading="lazy"></p>
<h3 id="e可变对象">E.可变对象</h3>
<p>可以通过add,remove改变集合本身.<br>
<img src="https://img-blog.csdnimg.cn/20191229170610621.png" alt="在这里插入图片描述" loading="lazy"><br>
另外有不可变集合frozenset:<br>
<img src="https://img-blog.csdnimg.cn/201912291707188.png" alt="在这里插入图片描述" loading="lazy"></p>
<h1 id="2字典">2.字典</h1>
<h2 id="1字典">(1)字典</h2>
<p>字典是一种可变的无序容器,每个值都有自己对应的键,是一个映射结构,本质上是一个以键为元素的集合.</p>
<h2 id="2定义-2">(2)定义</h2>
<p>使用{},键与值用:分隔,键值对用逗号分隔.</p>
<pre><code class="language-py">x = {'aa':1,'bb':2,'cc':3}
</code></pre>
<h2 id="3特点-2">(3)特点</h2>
<h3 id="a可以通过对应的key访问对应的value">A.可以通过对应的key访问对应的value</h3>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20191229171520402.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h3 id="b可变对象">B.可变对象</h3>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20191229171613449.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="4用作函数参数">(4)用作函数参数</h2>
<pre><code class="language-py">def func(arg1,**arg2):
    print(arg1)
    print(arg2)
func('a',a=1,b=2,c=3,d=4)
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20191229172107745.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="3迭代器">3.迭代器</h1>
<h2 id="1迭代器">(1)迭代器</h2>
<p>迭代器可以作为next()的参数被调用,不断返回下一个值.</p>
<h2 id="2可迭代对象">(2)可迭代对象</h2>
<p>可以直接作用与循环语句的对象,对于for循环是in后的对象.判断一个对象是否是可迭代对象可以利用isinstance()与Iterable.</p>
<pre><code class="language-py">from collections import Iterable
isinstance([1,2,3],Iterable)
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20191229173559172.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="3可迭代对象转换为迭代器">(3)可迭代对象转换为迭代器</h2>
<p>使用iter():<br>
<img src="https://img-blog.csdnimg.cn/20191229174335998.png" alt="在这里插入图片描述" loading="lazy"></p>
<h1 id="4生成器">4.生成器</h1>
<h2 id="1生成器">(1)生成器</h2>
<p>生成器是一个函数,不过相比起普通函数,返回的是迭代器.</p>
<h2 id="2特点">(2)特点</h2>
<p>生成器用的不是return,而是yield,另外生成器有惰性计算的特性,调用生成器时不会立即执行它,会在调用每个元素时才进行计算.</p>
<h2 id="3使用">(3)使用</h2>
<pre><code class="language-py">def gen():
    x = range(-1,8)
    for i in x:
        yield i+2
for x in gen():
    print(x,end = ' ')
print()
</code></pre>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/20191229175118183.png" alt="在这里插入图片描述" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python基础(四)]]></title>
        <id>https://2293736867.github.io/post/python-ji-chu-si/</id>
        <link href="https://2293736867.github.io/post/python-ji-chu-si/">
        </link>
        <updated>2020-06-02T20:12:50.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#1%E5%AD%97%E7%AC%A6%E4%B8%B2">1.字符串</a>
<ul>
<li><a href="#1%E5%AE%9A%E4%B9%89">(1)定义</a></li>
<li><a href="#2%E7%89%B9%E6%80%A7">(2)特性</a></li>
<li><a href="#3%E8%BD%AC%E4%B9%89">(3)转义</a></li>
<li><a href="#4%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C">(4)常用操作</a>
<ul>
<li><a href="#a%E6%8F%92%E5%85%A5%E8%BF%9E%E6%8E%A5">A.插入连接</a></li>
<li><a href="#b%E5%8E%BB%E9%99%A4%E7%A9%BA%E7%99%BD">B.去除空白</a></li>
<li><a href="#c%E9%95%BF%E5%BA%A6">C.长度</a></li>
<li><a href="#dunicode%E7%BC%96%E7%A0%81">D.unicode编码</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#2%E5%BA%8F%E5%88%97">2.序列</a>
<ul>
<li><a href="#1%E5%BA%8F%E5%88%97">(1)序列</a></li>
<li><a href="#2%E7%89%B9%E7%82%B9">(2)特点</a>
<ul>
<li><a href="#a%E7%B4%A2%E5%BC%95">A.索引</a></li>
<li><a href="#b%E5%88%87%E7%89%87">B.切片</a></li>
<li><a href="#c%E8%BF%AD%E4%BB%A3">C.迭代</a></li>
<li><a href="#d%E6%8B%86%E5%8C%85%E8%B5%8B%E5%80%BC">D.拆包赋值</a></li>
<li><a href="#e%E9%87%8D%E5%A4%8D%E8%BF%90%E7%AE%97">E.重复运算</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</p>
<h1 id="1字符串">1.字符串</h1>
<h2 id="1定义">(1)定义</h2>
<p>可以使用单引号,双引号,三引号定义字符串.</p>
<pre><code class="language-py">x = '123'
x = &quot;123&quot;
x = '''123'''
x = '''
	123
	456
	'''
</code></pre>
<p>三引号可以跨行使用.</p>
<h2 id="2特性">(2)特性</h2>
<p>python中的字符串是不可变对象:<br>
<img src="https://img-blog.csdnimg.cn/20191229113938247.png" alt="在这里插入图片描述" loading="lazy"><br>
字符串也属于序列的一种,支持切片操作:<br>
<img src="https://img-blog.csdnimg.cn/20191229114034752.png" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="3转义">(3)转义</h2>
<p>转义一般用于单引号,双引号,斜杠等特殊符号.</p>
<pre><code class="language-py">x = '\\123'
x = &quot;\&quot;123\&quot;&quot;
</code></pre>
<p>对于用单引号引起的字符串,若含有单引号,可以把外面的单引号改成双引号,对于双引号字符串也类似.<br>
另一种可以不用转义的方法是在字符串前加一个r:<br>
<img src="https://img-blog.csdnimg.cn/20191229113740255.png" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="4常用操作">(4)常用操作</h2>
<h3 id="a插入连接">A.插入连接</h3>
<p>使用x.join(a)表示把x插入到a中的每个字符中间:<br>
<img src="https://img-blog.csdnimg.cn/20191229114407602.png" alt="在这里插入图片描述" loading="lazy"></p>
<h3 id="b去除空白">B.去除空白</h3>
<p>strip(),去除左右空白字符,包括空格,换行,制表符.<br>
<img src="https://img-blog.csdnimg.cn/2019122911455720.png" alt="在这里插入图片描述" loading="lazy"></p>
<h3 id="c长度">C.长度</h3>
<p>计算字符串长度,len(x):<br>
<img src="https://img-blog.csdnimg.cn/20191229114648444.png" alt="在这里插入图片描述" loading="lazy"></p>
<h3 id="dunicode编码">D.unicode编码</h3>
<ul>
<li>ord():计算unicode编码.</li>
<li>chr():与ord()相反,解码.</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20191229114819758.png" alt="在这里插入图片描述" loading="lazy"><br>
注意参数是一个字符.</p>
<h1 id="2序列">2.序列</h1>
<h2 id="1序列">(1)序列</h2>
<p>序列是列表,元组,字符串等元素之间具有顺序关系的数据类型的统称,不是一个独立的数据类型.</p>
<h2 id="2特点">(2)特点</h2>
<h3 id="a索引">A.索引</h3>
<p>可以通过索引来获取元素的值:<br>
<img src="https://img-blog.csdnimg.cn/20191229115412459.png" alt="在这里插入图片描述" loading="lazy"></p>
<h3 id="b切片">B.切片</h3>
<p>形式为:</p>
<pre><code class="language-css">[start:end:step]
</code></pre>
<p>start为起始位置,包含.end为结束位置,不包含,step为步长,默认为1,三者都可以省略.三者都可以为负数.<br>
<img src="https://img-blog.csdnimg.cn/20191229115949240.png" alt="在这里插入图片描述" loading="lazy"></p>
<h3 id="c迭代">C.迭代</h3>
<p>序列是支持迭代的,可以放在for循环的in后:</p>
<pre><code class="language-py">x = '123888'
for i in x:
    print(i,end = ' ')
print()
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20191229120150370.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h3 id="d拆包赋值">D.拆包赋值</h3>
<p>用逗号分隔等号左边的变量,等号右边为一个序列.<br>
<img src="https://img-blog.csdnimg.cn/20191229120309430.png" alt="在这里插入图片描述" loading="lazy"></p>
<h3 id="e重复运算">E.重复运算</h3>
<p>使用*表示重复n次.<br>
<img src="https://img-blog.csdnimg.cn/20191229120503548.png" alt="在这里插入图片描述" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python基础(三)]]></title>
        <id>https://2293736867.github.io/post/python-ji-chu-san/</id>
        <link href="https://2293736867.github.io/post/python-ji-chu-san/">
        </link>
        <updated>2020-06-02T20:12:32.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#1list">1.list</a>
<ul>
<li><a href="#1%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95">(1)定义方法</a></li>
<li><a href="#2%E4%B8%8B%E6%A0%87">(2)下标</a></li>
<li><a href="#3%E5%88%87%E7%89%87">(3)切片</a></li>
<li><a href="#4%E5%8F%8D%E5%90%91%E9%81%8D%E5%8E%86">(4)反向遍历</a>
<ul>
<li><a href="#a-1">A.[::-1]</a></li>
<li><a href="#b%E4%BD%BF%E7%94%A8%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0reversed">B.使用内置函数reversed()</a></li>
<li><a href="#c%E4%BD%BF%E7%94%A8%E5%88%97%E8%A1%A8%E6%96%B9%E6%B3%95reverse">C.使用列表方法.reverse()</a></li>
</ul>
</li>
<li><a href="#5%E5%88%97%E8%A1%A8%E6%8E%A8%E5%AF%BC%E5%BC%8F">(5)列表推导式</a></li>
<li><a href="#6%E5%88%97%E8%A1%A8%E7%9A%84%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0">(6)列表的常用函数</a>
<ul>
<li><a href="#aextend">A.extend()</a></li>
<li><a href="#bappend">B.append()</a></li>
<li><a href="#cinsert">C.insert()</a></li>
<li><a href="#dpop">D.pop()</a></li>
<li><a href="#eremove">E.remove()</a></li>
<li><a href="#flen">F.len()</a></li>
<li><a href="#gsorted%E4%B8%8Esort">G.sorted()与sort()</a></li>
<li><a href="#henumerate">H.enumerate()</a></li>
<li><a href="#izip">I.zip()</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#2%E5%85%83%E7%BB%84">2.元组</a>
<ul>
<li><a href="#1%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95-2">(1)定义方法</a></li>
<li><a href="#2%E7%89%B9%E7%82%B9">(2)特点</a></li>
<li><a href="#3%E5%BA%94%E7%94%A8">(3)应用</a></li>
</ul>
</li>
</ul>
</p>
<h1 id="1list">1.list</h1>
<p>list是一种可变的有序容器,每个元素都拥有自己的下标.列表使用[]定义.</p>
<h2 id="1定义方法">(1)定义方法</h2>
<pre><code class="language-py">x = [1,2,3] #第一种,使用[]
y = x #第二种,赋值
y = list({1,2,3}) #第三种,使用强制转换函数
</code></pre>
<h2 id="2下标">(2)下标</h2>
<p>下标从0开始,允许负数作为下标,最后一个元素的下标为-1,第一个元素的下标为-n,第i个元素的下标为(i-1)或-(n-i+1).</p>
<h2 id="3切片">(3)切片</h2>
<p>设x是一个列表,则</p>
<pre><code class="language-py">x[start:end:step]
</code></pre>
<p>为列表的一个切片,start为起始位置,包含,可以省略,end为结束位置,不包含,可以省略,step为步长,可以省略,默认为1.<br>
三者都可以为负数.<br>
<img src="https://img-blog.csdnimg.cn/2019122901445134.png" alt="在这里插入图片描述" loading="lazy"><br>
三者都省略时为整个列表,反向遍历时可以省略start与end,步长设为-1:<br>
<img src="https://img-blog.csdnimg.cn/20191229014602164.png" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="4反向遍历">(4)反向遍历</h2>
<p>反向遍历有三种方法:</p>
<h3 id="a-1">A.[::-1]</h3>
<p>使用切片,像上面一样,步长设为-1</p>
<h3 id="b使用内置函数reversed">B.使用内置函数reversed()</h3>
<p>reversed()会返回一个迭代器,想要获取里面的内容可以转换为list().<br>
<img src="https://img-blog.csdnimg.cn/20191229014905116.png" alt="在这里插入图片描述" loading="lazy"></p>
<h3 id="c使用列表方法reverse">C.使用列表方法.reverse()</h3>
<p><img src="https://img-blog.csdnimg.cn/20191229014939786.png" alt="在这里插入图片描述" loading="lazy"><br>
前两种方法不会改变列表,列表方法reverse()改变了列表.</p>
<h2 id="5列表推导式">(5)列表推导式</h2>
<p>列表推导式可用于快速生成有规律性的列表,比如生成包含10个2的列表:</p>
<pre><code class="language-py">[2 for i in range(10)]
</code></pre>
<p>有点类似于把for循环的循环体提到前面.</p>
<h2 id="6列表的常用函数">(6)列表的常用函数</h2>
<h3 id="aextend">A.extend()</h3>
<p><img src="https://img-blog.csdnimg.cn/20191229015314703.png" alt="在这里插入图片描述" loading="lazy"><br>
extend()类似于直接使用+,但是+不会改变列表本身,而extend()会改变列表本身.</p>
<h3 id="bappend">B.append()</h3>
<p><img src="https://img-blog.csdnimg.cn/20191229015438924.png" alt="在这里插入图片描述" loading="lazy"><br>
append()把参数作为一个元素直接追加到列表中.</p>
<h3 id="cinsert">C.insert()</h3>
<p>insert需要两个参数,分别表示插入的下标与插入的值.<br>
<img src="https://img-blog.csdnimg.cn/20191229020539846.png" alt="在这里插入图片描述" loading="lazy"></p>
<h3 id="dpop">D.pop()</h3>
<p>根据下标删除元素.<br>
<img src="https://img-blog.csdnimg.cn/20191229020704542.png" alt="在这里插入图片描述" loading="lazy"></p>
<h3 id="eremove">E.remove()</h3>
<p>根据值删除元素,删除第一个出现的元素,就是说对于重复元素仅删除第一次出现的元素.<br>
<img src="https://img-blog.csdnimg.cn/20191229020809442.png" alt="在这里插入图片描述" loading="lazy"></p>
<h3 id="flen">F.len()</h3>
<p>列表长度,注意这个不是列表的方法.<br>
<img src="https://img-blog.csdnimg.cn/20191229021042322.png" alt="在这里插入图片描述" loading="lazy"></p>
<h3 id="gsorted与sort">G.sorted()与sort()</h3>
<p>这两个都是排序的方法,sorted()不是列表的方法,把列表作为函数的参数传递,sort是列表的方法,会改变列表本身.<br>
<img src="https://img-blog.csdnimg.cn/20191229021247951.png" alt="在这里插入图片描述" loading="lazy"></p>
<h3 id="henumerate">H.enumerate()</h3>
<p>逐个显示对应的下标,返回的是一个迭代器.想要显示可以转换为列表.<br>
<img src="https://img-blog.csdnimg.cn/20191229021549773.png" alt="在这里插入图片描述" loading="lazy"></p>
<h3 id="izip">I.zip()</h3>
<p>列表的并行计算.<br>
<img src="https://img-blog.csdnimg.cn/20191229021823839.png" alt="在这里插入图片描述" loading="lazy"></p>
<h1 id="2元组">2.元组</h1>
<p>元组是不可变的有序容器,用()表示.</p>
<h2 id="1定义方法-2">(1)定义方法</h2>
<pre><code class="language-py">x = (1,2,3,4,5) #第一种,使用()
y = x #第二种,使用赋值
x = tuple('kkkrrr') #第三种,使用tuple强制转换
x = 1,2,3,4,5 #第四种,实质上还是第一种,省略了圆括号
</code></pre>
<h2 id="2特点">(2)特点</h2>
<p>用逗号分隔的都是元组,是不可变对象,支持拆包式赋值.<br>
<img src="https://img-blog.csdnimg.cn/20191229022517187.png" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="3应用">(3)应用</h2>
<p>交换两个变量:<br>
<img src="https://img-blog.csdnimg.cn/20191229022747427.png" alt="在这里插入图片描述" loading="lazy"><br>
函数的不定长参数:</p>
<pre><code class="language-py">def fun(arg1,*arg2):
    print(arg1)
    if arg2 != ():
        if len(arg2) == 1:
            print(arg2[0])
        else:
            print(arg2)
fun(1)
fun(2,3)
fun(4,5,6)
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20191229023114186.png" alt="在这里插入图片描述" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Maven简介]]></title>
        <id>https://2293736867.github.io/post/maven-jian-jie/</id>
        <link href="https://2293736867.github.io/post/maven-jian-jie/">
        </link>
        <updated>2020-06-02T20:12:12.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#1maven%E4%BB%8B%E7%BB%8D">1.Maven介绍</a></li>
<li><a href="#2%E5%AE%89%E8%A3%85maven">2.安装Maven</a></li>
<li><a href="#3%E8%AE%BE%E7%BD%AEmaven">3.设置Maven</a></li>
<li><a href="#4maven%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4">4.Maven常用命令</a>
<ul>
<li><a href="#1%E7%BC%96%E8%AF%91">(1)编译</a></li>
<li><a href="#2%E6%89%93%E5%8C%85">(2)打包</a></li>
<li><a href="#3%E5%AE%89%E8%A3%85%E5%88%B0%E6%9C%AC%E5%9C%B0">(3)安装到本地</a></li>
<li><a href="#4%E5%AE%89%E8%A3%85%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93">(4)安装到远程仓库</a></li>
<li><a href="#5%E6%B8%85%E7%90%86">(5)清理</a></li>
</ul>
</li>
</ul>
</p>
<h1 id="1maven介绍">1.Maven介绍</h1>
<p>Maven最初用于代替Ant,用来简化项目的构建,Maven使构建项目变得容易,规定了源码总是放在src/main/java下,测试代码放在/src/test/java中,配置文件放在/src/main/resources中,通过使用pom.xml统一了描述项目的方式,可以自动解决库的依赖问题,只要声明了使用的库,会自动从中央仓库下载,并且可以自动管理冲突.</p>
<h1 id="2安装maven">2.安装Maven</h1>
<p><a href="http://maven.apache.org/index.html">官网这里.</a><br>
<img src="https://img-blog.csdnimg.cn/20191228115358222.png" alt="在这里插入图片描述" loading="lazy"><br>
选择下载即可,作者用的是windows,选择zip.下一步是解压放到相应的位置.<br>
然后添加环境变量MAVEN_HOME,是maven的解压位置.需要的话可以再配置一个环境变量M2_HOME,用来作为本地仓库的位置.<br>
最后配置一个PATH,添加</p>
<pre><code class="language-bash">%MAVEN_HOME%/bin
</code></pre>
<p>到path中.<br>
在cmd中验证</p>
<pre><code class="language-bash">mvn -version
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20191228115822554.png" alt="在这里插入图片描述" loading="lazy"><br>
即表示成功安装.</p>
<h1 id="3设置maven">3.设置Maven</h1>
<p>因为中心仓库位于国外,一般下载时会很慢,因此可以设置为国内的镜像,这里选择阿里云的镜像.<br>
打开Maven安装目录下的conf/setting.xml,编辑&lt;mirrors&gt;<br>
<img src="https://img-blog.csdnimg.cn/20191228120350926.png" alt="在这里插入图片描述" loading="lazy"></p>
<pre><code class="language-xml">&lt;mirror&gt;
    &lt;id&gt;nexus-aliyun&lt;/id&gt;
    &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;
    &lt;name&gt;Nexus aliyun&lt;/name&gt;
    &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;
&lt;/mirror&gt;
</code></pre>
<p>另外也需要在IDE中设置一下Maven.这里以IDEA为例.</p>
<p>打开settings--&gt;Build,Execution,Deployment--&gt;Build Tools--&gt;Maven,设置maven的位置.<br>
<img src="https://img-blog.csdnimg.cn/20191228120546668.png" alt="在这里插入图片描述" loading="lazy"><br>
另外也可以设置配置文件的位置与本地仓库的位置,配置文件默认是conf/settings.xml,本地仓库默认用户目录下的.m2文件夹.<br>
<img src="https://img-blog.csdnimg.cn/20191228120706354.png" alt="在这里插入图片描述" loading="lazy"></p>
<h1 id="4maven常用命令">4.Maven常用命令</h1>
<h2 id="1编译">(1)编译</h2>
<pre><code class="language-bash">mvn compile
</code></pre>
<p>编译Maven工程.</p>
<h2 id="2打包">(2)打包</h2>
<pre><code class="language-bash">mvn package
</code></pre>
<p>编译并打包工程,会根据pom.xml中的&lt;packaging&gt;打成jar或war包.</p>
<h2 id="3安装到本地">(3)安装到本地</h2>
<pre><code class="language-bash">mvn install
</code></pre>
<p>打包并安装到本地仓库,这样可以通过项目坐标引用.</p>
<h2 id="4安装到远程仓库">(4)安装到远程仓库</h2>
<pre><code class="language-bash">mvn deploy
</code></pre>
<p>打包并安装到远程仓库.Maven仓库有两大类:</p>
<ul>
<li>远程仓库,包括中心仓库与镜像仓库,还有利用nexus搭建的私服.</li>
<li>本地仓库,默认位于用户目录的.m2目录.</li>
</ul>
<h2 id="5清理">(5)清理</h2>
<pre><code class="language-bash">mvn clean
</code></pre>
<p>删除target目录.</p>
]]></content>
    </entry>
</feed>