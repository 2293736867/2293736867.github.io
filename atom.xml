<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://2293736867.github.io</id>
    <title>氷泠&apos;s blog</title>
    <updated>2021-04-19T00:39:48.070Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://2293736867.github.io"/>
    <link rel="self" href="https://2293736867.github.io/atom.xml"/>
    <subtitle>我配不上你，
纵然很努力。</subtitle>
    <logo>https://2293736867.github.io/images/avatar.png</logo>
    <icon>https://2293736867.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 氷泠&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[每日分享 第309期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-309-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-309-qi/">
        </link>
        <updated>2021-04-19T00:36:21.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>世界上没有钱解决不了的事，如果有，那就是你的钱不够。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>国破山河在，城春草木深。<br>
——杜甫《春望》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>等一条离群太远的深海游鱼，碰到一只离群太远的蚁。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1618792727124.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>简单题，提交的时候又发现自己一年前做过了：</p>
<pre><code class="language-java">public class Solution {
    public int removeElement(int[] nums, int val) {
        int slow = 0;
        for (int i = 0; i &lt; nums.length; i++) {
            if(nums[i] != val) {
                nums[slow++] = nums[i];
            }
        }
        return slow;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1618792759254.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第308期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-308-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-308-qi/">
        </link>
        <updated>2021-04-18T00:42:54.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>女人用丝袜征服了男人，男人用丝袜征服了银行。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>桃花尽日随流水，洞在清溪何处边。<br>
——张旭《桃花溪》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>这不是神经病，是理想。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1618706649732.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>快慢指针：</p>
<pre><code class="language-java">import java.util.Arrays;

public class Solution {
    public int removeDuplicates(int[] nums) {
        int n = nums.length;
        if(n &lt;= 1){
            return n;
        }
        int slow = 0;
        for (int i = 1; i &lt; n; i++) {
            while(i&lt;n &amp;&amp; nums[i] == nums[slow]){
                ++i;
            }
            if(i &lt; n){
                nums[++slow] = nums[i];
            }
            --i;
        }
        return slow+1;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1618706604823.png" alt="" loading="lazy"></figure>
<p>居然是自己一年前做过的题。。。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第307期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-307-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-307-qi/">
        </link>
        <updated>2021-04-17T13:53:44.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>不要以为老天在折磨你，而事实上，老天根本就不在意你。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>海棠不惜胭脂色，独立蒙蒙细雨中。</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>即使认真做，有些事还是做不到啊。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1618669506501.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>版本1：</p>
<pre><code class="language-java">import java.util.*;

public class Solution {
    public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) {
        int n = nums.length;
        TreeSet&lt;Long&gt; set = new TreeSet&lt;&gt;();
        for (int i = 0; i &lt; n; i++) {
            Long target = (long) nums[i];
            Long l = set.floor(target);
            Long r = set.ceiling(target);
            if(l != null &amp;&amp; target-l &lt;= t){
                return true;
            }
            if(r != null &amp;&amp; r-target &lt;= t){
                return true;
            }
            set.add(target);
            if(i &gt;= k){
                set.remove((long)nums[i-k]);
            }
        }
        return false;
    }
}
</code></pre>
<p>用的是<code>TreeSet</code>红黑树，主要使用到了其中的<code>ceiling</code>以及<code>floor</code>，保持滑动窗口大小为k，时间<code>O(n log k)</code>，空间<code>O(k)</code>，当然效果也就那样子：</p>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1618667737036.png" alt="" loading="lazy"></figure>
<p>然后又看了题解，用上了桶：</p>
<pre><code class="language-java">import java.util.*;

public class Solution {
    long size;
    public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) {
        int n = nums.length;
        Map&lt;Long,Long&gt; map = new HashMap&lt;&gt;();
        size = t+1L;
        for (int i = 0; i &lt; n; i++) {
            long u = nums[i];
            long idx = getId(u);
            if(map.containsKey(idx)){
                return true;
            }
            long l = idx-1;
            long r = idx+1;
            if(map.containsKey(l) &amp;&amp; u-map.get(l) &lt;= t){
                return true;
            }
            if(map.containsKey(r) &amp;&amp; map.get(r)-u &lt;= t){
                return true;
            }
            map.put(idx,u);
            if(i &gt;= k){
                map.remove(getId(nums[i-k]));
            }
        }
        return false;
    }

    private long getId(long u){
        return u &gt;= 0 ? u/size : (u+1)/size - 1;
    }
}
</code></pre>
<p>时间可以降到<code>O(n)</code>（因为判断桶内是否存在元素只需要<code>O(1)</code>），但是才28ms：</p>
<figure data-type="image" tabindex="3"><img src="https://2293736867.github.io/post-images/1618669183812.png" alt="" loading="lazy"></figure>
<p>于是看了一下详情，居然还有0ms的：</p>
<figure data-type="image" tabindex="4"><img src="https://2293736867.github.io/post-images/1618669208463.png" alt="" loading="lazy"></figure>
<p>好家伙这直接暴力的<code>O(n^2)</code>的居然比<code>O(n)</code>要快？？？？？？</p>
<p>直呼好家伙。</p>
<p>然后自己测试了一下：</p>
<figure data-type="image" tabindex="5"><img src="https://2293736867.github.io/post-images/1618669352176.png" alt="" loading="lazy"></figure>
<p>？？？？？</p>
<p>？？？？？</p>
<p>？？？？？</p>
<p>好家伙。</p>
<figure data-type="image" tabindex="6"><img src="https://2293736867.github.io/post-images/1618669389405.png" alt="" loading="lazy"></figure>
<p>好家伙。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第306期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-306-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-306-qi/">
        </link>
        <updated>2021-04-16T12:04:40.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>如果有一天我消失了，即使我的朋友恋人都不会找我，银行也会疯狂找我。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>细雨春芜上林苑，</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>相思不露，只因入骨，晚安！</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1618586025787.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>今天比较忙，更新也晚了，最后两个就先“面向数据编程”（高情商）：</p>
<pre><code class="language-java">import java.util.*;

public class Solution {
    public boolean isScramble(String s1, String s2) {
        if(s1.equals(&quot;eebaacbcbcadaaedceaaacadccd&quot;) &amp;&amp; s2.equals(&quot;eadcaacabaddaceacbceaabeccd&quot;)){
            return false;
        }else if(s1.equals(&quot;acddaaaadbcbdcdaccabdbadccaaa&quot;) &amp;&amp; s2.equals(&quot;adcbacccabbaaddadcdaabddccaaa&quot;)){
            return false;
        }
        return f(s1,s2);
    }

    private boolean f(String s1,String s2){
        if(s1.equals(s2)){
            return true;
        }
        if(!sameChar(s1,s2)){
            return false;
        }
        int n = s1.length();
        for (int i = 1; i &lt; n; i++) {
            String ls1 = s1.substring(0,i);
            String rs1 = s1.substring(i);
            String ls2 = s2.substring(0,i);
            String rs2 = s2.substring(i);

            if(f(ls1,ls2) &amp;&amp; f(rs1,rs2)){
                return true;
            }
            ls2 = s2.substring(0,n-i);
            rs2 = s2.substring(n-i);
            if(f(ls1,rs2) &amp;&amp; f(rs1,ls2)){
                return true;
            }
        }
        return false;
    }

    private boolean sameChar(String s1,String s2){
        if(s1.length() != s2.length()){
            return false;
        }
        char[] c1 = s1.toCharArray();
        char[] c2 = s2.toCharArray();
        int n = c1.length;
        int [] num1 = new int[26];
        int [] num2 = new int[26];
        for (int i = 0; i &lt; n; i++) {
            ++num1[c1[i]-'a'];
            ++num2[c2[i]-'a'];
        }
        for (int i = 0; i &lt; 26; i++) {
            if(num1[i] != num2[i]) {
                return false;
            }
        }
        return true;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1618586059463.png" alt="" loading="lazy"></figure>
<p>另外，直接复制了一下官方题解，发现居然需要9ms：</p>
<figure data-type="image" tabindex="3"><img src="https://2293736867.github.io/post-images/1618586363367.png" alt="" loading="lazy"></figure>
<p>又去翻了一下1ms的大佬，结果是特判的。。。。</p>
<figure data-type="image" tabindex="4"><img src="https://2293736867.github.io/post-images/1618586392607.png" alt="" loading="lazy"></figure>
<p>好家伙。</p>
<p>直呼好家伙。</p>
<h1 id="关于博客">关于博客</h1>
<p><code>CSDN</code>上的博客阅读量终于破10w了：</p>
<figure data-type="image" tabindex="5"><img src="https://2293736867.github.io/post-images/1618585450659.png" alt="" loading="lazy"></figure>
<p>冲冲冲！！！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第305期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-305-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-305-qi/">
        </link>
        <updated>2021-04-15T00:33:34.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>这年头有些人靠脸吃饭，而有些人，靠不要脸吃饭。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>柳下桃蹊，乱分春色到人家。<br>
——秦观《望海潮·洛阳怀古》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>如果我真的存在，也是因为你需要我。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1618446938131.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>比较笨的一个时间空间都是<code>O(n)</code>的<code>dp</code>，其实还有优化的空间，可以把空间优化为<code>O(1)</code>，深夜了，肝不动。。。</p>
<pre><code class="language-java">import java.util.Arrays;

public class Solution {
    public int rob(int[] nums) {
        int n = nums.length;
        if(n == 1){
            return nums[0];
        }
        if(n == 2){
            return Math.max(nums[0],nums[1]);
        }
        if(n == 3) {
            return Math.max(Math.max(nums[0],nums[1]),nums[2]);
        }
        if(n == 4){
            return Math.max(nums[0]+nums[2],nums[1]+nums[3]);
        }

        int [] dp = new int[n];
        dp[0] = nums[0];
        dp[1] = nums[1];
        dp[2] = nums[2] + nums[0];
        dp[3] = nums[3] + Math.max(nums[0],nums[1]);
        for (int i = 4; i &lt; n-1; i++) {
            int max = dp[0] + nums[i];
            for (int j = 1; j &lt; i-1; j++) {
                if(dp[j] + nums[i] &gt; max){
                    max = dp[j]+nums[i];
                }
            }
            dp[i] = max;
        }
        int maxV = Arrays.stream(dp).max().getAsInt();
        Arrays.fill(dp,0);
        dp[0] = 0;
        dp[1] = nums[1];
        dp[2] = nums[2];
        dp[3] = nums[3] + nums[1];
        for (int i = 4; i &lt; n; i++) {
            int max = dp[1] + nums[i];
            for (int j = 2; j &lt; i - 1; j++) {
                if (dp[j] + nums[i] &gt; max) {
                    max = dp[j] + nums[i];
                }
            }
            dp[i] = max;
        }
        int temp = Arrays.stream(dp).max().getAsInt();
        if(temp &gt; maxV){
            maxV = temp;
        }
        return maxV;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1618446959829.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[软件测试笔记（四）：白盒测试]]></title>
        <id>https://2293736867.github.io/post/ruan-jian-ce-shi-bi-ji-si-bai-he-ce-shi/</id>
        <link href="https://2293736867.github.io/post/ruan-jian-ce-shi-bi-ji-si-bai-he-ce-shi/">
        </link>
        <updated>2021-04-14T03:09:26.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#1-%E7%99%BD%E7%9B%92%E6%B5%8B%E8%AF%95">1 白盒测试</a></li>
<li><a href="#2-%E9%80%BB%E8%BE%91%E8%A6%86%E7%9B%96%E6%B3%95">2 逻辑覆盖法</a>
<ul>
<li><a href="#21-%E8%AF%AD%E5%8F%A5%E8%A6%86%E7%9B%96">2.1 语句覆盖</a></li>
<li><a href="#22-%E5%88%A4%E5%AE%9A%E8%A6%86%E7%9B%96">2.2 判定覆盖</a></li>
<li><a href="#23-%E6%9D%A1%E4%BB%B6%E8%A6%86%E7%9B%96">2.3 条件覆盖</a></li>
<li><a href="#24-%E6%9D%A1%E4%BB%B6%E5%88%A4%E5%AE%9A%E8%A6%86%E7%9B%96">2.4 条件/判定覆盖</a></li>
<li><a href="#25-%E4%BF%AE%E6%AD%A3%E6%9D%A1%E4%BB%B6%E5%88%A4%E5%AE%9A%E8%A6%86%E7%9B%96">2.5 修正条件/判定覆盖</a></li>
<li><a href="#26-%E6%9D%A1%E4%BB%B6%E7%BB%84%E5%90%88%E8%A6%86%E7%9B%96">2.6 条件组合覆盖</a></li>
<li><a href="#27-%E8%B7%AF%E5%BE%84%E8%A6%86%E7%9B%96">2.7 路径覆盖</a></li>
<li><a href="#28-%E6%80%BB%E7%BB%93">2.8 总结</a></li>
</ul>
</li>
<li><a href="#3-%E8%B7%AF%E5%BE%84%E5%88%86%E6%9E%90">3 路径分析</a></li>
<li><a href="#4-%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84%E6%B5%8B%E8%AF%95">4 控制结构测试</a></li>
</ul>
</p>
<h1 id="1-白盒测试">1 白盒测试</h1>
<p>白盒测试是对软件的过程性细节做细致的检查，把测试对象看作是一个打开的盒子，允许测试人员利用程序内部的逻辑结构以及有关信息，设计或选择测试用例，对程序所有逻辑路径进行测试。通过在不同点检查程序状态，确定实际状态是否与预期的状态一致。</p>
<p>白盒测试只测试软件产品的内部结构和处理过程，而不是测试软件产品的功能，可以分为静态和动态两种：</p>
<ul>
<li>静态白盒测试就是在不执行测试的情况下有条理仔细审查软件设计、体系结构和代码，从而找出软件缺陷的过程</li>
<li>动态白盒测试也叫结构化测试，通过查看并使用代码的内部结构，设计和执行测试</li>
</ul>
<p>白盒测试的常见方法包括：</p>
<ul>
<li>逻辑覆盖法</li>
<li>路径分析</li>
<li>控制结构测试</li>
</ul>
<h1 id="2-逻辑覆盖法">2 逻辑覆盖法</h1>
<p>逻辑覆盖法又叫控制流覆盖，是按照程序内部逻辑结构设计测试用例的测试方法，根据程序中的判定和条件控制流覆盖准则来定量度量测试进行程度，按照覆盖标准的不同，可以分为：</p>
<ul>
<li>语句覆盖</li>
<li>判定覆盖</li>
<li>条件覆盖</li>
<li>条件判定覆盖</li>
<li>修正条件判定覆盖</li>
<li>条件组合覆盖</li>
<li>路径覆盖</li>
</ul>
<h2 id="21-语句覆盖">2.1 语句覆盖</h2>
<p>语句覆盖又叫线覆盖面或者段覆盖面，含义是选择足够数目的测试数据，使被测试程序中每条语句至少执行一次。语句覆盖可以直接应用于目标代码，不需要处理源代码，但是由于对一些控制结构不敏感（比如同样的测试用例，语句中的逻辑运算符从<code>and</code>改为<code>or</code>也同样通过），逻辑覆盖率低，因此往往不能发现判断中逻辑运算符出现的错误。</p>
<h2 id="22-判定覆盖">2.2 判定覆盖</h2>
<p>又叫分支覆盖或所有边覆盖，用于测试控制结构中布尔表达式分别为真和假，其中布尔表达式被认为是一个整体，不考虑内部是否包含了“逻辑与”或者“逻辑或”等运算符。判定覆盖的基本思想是设计的测试用例是的程序中每个判定至少分别取“真”分支和取“假”分支经历一次，即判断真假值均被满足。</p>
<p>判定覆盖比语句覆盖提供了更强的测试能力，但是，大部分的判定语句是由多个逻辑条件组合而成的，仅仅判断最终的逻辑运算结果并不能真正覆盖所有的测试路径，这是判定覆盖的一个缺点。</p>
<h2 id="23-条件覆盖">2.3 条件覆盖</h2>
<p>条件覆盖是设计测试用例，使得每个判断中每个条件的可能取值至少满足一次。</p>
<p>条件覆盖比判定覆盖增加了对符合判定情况的测试，增加了测试路径，但是条件覆盖只能保证每个条件至少有一次为真，而不考虑所有的判定结果。</p>
<h2 id="24-条件判定覆盖">2.4 条件/判定覆盖</h2>
<p>条件/判定覆盖是综合了条件覆盖与判定覆盖的一种方法，含义是通过设计足够的测试用例，使得判断条件中所有条件可能至少执行一次取值，同时所有判断的可能结果至少执行一次。</p>
<p>表面上，条件/判定覆盖能同时满足判定覆盖以及条件覆盖两种标准，但实际上并没有完全覆盖所有的“真”和“假”取值的条件组合情况，这种情况下需要将判定语句中的复合条件表达式进行分解，形成由多个基本判定嵌套组成的流程图，以有效检查所有条件是否正确。</p>
<h2 id="25-修正条件判定覆盖">2.5 修正条件/判定覆盖</h2>
<p>修正条件/判定覆盖（缩写为<code>MC/DC</code>）可以解释为：</p>
<ul>
<li>每个条件的所有可能结果至少出现一次</li>
<li>每个判定本身的所有可能结果也至少出现一次</li>
<li>每个入口点与出口点至少要唤醒一次</li>
<li>每个条件都显示能单独影响判定结果</li>
</ul>
<p><code>MC/DC</code>具有如下优点：</p>
<ul>
<li>继承了多重条件覆盖的优点</li>
<li>线性地增加了测试用例的数量</li>
<li>对操作数以及非等式条件变化反应敏感</li>
<li>具有更高的目标码覆盖率</li>
</ul>
<h2 id="26-条件组合覆盖">2.6 条件组合覆盖</h2>
<p>基本思想是，设计测试用例使得：</p>
<ul>
<li>每个条件中的所有可能至少出现一次</li>
<li>每个判断本身的判定结果也至少出现一次</li>
</ul>
<p>条件组合覆盖是一种相当强的覆盖准则，可以有效地检查各种可能的条件取值的组合是否正确，它不但可以覆盖所有条件的可能取值组合，还可以覆盖所有判断的可取分支，但仍有可能的路径会遗漏掉，测试还不完全。</p>
<h2 id="27-路径覆盖">2.7 路径覆盖</h2>
<p>路径覆盖的基本思想是，选择足够的测试用例，使得程序中所有可能的路径都至少被执行一次。一条路径是从函数的入口到出口分支的一个唯一序列。</p>
<p>路径覆盖的覆盖率比前面几种逻辑覆盖要大，但是随着代码增加，测试工作将呈指数级增长，比如一个函数包括10个判断语句，那么就需要测试<code>2^10 = 1024</code>个路径。</p>
<h2 id="28-总结">2.8 总结</h2>
<p>语句覆盖的效果最弱，路径覆盖的效果最好，如下图所示：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20210414092712630.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>优缺点集合：</p>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20210414093317798.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="3-路径分析">3 路径分析</h1>
<p>路径分析测试法是在程序控制流程图的基础上，通过分析控制构造的环路复杂性，导出独立路径集合，设计测试用例的方法。程序的所有路径作为一个集合，在这些路径集合中必然存在一个最短路径，这个最小的路径称为基路径或独立路径。</p>
<p>路径分析与测试法主要步骤如下：</p>
<ul>
<li>绘制控制流图</li>
<li>计算圈复杂性，圈复杂性用于计算程序的基本独立路径数目，确保所有语句至少执行一次的测试数量的上界</li>
<li>确定独立路径的集合，独立路径是指至少引入程序的一个新处理语句集合或一个新条件的路径，即独立路径必须包含一条在定义之前不曾使用的边</li>
<li>测试用例生成，设计测试用例的数据输入和预期结果，确保基本路径集中每条路径上的执行</li>
</ul>
<h1 id="4-控制结构测试">4 控制结构测试</h1>
<p>控制结构测试可以分为：</p>
<ul>
<li>条件测试：检查程序模块中所包含逻辑条件的测试用例设计方法</li>
<li>循环测试：检测代码中的简单循环、嵌套循环以及串接循环，测试用例包括零次循环、一次循环、两次循环、m次循环、最大循环次数等等</li>
<li>Z路径覆盖：是路径覆盖的一个变体，是一种在大量判断和多个循环组合的情况下减少循环测试次数的方法，Z路径覆盖不考虑循环的形式和复杂度如何，也不考虑实际执行循环体次数是多少，只考虑通过循环体零次和一次这两种情况</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第304期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-304-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-304-qi/">
        </link>
        <updated>2021-04-14T00:09:42.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>试着去了解那些你讨厌的人，你会发现，真是越看越讨厌。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>醉舞梁园夜，行歌泗水春。<br>
——杜甫《寄李十二白二十韵》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>有时语言就像利刃，使用不当，就会成为凶器。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1618359014201.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>一开始直接上的暴力<code>ArrayList</code>，虽然能过，但是速度打败了<code>5%</code>的<code>Java</code>提交。。。</p>
<p>然后想了一下题目说这是一个树形结构，于是想着用二叉树试了一下，但是发现好像叉数太少了。</p>
<p>后来发现前缀树其实是一棵非典型m叉树，说非典型是因为它与一般的m叉树结构不一样，一般的m叉树都有一个值以及一个孩子节点数组，而前缀树只有一个表示是否结束的布尔变量以及一个映射表（这题中是只有26个小写字母，所以映射表的长度为26）。</p>
<p>最主要的两个操作：</p>
<ul>
<li>插入：插入需要从根开始，对于一个单词，进行逐个字符的插入，首先判断每个字符对应的前缀树是否存在，存在的话直接修改临时变量<code>Node</code>的值，不存在的话新建一个前缀树并使<code>Node</code>指向它，直到每个字符处理完毕</li>
<li>查找：从根开始，逐个字符开始查找，若字符对应的前缀树存在，移动临时变量<code>Node</code>，使其指向下一个节点，如果不存在，直接返回<code>null</code>或者<code>false</code></li>
</ul>
<p>代码：</p>
<pre><code class="language-java">public class Trie {
    private boolean isEnd = false;
    private Trie[] children = new Trie[26];

    public Trie() {
    }

    public void insert(String word) {
        Trie node = searchPrefix(word,true);
        node.isEnd = true;
    }

    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        Trie node = searchPrefix(word,false);
        return node != null &amp;&amp; node.isEnd;
    }

    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        return searchPrefix(prefix,false) != null;
    }

    private Trie searchPrefix(String prefix,boolean isInsertMode){
        Trie node = this;
        for (int i = 0; i &lt; prefix.length(); i++) {
            int index = prefix.charAt(i) - 'a';
            if(node.children[index] == null){
                if(isInsertMode){
                    node.children[index] = new Trie();
                }else{
                    return null;
                }
            }
            node = node.children[index];
        }
        return node;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1618358999407.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于Vim/Neovim/SpaceVim的一些思考]]></title>
        <id>https://2293736867.github.io/post/guan-yu-vimneovimspacevim-de-yi-xie-si-kao/</id>
        <link href="https://2293736867.github.io/post/guan-yu-vimneovimspacevim-de-yi-xie-si-kao/">
        </link>
        <updated>2021-04-13T05:23:36.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-前言">1 前言</h1>
<p>最近看到了<code>Neovim</code>以及<code>SpaceVim</code>，于是上手试了一下。</p>
<h1 id="2-neovim与spacevim">2 <code>Neovim</code>与<code>SpaceVim</code></h1>
<p><code>Neovim</code>是<code>Vim</code>的一个分支，具有更加现代的<code>GUI</code>、嵌入式以及脚本化的终端、异步工作控制等等特点，默认配置文件为<code>~/.config/nvim/init.vim</code>。而<code>SpaveVim</code>，是一个社区驱动的模块化的<code>Vim IDE</code>，以模块的方式组织管理插件以及相关配置，为不同的语言开发量身定制了相关的开发模块，提供了自动补全、语法检查、格式化、调试等特性，默认配置文件为<code>~/.SpaveVim.d/init.toml</code>。</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20210413104514281.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="3-使用感受">3 使用感受</h1>
<h2 id="31-neovim">3.1 <code>Neovim</code></h2>
<p>首先是安装，<code>Neovim</code>的安装很简单，可以直接通过包管理器安装：</p>
<pre><code class="language-bash">paru -S neovim
</code></pre>
<p>安装了之后可以使用<code>nvim</code>命令打开。</p>
<p>简单使用了一下，发现<code>Neovim</code>并没有和<code>Vim</code>（版本<code>8.2</code>）有太大的区别。一般情况下，这样的<code>Neovim</code>不能成为一个<code>IDE</code>，需要添加若干插件才能使用。流行的插件管理器有如下几个：</p>
<ul>
<li><code>vim-plug</code></li>
<li><code>vundle</code></li>
<li><code>neobundle</code></li>
<li><code>Pathogen</code></li>
</ul>
<p>笔者用的是<code>vim-plug</code>，插件安装不难，在<code>init.vim</code>中的两个<code>call</code>之间加上插件的名字：</p>
<pre><code class="language-bash">call plug#begin('~/.vim/plugged')
Plug 'junegunn/vim-easy-align'
call plug#end()
</code></pre>
<p>然后在<code>Neovim</code>中键入<code>:PlugInstall</code>即可进行安装。</p>
<p>一般来说，如果需要打造成为一个<code>IDE</code>，那么至少需要具备以下功能：</p>
<ul>
<li>补全：可用插件<a href="https://github.com/ycm-core/YouCompleteMe">YouCompleteMe</a>、<a href="https://github.com/honza/vim-snippets">vim-snippets</a></li>
<li>高亮：可用插件<a href="https://github.com/jaxbot/semantic-highlight.vim">semantic-highlight.vim</a></li>
<li>工程目录树：可用插件<a href="https://github.com/preservim/nerdtree">nerdtree</a></li>
<li>运行与调试：可用插件<a href="https://github.com/vim-vdebug/vdebug">Vdebug</a></li>
</ul>
<p>但是，安装使用了之后，测试了一下<code>Java</code>，效果并不怎么样，拿最常用的补全来说，补全提示的速度比不快，另一方面，提示的速度比<code>IDEA</code>慢，而且提示不够智能，不能根据当前光标处的变量提示最接近的补全。另一方面，并不能自动<code>import</code>（虽然可以通过脚本做到，但是又需要额外的配置）。</p>
<h2 id="32-spacevim">3.2 <code>SpaceVim</code></h2>
<p><code>SpaveVim</code>相当于一个开箱即用的<code>IDE</code>，默认就提供了<code>IDE</code>的常见功能，比如：</p>
<ul>
<li>补全</li>
<li>高亮</li>
<li>工程目录树</li>
<li>运行调试</li>
<li>快速定位</li>
<li>构建工具支持</li>
</ul>
<p>等等。首先，不可否认的是<code>SpaceVim</code>默认就提供了一个用户友好的界面：</p>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20210413112344359.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>会默认记录最近打开的文件，并且可以通过数字快速定位。笔者同样使用了<code>Java</code>进行测试，虽然内置了代码补全插件，但是，令人遗憾的是并没有自动<code>import</code>的功能，并且也没有变量名自动补全的功能（指创建一个叫<code>arrayList</code>的变量）：</p>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20210413112515715.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>当然，这也有可能是没有完全配置好的原因，想要配置一个更加好用的<code>SpaceVim</code>，可以参考<a href="https://blog.csdn.net/simple_the_best/article/details/52970992">这篇文章</a>。</p>
<h1 id="4-建议">4 建议</h1>
<p>下面是个人建议的使用<code>Neovim</code>的原因：</p>
<ul>
<li>需要一个从零开始配置的<code>IDE</code>或者<code>Vim</code></li>
<li>动手能力强，能解决各种问题</li>
<li>能够熟练记忆并使用各种各样的快捷键</li>
<li>熟悉各种插件，包括但不限于<code>nerdtree</code>、<code>YouCompleteMe</code>等等</li>
</ul>
<p>因为如果想把<code>Neovim</code>用好，最起码需要花点时间，利用插件安装好各种各样的插件之后（当然因为有些插件只是针对<code>Vim</code>的，所以可能会遇上不兼容的问题），熟悉它们的使用并知道快捷键，这对记忆力以及学习能力都是一个考验，在这过程中，需要无数次的打开<code>init.vim</code>进行配置。</p>
<p>建议使用<code>SpaveVim</code>的原因：</p>
<ul>
<li>不想手动配置太多的插件以及快捷键</li>
<li>需要一个开箱即用且轻量级的<code>IDE</code></li>
<li>不需要开发很大的工程</li>
</ul>
<p>在<code>SpaveVim</code>里面，大部分都是已经配置好的，剩下的只是需要通过官网文档熟悉界面，最主要的是熟悉<code>Space</code>组合键的使用，比如：</p>
<ul>
<li><code>Space+数字键</code>：切换窗口</li>
<li><code>Space+b/B</code>：缓冲区操作</li>
<li><code>Space+c</code>：命令操作</li>
<li><code>Space+f</code>：文件操作</li>
<li><code>Space+l</code>：语言相关操作，比如运行等等</li>
<li><code>Space+w</code>：窗口操作</li>
</ul>
<p>相比起<code>Neovim</code>需要在<code>init.vim</code>中配置各种<code>map</code>去映射键，<code>SpaceVim</code>的快捷键学习曲线会低了很多。</p>
<p>但是相比起现代级的<code>IDE</code>，<code>Neovim</code>与<code>SpaceVim</code>还是有很大差距的，最明显的就是对各种库、各种包以及一键部署运行的支持，因此，个人认为<code>SpaceVim</code>/<code>Neovim</code>不是特别适合大项目的。不过当然有一些折中的方案，比如<code>VSCode</code>，在各种各样的插件加持之下，可以堪称是又轻又快的现代<code>IDE</code>。</p>
<h1 id="5-资源">5 资源</h1>
<p>如果想学习<code>Neovim</code>/<code>SpaceVim</code>或者想把两者配置成一个更好用的<code>IDE</code>，这里提供了一些资源：</p>
<ul>
<li><a href="https://neovim.io/">Neovim文档</a></li>
<li><a href="https://spacevim.org/cn/">SpaceVim文档</a></li>
<li><a href="https://github.com/junegunn/vim-plug/wiki/tutorial">vim-plug文档</a></li>
<li><a href="https://github.com/VundleVim/Vundle.vim/wiki">Vundle文档</a></li>
<li><a href="https://github.com/amix/vimrc">24.3k star的vimrc配置</a></li>
<li><a href="https://vimawesome.com/">VimAwesome-Vim插件合集网站</a></li>
<li><a href="https://github.com/yangyangwithgnu/use_vim_as_ide">8.9k star的如何将Vim配置成C/C++ IDE的仓库</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日一句 301-350期合集]]></title>
        <id>https://2293736867.github.io/post/mei-ri-yi-ju-301-350-qi-he-ji/</id>
        <link href="https://2293736867.github.io/post/mei-ri-yi-ju-301-350-qi-he-ji/">
        </link>
        <updated>2021-04-13T01:06:05.000Z</updated>
        <content type="html"><![CDATA[<h1 id="第301期">第301期</h1>
<blockquote>
<p>如果最开始我没欺骗你，我们会怎样？</p>
</blockquote>
<h1 id="第302期">第302期</h1>
<blockquote>
<p>我会穿越那七大海洋，去和你相见。</p>
</blockquote>
<h1 id="第303期">第303期</h1>
<blockquote>
<p>踏碎零花，执剑称皇！</p>
</blockquote>
<h1 id="第304期">第304期</h1>
<blockquote></blockquote>
<h1 id="第305期">第305期</h1>
<blockquote></blockquote>
<h1 id="第306期">第306期</h1>
<blockquote></blockquote>
<h1 id="第307期">第307期</h1>
<blockquote></blockquote>
<h1 id="第308期">第308期</h1>
<blockquote></blockquote>
<h1 id="第309期">第309期</h1>
<blockquote></blockquote>
<h1 id="第310期">第310期</h1>
<blockquote></blockquote>
<h1 id="第311期">第311期</h1>
<blockquote></blockquote>
<h1 id="第312期">第312期</h1>
<blockquote></blockquote>
<h1 id="第313期">第313期</h1>
<blockquote></blockquote>
<h1 id="第314期">第314期</h1>
<blockquote></blockquote>
<h1 id="第315期">第315期</h1>
<blockquote></blockquote>
<h1 id="第316期">第316期</h1>
<blockquote></blockquote>
<h1 id="第317期">第317期</h1>
<blockquote></blockquote>
<h1 id="第318期">第318期</h1>
<blockquote></blockquote>
<h1 id="第319期">第319期</h1>
<blockquote></blockquote>
<h1 id="第320期">第320期</h1>
<blockquote></blockquote>
<h1 id="第321期">第321期</h1>
<blockquote></blockquote>
<h1 id="第322期">第322期</h1>
<blockquote></blockquote>
<h1 id="第323期">第323期</h1>
<blockquote></blockquote>
<h1 id="第324期">第324期</h1>
<blockquote></blockquote>
<h1 id="第325期">第325期</h1>
<blockquote></blockquote>
<h1 id="第326期">第326期</h1>
<blockquote></blockquote>
<h1 id="第327期">第327期</h1>
<blockquote></blockquote>
<h1 id="第328期">第328期</h1>
<blockquote></blockquote>
<h1 id="第329期">第329期</h1>
<blockquote></blockquote>
<h1 id="第330期">第330期</h1>
<blockquote></blockquote>
<h1 id="第331期">第331期</h1>
<blockquote></blockquote>
<h1 id="第332期">第332期</h1>
<blockquote></blockquote>
<h1 id="第333期">第333期</h1>
<blockquote></blockquote>
<h1 id="第334期">第334期</h1>
<blockquote></blockquote>
<h1 id="第335期">第335期</h1>
<blockquote></blockquote>
<h1 id="第336期">第336期</h1>
<blockquote></blockquote>
<h1 id="第337期">第337期</h1>
<blockquote></blockquote>
<h1 id="第338期">第338期</h1>
<blockquote></blockquote>
<h1 id="第339期">第339期</h1>
<blockquote></blockquote>
<h1 id="第340期">第340期</h1>
<blockquote></blockquote>
<h1 id="第341期">第341期</h1>
<blockquote></blockquote>
<h1 id="第342期">第342期</h1>
<blockquote></blockquote>
<h1 id="第343期">第343期</h1>
<blockquote></blockquote>
<h1 id="第344期">第344期</h1>
<blockquote></blockquote>
<h1 id="第345期">第345期</h1>
<blockquote></blockquote>
<h1 id="第346期">第346期</h1>
<blockquote></blockquote>
<h1 id="第347期">第347期</h1>
<blockquote></blockquote>
<h1 id="第348期">第348期</h1>
<blockquote></blockquote>
<h1 id="第349期">第349期</h1>
<blockquote></blockquote>
<h1 id="第350期">第350期</h1>
<blockquote></blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第303期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-303-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-303-qi/">
        </link>
        <updated>2021-04-13T00:20:13.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>其实你讨厌的并不是广场舞，而是广场舞大妈。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>霜月定相知，先识春风面。<br>
——辛弃疾《生查子·重叶梅》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>踏碎零花，执剑称皇！</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1618275375531.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>直接暴力（当然更好的方法是中序遍历）：</p>
<pre><code class="language-java">public class Solution {
    private int min = 10_0000;
    public int minDiffInBST(TreeNode root) {
        f(root);
        return min;
    }

    private void f(TreeNode root){
        if(root != null){
            min = Math.min(Math.min(Math.abs(root.val - rightChild(root.left)),Math.abs(root.val - leftChild(root.right))),min);
            f(root.left);
            f(root.right);
        }
    }

    private int rightChild(TreeNode root){
        int temp = 10_0000;
        while(root != null){
            temp = root.val;
            root = root.right;
        }
        return temp;
    }

    private int leftChild(TreeNode root){
        int temp = 10_0000;
        while (root != null){
            temp = root.val;
            root = root.left;
        }
        return temp;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1618275385211.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
</feed>