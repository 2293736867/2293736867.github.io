<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://2293736867.github.io</id>
    <title>氷泠&apos;s blog</title>
    <updated>2021-07-04T01:59:29.349Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://2293736867.github.io"/>
    <link rel="self" href="https://2293736867.github.io/atom.xml"/>
    <subtitle>几百遍，重复了几百遍
重复的情绪重复的熬过想你的夜</subtitle>
    <logo>https://2293736867.github.io/images/avatar.png</logo>
    <icon>https://2293736867.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 氷泠&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[每日分享 第384期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-384-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-384-qi/">
        </link>
        <updated>2021-07-04T01:33:55.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>人生最大的耻辱是什么，考试作弊了还不及格。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>纸屏石枕竹方床，手倦抛书午梦长。<br>
——蔡确《夏日登车盖亭》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>悲痛藏于心，欢喜言于表，说的不就是我们吗！</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1625362601439.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>直接哈希表：</p>
<pre><code class="language-java">public class Solution {
    public int[] findErrorNums(int[] nums) {
        int n = nums.length;
        boolean[] hash = new boolean[1_0000 + 1];
        int repeated = 0;
        for (int num : nums) {
            if (hash[num]) {
                repeated = num;
            }
            hash[num] = true;
        }
        for (int i = 1; i &lt;= n; ++i) {
            if (!hash[i]) {
                return new int[]{repeated, i};
            }
        }
        return new int[]{};
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1625362622318.png" alt="" loading="lazy"></figure>
<p>当然最朴素的想法就是直接计数：</p>
<pre><code class="language-java">public class Solution {
    public int[] findErrorNums(int[] nums) {
        int n = nums.length;
        int[] count = new int[n + 1];
        int[] res = new int[2];
        for (int num : nums) {
            ++count[num];
        }
        for (int i = 1; i &lt;= n; ++i) {
            if(count[i] == 2){
                res[0] = i;
            }
            if(count[i] == 0){
                res[1] = i;
            }
        }
        return res;
    }
}
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://2293736867.github.io/post-images/1625362781875.png" alt="" loading="lazy"></figure>
<p>好家伙这速度可以啊。</p>
<p>还有一种做法是使用<code>O(1)</code>空间的位运算：</p>
<pre><code class="language-java">public class Solution {
    public int[] findErrorNums(int[] nums) {
        int n = nums.length;
        int x = 0;
        int y = 0;
        int xor = 0;
        for (int num : nums) {
            xor ^= num;
        }
        for (int i = 1; i &lt;= n; i++) {
            xor ^= i;
        }
        xor &amp;= (-xor);
        for (int num : nums) {
            if ((num &amp; xor) == 0) {
                x ^= num;
            } else {
                y ^= num;
            }
        }
        for (int i = 1; i &lt;= n; i++) {
            if((i &amp; xor) == 0) {
                x ^= i;
            }else{
                y ^= i;
            }
        }
        for (int num:nums){
            if(num == x){
                return new int[]{x,y};
            }
        }
        return new int[]{y, x};
    }
}
</code></pre>
<p>思想就是：</p>
<ul>
<li>利用<code>xor</code>与原数组中每个数相异或</li>
<li>再利用<code>xor</code>与<code>1..n</code>相异或</li>
<li>这样<code>xor</code>就是三个重复的数与一个缺失的数字异或的结果</li>
<li>计算<code>lowbit</code>，<code>lowbit = xor ^ (-xor)</code>，使用<code>lowbit</code>得到最低位1表示的结果</li>
<li>再遍历原数组以及<code>1..n</code>组成的数组，将其中每个数与<code>lowbit</code>相与，如果为<code>0</code>，使用一个临时变量<code>x</code>与其相异或，否则使用临时变量<code>y</code>与其相异或</li>
<li>得到的<code>x</code>、<code>y</code>分别是重复的数字和丢失的数字，但具体哪个是哪个还不能确定</li>
<li>最后再次遍历原数组，如果<code>x</code>或<code>y</code>在原数组中出现过，那么它就是重复的数字，另一个就是丢失的数字</li>
<li>否则它是丢失的数字，另一个是重复的数字</li>
</ul>
<p>说了这么多，但是时间还是不怎么样，虽然空间做到了<code>O(1)</code>，但是扫太多遍了：</p>
<figure data-type="image" tabindex="4"><img src="https://2293736867.github.io/post-images/1625363920298.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第383期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-383-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-383-qi/">
        </link>
        <updated>2021-07-03T02:41:49.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>遇到困难的三个步骤，面对它，处理它，放弃它。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>东边日出西边雨，道是无晴却有晴。<br>
——刘禹锡《竹枝词二首·其一》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>I'm nothing without you.</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1625280248893.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>虽然写着是中等题，但是感觉是简单题，统计计数后排序然后将结果添加到结果中即可，注意包含大小写字母和数字（题目又没写。。。）：</p>
<pre><code class="language-java">import java.util.Arrays;

public class Solution {
    public String frequencySort(String s) {
        if (s == null || s.isBlank()) {
            return s;
        }
        int n = s.length();
        char[] res = new char[n];
        Node[] nodes = new Node[62];
        for (int i = 0; i &lt; 26; i++) {
            nodes[i] = new Node((char) ('a' + i));
        }
        for (int i = 26; i &lt; 52; i++) {
            nodes[i] = new Node((char) ('A' + (i - 26)));
        }
        for (int i = 52; i &lt; 62; i++) {
            nodes[i] = new Node((char) ('0' + (i - 52)));
        }
        for (char c : s.toCharArray()) {
            if (c &gt;= 'a' &amp;&amp; c &lt;= 'z') {
                ++nodes[c - 'a'].count;
            } else if (c &gt;= 'A' &amp;&amp; c &lt;= 'Z') {
                ++nodes[c - 'A' + 26].count;
            } else {
                ++nodes[c - '0' + 52].count;
            }
        }

        Arrays.sort(nodes);
        int index = 0;
        for (Node node:nodes){
            int count = node.count;
            char c = node.c;
            for (int i = 0; i &lt; count; i++) {
                res[index++] = c; 
            }
        }
        return new String(res);
    }

    private static class Node implements Comparable&lt;Node&gt; {
        char c;
        int count = 0;

        public Node(char c) {
            this.c = c;
        }

        @Override
        public int compareTo(Node node) {
            return Integer.compare(node.count, count);
        }

        @Override
        public String toString() {
            return &quot;[c=&quot; + c + &quot;,count=&quot; + count + &quot;]&quot;;
        }
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1625280239823.png" alt="" loading="lazy"></figure>
<p>寻思着好像没有什么优化方法，昨天的计排好像也用不上，看了题解用的居然是桶排，好家伙。</p>
<figure data-type="image" tabindex="3"><img src="https://2293736867.github.io/post-images/1625280765329.png" alt="" loading="lazy"></figure>
<p>但是最快的第一名还是用的快排：</p>
<figure data-type="image" tabindex="4"><img src="https://2293736867.github.io/post-images/1625281014724.png" alt="" loading="lazy"></figure>
<p>最后还是参考题解，配合栈用上了计排：</p>
<pre><code class="language-java">import java.util.*;

public class Solution {
    public String frequencySort(String s) {
        int n = s.length();
        char[] res = new char[n];
        int[] count = new int[62];
        for (char c : s.toCharArray()) {
            ++count[charToIndex(c)];
        }
        int max = 0;
        for (int c : count) {
            if (c &gt; max) {
                max = c;
            }
        }
        Stack[] stacks = new Stack[max + 1];
        for (int i = 0; i &lt; 62; ++i) {
            if (count[i] != 0) {
                int ct = count[i];
                if (stacks[ct] == null) {
                    stacks[ct] = new Stack&lt;&gt;();
                    stacks[ct].push(indexToChar(i));
                } else {
                    stacks[ct].push(indexToChar(i));
                }
            }
        }

        int index = 0;
        for (int i = max; i &gt;= 1; --i) {
            Stack stack = stacks[i];
            if (stack != null) {
                while (!stack.isEmpty()) {
                    char c = (Character) stack.pop();
                    for (int j = 0; j &lt; i; j++) {
                        res[index++] = c;
                    }
                }
            }
        }
        return new String(res);
    }

    private int charToIndex(char c) {
        if (c &gt;= 'a' &amp;&amp; c &lt;= 'z') {
            return c - 'a';
        }
        if (c &gt;= 'A' &amp;&amp; c &lt;= 'Z') {
            return c - 'A' + 26;
        }
        return c - '0' + 52;
    }

    private char indexToChar(int index) {
        if (index &gt;= 0 &amp;&amp; index &lt;= 25) {
            return (char) ('a' + index);
        }
        if (index &gt;= 26 &amp;&amp; index &lt;= 51) {
            return (char) ('A' + (index - 26));
        }
        return (char) ('0' + (index - 52));
    }

}
</code></pre>
<p>（<s>为什么<code>Java</code>不支持泛型数组</s>）</p>
<p>但还是一样的时间：</p>
<figure data-type="image" tabindex="5"><img src="https://2293736867.github.io/post-images/1625285002545.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第382期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-382-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-382-qi/">
        </link>
        <updated>2021-07-02T04:10:05.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>好好过日子吧，每天都会有新打击。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>接天莲叶无穷碧，映日荷花别样红。<br>
——杨万里《晓出净慈寺送林子方》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>没有一个世界会比活在这个世界痛苦。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1625199129271.jpg" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>一开始直接上贪心：</p>
<pre><code class="language-java">import java.util.*;

public class Solution {
    public int maxIceCream(int[] costs, int coins) {
        Arrays.sort(costs);
        int res = 0;
        for (int i = 0; i &lt; costs.length &amp;&amp; coins &gt;= costs[i]; ++i, ++res) {
            coins -= costs[i];
        }
        return res;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1625199695745.png" alt="" loading="lazy"></figure>
<p>中规中矩的水平吧，上<code>Github</code>拿个快排优化一下：</p>
<pre><code class="language-java">public class Solution {
    public int maxIceCream(int[] costs, int coins) {
        quicksort(costs, 0, costs.length - 1);
        int res = 0;
        for (int i = 0; i &lt; costs.length &amp;&amp; coins &gt;= costs[i]; ++i, ++res) {
            coins -= costs[i];
        }
        return res;
    }

    private static void quicksort(int[] ar, int lo, int hi) {
        if (lo &lt; hi) {
            int splitPoint = partition(ar, lo, hi);
            quicksort(ar, lo, splitPoint);
            quicksort(ar, splitPoint + 1, hi);
        }
    }

    private static int partition(int[] ar, int lo, int hi) {
        int pivot = ar[lo];
        int i = lo - 1, j = hi + 1;
        while (true) {
            do {
                i++;
            } while (ar[i] &lt; pivot);
            do {
                j--;
            } while (ar[j] &gt; pivot);
            if (i &lt; j) swap(ar, i, j);
            else return j;
        }
    }

    private static void swap(int[] ar, int i, int j) {
        int tmp = ar[i];
        ar[i] = ar[j];
        ar[j] = tmp;
    }
}
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://2293736867.github.io/post-images/1625199743893.png" alt="" loading="lazy"></figure>
<p><s>???</s></p>
<p><s>离谱</s></p>
<p><s>这优化</s></p>
<p>然后想了一下怎么把时间优化到<code>O(n)</code>，看了一下题解居然是用计数排序（<s>怎么就没想到，裂开</s>）。</p>
<p>然后肯定就是手写一个简陋的计数排序：</p>
<pre><code class="language-java">import java.util.*;

public class Solution {
    public int maxIceCream(int[] costs, int coins) {
        int [] ct = new int[10_0000+1];
        for (int c:costs){
            ++ct[c];
        }
        int index = 0;
        for (int i = 1; i &lt;= 10_0000; i++) {
            if(ct[i] != 0) {
                for (int j = 0; j &lt; ct[i]; j++) {
                    costs[index++] = i;
                }
            }
        }
        //System.out.println(Arrays.toString(costs));

        int res = 0;
        for (int i = 0; i &lt; costs.length &amp;&amp; coins &gt;= costs[i]; ++i, ++res) {
            coins -= costs[i];
        }
        return res;
    }
}
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://2293736867.github.io/post-images/1625200111336.png" alt="" loading="lazy"></figure>
<p>u1s1还真有点效果。</p>
<p>但是还是不够快，想了一下因为是求最后的数量，计数后不需要把数放回原来的数组，直接从<code>coins</code>里面减就行了，如果变成负数了直接返回：</p>
<pre><code class="language-java">public class Solution {
    public int maxIceCream(int[] costs, int coins) {
        int[] ct = new int[10_0000 + 1];
        for (int c : costs) {
            ++ct[c];
        }
        int index = 0;
        int res = 0;
        for (int i = 1; i &lt;= 10_0000; i++) {
            for (int j = 0; j &lt; ct[i]; j++) {
                costs[index++] = i;
                if (coins &gt;= i) {
                    coins -= i;
                    ++res;
                } else {
                    return res;
                }
            }
        }

        return res;
    }
}
</code></pre>
<figure data-type="image" tabindex="5"><img src="https://2293736867.github.io/post-images/1625200311409.png" alt="" loading="lazy"></figure>
<p>u1s1这才叫优化。</p>
<p>再优化一下下，如果是所有同样定价的雪糕可以同时买下，直接用倍数去乘，而不是循环去减：</p>
<pre><code class="language-java">public class Solution {
    public int maxIceCream(int[] costs, int coins) {
        int[] ct = new int[10_0000 + 1];
        for (int c : costs) {
            ++ct[c];
        }
        int index = 0;
        int res = 0;
        for (int i = 1; i &lt;= 10_0000; i++) {
            if (ct[i] != 0) {
                if (coins &gt;= ct[i] * i) {
                    coins -= ct[i] * i;
                    res += ct[i];
                } else {
                    for (int j = 0; j &lt; ct[i]; j++) {
                        costs[index++] = i;
                        if (coins &gt;= i) {
                            coins -= i;
                            ++res;
                        } else {
                            return res;
                        }
                    }
                }
            }
        }

        return res;
    }
}
</code></pre>
<figure data-type="image" tabindex="6"><img src="https://2293736867.github.io/post-images/1625200504043.png" alt="" loading="lazy"></figure>
<p>但是好像没什么效果。</p>
<p>不行，坚定信念要优化的笔者，决定再优化一下下，把循环去掉，用倍数加去代替逐个雪糕相减：</p>
<pre><code class="language-java">public class Solution {
    public int maxIceCream(int[] costs, int coins) {
        int[] ct = new int[10_0000 + 1];
        for (int c : costs) {
            ++ct[c];
        }
        int res = 0;
        for (int i = 1; i &lt;= 10_0000; i++) {
            if (ct[i] != 0) {
                if (coins &gt;= ct[i] * i) {
                    coins -= ct[i] * i;
                    res += ct[i];
                } else {
                    res += (coins / i);
                    return res;
                }
            }
        }

        return res;
    }
}
</code></pre>
<figure data-type="image" tabindex="7"><img src="https://2293736867.github.io/post-images/1625200817021.png" alt="" loading="lazy"></figure>
<p>尽梨了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第381期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-381-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-381-qi/">
        </link>
        <updated>2021-06-30T16:33:26.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>对于穷人，生活不累的话，那就不叫生活！</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>烛摧花，鹤惊露，忽三更。<br>
——朱敦儒《水调歌头》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>我只是不想再失去他——哪怕是仅存在一瞬的幻影！</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1625070969908.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<pre><code class="language-java">import java.util.*;

public class Solution {
    public int numWays(int n, int[][] relation, int k) {
        Map&lt;Integer, List&lt;Integer&gt;&gt; map = new HashMap&lt;&gt;();
        for (int i = 0; i &lt; relation.length; i++) {
            int fromPlayer = relation[i][0];
            int toPlayer = relation[i][1];
            if(map.containsKey(fromPlayer)){
                map.get(fromPlayer).add(toPlayer);
            }else{
                List&lt;Integer&gt; list = new ArrayList&lt;&gt;();
                list.add(toPlayer);
                map.put(fromPlayer,list);
            }
        }

        int res = 0;
        Queue&lt;Integer&gt; queue = new LinkedList&lt;&gt;();
        queue.add(0);
        for (int i = 0; i &lt; k; i++) {
            int size = queue.size();
            for (int j = 0; j &lt; size; j++) {
                int current = queue.remove();
                List&lt;Integer&gt; list = map.get(current);
                if(list != null){
                    queue.addAll(list);
                }
            }
        }
        while(!queue.isEmpty()){
            if(queue.remove() == n-1){
                ++res;
            }
        }
        return res;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1625071812210.png" alt="" loading="lazy"></figure>
<p>这效率。。。</p>
<p>稍微优化一下，使用数组代替<code>HashMap</code>，但是也没有提高多少效率：</p>
<pre><code class="language-java">import java.util.*;

public class Solution {
    public int numWays(int n, int[][] relation, int k) {
        int [][] map = new int[n][];
        int [] mapLen = new int[n];
        int [] mapIndex = new int[n];

        for (int i = 0; i &lt; relation.length; i++) {
            ++mapLen[relation[i][0]];
        }

        for (int i = 0; i &lt; relation.length; i++) {
            int fromPlayer = relation[i][0];
            int toPlayer = relation[i][1];
            if(map[fromPlayer] == null){
                map[fromPlayer] = new int[mapLen[fromPlayer]];
                map[fromPlayer][0] = toPlayer;
                mapIndex[fromPlayer] = 1;
            }else{
                map[fromPlayer][mapIndex[fromPlayer]++] = toPlayer;
            }
        }

        int res = 0;
        Queue&lt;Integer&gt; queue = new LinkedList&lt;&gt;();
        queue.add(0);
        for (int i = 0; i &lt; k; i++) {
            int size = queue.size();
            for (int j = 0; j &lt; size; j++) {
                int current = queue.remove();
                int [] value = map[current];
                if(value != null){
                    for (int l = 0; l &lt; value.length; l++) {
                        queue.add(value[l]);
                    }
                }
            }
        }
        while(!queue.isEmpty()){
            if(queue.remove() == n-1){
                ++res;
            }
        }
        return res;
    }
}
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://2293736867.github.io/post-images/1625072240855.png" alt="" loading="lazy"></figure>
<p>再优化一下下：</p>
<pre><code class="language-java">import java.util.*;

public class Solution {
    public int numWays(int n, int[][] relation, int k) {
        int [][] map = new int[n][];
        int [] mapLen = new int[n];
        int [] mapIndex = new int[n];

        for (int i = 0; i &lt; relation.length; i++) {
            ++mapLen[relation[i][0]];
        }

        for (int i = 0; i &lt; relation.length; i++) {
            int fromPlayer = relation[i][0];
            int toPlayer = relation[i][1];
            if(map[fromPlayer] == null){
                map[fromPlayer] = new int[mapLen[fromPlayer]];
                map[fromPlayer][0] = toPlayer;
                mapIndex[fromPlayer] = 1;
            }else{
                map[fromPlayer][mapIndex[fromPlayer]++] = toPlayer;
            }
        }

        int res = 0;
        Queue&lt;Integer&gt; queue = new LinkedList&lt;&gt;();
        queue.add(0);
        for (int i = 0; i &lt; k; i++) {
            int size = queue.size();
            for (int j = 0; j &lt; size; j++) {
                int current = queue.remove();
                int [] value = map[current];
                if(value != null){
                    for (int l = 0; l &lt; value.length; l++) {
                        int v = value[l];
                        if(i == k-1 &amp;&amp; v == n-1){
                            ++res;
                        }
                        queue.add(v);
                    }
                }
            }
        }
        return res;
    }
}
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://2293736867.github.io/post-images/1625072398603.png" alt="" loading="lazy"></figure>
<p>极限了极限了。。。（<s>太菜了太菜了</s>）</p>
<p>看了题解发现原来有三种方法：</p>
<ul>
<li>深搜</li>
<li>广搜</li>
<li>动归</li>
</ul>
<p>动归解法如下：</p>
<pre><code class="language-java">class Solution {
    public int numWays(int n, int[][] relation, int k) {
        int[][] dp = new int[k + 1][n];
        dp[0][0] = 1;
        for (int i = 0; i &lt; k; i++) {
            for (int[] edge : relation) {
                int src = edge[0], dst = edge[1];
                dp[i + 1][dst] += dp[i][src];
            }
        }
        return dp[k][n - 1];
    }
}
</code></pre>
<figure data-type="image" tabindex="5"><img src="https://2293736867.github.io/post-images/1625072669552.png" alt="" loading="lazy"></figure>
<p><s>BFS优化个der</s></p>
<h1 id="100周年">100周年</h1>
<p>建党100周年！</p>
<p>刚过12点就朋友圈刷屏了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第380期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-380-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-380-qi/">
        </link>
        <updated>2021-06-29T16:29:16.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>宁可美的千篇一律，也不要丑的各有千秋。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>月明船笛参差起，风定池莲自在香。<br>
——秦观《纳凉》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>清晨、黄昏、天空和飞鸟，代码、诗歌、活着和爱你。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1625070598099.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>还是广搜题，序列化和反序列化都用的广搜：</p>
<pre><code class="language-java">import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;

public class Codec {
    public String serialize(TreeNode root) {
        if (root == null) {
            return &quot;&quot;;
        }

        StringBuilder builder = new StringBuilder();
        Queue&lt;TreeNode&gt; queue = new LinkedList&lt;&gt;();

        queue.add(root);
        while (!queue.isEmpty()) {
            TreeNode temp = queue.poll();

            if (temp == null) {
                builder.append(&quot;null,&quot;);
            } else {
                builder.append(temp.val).append(&quot;,&quot;);
                queue.add(temp.left);
                queue.add(temp.right);
            }
        }
        return &quot;[&quot; + builder.substring(0, builder.length() - 1) + &quot;]&quot;;
    }

    public TreeNode deserialize(String data) {
        int len = data.length();
        if (len == 0) {
            return null;
        }
        String[] strs = data.substring(1, len - 1).split(&quot;,&quot;);
        int n = strs.length;
        if (strs[0].charAt(0) == 'n') {
            return null;
        }
        TreeNode root = new TreeNode(Integer.parseInt(strs[0]));
        Queue&lt;TreeNode&gt; queue = new LinkedList&lt;&gt;();
        queue.add(root);
        for (int i = 1; i &lt; n; ) {
            TreeNode temp = queue.poll();
            if (temp != null) {
                TreeNode left = (strs[i].charAt(0) == 'n' ? null : new TreeNode(Integer.parseInt(strs[i])));
                TreeNode right = (strs[i + 1].charAt(0) == 'n' ? null : new TreeNode(Integer.parseInt(strs[i + 1])));
                temp.left = left;
                temp.right = right;
                queue.add(left);
                queue.add(right);
                i += 2;
            } else {
                while (queue.peek() == null) {
                    queue.poll();
                }
            }
        }
        return root;
    }
}
</code></pre>
<p>最离谱的第一名居然0ms：</p>
<pre><code class="language-java">public class Codec {
    private TreeNode root;
    public String serialize(TreeNode root) {
        this.root = root;
        return &quot;&quot;;
    }

    public TreeNode deserialize(String data) {
        return this.root;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1625070696173.png" alt="" loading="lazy"></figure>
<p>好家伙。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第379期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-379-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-379-qi/">
        </link>
        <updated>2021-06-28T16:22:09.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>问渠那得清如许，唯有毒汤活水来！</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>藕花珠缀，犹似汗凝妆。<br>
——阎选《临江仙·雨停荷荠逗浓香》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>宣纸泛黄，时间流逝，即使眨眼即过，也要抓住那瞬间的辉煌。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1625070154587.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>简单题，顺便也把类似的171题答案附上（注意1！！）：</p>
<pre><code class="language-java">public class Solution {
    public String convertToTitle(int columnNumber) {
        StringBuilder builder = new StringBuilder();
        while (columnNumber != 0) {
            --columnNumber;
            builder.append((char) (columnNumber % 26 + 'A'));
            columnNumber /= 26;
        }
        return builder.reverse().toString();
    }

    public int titleToNumber(String columnTitle) {
        int sum = 0;
        int base = 1;
        for (int i = columnTitle.length() - 1; i &gt;= 0; --i) {
            sum += (columnTitle.charAt(i) - 'A' + 1) * base;
            base *= 26;
        }
        return sum;
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第378期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-378-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-378-qi/">
        </link>
        <updated>2021-06-28T13:24:20.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>都说姐漂亮，其实都是妆出来的。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>此花此叶常相映，翠减红哀愁杀人。<br>
——李商隐《赠荷花》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>用我一生，换你十年天真无邪。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1624886536347.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>复制的，想了一下好像做不出来。。。（<s>太菜了</s>）</p>
<pre><code class="language-java">class Solution {
    int s, t;
    int[][] rs;
    public int numBusesToDestination(int[][] _rs, int _s, int _t) {
        rs = _rs; s = _s; t = _t;
        if (s == t) return 0;
        int ans = bfs();
        return ans;
    }
    int bfs() {
        // 记录某个车站可以进入的路线
        Map&lt;Integer, Set&lt;Integer&gt;&gt; map = new HashMap&lt;&gt;();
        // 队列存的是经过的路线
        Deque&lt;Integer&gt; d = new ArrayDeque&lt;&gt;();
        // 哈希表记录的进入该路线所使用的距离
        Map&lt;Integer, Integer&gt; m = new HashMap&lt;&gt;();
        int n = rs.length;
        for (int i = 0; i &lt; n; i++) {
            for (int station : rs[i]) {
                // 将从起点可以进入的路线加入队列
                if (station == s) {
                    d.addLast(i);
                    m.put(i, 1);
                }
                Set&lt;Integer&gt; set = map.getOrDefault(station, new HashSet&lt;&gt;());
                set.add(i);
                map.put(station, set);
            }
        }
        while (!d.isEmpty()) {
            // 取出当前所在的路线，与进入该路线所花费的距离
            int poll = d.pollFirst();
            int step = m.get(poll);

            // 遍历该路线所包含的车站
            for (int station : rs[poll]) {
                // 如果包含终点，返回进入该路线花费的距离即可
                if (station == t) return step;

                // 将由该线路的车站发起的路线，加入队列
                Set&lt;Integer&gt; lines = map.get(station);
                if (lines == null) continue;
                for (int nr : lines) {
                    if (!m.containsKey(nr)) {
                        m.put(nr, step + 1);
                        d.add(nr);
                    }
                }
            }
        }
        return -1;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1624886541130.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第377期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-377-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-377-qi/">
        </link>
        <updated>2021-06-27T13:21:31.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>运动一周瘦不下来不要紧，因为运动十周也瘦不下来的。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>荷风送香气，竹露滴清响。<br>
——孟浩然《夏日南亭怀辛大》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>其实你不是真的很有趣，你只是太孤独。这个你，就是我。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1624886887334.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>还还还是广搜：</p>
<pre><code class="language-java">class Solution {
    public int snakesAndLadders(int[][] board) {
        int n = board.length;
        boolean[] vis = new boolean[n * n + 1];
        Queue&lt;int[]&gt; queue = new LinkedList&lt;int[]&gt;();
        queue.offer(new int[]{1, 0});
        while (!queue.isEmpty()) {
            int[] p = queue.poll();
            for (int i = 1; i &lt;= 6; ++i) {
                int nxt = p[0] + i;
                if (nxt &gt; n * n) { // 超出边界
                    break;
                }
                int[] rc = id2rc(nxt, n); // 得到下一步的行列
                if (board[rc[0]][rc[1]] &gt; 0) { // 存在蛇或梯子
                    nxt = board[rc[0]][rc[1]];
                }
                if (nxt == n * n) { // 到达终点
                    return p[1] + 1;
                }
                if (!vis[nxt]) {
                    vis[nxt] = true;
                    queue.offer(new int[]{nxt, p[1] + 1}); // 扩展新状态
                }
            }
        }
        return -1;
    }

    public int[] id2rc(int id, int n) {
        int r = (id - 1) / n, c = (id - 1) % n;
        if (r % 2 == 1) {
            c = n - 1 - c;
        }
        return new int[]{n - 1 - r, c};
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1624886872960.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MySQL 主从复制加密以及binlog的加密实现]]></title>
        <id>https://2293736867.github.io/post/mysql-zhu-cong-fu-zhi-jia-mi-yi-ji-binlog-de-jia-mi-shi-xian/</id>
        <link href="https://2293736867.github.io/post/mysql-zhu-cong-fu-zhi-jia-mi-yi-ji-binlog-de-jia-mi-shi-xian/">
        </link>
        <updated>2021-06-26T08:09:32.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#1-%E6%A6%82%E8%BF%B0">1 概述</a></li>
<li><a href="#2-%E7%8E%AF%E5%A2%83">2 环境</a></li>
<li><a href="#3-%E5%87%86%E5%A4%87%E5%AE%B9%E5%99%A8">3 准备容器</a></li>
<li><a href="#4-ssl%E8%BF%9E%E6%8E%A5%E5%87%86%E5%A4%87">4 <code>SSL</code>连接准备</a>
<ul>
<li><a href="#41-%E7%A1%AE%E4%BF%9Dssl%E5%BC%80%E5%90%AF">4.1 确保<code>SSL</code>开启</a></li>
<li><a href="#42-%E7%94%9F%E6%88%90ca%E5%92%8C%E7%A7%81%E9%92%A5">4.2 生成<code>CA</code>和私钥</a></li>
<li><a href="#43-%E4%BF%AE%E6%94%B9%E6%9D%83%E9%99%90">4.3 修改权限</a></li>
<li><a href="#44-%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">4.4 修改配置文件</a></li>
</ul>
</li>
<li><a href="#5-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E7%9A%84%E5%85%B6%E4%BB%96%E9%85%8D%E7%BD%AE">5 主从复制的其他配置</a></li>
<li><a href="#6-%E5%88%9B%E5%BB%BA%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E7%9A%84%E7%94%A8%E6%88%B7">6 创建主从复制的用户</a></li>
<li><a href="#7-%E4%BF%AE%E6%94%B9%E4%BB%8E%E5%BA%93%E9%85%8D%E7%BD%AE%E6%8C%87%E5%90%91%E4%B8%BB%E5%BA%93">7 修改从库配置指向主库</a></li>
<li><a href="#8-%E5%90%AF%E5%8A%A8%E4%BB%8E%E5%BA%93%E5%B9%B6%E6%B5%8B%E8%AF%95">8 启动从库并测试</a></li>
<li><a href="#9-binlog%E7%9A%84%E5%8A%A0%E5%AF%86">9 <code>binlog</code>的加密</a>
<ul>
<li><a href="#91-%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6">9.1 安装插件</a></li>
<li><a href="#92-%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE">9.2 修改配置</a></li>
</ul>
</li>
<li><a href="#10-%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5">10 参考链接</a></li>
</ul>
</p>
<h1 id="1-概述">1 概述</h1>
<p>本文主要讲述了如何在主从复制的过程中使用<code>SSL</code>进行加密，还有<code>binlog</code>加密（<code>MySQL 8.0.14+</code>）的实现。</p>
<h1 id="2-环境">2 环境</h1>
<ul>
<li><code>MySQL 8.0.25</code></li>
<li><code>Docker</code></li>
<li>一主一从</li>
</ul>
<h1 id="3-准备容器">3 准备容器</h1>
<p>先拉取镜像并启动，主库<code>3306</code>，从库<code>3307</code>，还需要加上<code>--ssl</code>参数，以开启<code>SSL</code>加密连接的功能：</p>
<pre><code class="language-bash">docker pull mysql
docker run -itd -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 --name mysql-master mysql --ssl
docker run -itd -p 3307:3306 -p 33061:33060 -e MYSQL_ROOT_PASSWORD=123456 --name mysql-slave mysql --ssl
</code></pre>
<p>启动容器之后进入容器并安装<code>vim</code>和<code>net-tools</code>：</p>
<pre><code class="language-bash">apt install vim net-tools
</code></pre>
<p>同时进入<code>MySQL</code>准备好数据源：</p>
<pre><code class="language-sql">create database test;
use test;
create table user(
	id int primary key auto_increment,
	name varchar(30) not null,
	age int not null
);
</code></pre>
<h1 id="4-ssl连接准备">4 <code>SSL</code>连接准备</h1>
<h2 id="41-确保ssl开启">4.1 确保<code>SSL</code>开启</h2>
<p>首先可以进入<code>MySQL</code>确保<code>SSL</code>功能开启：</p>
<pre><code class="language-sql">show variables like '%ssl%';
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20210626135041437.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="42-生成ca和私钥">4.2 生成<code>CA</code>和私钥</h2>
<p>默认情况下，在<code>/var/lib/mysql</code>下已经有生成的证书和私钥文件，如果不想用默认的，可以重新生成：</p>
<pre><code class="language-bash">sudo mkdir /mysql
sudo chown mysql:mysql /mysql
mysql_ssl_rsa_setup --datadir=/mysql
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/2021062613540272.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>生成的文件包括：</p>
<ul>
<li><code>ca-key.pem</code>：<code>CA</code>私钥</li>
<li><code>ca.pem</code>：自签名的<code>CA</code>证书</li>
<li><code>client-key.pem</code>：客户端连接时使用的私钥</li>
<li><code>client-cert.pem</code>：客户端连接时使用的证书</li>
<li><code>server-key.pem</code>：服务器端私钥</li>
<li><code>server-cert.pem</code>：服务器端证书</li>
<li><code>public_key.pem</code>/<code>private_key.pem</code>：密钥对的公钥和私钥</li>
</ul>
<p>实际使用只需要用到<code>ca.pem</code>、服务端私钥证书、客户端私钥证书这五个文件。由于主从复制的时候，主库作为服务端，从库作为客户端，因此<code>ca.pem</code>/<code>server-key.pem</code>/<code>server-client.pem</code>只需要在主库中配置，而<code>ca.pem</code>/<code>client-key.pem</code>/<code>client-cert.pem</code>需要通过<code>scp</code>传到从库中。</p>
<h2 id="43-修改权限">4.3 修改权限</h2>
<p>权限错误会导致<code>MySQL</code>无法正常使用<code>SSL</code>的功能：</p>
<pre><code class="language-bash">sudo chown mysql:mysql /mysql/*.pem
sudo chmod 400 /mysql/*.pem
sudo chmod 444 /mysql/ca.pem
</code></pre>
<h2 id="44-修改配置文件">4.4 修改配置文件</h2>
<p>修改主库的配置文件，如下所示：</p>
<pre><code class="language-bash">[mysqld]
ssl_ca=/mysql/ca.pem
ssl_cert=/mysql/server-cert.pem
ssl_key=/mysql/server-key.pem
</code></pre>
<p>而从库配置文件 修改如下：</p>
<pre><code class="language-bash">[client]
ssl-ca=/mysql/ca.pem
ssl-cert=/mysql/client-cert.pem
ssl-key=/mysql/client-key.pem
</code></pre>
<p>此时从库是没办法连接自己的，只能连接主库，如果需要连接自己，需要将主库的<code>server-key.pem</code>/<code>server-cert.pem</code>拷贝到从库中，并配置从库的<code>[mysqld]</code>：</p>
<pre><code class="language-bash">[mysqld]
ssl_ca=/mysql/ca.pem
ssl_cert=/mysql/server-cert.pem
ssl_key=/mysql/server-key.pem
</code></pre>
<h1 id="5-主从复制的其他配置">5 主从复制的其他配置</h1>
<p>下面是一些主从复制的最常规最简单的配置，主库仅配置了<code>id</code>和需要复制的库：</p>
<pre><code class="language-bash">[mysqld]
server-id=1                
binlog-do-db=test         
</code></pre>
<p>从库的配置如下：</p>
<pre><code class="language-bash">[mysqld]
server-id=2            
replicate-do-db=test   
</code></pre>
<p>修改完后重启主库和从库。</p>
<h1 id="6-创建主从复制的用户">6 创建主从复制的用户</h1>
<p>在主库中创建主从复制的用户（具体<code>ip</code>请使用<code>ifconfig</code>查看）：</p>
<pre><code class="language-sql">create user 'repl'@'172.17.0.3' identified with mysql_native_password by '123456' require ssl;
grant replication slave on *.* to 'repl'@'172.17.0.3';
</code></pre>
<h1 id="7-修改从库配置指向主库">7 修改从库配置指向主库</h1>
<p>首先查看主库的状态：</p>
<pre><code class="language-sql">show master status;
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20210626151712328.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>把<code>File</code>和<code>Position</code>记录下来，并在从库中使用<code>change master to</code>/<code>change replication source to</code>（<code>8.0.23+</code>）设置主库信息：</p>
<pre><code class="language-bash">change master to
master_host = '172.17.0.2',
master_user = 'repl',
master_password = '123456',
master_log_file = 'binlog.000005',
master_log_pos = 156,
master_ssl = 1;
</code></pre>
<p>或</p>
<pre><code class="language-bash">change replication source to
source_host = '172.17.0.2',
source_user = 'repl',
source_password = '123456',
source_log_file = 'binlog.000005',
source_log_pos = 156;  
source_ssl = 1;
</code></pre>
<h1 id="8-启动从库并测试">8 启动从库并测试</h1>
<p>可以使用<code>start slave</code>/<code>start replica</code>（<code>8.0.22+</code>）启动从库开启复制功能：</p>
<pre><code class="language-bash">start slave
# 或
start replica
</code></pre>
<p>启动完成后使用</p>
<pre><code class="language-sql">show slave stauts\G
</code></pre>
<p>查看从库状态：</p>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20210626151732145.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>需要显示两个<code>Yes</code>才算成功，如果<code>Slave_IO_Running</code>一直显示<code>Connecting</code>，可能原因是：</p>
<ul>
<li>在从库中配置的主库地址、端口、用户名、密码等错误</li>
<li><code>SSL</code>配置错误，比如使用了错误的<code>client-key.pem</code></li>
<li>防火墙问题</li>
</ul>
<p>请查看日志自行检查，日志位置可通过</p>
<pre><code class="language-sql">show variables like 'log_error'
</code></pre>
<p>查看。</p>
<p>没有问题后，尝试在主库中插入数据：</p>
<pre><code class="language-sql">use test;
insert into user values('111',1);
</code></pre>
<p>在从库中就可以查询到了：</p>
<pre><code class="language-sql">use test;
select * from user;
</code></pre>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/20210626151908748.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="9-binlog的加密">9 <code>binlog</code>的加密</h1>
<p>从<code>8.0.14</code>开始，<code>MySQL</code>提供了对<code>binlog</code>的加密功能，默认情况下，<code>binlog</code>是没有加密的，加密需要使用<code>keyring</code>插件或者组件：</p>
<figure data-type="image" tabindex="6"><img src="https://img-blog.csdnimg.cn/20210626152037772.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>实现步骤如下：</p>
<ul>
<li>安装<code>keyring_file</code>插件</li>
<li>修改配置</li>
<li>测试</li>
</ul>
<h2 id="91-安装插件">9.1 安装插件</h2>
<p><code>MySQL</code>提供了以下插件的安装：</p>
<figure data-type="image" tabindex="7"><img src="https://img-blog.csdnimg.cn/20210626152219275.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>由于使用的是社区版，社区版只支持<code>keyring_file</code>插件，以此为例。</p>
<p>主库和从库修改配置文件如下：</p>
<pre><code class="language-bash">[mysqld]
early-plugin-load=keyring_file.so
keyring_file_data=/mysql/keyring
</code></pre>
<p>重启后，进入<code>MySQL</code>查看：</p>
<pre><code class="language-sql">select plugin_name,plugin_status from information_schema.plugins where plugin_name like 'keyring%';
</code></pre>
<figure data-type="image" tabindex="8"><img src="https://img-blog.csdnimg.cn/20210626152937375.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>需要处于<code>ACTIVE</code>状态，这样就是成功了。</p>
<h2 id="92-修改配置">9.2 修改配置</h2>
<p><code>binlog</code>的加密通过一个系统变量<code>binlog_encryption</code>控制，需要手动开启：</p>
<pre><code class="language-sql">set global binlog_encryption=ON;
set persist binlog_encryption=ON;
</code></pre>
<p>开启后查看日志：</p>
<pre><code class="language-sql">show binary logs;
</code></pre>
<p>可以看到是加密了的<code>binlog</code>：</p>
<figure data-type="image" tabindex="9"><img src="https://img-blog.csdnimg.cn/20210626154936376.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>而之前没有加密的<code>binlog</code>可以手动迁移数据后进行删除。</p>
<p>加密完<code>binlog</code>后并不需要修改主从复制的配置，主从复制依然生效，如下图所示：</p>
<figure data-type="image" tabindex="10"><img src="https://img-blog.csdnimg.cn/2021062615543555.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>主库插入了一个用户从库依然能<code>select</code>到。</p>
<h1 id="10-参考链接">10 参考链接</h1>
<ul>
<li><a href="https://dev.mysql.com/doc/refman/8.0/en/replication-binlog-encryption.html">MySQL-17.3.2 Encrypting Binary Log Files and Relay Log Files</a></li>
<li><a href="https://dev.mysql.com/doc/refman/8.0/en/using-encrypted-connections.html#using-encrypted-connections-client-side-configuration">MySQL-6.3.1 Configuring MySQL to Use Encrypted Connections</a></li>
<li><a href="https://dev.mysql.com/doc/refman/8.0/en/mysql-ssl-rsa-setup.html">MySQL-4.4.3 mysql_ssl_rsa_setup — Create SSL/RSA Files</a></li>
<li><a href="https://dev.mysql.com/doc/refman/8.0/en/keyring-file-plugin.html">MySQL-6.4.4.6 Using the keyring_file File-Based Keyring Plugin</a></li>
<li><a href="https://dev.mysql.com/doc/refman/8.0/en/keyring-plugin-installation.html">MySQL-6.4.4.3 Keyring Plugin Installation</a></li>
<li><a href="https://dev.mysql.com/doc/refman/8.0/en/keyring-component-installation.html">MySQL-6.4.4.2 Keyring Component Installation</a></li>
<li><a href="https://dev.mysql.com/doc/refman/8.0/en/obtaining-plugin-information.html">MySQL-5.6.2 Obtaining Server Plugin Information</a></li>
<li><a href="https://mysqlhighavailability.com/binary-log-encryption-at-rest/">MySQL High Availablity-Binary log encryption at rest</a></li>
<li><a href="https://stackoverflow.com/questions/59036777/mysql-ssl-is-required-but-the-server-doesnt-support-it">StackOverflow-MySQL - SSL is required but the server doesn't support it</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第376期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-376-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-376-qi/">
        </link>
        <updated>2021-06-25T17:58:49.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>你老是这么抠门，门都被你，抠坏了好几扇。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>客从洞庭来，婉娈潇湘深。<br>
——顾况《游子吟》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>原谅他是上帝的事情，我的事情就是送他去见上帝。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1624643946338.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>还是广搜题：</p>
<pre><code class="language-java">import java.util.*;

public class Solution {
    public int slidingPuzzle(int[][] board) {
        final int[][] target = {
                {1,2,3},
                {4,5,0}
        };
        if(Arrays.deepEquals(target,board)){
            return 0;
        }
        Set&lt;Node&gt; set = new HashSet&lt;&gt;();
        Queue&lt;int[][]&gt; queue = new LinkedList&lt;&gt;();
        queue.add(board);
        int res = 0;
        set.add(new Node(board));
        while (!queue.isEmpty()) {
            ++res;
            int size = queue.size();
            for (int i = 0; i &lt; size; ++i) {
                int[][] top = queue.remove();
                for (int[][] s : get(top)) {
                    if (!set.contains(new Node(s))) {
                        if (Arrays.deepEquals(s, target)) {
                            return res;
                        }
                        queue.offer(s);
                        set.add(new Node(s));
                    }
                }
            }
        }

        return -1;
    }

    private static class Node{
        int [][] board;
        public Node(int [][]board){
            this.board = board;
        }

        @Override
        public int hashCode() {
            return Arrays.deepHashCode(board);
        }

        @Override
        public boolean equals(Object obj) {
            if(!(obj instanceof Node)){
                return false;
            }
            Node node = (Node) obj;
            return Arrays.deepEquals(board,node.board);
        }

        @Override
        public String toString() {
            return Arrays.deepToString(board);
        }
    }

    private int[][][] get(int[][] board) {
        int zi = -1;
        int zj = -1;
        for (int i = 0; i &lt; board.length; i++) {
            for (int j = 0; j &lt; board[i].length; j++) {
                if (board[i][j] == 0) {
                    zi = i;
                    zj = j;
                    break;
                }
            }
            if (zi != -1) {
                break;
            }
        }

        int[][] state1 = new int[2][3];
        int[][] state2 = new int[2][3];
        int[][] state3 = new int[2][3];
        int num = 2;
        if (zi == 0 &amp;&amp; zj == 0) {
            state1[0] = new int[]{board[0][1], 0, board[0][2]};
            state1[1] = new int[]{board[1][0], board[1][1], board[1][2]};
            state2[0] = new int[]{board[1][0], board[0][1], board[0][2]};
            state2[1] = new int[]{0, board[1][1], board[1][2]};
        } else if (zi == 0 &amp;&amp; zj == 1) {
            state1[0] = new int[]{0, board[0][0], board[0][2]};
            state1[1] = new int[]{board[1][0], board[1][1], board[1][2]};
            state2[0] = new int[]{board[0][0], board[0][2], 0};
            state2[1] = new int[]{board[1][0], board[1][1], board[1][2]};
            state3[0] = new int[]{board[0][0], board[1][1], board[0][2]};
            state3[1] = new int[]{board[1][0], 0, board[1][2]};
            num = 3;
        } else if (zi == 0 &amp;&amp; zj == 2) {
            state1[0] = new int[]{board[0][0], 0, board[0][1]};
            state1[1] = new int[]{board[1][0], board[1][1], board[1][2]};
            state2[0] = new int[]{board[0][0], board[0][1], board[1][2]};
            state2[1] = new int[]{board[1][0], board[1][1], 0};
        } else if (zi == 1 &amp;&amp; zj == 0) {
            state1[0] = new int[]{0, board[0][1], board[0][2]};
            state1[1] = new int[]{board[0][0], board[1][1], board[1][2]};
            state2[0] = new int[]{board[0][0], board[0][1], board[0][2]};
            state2[1] = new int[]{board[1][1], 0, board[1][2]};
        } else if (zi == 1 &amp;&amp; zj == 1) {
            state1[0] = new int[]{board[0][0], 0, board[0][2]};
            state1[1] = new int[]{board[1][0], board[0][1], board[1][2]};
            state2[0] = new int[]{board[0][0], board[0][1], board[0][2]};
            state2[1] = new int[]{board[1][0], board[1][2], 0};
            state3[0] = new int[]{board[0][0], board[0][1], board[0][2]};
            state3[1] = new int[]{0, board[1][0], board[1][2]};
            num = 3;
        } else {
            state1[0] = new int[]{board[0][0], board[0][1], 0};
            state1[1] = new int[]{board[1][0], board[1][1], board[0][2]};
            state2[0] = new int[]{board[0][0], board[0][1], board[0][2]};
            state2[1] = new int[]{board[1][0], 0, board[1][1]};
        }
        int[][][] res = new int[num][2][3];
        res[0] = state1;
        res[1] = state2;
        if(num == 3){
            res[2] = state3;
        }
        return res;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1624643984398.png" alt="" loading="lazy"></figure>
<p>首先判断传进来的是否与目标相等，如果相等直接返回，否则添加到队列还有集合里面。</p>
<p>注意集合需要使用一个包装类，重写<code>equals</code>以及<code>hashCode</code>，这样才能正确判断数组。</p>
<p>进行循环后，首先将结果加1，并计算队列个数<code>size</code>，取<code>size</code>个队首，获取它们可能到达的位置，然后判断该位置是否已经出现过，如果出现过，直接忽略，如果没有出现过，首先判断数组是否与目标相等，若相等直接返回结果，若不等，添加到队列以及集合中。</p>
<p>然后翻了一下1ms提交的，好家伙，这肯定<code>O(1)</code>啊：</p>
<figure data-type="image" tabindex="3"><img src="https://2293736867.github.io/post-images/1624644163305.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
</feed>