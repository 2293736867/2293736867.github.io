<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://2293736867.github.io</id>
    <title>氷泠&apos;s blog</title>
    <updated>2020-09-27T10:47:45.563Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://2293736867.github.io"/>
    <link rel="self" href="https://2293736867.github.io/atom.xml"/>
    <subtitle>我配不上你，
纵然很努力。</subtitle>
    <logo>https://2293736867.github.io/images/avatar.png</logo>
    <icon>https://2293736867.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 氷泠&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[每日分享 第106期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-106-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-106-qi/">
        </link>
        <updated>2020-09-30T10:37:37.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>要笑着走下去吧，反正来到这个世界上，谁也没打算活着回去。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>三湘五管同民了，万岁千秋与帝龄。<br>
——张孝祥《鹧鸪天·上元启醮》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>昭昭若日月之明，离离如星辰之行。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第105期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-105-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-105-qi/">
        </link>
        <updated>2020-09-29T10:36:58.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>只要努力的时间足够长，搞不好，你还可以失败的更彻底。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>不见年年辽海上，文章何处苦秋风？<br>
——李贺《南园十三首》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>瞬光斩黯黮，昭明破晦夜。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第104期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-104-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-104-qi/">
        </link>
        <updated>2020-09-28T10:36:33.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>没对象怕什么，我有对象，我下棋也没赢过啊。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>秋光照不极，鸟色去无边。<br>
——张籍《水》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>即便我弱了，也并不代表你强了。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第103期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-103-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-103-qi/">
        </link>
        <updated>2020-09-27T10:35:58.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>如果再见不用红着脸，是否还能借点钱。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>树树皆秋色，山山唯落晖。<br>
——王绩《野望》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>怎么样，士道君，四系乃很酷吧，四系乃很酷吧。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Spring学习笔记（五）：JDBCTemplate+事务管理]]></title>
        <id>https://2293736867.github.io/post/spring-xue-xi-bi-ji-wu-jdbctemplateshi-wu-guan-li/</id>
        <link href="https://2293736867.github.io/post/spring-xue-xi-bi-ji-wu-jdbctemplateshi-wu-guan-li/">
        </link>
        <updated>2020-09-27T10:28:21.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-概述">1 概述</h1>
<p><code>Spring</code>为开发者提供了<code>JDBCTemplate</code>，可以简化很多数据库操作相关的代码，本文主要介绍<code>JDBCTemplate</code>的使用以及事务管理功能。</p>
<h1 id="2-jdbc-template">2 <code>JDBC Template</code></h1>
<h2 id="21-配置">2.1 配置</h2>
<p>配置的话主要配置以下几项：</p>
<ul>
<li>数据源：<code>org.springframework.jdbc.datasource.DriverManager.DataSource</code></li>
<li>数据库驱动：<code>com.cj.mysql.jdbc.Driver</code>，这里采用的是<code>MySQL 8</code>，注意<code>MySQL 5.7</code>以下的驱动名字不同，另外若是其他数据库请对应修改</li>
<li>数据库<code>URL</code>：<code>jdbc:mysql://localhost:3306/test</code>，<code>MySQL</code>默认的<code>3306</code>端口，数据库<code>test</code></li>
<li>数据库用户名</li>
<li>数据库密码</li>
<li><code>JDBC</code>模板：<code>org.springframework.jdbc.core.jdbcTemplate</code></li>
</ul>
<p>参考配置如下：</p>
<pre><code class="language-xml">&lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;
    &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;/&gt;
    &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/test&quot;/&gt;
    &lt;property name=&quot;username&quot; value=&quot;test&quot;/&gt; 
    &lt;property name=&quot;password&quot; value=&quot;test&quot;/&gt;
&lt;/bean&gt;
&lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;
&lt;/bean&gt;
&lt;context:component-scan base-package=&quot;pers.dao&quot;/&gt;
</code></pre>
<h2 id="22-常用方法">2.2 常用方法</h2>
<ul>
<li><code>int update(String sql,Object args[])</code>：增/删/改操作，使用<code>args</code>设置其中的参数，返回更新的行数</li>
<li><code>List&lt;T&gt; query(String sql,RowMapper&lt;T&gt; rowMapper,Object []args)</code>：查询操作，<code>rowMapper</code>将结果集映射到用户自定义的类中</li>
</ul>
<h2 id="23-示例">2.3 示例</h2>
<h3 id="231-依赖">2.3.1 依赖</h3>
<p>首先导入依赖：</p>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework&lt;/groupId&gt;
    &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;
    &lt;version&gt;5.2.9.RELEASE&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
    &lt;groupId&gt;mysql&lt;/groupId&gt;
    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
    &lt;version&gt;8.0.21&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<p><code>MySQL</code>的版本请根据个人需要更改，或使用其他数据库的驱动。</p>
<h3 id="232-配置文件">2.3.2 配置文件</h3>
<p>完整配置文件如下：</p>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd 
       http://www.springframework.org/schema/context 
       https://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;

    &lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;
        &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;/&gt;
        &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/test&quot;/&gt;
        &lt;property name=&quot;username&quot; value=&quot;test&quot;/&gt;
        &lt;property name=&quot;password&quot; value=&quot;test&quot;/&gt;
    &lt;/bean&gt;
    &lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;
        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;
    &lt;/bean&gt;
    &lt;context:component-scan base-package=&quot;pers.dao&quot;/&gt;
&lt;/beans&gt;
</code></pre>
<h3 id="233-实体类">2.3.3 实体类</h3>
<pre><code class="language-java">public class MyUser {
    private Integer id;
    private String uname;
    private String usex;
}
</code></pre>
<h3 id="234-数据访问层">2.3.4 数据访问层</h3>
<p>添加<code>@Repository</code>以及<code>@RequiredArgsConstructor</code>：</p>
<pre><code class="language-java">@Repository
@RequiredArgsConstructor(onConstructor = @__(@Autowired))
public class TestDao {
    private final JdbcTemplate template;

    public int update(String sql,Object[] args)
    {
        return template.update(sql,args);
    }

    public List&lt;MyUser&gt; query(String sql, Object[] args)
    {
        RowMapper&lt;MyUser&gt; mapper = new BeanPropertyRowMapper&lt;&gt;(MyUser.class);
        return template.query(sql,mapper,args);
    }
}
</code></pre>
<p>因为直接使用<code>@Autowired</code>的话会提示不推荐：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200926223252663.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>所以利用了<code>Lombok</code>的注解<code>@RequiredArgsConstructor</code>，效果相当如下构造方法，只不过是简化了一点：</p>
<pre><code class="language-java">@Autowired
public TestDao(JdbcTemplate template)
{
    this.template = template;
}
</code></pre>
<h3 id="235-测试">2.3.5 测试</h3>
<p>测试之前先建表：</p>
<pre><code class="language-sql">create table MyUser(
    id INT AUTO_INCREMENT PRIMARY KEY ,
    uname varchar(20),
    usex varchar(20)
)
</code></pre>
<p>测试类：</p>
<pre><code class="language-java">public class Main {
    public static void main(String[] args) {
        ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);
        TestDao dao = (TestDao)context.getBean(&quot;testDao&quot;);
        String insertSql = &quot;insert into MyUser(uname,usex) values(?,?)&quot;;
        String[] param1 = {&quot;chenhengfa1&quot;,&quot;男&quot;};
        String[] param2 = {&quot;chenhengfa2&quot;,&quot;男&quot;};
        String[] param3 = {&quot;chenhengfa3&quot;,&quot;男&quot;};
        String[] param4 = {&quot;chenhengfa4&quot;,&quot;男&quot;};

        dao.update(insertSql,param1);
        dao.update(insertSql,param2);
        dao.update(insertSql,param3);
        dao.update(insertSql,param4);

        String selectSql = &quot;select * from MyUser&quot;;
        List&lt;MyUser&gt; list = dao.query(selectSql,null);
        for(MyUser mu:list)
        {
            System.out.println(mu);
        }
    }
}
</code></pre>
<p>输出：</p>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200926225137360.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>如果出现异常或插入不成功等其他情况，请检查<code>SQL</code>语句是否编写正确，包括表名以及字段名。</p>
<h1 id="3-事务管理">3 事务管理</h1>
<p><code>Spring</code>中的事务管理有两种方法：</p>
<ul>
<li>编程式事务管理：代码中显式调用<code>beginTransaction</code>、<code>commit</code>、<code>rollback</code>等就是编程式事务管理</li>
<li>声明式事务管理：通过<code>AOP</code>实现，不需要通过编程方式管理事务，因此不需要再业务逻辑代码中掺杂事务处理的代码，开发更加简单，便于后期维护</li>
</ul>
<p>下面先来看一下编程式事务管理的实现。</p>
<h2 id="31-编程式事务管理">3.1 编程式事务管理</h2>
<p>编程式事务管理的配置又有两种方法：</p>
<ul>
<li>基于底层<code>API</code></li>
<li>基于<code>TransactionTemplate</code></li>
</ul>
<p>需要的依赖如下：</p>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework&lt;/groupId&gt;
    &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;
    &lt;version&gt;5.2.9.RELEASE&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
    &lt;groupId&gt;org.springframework&lt;/groupId&gt;
    &lt;artifactId&gt;spring-expression&lt;/artifactId&gt;
    &lt;version&gt;5.2.9.RELEASE&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
    &lt;groupId&gt;org.springframework&lt;/groupId&gt;
    &lt;artifactId&gt;spring-aop&lt;/artifactId&gt;
    &lt;version&gt;5.2.9.RELEASE&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
    &lt;groupId&gt;org.aspectj&lt;/groupId&gt;
    &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;
    &lt;version&gt;1.9.6&lt;/version&gt;
    &lt;scope&gt;runtime&lt;/scope&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
    &lt;groupId&gt;org.springframework&lt;/groupId&gt;
    &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt;
    &lt;version&gt;5.2.9.RELEASE&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<h3 id="311-底层api实现">3.1.1 底层<code>API</code>实现</h3>
<p>根据<code>PlatformTransactionManager</code>、<code>TransactionDefinition</code>、<code>TransactionStatus</code>几个核心接口，通过编程方式进行事务管理，首先配置事务管理器：</p>
<pre><code class="language-xml">&lt;bean id=&quot;txManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;
&lt;/bean&gt;
</code></pre>
<p>接着修改数据库访问类：</p>
<pre><code class="language-java">@Repository
@RequiredArgsConstructor(onConstructor = @__(@Autowired))
public class TestDao {
    private final JdbcTemplate template;
    private final DataSourceTransactionManager manager;

    public int update(String sql,Object[] args)
    {
        return template.update(sql,args);
    }

    public List&lt;MyUser&gt; query(String sql,Object[] args)
    {
        RowMapper&lt;MyUser&gt; mapper = new BeanPropertyRowMapper&lt;&gt;(MyUser.class);
        return template.query(sql,mapper,args);
    }

    public void testTransaction()
    {
        TransactionDefinition definition = new DefaultTransactionDefinition();
        TransactionStatus status = manager.getTransaction(definition);
        String message = &quot;执行成功，没有事务回滚&quot;;

        try
        {
            String sql1 = &quot;delete from MyUser&quot;;
            String sql2 = &quot;insert into MyUser(id,uname,usex) values(?,?,?)&quot;;
            Object [] param2 = {1,&quot;张三&quot;,&quot;男&quot;};
            template.update(sql1);
            template.update(sql2,param2);
            template.update(sql2,param2);
            manager.commit(status);
        }
        catch (Exception e)
        {
            e.printStackTrace();
            manager.rollback(status);
            message = &quot;主键重复，事务回滚&quot;;
        }
        System.out.println(message);
    }
}
</code></pre>
<h4 id="3111-事务定义">3.1.1.1 事务定义</h4>
<p><code>TransactionDefinition</code>是事务定义，是一个接口：</p>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20200927075442740.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>主要定义了：</p>
<ul>
<li>事务隔离级别</li>
<li>事务传播行为</li>
<li>事务超时时间</li>
<li>是否为只读事务</li>
</ul>
<p>而<code>DefaultTransactionDefinition</code>就是上面属性的一些默认配置，比如：</p>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20200927075731236.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>也就是定义了：</p>
<ul>
<li>传播行为为<code>0</code>：也就是常量<code>PROPAGATION_REQUIREDE</code>，表示如果当前存在一个事务，则加入当前事务，如果不存在任何事务，就创建一个新事务</li>
<li>隔离级别为<code>-1</code>：这个也是<code>TransactionDefinition</code>的默认参数，表示使用数据库的默认隔离级别，通常情况下为<code>Read Committed</code></li>
<li>超时为<code>-1</code>：默认设置不超时，如需要设置超时请调用<code>setTimeout</code>方法，比如如果设置为了<code>60</code>，那么相当于如果操作时间超过了<code>60s</code>，而且后面还涉及到<code>CRUD</code>操作，那么会抛出超时异常并回滚，如果超时操作的后面没有涉及到<code>CRUD</code>操作，那么不会回滚</li>
<li>只读事务为<code>false</code>：默认为<code>false</code>，但是该变量不是表明“不能”进行修改等操作，而是一种暗示，如果不包含修改操作，那么<code>JDBC</code>驱动和数据库就有可能针对该事务进行一些特定的优化</li>
</ul>
<h4 id="3112-具体执行流程">3.1.1.2 具体执行流程</h4>
<p>具体执行流程如下：</p>
<ul>
<li>定义事务：实例类为<code>DefaultTransactionDefinition</code></li>
<li>开启事务：通过<code>getTransaction(TransactionDefinition)</code>开启</li>
<li>执行业务方法</li>
<li>根据业务方法是否出现异常手动调用<code>DataSourceTransaction</code>的<code>commit(TransactionStatus)</code>进行提交</li>
<li>出现异常调用<code>rollback(TransactionStatus)</code>进行回滚</li>
</ul>
<p>测试如下：</p>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/20200926230605773.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h3 id="312-基于transactiontemplate">3.1.2 基于<code>TransactionTemplate</code></h3>
<p>步骤：</p>
<ul>
<li>通过调用<code>TransactionTemplate</code>的<code>execute</code>实现</li>
<li><code>execute</code>接受一个<code>TransactionCallback</code>接口参数</li>
<li><code>TransactionCallback</code>定义了一个<code>doInTransaction</code>方法</li>
<li>通常以匿名内部类的方式实现<code>TransactionCallback</code>接口，在其中的<code>doInTransaction</code>编写业务逻辑代码</li>
<li><code>doInTransaction</code>有一个<code>TransactionStatus</code>的参数，可以调用<code>setRollbackOnly</code>进行回滚</li>
</ul>
<p>默认的回滚规则如下：</p>
<ul>
<li>如果抛出未检查异常或者手动调用<code>setRollbackOnly</code>，则回滚</li>
<li>如果执行完成或抛出检查异常，则提交事务</li>
</ul>
<p>示例如下，首先编写配置文件对<code>Bean</code>进行注入：</p>
<pre><code class="language-xml">&lt;!--事务管理器--&gt;
&lt;bean id=&quot;txManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;
        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;
&lt;/bean&gt;
&lt;!--事务模板--&gt;
&lt;bean id=&quot;transactionTemplate&quot; class=&quot;org.springframework.transaction.support.TransactionTemplate&quot;&gt;
    &lt;property name=&quot;transactionManager&quot; ref=&quot;txManager&quot;/&gt;
&lt;/bean&gt;
</code></pre>
<p>其次修改数据访问类，添加一个测试方法：</p>
<pre><code class="language-java">public void testTransactionTemplate()
{
    System.out.println(transactionTemplate.execute((TransactionCallback&lt;Object&gt;) transactionStatus -&gt; {
        String deleteSql = &quot;delete from MyUser&quot;;
        String insertSql = &quot;insert into MyUser(id,uname,usex) values(?,?,?)&quot;;
        Object[] parm = {1, &quot;张三&quot;, &quot;男&quot;};
        try {
            template.update(deleteSql);
            template.update(insertSql, parm);
            template.update(insertSql, parm);
        } catch (Exception e) {
            message = &quot;主键重复，事务回滚&quot;;
            e.printStackTrace();
        }
        return message;
    }));
}
</code></pre>
<p>大部分代码与第一个例子类似就不解释了，结果也是因为主键重复出现异常，造成事务回滚：</p>
<figure data-type="image" tabindex="6"><img src="https://img-blog.csdnimg.cn/20200926231620192.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="32-声明式事务管理">3.2 声明式事务管理</h2>
<p><code>Spring</code>声明式事务管理通过<code>AOP</code>实现，本质是在方法前后进行拦截，在目标方法开始之前创建或加入一个事务，执行目标方法完成之后根据执行情况提交或回滚事务。相比起编程式事务管理，声明式最大的优点就是不需要通过编程的方式管理事务，业务逻辑代码无需混杂事务代码，但是唯一不足的地方就是最细粒度只能作用到方法上，而不能做到代码块级别。</p>
<p>实现方式有如下两种：</p>
<ul>
<li>基于<code>XML</code>实现</li>
<li>基于<code>@Transactional</code>实现</li>
</ul>
<h3 id="321-基于xml">3.2.1 基于<code>XML</code></h3>
<p><code>Spring</code>提供了<code>tx</code>命令空间来配置事务：</p>
<ul>
<li><code>&lt;tx:advice&gt;</code>：配置事务通知，一般需要指定<code>id</code>以及<code>transaction-manager</code></li>
<li><code>&lt;tx:attributes&gt;</code>：配置多个<code>&lt;tx:method&gt;</code>指定执行事务的细节</li>
</ul>
<h4 id="3211-配置文件">3.2.1.1 配置文件</h4>
<p>完整配置文件如下：</p>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
       xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;
       xmlns:cache=&quot;http://www.springframework.org/schema/cache&quot;
       xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/cache
       http://www.springframework.org/schema/cache/spring-cache.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd&quot;
&gt;

    &lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;
        &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;/&gt;
        &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/test&quot;/&gt;
        &lt;property name=&quot;username&quot; value=&quot;test&quot;/&gt;
        &lt;property name=&quot;password&quot; value=&quot;test&quot;/&gt;
    &lt;/bean&gt;
    &lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;
        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;
    &lt;/bean&gt;
    &lt;context:component-scan base-package=&quot;pers.dao&quot;/&gt;
    &lt;!--事务管理器--&gt;
    &lt;bean id=&quot;txManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;
        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;
    &lt;/bean&gt;

    &lt;bean id=&quot;transactionTemplate&quot; class=&quot;org.springframework.transaction.support.TransactionTemplate&quot;&gt;
        &lt;property name=&quot;transactionManager&quot; ref=&quot;txManager&quot;/&gt;
    &lt;/bean&gt;

	&lt;!--声明式事务--&gt;
    &lt;tx:advice id=&quot;myAdvice&quot; transaction-manager=&quot;txManager&quot;&gt;
        &lt;tx:attributes&gt;
        	&lt;!--任意方法--&gt;
            &lt;tx:method name=&quot;*&quot; /&gt;
        &lt;/tx:attributes&gt;
    &lt;/tx:advice&gt;
    &lt;!--aop配置，具体可以看笔者之前的文章--&gt;
    &lt;aop:config&gt;
    	&lt;!--定义切点，执行testXMLTranscation()时进行增强--&gt;
        &lt;aop:pointcut id=&quot;txPointCut&quot; expression=&quot;execution(* pers.dao.TestDao.testXMLTransaction())&quot;/&gt;
        &lt;!--切面--&gt;
        &lt;aop:advisor advice-ref=&quot;myAdvice&quot; pointcut-ref=&quot;txPointCut&quot;/&gt;
    &lt;/aop:config&gt;
&lt;/beans&gt;
</code></pre>
<h4 id="3212-测试">3.2.1.2 测试</h4>
<p>测试方法如下：</p>
<pre><code class="language-java">public void testXMLTransaction()
{
    String deleteSql = &quot;delete from MyUser&quot;;
    String saveSql = &quot;insert into MyUser(id,uname,usex) values(?,?,?)&quot;;
    Object [] parm = {1,&quot;张三&quot;,&quot;男&quot;};
    template.update(deleteSql);
    template.update(saveSql,parm);
    template.update(saveSql,parm);
}
</code></pre>
<p>运行结果：</p>
<figure data-type="image" tabindex="7"><img src="https://img-blog.csdnimg.cn/20200927071730346.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>可以看到提示主键重复了。</p>
<h3 id="322-基于transactional">3.2.2 基于<code>@Transactional</code></h3>
<p><code>@Transactional</code>一般作用于类上，使得该类所有<code>public</code>方法都具有该类型的事务属性。下面创建一个示例。</p>
<h4 id="3221-配置文件">3.2.2.1 配置文件</h4>
<p>将上一个例子中的<code>&lt;aop:config&gt;</code>以及<code>&lt;tx:advice&gt;</code>注释掉，同时添加：</p>
<pre><code class="language-xml">&lt;!--事务管理的注解驱动器--&gt;
&lt;tx:annotation-driven transaction-manager=&quot;txManager&quot;/&gt;
</code></pre>
<figure data-type="image" tabindex="8"><img src="https://img-blog.csdnimg.cn/20200927071953724.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h4 id="3222-测试">3.2.2.2 测试</h4>
<p>测试方法与上一个例子一致，结果也是如此：</p>
<figure data-type="image" tabindex="9"><img src="https://img-blog.csdnimg.cn/2020092707204691.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="4-参考源码">4 参考源码</h1>
<p><code>Java</code>版：</p>
<ul>
<li><a href="https://github.com/2293736867/CSBookNotes/tree/master/Spring/Chapter5/JavaSpringInit">Github</a></li>
<li><a href="https://gitee.com/u6b7b5fc3/CSBookNotes/tree/master/Spring/Chapter5/JavaSpringInit">码云</a></li>
<li><a href="https://codechina.csdn.net/qq_27525611/CSBookNotes/-/tree/master/Spring/Chapter5/JavaSpringInit">CODE.CHINA</a></li>
</ul>
<p><code>Kotlin</code>版：</p>
<ul>
<li><a href="https://github.com/2293736867/CSBookNotes/tree/master/Spring/Chapter5/KotlinSpringInit">Github</a></li>
<li><a href="https://gitee.com/u6b7b5fc3/CSBookNotes/tree/master/Spring/Chapter5/KotlinSpringInit">码云</a></li>
<li><a href="https://codechina.csdn.net/qq_27525611/CSBookNotes/-/tree/master/Spring/Chapter5/KotlinSpringInit">CODE.CHINA</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第102期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-102-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-102-qi/">
        </link>
        <updated>2020-09-26T10:35:15.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>风水轮流转确实不假，但你在轴心上，这就很尴尬了。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>居高声自远，非是籍秋风。<br>
——虞世南《蝉》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>光，火交错，诞生了夕阳。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[为Github的README.md生成目录的小工具]]></title>
        <id>https://2293736867.github.io/post/wei-github-de-readmemd-sheng-cheng-mu-lu-de-xiao-gong-ju/</id>
        <link href="https://2293736867.github.io/post/wei-github-de-readmemd-sheng-cheng-mu-lu-de-xiao-gong-ju/">
        </link>
        <updated>2020-09-26T06:03:35.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-概述">1 概述</h1>
<p>因为<code>Github</code>的<code>README.md</code>文件<code>[TOC]</code>不生效，因此封装了一个别人已<a href="https://github.com/houbb/markdown-toc">封装好的<code>JAR</code>包</a>供大家使用。</p>
<h1 id="2-使用方法">2 使用方法</h1>
<p>用<code>Java</code>做的，只需要<code>JDK11</code>以上的环境：</p>
<pre><code class="language-bash">java -jar toc.jar 1.md  # 为1.md文件生成目录
java -jar toc.jar 1     # 为文件夹1内的.md生成目录
</code></pre>
<h1 id="3-jar包下载">3 <code>JAR</code>包下载</h1>
<ul>
<li><a href="https://github.com/2293736867/MarkdownTOCJava">Github</a></li>
<li><a href="https://gitee.com/u6b7b5fc3/MarkdownTOCJava">码云</a></li>
<li><a href="https://codechina.csdn.net/qq_27525611/MarkdownTOCJava">CODE.CHINA</a></li>
</ul>
<h1 id="4-其他">4 其他</h1>
<p>其实生成的方法不只一种，下面提供几个供参考：</p>
<ul>
<li><a href="https://github.com/ekalinin/github-markdown-toc">Go生成的，2.2k star</a></li>
<li><a href="https://github.com/jonschlinkert/markdown-toc">JS生成的，1.1k star</a></li>
<li><a href="https://www.jianshu.com/p/5294e0b3f9c0">通过脚本生成的</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第101期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-101-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-101-qi/">
        </link>
        <updated>2020-09-25T08:24:54.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>你可以像猪一样懒，却无法像只猪一样，懒得心安理得。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>秋浦田舍翁，采鱼水中宿。<br>
——李白《秋浦歌十七首》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>在人间有谁或者不像是一场炼狱，我不哭我已经没有尊严能放弃。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Spring Boot demo系列（九）：Jasypt]]></title>
        <id>https://2293736867.github.io/post/spring-boot-demo-xi-lie-ba-jasypt/</id>
        <link href="https://2293736867.github.io/post/spring-boot-demo-xi-lie-ba-jasypt/">
        </link>
        <updated>2020-09-24T10:35:18.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-概述">1 概述</h1>
<p><code>Jasypt</code>是一个加密库，<code>Github</code>上有一个集成了<code>Jasypt</code>的<code>Spring Boot</code>库，叫<code>jasypt-spring-boot</code>，本文演示了如何使用该库对配置文件进行加密。</p>
<h1 id="2-依赖">2 依赖</h1>
<p>首先添加依赖：</p>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;com.github.ulisesbocchio&lt;/groupId&gt;
    &lt;artifactId&gt;jasypt-spring-boot-starter&lt;/artifactId&gt;
    &lt;version&gt;3.0.3&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<p><code>Gradle</code>：</p>
<pre><code class="language-bash">implementation(&quot;com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.3&quot;)
</code></pre>
<h1 id="3-简单加密">3 简单加密</h1>
<p>简单加密就是直接把加密口令（注意不是加密密码）以明文形式写在配置文件中，步骤如下：</p>
<ul>
<li>配置文件配置加密口令</li>
<li>获取密文</li>
<li>替换明文</li>
</ul>
<h2 id="31-加密口令">3.1 加密口令</h2>
<p>在配置文件加上如下参数：</p>
<pre><code class="language-yaml">jasypt:
  encryptor:
    password: test
</code></pre>
<p>其中<code>test</code>就是加密的口令。</p>
<h2 id="32-获取密文">3.2 获取密文</h2>
<p>比如配置文件需要加密的值如下：</p>
<pre><code class="language-yaml">test: value
</code></pre>
<p>在测试类对<code>StringEncryptor</code>进行注入并使用其中的<code>encrypt</code>加密通过<code>@Value</code>获取的值：</p>
<pre><code class="language-java">@SpringBootTest
class DemoApplicationTests {
    @Autowired
    private StringEncryptor encryptor;

    @Value(&quot;${test}&quot;)
    private String value;

    @Test
    void contextLoads() {
        System.out.println(encryptor.encrypt(value));
    }
}
</code></pre>
<p>点击旁边的绿色小三角形即可运行，输出如下：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200924000606468.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>这个就是对应的密文。</p>
<h2 id="33-替换明文">3.3 替换明文</h2>
<p>把密文加上前缀<code>ENC(</code>与后缀<code>)</code>替换明文：</p>
<pre><code class="language-yaml">test: ENC(IlEvyvcULhZJrHLDtPun2ut433RvAdpaNJ9IZt9uNUk3hDSKQsdOXLEkWyiK6QR3)
</code></pre>
<p>这样就完成了对属性<code>test</code>进行加密。</p>
<h2 id="34-测试">3.4 测试</h2>
<p>直接通过<code>@Value</code>获取的值即为明文：</p>
<pre><code class="language-java">@SpringBootTest
class DemoApplicationTests {

    @Autowired
    private StringEncryptor encryptor;

    @Value(&quot;${test}&quot;)
    private String value;

    @Test
    void contextLoads() {
        System.out.println(encryptor.encrypt(value));
    }

    @Test
    void decrypt()
    {
        System.out.println(value);
    }
}
</code></pre>
<p>直接运行其中的<code>decrypt</code>即可输出明文。</p>
<h1 id="4-自定义加密">4 自定义加密</h1>
<h2 id="41-自定义加密类">4.1 自定义加密类</h2>
<p>默认采用的加密算法为<code>PBE</code>算法，如果觉得不能符合要求可以自定义加密类。</p>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200924064738911.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>自定义加密类实现<code>StringEncrypto</code>接口即可，需要在配置文件写上<code>Bean</code>的名称：</p>
<pre><code class="language-java">@Component
public class Encryptor implements StringEncryptor{

    @Override
    public String encrypt(String s) {
        return s+&quot;111&quot;;
    }

    @Override
    public String decrypt(String s) {
        return s.substring(0,s.indexOf(&quot;111&quot;));
    }
}
</code></pre>
<p>这里的加密很简单，直接在明文后面加上<code>111</code>，解密的话去掉<code>111</code>。另外在配置文件上写上<code>Bean</code>的名称：</p>
<pre><code class="language-yaml">jasypt:
  encryptor:
#    password: test
    bean: encryptor
</code></pre>
<p>同时可以把口令注释掉，因为此时已经不需要使用口令进行加密了。</p>
<p>测试：</p>
<pre><code class="language-java">@SpringBootTest
class DemoApplicationTests {

    @Autowired
    private StringEncryptor encryptor;

    @Value(&quot;${test}&quot;)
    private String value;

    @Test
    void contextLoads() {
        System.out.println(encryptor.encrypt(value));
    }

    @Test
    void decrypt()
    {
        System.out.println(encryptor.decrypt(value));
    }

}
</code></pre>
<h2 id="42-非对称加密">4.2 非对称加密</h2>
<p>生成公钥与私钥借助了工具类库<code>Hutool</code>，依赖如下：</p>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;cn.hutool&lt;/groupId&gt;
    &lt;artifactId&gt;hutool-crypto&lt;/artifactId&gt;
    &lt;version&gt;5.4.3&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
    &lt;groupId&gt;org.bouncycastle&lt;/groupId&gt;
    &lt;artifactId&gt;bcprov-jdk15on&lt;/artifactId&gt;
    &lt;version&gt;1.66&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<p><code>Gradle</code>：</p>
<pre><code class="language-bash">implementation(&quot;cn.hutool:hutool-crypto:5.4.3&quot;)
implementation(&quot;org.bouncycastle:bcprov-jdk15on:1.66&quot;)
</code></pre>
<p>生成公钥私钥：</p>
<pre><code class="language-java">KeyPair pair = SecureUtil.generateKeyPair(&quot;RSA&quot;);
System.out.println(Base64.getEncoder().encodeToString(pair.getPublic().getEncoded()));
System.out.println(Base64.getEncoder().encodeToString(pair.getPrivate().getEncoded()));
</code></pre>
<p>生成后添加到<code>jasypt.encryptor.public-key-string</code>与<code>jasypt.encryptor.private-key-string</code>：</p>
<pre><code class="language-yaml">jasypt:
  encryptor:
#    password: test
#    bean: encryptor
    public-key-string: MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCZV5U0+Ck4AEpawUoiHOkG4ZNC6EeEvFZVCcyaIM0MiusGMM6ye9ZT6Ok756/vQsJbsYDGDtIDX82TsmYbZkN7QPuclABSL5SmaDYdJM/MeYKfMwrDb0lWARqF5ql9Rgol7Agq4ef8yQEbSmUDW/LQe+xXtCTer5MoJViUHV56MwIDAQAB
    private-key-string: MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBAJlXlTT4KTgASlrBSiIc6Qbhk0LoR4S8VlUJzJogzQyK6wYwzrJ71lPo6Tvnr+9CwluxgMYO0gNfzZOyZhtmQ3tA+5yUAFIvlKZoNh0kz8x5gp8zCsNvSVYBGoXmqX1GCiXsCCrh5/zJARtKZQNb8tB77Fe0JN6vkyglWJQdXnozAgMBAAECgYA8syFCrwtt+ht00ne8ijIqQagP/6+z2PPZxL/DsUFJ+kGvmSlxGLlOTO/qgTuxG/2g22JsxFgY8tcHZMKrjO8f4TLKPsaFgX1OwNhJO4SoMlfUUAR9HSMv49vx5mOvh2QUrC5+4rIQI1Rm8zbKyAqCjHIKr8hA6bIKEHO2qXK05QJBANhAA+djwrr3orIIBTRp+H6/JChH76XtoQfcQyT+CrEu/4tHVkbO2cEqcdKDScswHyTPu5UaSU2HFW/0Lj8Kg40CQQC1h1YMysd51djCf/Ud7L2sSIduy3DUSLc6XRX1IWAqxO+8gkvknDW7QztNES9YqwYEkLNLAjp1v8Gq+o2JQKS/AkAENCpfQycz70BwaYuAW1cDT7/qMIvOE/J/bp63h2C51QoOsRJSSg8dnC+eQgMbOhJA6vDgkyQ9p5SZGowTmaa5AkEAneQAIZJC3KL3LX20ivm+pFpVijXjhpFU5avPjG4iQjEXQISoVEjWp3G747V91Aa1bkUZ3bUref13Cytw7h/O6wJBAJHNIHKKTAkmslguJU5hll1HqrzyI9lcB5XqcgvdsxijUkZ95FThk6hNQuNV0sO/itUijQsJAtNdDITKmdcPMWg=
</code></pre>
<p>然后就可以像加密得到密文并替换明文了。</p>
<h1 id="5-非明文口令">5 非明文口令</h1>
<p>对于<code>jasypt.encryptor.password</code>，可以使用非明文口令，这样口令的传递方式有三种：</p>
<ul>
<li>通过命令行参数传递</li>
<li>通过应用环境变量传递</li>
<li>通过系统环境变量传递</li>
</ul>
<h2 id="51-通过命令行参数传递">5.1 通过命令行参数传递</h2>
<p>首先先写上明文口令，得到密文：</p>
<pre><code class="language-yaml">jasypt:
  encryptor:
    password: test
test: value
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20200924080510685.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>加上前后缀替换明文后，去掉加密口令：</p>
<pre><code class="language-yaml">#jasypt:
#  encryptor:
#    password: test

test: ENC(quCu1b+Z7SPHmgVsmbkeyNZmNe1LJw+SxjmwwLjNaWoH/ce3r6iHGvaMN5eQcu0P)
</code></pre>
<p>并在测试类的参数类加上</p>
<pre><code class="language-bash">--jasypt.encryptor.password=test
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20200924080917909.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>由于这里是测试类命令行参数添加不了，但是在启动类是可以添加的：</p>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/20200924081009860.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>这种方法就跳过演示了。</p>
<p>对于<code>Gradle</code>，测试的时候需要在<code>build.gradle</code>/<code>build.gradle.kts</code>添加参数：</p>
<pre><code class="language-java">tasks.withType&lt;Test&gt; {
    useJUnitPlatform()
    jvmArgs(&quot;-Djasypt.encryptor.password=test&quot;)
    // 不能是jvmArgs(&quot;--jasypt.encryptor.password=test&quot;)
}
</code></pre>
<h2 id="52-通过应用环境变量传递">5.2 通过应用环境变量传递</h2>
<p>和第一种方式差不多，第一种在<code>Program arguments</code>设置，而这种方法在<code>VM options</code>中设置：</p>
<pre><code class="language-bash">-Djasypt.encryptor.password=test
</code></pre>
<figure data-type="image" tabindex="6"><img src="https://img-blog.csdnimg.cn/20200924081304896.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="7"><img src="https://img-blog.csdnimg.cn/20200924081352130.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="53-系统环境变量方式传递">5.3 系统环境变量方式传递</h2>
<p>通过系统环境变量方式传递<code>jasypt.encryptor.password</code>时，需要指定是哪一个环境变量：</p>
<pre><code class="language-yaml">jasypt:
  encryptor:
    password: ${ENCRYPT}
</code></pre>
<p>比如这里指定的是<code>ENCRYPT</code>环境变量，设置好环境变量后就可以直接加密解密了。</p>
<h1 id="6-部署注意事项">6 部署注意事项</h1>
<h2 id="61-打包">6.1 打包</h2>
<p>因为在配置文件中缺少了<code>jasypt.encryptor.password</code>，因此使用<code>Maven</code>打包时会出错：</p>
<figure data-type="image" tabindex="8"><img src="https://img-blog.csdnimg.cn/20200924152313685.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>在<code>Maven</code>打包配置中加上参数即可：</p>
<figure data-type="image" tabindex="9"><img src="https://img-blog.csdnimg.cn/20200924152518468.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>但是使用<code>Gradle</code>打包时不需要添加额外的参数。</p>
<h2 id="62-部署">6.2 部署</h2>
<p>现在一般通过<code>JAR</code>直接部署即可，也就是通过</p>
<pre><code class="language-bash">java -jar demo.jar
</code></pre>
<p>部署，这时候根据需要加上对应的参数即可，比如：</p>
<pre><code class="language-bash">java -jar demo.jar --jasypt.encryptor.password=test
java -Djasypt.encryptor.password=test -jar demo.jar
</code></pre>
<p>如果通过系统变量获取加密口令，请确保对应的环境变量存在。</p>
<p>另外，如果通过<code>Docker</code>部署，请在<code>ENTRYPOINT</code>加上对应参数，比如：</p>
<pre><code class="language-java">ENTRYPOINT [&quot;java&quot;,&quot;-Djasypt.encryptor.password=test&quot;,&quot;-jar&quot;,&quot;demo.jar&quot;]
ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;demo.jar&quot;,,&quot;--jasypt.encryptor.password=test&quot;,]
</code></pre>
<p>通过系统环境变量获取请加上<code>ENV</code>：</p>
<pre><code class="language-bash">ENV ENCRYPT=&quot;test&quot;
</code></pre>
<h1 id="7-参考源码">7 参考源码</h1>
<p><code>Java</code>版：</p>
<ul>
<li><a href="https://github.com/2293736867/SpringBootDemoJava/tree/master/Jasypt">Github</a></li>
<li><a href="https://gitee.com/u6b7b5fc3/SpringBootDemoJava/tree/master/Jasypt">码云</a></li>
<li><a href="https://codechina.csdn.net/qq_27525611/SpringBootDemoJava/-/tree/master/Jasypt">CODE.CHINA</a></li>
</ul>
<p><code>Kotlin</code>版：</p>
<ul>
<li><a href="https://github.com/2293736867/SpringBootDemoKotlin/tree/master/Jasypt">Github</a></li>
<li><a href="https://gitee.com/u6b7b5fc3/SpringBootDemoKotlin/tree/master/Jasypt">码云</a></li>
<li><a href="https://codechina.csdn.net/qq_27525611/SpringBootDemoKotlin/-/tree/master/Jasypt">CODE.CHINA</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第100期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-100-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-100-qi/">
        </link>
        <updated>2020-09-24T08:24:13.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>别人扮猪吃老虎，你只能扮猪。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>未觉池塘青草梦，结前梧叶已秋声。<br>
——偶成《朱熹》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>你还是这么冷漠啊。不过，仅此而已的话，我是不会泄气的。</p>
</blockquote>
<h1 id="100期纪念">100期纪念</h1>
<p>打个卡。</p>
]]></content>
    </entry>
</feed>