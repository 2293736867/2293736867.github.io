<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://2293736867.github.io</id>
    <title>氷泠&apos;s blog</title>
    <updated>2020-07-31T13:20:34.362Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://2293736867.github.io"/>
    <link rel="self" href="https://2293736867.github.io/atom.xml"/>
    <subtitle>我配不上你，
纵然很努力。</subtitle>
    <logo>https://2293736867.github.io/images/avatar.png</logo>
    <icon>https://2293736867.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 氷泠&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[每日分享 第44期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-44-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-44-qi/">
        </link>
        <updated>2020-08-01T14:44:47.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1596034407830.jpeg" alt="" loading="lazy"></figure>
<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>现在的时代不是属于00后，是属于厚脸皮的！</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>据估计，野生动物贩卖每年市值约100亿美元，是仅次于毒品和武器的第三大最有价值的非法贸易。其中鸟类是最为常见的违禁品，每年走私的野生鸟类有200万到500万只。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>白发渔樵江渚上，惯看秋月春风。<br>
——杨慎《临江仙·滚滚长江东逝水》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>每一个人都应该明确自己的方向和位置。</p>
</blockquote>
<h1 id="每日音乐">每日音乐</h1>
<blockquote>
<p><a href="https://music.163.com/#/song?id=444267766">尽头-赵方婧</a></p>
</blockquote>
<blockquote>
<p>觥筹交错<br>
时光如梭<br>
迷失自我<br>
享受折磨<br>
这是你要的<br>
物质生活</p>
</blockquote>
<blockquote>
<p>一身污浊<br>
自得其乐<br>
谁的命运<br>
谁又能把握<br>
这是种孤独<br>
没有结果</p>
</blockquote>
<blockquote>
<p>精神虚伪的寄托<br>
不择手段的<br>
迷离恍惚的假想<br>
推翻不假思索<br>
如果换作是我<br>
又是何得的<br>
变作无趣的枷锁<br>
肉体诚实的反驳<br>
不合时宜的<br>
消散太快的热度<br>
假装不食烟火<br>
不由分说的我<br>
换个身份变作<br>
有趣的恶魔</p>
</blockquote>
<blockquote>
<p>觥筹交错<br>
时光如梭<br>
迷失自我<br>
享受折磨<br>
这是你要的<br>
物质生活</p>
</blockquote>
<blockquote>
<p>一身污浊<br>
自得其乐<br>
谁的命运<br>
谁又能把握<br>
这是种孤独<br>
没有结果</p>
</blockquote>
<blockquote>
<p>精神虚伪的寄托<br>
不择手段的<br>
迷离恍惚的假想<br>
推翻不假思索<br>
如果换作是我<br>
又是何得的<br>
变作无趣的枷锁<br>
肉体诚实的反驳<br>
不合时宜的<br>
消散太快的热度<br>
假装不食烟火<br>
不由分说的我<br>
换个身份变作<br>
有趣的恶魔</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第43期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-43-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-43-qi/">
        </link>
        <updated>2020-07-31T14:41:27.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1596034395741.jpeg" alt="" loading="lazy"></figure>
<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>无毒的身躯抗下有毒的疫苗，你是教育我从小就要坚强！</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>现代手术之父威廉·斯图尔特·霍尔斯特博士通过向自己注射可卡因开创了使用麻醉药的先例。他最终对可卡因成瘾，之后是吗啡，但即便如此，他始终都在促进医学培训现代化。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>金陵风景好，豪事集新亭。<br>
——李白《金陵新亭》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>即便你忘记了我，我也不回遗忘你。</p>
</blockquote>
<h1 id="每日音乐">每日音乐</h1>
<blockquote>
<p><a href="https://music.163.com/#/song?id=5256770">明知做戏-吴雨霏</a></p>
</blockquote>
<blockquote>
<p>等你的汽水喝一半给你加片薄冰<br>
等你的桌面满些我总会打理重整<br>
不想纯情<br>
不够聪明<br>
你未发现我的身影</p>
</blockquote>
<blockquote>
<p>得我帮你依照编码整理家里电影<br>
只会得我一个帮你选购喜爱铃声<br>
天天如常<br>
估你心情<br>
等一个眼神求证<br>
一闪擦过如流星</p>
</blockquote>
<blockquote>
<p>怎么我为我做过的感到惊怕<br>
就像爱吗我也不肯定恐怕<br>
我以为存在吗<br>
千变万化<br>
从来不肯开口可相信吗<br>
离谱吗</p>
</blockquote>
<blockquote>
<p>请你不要阻我喜欢你<br>
明明是爱但你未说话扮作闪避<br>
这个沉默冷静的你毫无办法处理<br>
其实我亦怕是错摸心理<br>
总有天会等到好天气<br>
游行示爱大叫着你在某大片草地<br>
等你无用退避不过仍然害羞的你<br>
还是顾忌太不争气<br>
明知做戏</p>
</blockquote>
<blockquote>
<p>即使你未在意不感到惊讶<br>
现在要说爱你请准备招架<br>
勇气还存在吗<br>
不要害怕<br>
随时真的胆敢亲手送花<br>
离谱吗</p>
</blockquote>
<blockquote>
<p>请你不要阻我喜欢你<br>
明明是爱但你未说话扮作闪避<br>
这个沉默冷静的你毫无办法处理<br>
其实我亦怕是错摸心理<br>
总有天会等到好天气<br>
游行示爱大叫着你在某大片草地<br>
等你无用退避不过仍然害羞的你<br>
还是顾忌太不争气<br>
明知做戏</p>
</blockquote>
<blockquote>
<p>不过不要阻我紧张你<br>
如令你不愉快让我办妥为你准备<br>
喜爱沉默冷静的你还是自信的你<br>
仍愿意为你造一些惊喜<br>
总有天会等到好天气<br>
游行示爱大叫着你在某大片草地<br>
等你无用退避不过途人目光不理<br>
期待贴着你的手臂<br>
无须做戏</p>
</blockquote>
<blockquote>
<p>等你喜爱等你不爱就凭摘毫验证<br>
想爱不爱偏爱不理亦同样难划清<br>
天天如常<br>
估你心情<br>
不想扑索来求证<br>
争取过趁还年轻<br>
终于你下定决定来答应<br>
太动听</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[设计模式学习笔记（十六）：职责链模式]]></title>
        <id>https://2293736867.github.io/post/she-ji-mo-shi-xue-xi-bi-ji-shi-liu-zhi-ze-lian-mo-shi/</id>
        <link href="https://2293736867.github.io/post/she-ji-mo-shi-xue-xi-bi-ji-shi-liu-zhi-ze-lian-mo-shi/">
        </link>
        <updated>2020-07-31T13:20:13.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#1-%E6%A6%82%E8%BF%B0">1 概述</a>
<ul>
<li><a href="#11-%E5%BC%95%E8%A8%80">1.1 引言</a></li>
<li><a href="#12-%E5%AE%9A%E4%B9%89">1.2 定义</a></li>
<li><a href="#13-%E7%BB%93%E6%9E%84%E5%9B%BE">1.3 结构图</a></li>
<li><a href="#14-%E8%A7%92%E8%89%B2">1.4 角色</a></li>
</ul>
</li>
<li><a href="#2-%E5%85%B8%E5%9E%8B%E5%AE%9E%E7%8E%B0">2 典型实现</a>
<ul>
<li><a href="#21-%E6%AD%A5%E9%AA%A4">2.1 步骤</a></li>
<li><a href="#22-%E6%8A%BD%E8%B1%A1%E5%A4%84%E7%90%86%E8%80%85">2.2 抽象处理者</a></li>
<li><a href="#23-%E5%85%B7%E4%BD%93%E5%A4%84%E7%90%86%E8%80%85">2.3 具体处理者</a></li>
<li><a href="#24-%E5%AE%A2%E6%88%B7%E7%AB%AF">2.4 客户端</a></li>
</ul>
</li>
<li><a href="#3-%E5%AE%9E%E4%BE%8B">3 实例</a></li>
<li><a href="#4-%E5%88%86%E7%B1%BB">4 分类</a>
<ul>
<li><a href="#41-%E7%BA%AF%E7%9A%84%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F">4.1 纯的职责链模式</a></li>
<li><a href="#42-%E4%B8%8D%E7%BA%AF%E7%9A%84%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F">4.2 不纯的职责链模式</a></li>
</ul>
</li>
<li><a href="#5-%E4%B8%BB%E8%A6%81%E4%BC%98%E7%82%B9">5 主要优点</a></li>
<li><a href="#6-%E4%B8%BB%E8%A6%81%E7%BC%BA%E7%82%B9">6 主要缺点</a></li>
<li><a href="#7-%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF">7 适用场景</a></li>
<li><a href="#8-%E6%80%BB%E7%BB%93">8 总结</a></li>
</ul>
</p>
<h1 id="1-概述">1 概述</h1>
<h2 id="11-引言">1.1 引言</h2>
<p>很多情况下，一个软件系统中可以处理某个请求的对象不知一个，比如采购单的审批，主任，副董事长，董事长，董事会都可以处理采购单，他们可以构成一条处理采购单的链式结构，采购单沿着这条链进行传递，这条链就叫职责链。</p>
<p>职责链可以是一条直线，一个环或者一个树形结构，最常见的职责链是直线型，即沿着一条单向的链来传递请求。链上的每一个对象都是请求处理者，职责链模式可以将请求的处理者组织成一条链，并让请求沿着链传递，由链上的处理者对请求进行处理，客户端无须关系请求的处理细节以及具体的传递，只需要将请求发送到链上即可，实现请求发送者以及请求处理者的解耦。</p>
<h2 id="12-定义">1.2 定义</h2>
<p><strong>职责链模式：避免将请求发送者与接收者耦合在一起，让多个对象都有机会接收请求，将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。</strong></p>
<p>职责链模式是一种行为型模式。</p>
<h2 id="13-结构图">1.3 结构图</h2>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200731111207364.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="14-角色">1.4 角色</h2>
<ul>
<li><strong><code>Handler</code>（抽象处理者）：定义一个处理请求的接口，一般为抽象类。因为每一个处理者的下家还是一个处理者，因此在抽象处理者中定义了一个抽象处理者的对象作为对下一个处理者的引用，通过该引用，处理者可以连成一条链</strong></li>
<li><strong><code>ConcreteHandler</code>（具体处理者）：抽象处理者的子类，实现具体处理方法，在处理前需要判断是否具有处理权限，如果拥有权限则处理，没有则转发到下一个处理者</strong></li>
</ul>
<h1 id="2-典型实现">2 典型实现</h1>
<h2 id="21-步骤">2.1 步骤</h2>
<ul>
<li>定义抽象处理者：定义处理请求接口以及定义一个抽象处理者成员，作为下一个处理者的引用，一般为了让具体处理者方便调用，定义为<code>protected</code></li>
<li>定义具体处理者：处理/转发请求，处理请求前先判断是否具有权限 ，拥有则处理请求，否则转发请求</li>
<li>客户端创建职责链：职责链模式并不创建职责链，职责链交由客户端创建，根据实际需要定义职责链顺序</li>
</ul>
<h2 id="22-抽象处理者">2.2 抽象处理者</h2>
<pre><code class="language-java">abstract class Handler
{
    protected Handler successor;
    public void setSuccessor(Handler successor)
    {
        this.successor = successor;
    }

    public abstract void handleRequest(int num);
}
</code></pre>
<p>拥有一个设置下一处理者的对象，可以通过setter注入，同时声明抽象处理方法。</p>
<h2 id="23-具体处理者">2.3 具体处理者</h2>
<pre><code class="language-java">class ConcreteHandler1 extends Handler
{
    @Override    
    public void handleRequest(int num)
    {
        if(num &lt; 10)
        {
            System.out.println(&quot;处理小于10的数字:&quot;+num);
        }
        else
            successor.handleRequest(num);
    }
}

class ConcreteHandler2 extends Handler
{
    @Override    
    public void handleRequest(int num)
    {
        if(num &lt; 20)
        {
            System.out.println(&quot;处理大于等于10且小于20的数字:&quot;+num);
        }
        else
            successor.handleRequest(num);
    }
}

class ConcreteHandler3 extends Handler
{
    @Override    
    public void handleRequest(int num)
    {
        if(num &lt; 30)
        {
            System.out.println(&quot;处理大于等于20且小于30的数字:&quot;+num);
        }
        else
            successor.handleRequest(num);
    }
}
</code></pre>
<p>继承抽象处理者，首先判断是否拥有权限处理（这里是一个简单的if判断），如果有就处理，没有的话通过<code>protected</code>对象，也就是转发给下一个处理者处理。</p>
<h2 id="24-客户端">2.4 客户端</h2>
<pre><code class="language-java">public static void main(String[] args) 
{
    Handler handler = new ConcreteHandler1();
    Handler handler2 = new ConcreteHandler2();
    Handler handler3 = new ConcreteHandler3();
    handler.setSuccessor(handler2);
    handler2.setSuccessor(handler3);

    handler.handleRequest(3);
    handler.handleRequest(15);
    handler.handleRequest(22);
}
</code></pre>
<p>客户端针对抽象处理者编程，需要创建每一个具体处理者对象，并且自定义职责链：</p>
<pre><code class="language-java">handler.setSuccessor(handler2);
handler2.setSuccessor(handler3);
</code></pre>
<p>接着调用对应的处理者处理即可。</p>
<h1 id="3-实例">3 实例</h1>
<blockquote>
<p>设计一个采购单审批系统，分级进行，根据金额不同由不同层次的人员审批，主任可以审批5w以下的采购单，副董事长可以审批5w-10w，董事长可以审批10w-50w，50w以上需要由董事会审批，使用职责链模式设计该系统。</p>
</blockquote>
<p>设计如下：</p>
<ul>
<li>抽象处理者：<code>Approver</code></li>
<li>具体处理者：<code>Director</code>+<code>VicePresident</code>+<code>President</code>+<code>Congress</code></li>
<li>采购单请求类：<code>PurchaseRequest</code></li>
</ul>
<p>代码如下：</p>
<pre><code class="language-java">//抽象处理者
abstract class Approver
{
    protected Approver successor;

    public void setSuccessor(Approver successor) {
        this.successor = successor;
    }

    public abstract void processRequest(PurchaseRequest request);
}

//具体处理者:主任
class Director extends Approver
{
    @Override
    public void processRequest(PurchaseRequest request)
    {
        if(request.getAmount() &lt; 50000)
            System.out.println(&quot;主任审批一笔\n金额为&quot;+request.getAmount()+&quot;\nid为&quot;+request.getId()+&quot;\n的采购单\n&quot;);
        else
            successor.processRequest(request);
    }
}

//具体处理者:副董事长
class VicePresident extends Approver
{
    @Override
    public void processRequest(PurchaseRequest request)
    {
        if(request.getAmount() &lt; 100000)
            System.out.println(&quot;副董事长审批一笔\n金额为&quot;+request.getAmount()+&quot;\nid为&quot;+request.getId()+&quot;\n的采购单\n&quot;);
        else
            successor.processRequest(request);
    }
}

//具体处理者:董事长
class President extends Approver
{
    @Override
    public void processRequest(PurchaseRequest request)
    {
        if(request.getAmount() &lt; 500000)
            System.out.println(&quot;董事长审批一笔\n金额为&quot;+request.getAmount()+&quot;\nid为&quot;+request.getId()+&quot;\n的采购单\n&quot;);
        else
            successor.processRequest(request);
    }
}

//具体处理者:董事会
class Congress extends Approver
{
    @Override
    public void processRequest(PurchaseRequest request)
    {
        System.out.println(&quot;董事会审批一笔\n金额为&quot;+request.getAmount()+&quot;\nid为&quot;+request.getId()+&quot;\n的采购单\n&quot;);
    }
}

//请求类:采购单
class PurchaseRequest
{
    private double amount;
    private String id;
    private static final String STR = &quot;xcnvj232cvm&quot;;
    private static final Random random = new Random();

    public PurchaseRequest(double amount)
    {
        this.amount = amount;
        //简易的随机字符串
        this.id = STR.substring(0,random.nextInt(STR.length()-1)+1).repeat(random.nextInt(3)+2);
    }

    public double getAmount() {
        return this.amount;
    }

    public void setAmount(double amount) {
        this.amount = amount;
    }

    public String getId() {
        return this.id;
    }

    public void setId(String id) {
        this.id = id;
    }

}
</code></pre>
<p>测试：</p>
<pre><code class="language-java">public static void main(String[] args) 
{
    Approver director = new Director();
    Approver vicePresident = new VicePresident();
    Approver president = new President();
    Approver congress = new Congress();

    director.setSuccessor(vicePresident);
    vicePresident.setSuccessor(president);
    president.setSuccessor(congress);

    director.processRequest(new PurchaseRequest(12345));
    director.processRequest(new PurchaseRequest(54321));
    director.processRequest(new PurchaseRequest(123456));
    director.processRequest(new PurchaseRequest(654321));
}
</code></pre>
<p>输出如下：<br>
<img src="https://img-blog.csdnimg.cn/20200731134901882.png" alt="在这里插入图片描述" loading="lazy"></p>
<h1 id="4-分类">4 分类</h1>
<p>职责链模式可以分为纯的职责链模式与不纯的职责链模式。</p>
<h2 id="41-纯的职责链模式">4.1 纯的职责链模式</h2>
<p>一个纯的职责链模式要求一个具体处理者对象只能在两个行为中选择一个，要么承担全部责任，要么将责任推给下家，不允许出现某一个具体处理者对象在承担了一部分或全部责任后又将责任向下传递的情况。</p>
<p>而且在纯的职责链模式中，要求一个请求必须被某一个处理者对象接收，不能出现某个请求未被任何一个处理者对象处理的情况，比如前面的采购单例子。</p>
<h2 id="42-不纯的职责链模式">4.2 不纯的职责链模式</h2>
<p>在一个不纯的职责链模式中，允许某个请求被一个具体处理者部分处理后再向下传递，或者一个具体处理者处理完某请求后其猴戏处理者可以继续处理该请求，而且一个请求可以最终不被任何处理者对象所接收。</p>
<p>在Java AWT 1.0中的事件处理模型应用就是不纯的职责链模式，基本原理如下：由于窗口组件一般位于容器组件中，当事件发生在窗口组件上时，先通过组件对象的<code>handleEvent()</code>方法传递给相应的事件处理方法，该事件处理方法将处理该事件，然后决定是否将该事件向上一级容器组件传播，上级容器组件在接到事件之后可以继续处理此事件并决定是否继续向上级容器组件传播，直到顶层容器组件为止。如果一直都没有处理方法则不处理该事件。</p>
<p>这种事件处理机制又叫事件浮升机制，JDK1.1后使用观察者模式来代理职责链模式处理事件。</p>
<h1 id="5-主要优点">5 主要优点</h1>
<ul>
<li>降低耦合：职责链模式使得一个对象无须知道是其他哪一个对象处理请求，对象仅需知道请求会被处理即可，接收者和发送者都没有对方明确信息，且链中对象不需要知道链的结构，由客户端负责链的创建，降低了系统耦合度</li>
<li>简化对象连接：请求处理对象仅需维持一个指向其后继者的引用，而不需要维持它对所有候选处理者的引用，可简化对象的相互连接</li>
<li>灵活的职责链：可以在运行时对链进行动态增加或者修改</li>
<li>符合OCP：系统增加一个新的具体处理者时无须修改源码，只需要客户端重建职责链，符合OCP</li>
</ul>
<h1 id="6-主要缺点">6 主要缺点</h1>
<ul>
<li>请求可能得不到处理：由于一个请求没有明确的接收者，因此请求不一定会被处理，也有可能因为职责链配置错误而得不到处理</li>
<li>性能受到影响：对于较长的职责链，请求的处理可能涉及多个处理对象，系统性能会受到一定影响，而且代码调试时可能不方便</li>
<li>死循环：如果职责链不当，可能会导致死循环调用</li>
</ul>
<h1 id="7-适用场景">7 适用场景</h1>
<ul>
<li>有多个对象可以处理同一个请求，具体哪个对象处理该请求待运行时刻再确定，客户端只需将请求提交到链上，而无须关心请求的处理对象是谁以及它是如何处理的</li>
<li>在不明确指定接收者的情况下，向多个对象的一个提交一个请求</li>
<li>可动态指定一组对象处理请求，客户端可以动态创建职责链来处理请求，还可以改变链中处理请求以及处理者之间的先后次序</li>
</ul>
<h1 id="8-总结">8 总结</h1>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/2020073115020561.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p><strong>如果觉得文章好看，欢迎点赞。</strong></p>
<p><strong>同时欢迎关注微信公众号：氷泠之路。</strong></p>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20200711111358683.gif" alt="在这里插入图片描述" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[设计模式学习笔记（十五）：代理模式]]></title>
        <id>https://2293736867.github.io/post/she-ji-mo-shi-xue-xi-bi-ji-shi-wu-dai-li-mo-shi/</id>
        <link href="https://2293736867.github.io/post/she-ji-mo-shi-xue-xi-bi-ji-shi-wu-dai-li-mo-shi/">
        </link>
        <updated>2020-07-31T13:19:07.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#1-%E6%A6%82%E8%BF%B0">1 概述</a>
<ul>
<li><a href="#11-%E5%BC%95%E8%A8%80">1.1 引言</a></li>
<li><a href="#12-%E5%AE%9A%E4%B9%89">1.2 定义</a></li>
<li><a href="#13-%E7%BB%93%E6%9E%84%E5%9B%BE">1.3 结构图</a></li>
<li><a href="#14-%E8%A7%92%E8%89%B2">1.4 角色</a></li>
<li><a href="#15-%E5%88%86%E7%B1%BB">1.5 分类</a></li>
<li><a href="#16-%E4%B8%8E%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%B8%8D%E5%90%8C">1.6 与装饰模式的不同</a></li>
</ul>
</li>
<li><a href="#2-%E5%85%B8%E5%9E%8B%E5%AE%9E%E7%8E%B0">2 典型实现</a>
<ul>
<li><a href="#21-%E6%AD%A5%E9%AA%A4">2.1 步骤</a></li>
<li><a href="#22-%E6%8A%BD%E8%B1%A1%E4%B8%BB%E9%A2%98%E8%A7%92%E8%89%B2">2.2 抽象主题角色</a></li>
<li><a href="#23-%E7%9C%9F%E5%AE%9E%E4%B8%BB%E9%A2%98%E8%A7%92%E8%89%B2">2.3 真实主题角色</a></li>
<li><a href="#24-%E4%BB%A3%E7%90%86%E4%B8%BB%E9%A2%98%E8%A7%92%E8%89%B2">2.4 代理主题角色</a></li>
<li><a href="#25-%E5%AE%A2%E6%88%B7%E7%AB%AF">2.5 客户端</a></li>
</ul>
</li>
<li><a href="#3-%E5%AE%9E%E4%BE%8B">3 实例</a></li>
<li><a href="#4-%E5%8A%A8%E6%80%81%E4%B8%8E%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86">4 动态与静态代理</a>
<ul>
<li><a href="#41-%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86">4.1 静态代理</a></li>
<li><a href="#42-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86">4.2 动态代理</a>
<ul>
<li><a href="#421-proxy">4.2.1 <code>Proxy</code></a></li>
<li><a href="#422-invocationhandler">4.2.2 <code>InvocationHandler</code></a></li>
<li><a href="#423-%E5%AE%9E%E4%BE%8B">4.2.3 实例</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#5-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%90%86">5 远程代理</a>
<ul>
<li><a href="#51-%E6%A6%82%E8%BF%B0">5.1 概述</a></li>
<li><a href="#52-rmi%E7%AE%80%E4%BE%8B">5.2 RMI简例</a></li>
</ul>
</li>
<li><a href="#6-%E8%99%9A%E6%8B%9F%E4%BB%A3%E7%90%86">6 虚拟代理</a>
<ul>
<li><a href="#61-%E6%A6%82%E8%BF%B0">6.1 概述</a></li>
<li><a href="#62-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5">6.2 适用情况</a></li>
<li><a href="#63-%E4%BC%98%E7%BC%BA%E7%82%B9">6.3 优缺点</a></li>
<li><a href="#64-%E7%AE%80%E4%BE%8B">6.4 简例</a></li>
</ul>
</li>
<li><a href="#7-%E7%BC%93%E5%AD%98%E4%BB%A3%E7%90%86">7 缓存代理</a>
<ul>
<li><a href="#71-%E6%8A%BD%E8%B1%A1%E4%B8%BB%E9%A2%98%E8%A7%92%E8%89%B2">7.1 抽象主题角色</a></li>
<li><a href="#72-%E7%9C%9F%E5%AE%9E%E4%B8%BB%E9%A2%98%E8%A7%92%E8%89%B2">7.2 真实主题角色</a></li>
<li><a href="#73-%E4%BB%A3%E7%90%86%E4%B8%BB%E9%A2%98%E8%A7%92%E8%89%B2">7.3 代理主题角色</a></li>
<li><a href="#74-%E5%85%B6%E4%BB%96">7.4 其他</a></li>
<li><a href="#75-%E6%B5%8B%E8%AF%95">7.5 测试</a></li>
</ul>
</li>
<li><a href="#8-%E4%B8%BB%E8%A6%81%E4%BC%98%E7%82%B9">8 主要优点</a></li>
<li><a href="#9-%E4%B8%BB%E8%A6%81%E7%BC%BA%E7%82%B9">9 主要缺点</a></li>
<li><a href="#10-%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF">10 适用场景</a></li>
<li><a href="#11-%E6%80%BB%E7%BB%93">11 总结</a></li>
</ul>
</p>
<h1 id="1-概述">1 概述</h1>
<h2 id="11-引言">1.1 引言</h2>
<p>所谓代购，就是找人帮忙购买自己需要的商品，代购包括两种类型，一种是在当地买不到商品，或者因为当地该商品价格较高，因此托人在其他地区或者国外购买，另一种类型是消费者对想要购买的商品消息缺乏，只能委托中介或者中间商购买。</p>
<p>在软件开发中，有时也需要提供与代购类似的功能，由于某些原因，客户端不想或不能直接访问对象，此时可通过一种叫代理的第三者来实现间接访问，这种方案对应的设计模式称为代理模式。</p>
<p>代理模式是一种应用很广泛的结构型设计模式，而且变化很多。在代理模式中引入了一个新的代理对象，代理对象可以在客户端对象和目标对象之间起到中介的作用，去掉客户不能看到的内容或者增添客户需要的额外服务。</p>
<h2 id="12-定义">1.2 定义</h2>
<p><strong>代理模式：给某一个对象提供一个代理，并由代理对象控制对原对象的引用。</strong></p>
<p>代理模式是一种对象结构型模式。</p>
<h2 id="13-结构图">1.3 结构图</h2>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200730065334739.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="14-角色">1.4 角色</h2>
<ul>
<li><strong><code>Subject</code>（抽象主题角色）：声明了真实主题和代理主题的共同接口，客户端通常需要针对抽象主题角色编程</strong></li>
<li><strong><code>Proxy</code>（代理主题角色）：内部包含了对真实主题的引用，从而可以操作真实主题对象。代理主题角色中提供了一个与真实主题角色相同的接口，以便在任何时候都可以替代真实主题。代理角色还可以控制对真实主题的使用，在需要的时候创建或删除真实主题对象，并对真实主题的使用加以约束。通常在代理主题角色中，客户端调用之前或之后都需要执行特定操作，比如图中的<code>preRequest</code>以及<code>postRequest</code></strong></li>
<li><strong><code>RealSubject</code>（真实主题角色）：定义了代理角色所代表的真实对象，在真实主题角色中实现了真实的业务操作，客户端可以通过代理角色间接调用真实主题角色中的操作</strong></li>
</ul>
<h2 id="15-分类">1.5 分类</h2>
<p>代理模式根据目的以及实现方式可以分成很多类，常见的几种如下：</p>
<ul>
<li>远程代理：为一个位于不同的地址空间的对象提供一个本地的代理对象，这个不同的地址空间可以在同一台主机中，也可以不在同一台主机中。远程代理又叫“大使”（Ambassador）</li>
<li>虚拟代理：如果需要创建一个资源消耗较大的对象，先创建一个消耗相对较小的对象来表示，真实对象只在需要时才会被真正创建</li>
<li>保护代理：控制对一个对象的访问，可以给不同的用户提供不同级别的使用权限</li>
<li>缓存代理：为某一个目标操作的结果提供临时的存储空间，以便多个客户端可以共享这些结果</li>
<li>智能引用代理：当一个对象被引用时，提供一些额外的操作，比如将对象被调用的次数记录下来等</li>
</ul>
<h2 id="16-与装饰模式的不同">1.6 与装饰模式的不同</h2>
<p>代理模式和装饰模式在实现时类似，主要区别如下：</p>
<ul>
<li>增加的职责范围问题域不同：代理模式以及装饰模式都能动态地增加职责，但是代理模式增加的是一些全新的职责，比如权限控制，缓存处理，智能引用，远程访问等，这些职责与原有职责不属于同一个问题域。对于装饰模式，为具体构件类增加一些相关的职责，是原有职责的扩展，这些职责属于同一个问题域</li>
<li>目的不同：代理模式的目的是控制对对象的访问，而装饰模式是为对象动态增加功能</li>
</ul>
<h1 id="2-典型实现">2 典型实现</h1>
<h2 id="21-步骤">2.1 步骤</h2>
<ul>
<li>定义抽象主题角色：定义为抽象类/接口，声明抽象业务方法</li>
<li>定义真实主题角色：继承/实现抽象主题角色，实现真实业务操作</li>
<li>定义代理主题角色：继承/实现抽象主题角色，将客户端的请求转发到真实主题角色进行调用，同时根据需要进行调用前/后的一些相关操作</li>
</ul>
<h2 id="22-抽象主题角色">2.2 抽象主题角色</h2>
<p>这里简单实现为一个接口：</p>
<pre><code class="language-java">interface Subject
{
    void request();
}
</code></pre>
<h2 id="23-真实主题角色">2.3 真实主题角色</h2>
<p>实现抽象主题接口，执行真正的业务操作：</p>
<pre><code class="language-java">class RealSubject implements Subject
{
    public void request()
    {
        System.out.println(&quot;真实主题角色方法&quot;);
    }
}
</code></pre>
<h2 id="24-代理主题角色">2.4 代理主题角色</h2>
<p>同样实现抽象主题接口，一般来说在调用真正的业务方法之前或之后会有相关操作：</p>
<pre><code class="language-java">class Proxy implements Subject
{
    private RealSubject subject = new RealSubject();
    public void pre()
    {
        System.out.println(&quot;代理前操作&quot;);
    }

    public void request()
    {
        pre();
        subject.request();
        post();
    }

    public void post()
    {
        System.out.println(&quot;代理后操作&quot;);
    }
}
</code></pre>
<h2 id="25-客户端">2.5 客户端</h2>
<p>客户端针对抽象主题角色进行编程即可，如果不需要代理，则实例化真实主题角色，如果需要代理则实例化代理主题角色：</p>
<pre><code class="language-java">public static void main(String[] args) 
{
    Subject subject = new RealSubject();
    subject.request();
    System.out.println(&quot;\n使用代理:\n&quot;);
    subject = new Proxy();
    subject.request();
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200730140727727.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="3-实例">3 实例</h1>
<blockquote>
<p>一个已具有搜索功能的系统，需要为搜索添加身份认证以及日志记录功能，使用代理模式设计该系统。</p>
</blockquote>
<p>设计如下：</p>
<ul>
<li>抽象主题角色：<code>Searcher</code></li>
<li>真实主题角色：<code>RealSearcher</code></li>
<li>代理主题角色：<code>ProxySearcher</code></li>
</ul>
<p>代码如下：</p>
<pre><code class="language-java">public class Test
{
    public static void main(String[] args) 
    {
        Searcher subject = new ProxySearcher();
        subject.search();
    }
}

interface Searcher
{
    void search();
}

class RealSearcher implements Searcher
{
    public void search()
    {
        System.out.println(&quot;搜索&quot;);
    }
}

class ProxySearcher implements Searcher
{
    private RealSearcher subject = new RealSearcher();
    public void validate()
    {
        System.out.println(&quot;身份验证&quot;);
    }

    public void search()
    {
        validate();
        subject.search();
        log();
    }

    public void log()
    {
        System.out.println(&quot;日志记录,查询次数+1&quot;);
    }
}
</code></pre>
<p>进行搜索之前，先验证用户，接着进行搜索，搜索完成后进行日志记录，这是保护代理以及智能引用代理的例子。</p>
<h1 id="4-动态与静态代理">4 动态与静态代理</h1>
<h2 id="41-静态代理">4.1 静态代理</h2>
<p>通常情况下，每一个代理类编译之后都会生成一个字节码文件，代理所实现的接口和所代理的方法都固定，这种代理称为静态代理。</p>
<p>静态代理中，客户端通过<code>Proxy</code>调用<code>RealSubject</code>的<code>request</code>方法，同时封装其他方法（代理前/代理后操作），比如上面的查询验证以及日志记录功能。</p>
<p>静态代理的优点是实现简单，但是，代理类以及真实主题类都需要事先存在，代理类的接口以及代理方法都明确指定，但是如果需要：</p>
<ul>
<li>代理不同的真实主题类</li>
<li>代理一个真实主题类的不同方法</li>
</ul>
<p>需要增加新的代理类，这会导致系统中类的个数大大增加。</p>
<p>这是静态代理最大的缺点，为了减少系统中类的个数，可以采用动态代理。</p>
<h2 id="42-动态代理">4.2 动态代理</h2>
<p>动态代理可以让系统根据实际需要动态创建代理类，同一个代理类可以代理多个不同的真实主题类，而且可以代理不同方法，在Java中实现动态代理需要<code>Proxy</code>类以及<code>InvocationHandler</code>接口。</p>
<h3 id="421-proxy">4.2.1 <code>Proxy</code></h3>
<p><code>Proxy</code>类提供了用于创建动态代理类和实例对象的方法，最常用的方法包括：</p>
<ul>
<li><code>public static Class&lt;?&gt; getProxy(ClassLoader loader,Class&lt;?&gt; ... interfaces)</code>：该方法返回一个<code>Class</code>类型的代理类，在参数中需要提供类加载器并指定代理的接口数组，这个数组应该与真实主题类的接口列表一致</li>
<li><code>public staitc Object newProxyInstance(ClassLoader loader,Class&lt;?&gt; [] interfaces,InvocationHandler h)</code>：返回一个动态创建的代理类实例，第一个参数是类加载器，第二个参数表示代理类实现的接口列表，同理与真实主题的接口列表一致，第三个参数表示<code>h</code>所指派的调用处理程序类</li>
</ul>
<h3 id="422-invocationhandler">4.2.2 <code>InvocationHandler</code></h3>
<p><code>InvocationHandler</code>接口是代理程序类的实现接口，该接口作为代理实例的调用处理者的公共父类，每一个代理类的实例都可以提供一个相关的具体调用者（也就是实现了<code>InvocationHandler</code>的类），该接口中声明以下方法：</p>
<ul>
<li><code>public Object invoke(Object proxy,Method method,Object [] args)</code>：该方法用于处理对代理类实例的方法调用并返回相应结果，当一个代理实例中的业务方法被调用时自动调用该方法。第一个参数表示代理类的实例，第二个参数表示需要代理的方法，第三个参数表示方法的参数数组</li>
</ul>
<p>动态代理类需要在运行时指定所代理的真实主题类的接口，客户端在调用动态代理对象的方法时，调用请求会自动转发到<code>InvocationHandler</code>的<code>invoke</code>方法，由<code>invoke</code>实现对请求的统一处理。</p>
<h3 id="423-实例">4.2.3 实例</h3>
<blockquote>
<p>为一个数据访问Dao层增加方法调用日志，记录每一个方法被调用的时间和结果，使用动态代理模式进行设计。</p>
</blockquote>
<p>设计如下：</p>
<ul>
<li>抽象主题角色：<code>AbstractUserDao</code></li>
<li>真实主题角色：<code>UserDao1</code>+<code>UserDao2</code></li>
<li>请求处理角色：<code>DAOLogHandler</code></li>
<li>代理主题角色：无需手动定义，由<code>Proxy.newInstance()</code>生成</li>
</ul>
<p>首先设计抽象主题角色：</p>
<pre><code class="language-java">interface AbstarctUserDao
{
    void findUserById(String id);
}
</code></pre>
<p>接着创建两个具体类实现该接口：</p>
<pre><code class="language-java">class UserDao1 implements AbstarctUserDao
{
    public void findUserById(String id)
    {
        System.out.println(&quot;1号数据库中查找id&quot; + 
            (&quot;1&quot;.equals(id) ? &quot;成功&quot; : &quot;失败&quot;));
    }
}


class UserDao2 implements AbstarctUserDao
{
    public void findUserById(String id)
    {
        System.out.println(&quot;2号数据库中查找id&quot; + 
            (&quot;2&quot;.equals(id) ? &quot;成功&quot; : &quot;失败&quot;));
    }
}
</code></pre>
<p>接着定义请求处理角色：</p>
<pre><code class="language-java">class DAOLogHandler implements InvocationHandler
{
    private Object object;
    public DAOLogHandler(Object object)
    {
        this.object = object;
    }

    @Override
    public Object invoke(Object proxy,Method method,Object [] args) throws Throwable
    {
        beforeInvoke();
        Object result = method.invoke(object, args);
        postInvoke();
        return result;
    }

    private void beforeInvoke()
    {
        System.out.println(&quot;记录时间&quot;);
    }

    private void postInvoke()
    {
        System.out.println(&quot;记录结果&quot;);
    }
}
</code></pre>
<p>核心是实现了<code>InvocationHandler</code>的<code>invoke</code>方法，该方法在调用抽象主题角色中的方法时自动转发到该方法处理。</p>
<p>也就是说，假设抽象主题角色有<code>A(),B(),C()</code>三个方法，当调用<code>A()</code>时，将调用<code>A()</code>替换掉里面的<code>Object result = method.invoke(object.args)</code>，也就是实际上相当调用如下函数：</p>
<pre><code class="language-java">@Override
public Object invoke(Object proxy,Method method,Object [] args) throws Throwable
{
    beforeInvoke();
    Object result = A(args);
    postInvoke();
    return result;
}
</code></pre>
<p>当调用<code>B()</code>时，相当于调用以下函数：</p>
<pre><code class="language-java">@Override
public Object invoke(Object proxy,Method method,Object [] args) throws Throwable
{
    beforeInvoke();
    Object result = B(args);
    postInvoke();
    return result;
}
</code></pre>
<p>下面是测试客户端的代码：</p>
<pre><code class="language-java">public static void main(String[] args) 
{
    AbstarctUserDao userDao1 = new UserDao1();
    AbstarctUserDao proxy = null;
    InvocationHandler handler = new DAOLogHandler(userDao1);
    proxy = AbstarctUserDao.class.cast(
        Proxy.newProxyInstance(AbstarctUserDao.class.getClassLoader(), new Class[]{AbstarctUserDao.class}, handler)
    );
    proxy.findUserById(&quot;2&quot;);

    AbstarctUserDao userDao2 = new UserDao2();
    handler = new DAOLogHandler(userDao2);
    proxy = AbstarctUserDao.class.cast(
        Proxy.newProxyInstance(AbstarctUserDao.class.getClassLoader(),new Class[]{AbstarctUserDao.class},handler)
    );
    proxy.findUserById(&quot;2&quot;);
}
</code></pre>
<p>输出如下：<br>
<img src="https://img-blog.csdnimg.cn/20200730155711471.png" alt="在这里插入图片描述" loading="lazy"><br>
在测试代码中，代理主题角色由以下语句生成：</p>
<pre><code class="language-java">proxy = AbstarctUserDao.class.cast(
    Proxy.newProxyInstance(AbstarctUserDao.class.getClassLoader(), new Class[]{AbstarctUserDao.class}, handler)
);
</code></pre>
<p>其中<code>cast()</code>方法相当于是对强制类型转换进行了包装，转换前进行了安全检查。</p>
<p><strong>在<code>Proxy.newInstance()</code>中，第一个参数是抽象主题角色的类加载器，第二个参数表示抽象主题角色的所有方法都转发请求到第三个参数中的<code>invoke</code>方法处理。第三个参数是自定义的<code>InvocationHandler</code>，通过构造方法注入抽象主题角色，目的是提供一个抽象主题角色的引用，调用代理方法时自动调用抽象主题角色的方法。</strong></p>
<h1 id="5-远程代理">5 远程代理</h1>
<h2 id="51-概述">5.1 概述</h2>
<p>远程代理是一种常见的代理模式，使得客户端程序可以访问在远程主机（或另一个JVM）上的对象，远程代理可以将网络的细节隐藏起来，使得客户端不必考虑网络的存在。客户端完全可以认为被代理的远程业务对象是本地的而不是远程的，远程代理对象承担了大部分的网络通信工作，并负责对远程业务的方法调用。</p>
<p>远程业务对象在本地主机中有一个代理对象，该代理对象负责对远程业务对象的访问和网络通信，它对于客户端而言是透明的。客户端无须关心实现的具体业务是谁，只需要按照服务接口所定义的方式直接与本地主机中的代理对象交互即可。</p>
<p>在Java中可以通过<code>RMI(Remote Method Invocation,远程方法调用)</code>机制来实现远程代理，它能够实现一个JVM中的对象调用另一个JVM中的对象，下面看一个简单的例子。</p>
<h2 id="52-rmi简例">5.2 RMI简例</h2>
<p>这个简单的例子有以下四个类：</p>
<ul>
<li>接口：<code>Hello</code></li>
<li>接口实现类：<code>HelloImpl</code></li>
<li>服务端：<code>HelloServer</code></li>
<li>客户端：<code>HelloClient</code></li>
</ul>
<p>代码如下：</p>
<pre><code class="language-java">interface Hello extends Remote
{
    String sayHello(String name) throws RemoteException;
}
</code></pre>
<p>一个简单的<code>sayHello</code>方法，注意里面的方法需要声明为抛出<code>RemoteException</code>。</p>
<p>接着是接口实现类：</p>
<pre><code class="language-java">public class HelloImpl extends UnicastRemoteObject implements Hello{
    public HelloImpl() throws RemoteException
    {
        super();
    }
    public String sayHello(String name) throws RemoteException
    {
        System.out.println(&quot;Hello&quot;);
        return &quot;Hello&quot;+name;
    }
}
</code></pre>
<p>实现<code>sayHello</code>方法。</p>
<p>接下来是服务端：</p>
<pre><code class="language-java">public class HelloServer {
    public static void main(String[] args) {
        try {
            Hello hello = new HelloImpl();
            LocateRegistry.createRegistry(8888);
            System.setProperty(&quot;java.rmi.server.hostname&quot;, &quot;127.0.0.1&quot;);
            Naming.bind(&quot;rmi://localhost:8888/hello&quot;, hello);
            System.out.println(&quot;远程绑定对象成功&quot;);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
</code></pre>
<p>服务端中首先注册了一个本地端口<code>8888</code>，接着设置系统属性rmi服务的主机名为本地地址，也就是<code>127.0.0.1</code>，如果是部署在服务器上修改对应ip即可。下一步是通过<code>Naming</code>的静态方法<code>bind</code>绑定该URL到RMI服务器上，并命名为<code>hello</code>。其中<code>rmi:</code>（RMI协议）可以省略。</p>
<p>最后是客户端：</p>
<pre><code class="language-java">public class HelloClient {
    public static void main(String[] args) {
        try
        {
            Hello hello = Hello.class.cast(
                Naming.lookup(&quot;rmi://127.0.0.1:8888/hello&quot;)
            );
            System.out.println(hello.sayHello(&quot;111&quot;));
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }
}
</code></pre>
<p>客户端通过<code>Naming</code>的<code>lookup</code>查找参数URL中对应的远程服务对象<code>hello</code>，找到后返回并强制转换为<code>Hello</code>，接着即可调用远程对象的方法<code>sayHello</code>。</p>
<p>首先运行服务端：<br>
<img src="https://img-blog.csdnimg.cn/20200730170610622.png" alt="在这里插入图片描述" loading="lazy"><br>
接着启动客户端：<br>
<img src="https://img-blog.csdnimg.cn/20200730170843890.png" alt="在这里插入图片描述" loading="lazy"><br>
可以看到来自服务端的结果。</p>
<p>再查看服务端：<br>
<img src="https://img-blog.csdnimg.cn/20200730170953974.png" alt="在这里插入图片描述" loading="lazy"><br>
可以看到这是调用了<code>sayHello</code>的结果。</p>
<h1 id="6-虚拟代理">6 虚拟代理</h1>
<h2 id="61-概述">6.1 概述</h2>
<p>对于一直占用系统资源较多或者加载时间较长的对象，可以给这些对象提供一个虚拟代理。在真实对象创建成功之前虚拟代理扮<br>
演真实对象的替身，当真实对象创建之后，虚拟代理将用户的请求转发给真实对象。</p>
<h2 id="62-适用情况">6.2 适用情况</h2>
<p>以下两种情况可以考虑使用虚拟代理：</p>
<ul>
<li>由于对象本身复杂性或者网络等原因导致一个对象需要较长的加载时间，此时可以用一个加载时间相对较短的代理对象来代表真实对象</li>
<li>当一个对象的加载十分消耗系统资源的时候，也非常适合使用虚拟代理。虚拟代理可以让那些占用大量内存或处理起来非常复杂的对象推迟到使用到它们的时候才创建，而在此之前用一个相对来说占用资源较少的代理对象来代表真实对象</li>
</ul>
<h2 id="63-优缺点">6.3 优缺点</h2>
<ul>
<li>优点：由于应用程序启动时由于不需要创建和装载所有的对象，因此加速了应用程序的启动</li>
<li>缺点：不能保证特定的应用程序对象被创建，在访问这个对象的任何地方都需要提前进行判空操作</li>
</ul>
<h2 id="64-简例">6.4 简例</h2>
<blockquote>
<p>有一批人找老板谈事情，谈事情之前需要先通过老板的助手进行预约，预约这件事只需要助手完成，真正执行预约列表里面的任务时才需要老板出现，使用虚拟代理模式进行设计。</p>
</blockquote>
<p>设计如下：</p>
<ul>
<li>抽象主题角色：<code>Approvable</code></li>
<li>真实主题角色：<code>Boss</code></li>
<li>代理主题角色：<code>Assistant</code></li>
</ul>
<p>代码如下：</p>
<pre><code class="language-java">//抽象主题角色
interface Approvable
{
    void approve();
}
</code></pre>
<p>下一步定义真实主题角色<code>Boss</code>：</p>
<pre><code class="language-java">class Boss implements Approvable
{
    private List&lt;String&gt; orders = new LinkedList&lt;&gt;();
    
    static
    {
        System.out.println(&quot;\n老板来处理了\n&quot;);
    }

    public Boss(List&lt;String&gt; orders)
    {
        this.orders = orders;
    }

    public void addOrder(String order)
    {
        orders.add(order);
    }

    @Override
    public void approve()
    {
        while(orders.size() &gt; 0)
        {
            System.out.println(&quot;老板处理了&lt;&quot;+orders.remove(0)+&quot;&gt;&quot;);
        }
    }
}
</code></pre>
<p>使用<code>List</code>存储待处理的事件，<code>approve</code>表示处理所有的事件。</p>
<p>代理主题角色如下：</p>
<pre><code class="language-java">class Assistant implements Approvable
{
    private List&lt;String&gt; orders = new LinkedList&lt;&gt;();
    private volatile Boss boss;

    public void addOrder(String order)
    {
        if(boss != null)
        {
            System.out.println(&quot;老板将&lt;&quot;+order+&quot;&gt;添加到预约列表&quot;);
            boss.addOrder(order);
        }
        else
        {
            System.out.println(&quot;助手将&lt;&quot;+order+&quot;&gt;添加到预约列表&quot;);
            orders.add(order);
        }
    }

    @Override
    public void approve()
    {
        if(boss == null)
        {
            synchronized(this)
            {
                if(boss == null)
                {
                    boss = new Boss(orders);
                }
            }
        }
        boss.approve();       
    }
}
</code></pre>
<p>在添加事件（<code>addOrder</code>）函数中，首先判断<code>boss</code>是否为<code>null</code>，如果为<code>null</code>表示还没创建<code>老板</code>对象，这时让助手添加到预约列表中去，如果不为<code>null</code>表示已经存在<code>老板</code>对象，直接交由老板加入预约列表。</p>
<p>对于<code>approve</code>方法，首先判断<code>boss</code>是否为<code>null</code>，不为<code>null</code>表示老板能直接处理所有事件。为<code>null</code>表示<code>老板</code>对象还没有创建，新建一个<code>Boss</code>并将待处理的事件作为参数注入<code>boss</code>中。</p>
<p>测试类：</p>
<pre><code class="language-java">public static void main(String[] args) 
{
    Assistant assistant = new Assistant();
    assistant.addOrder(&quot;找老板面试&quot;);
    assistant.addOrder(&quot;找老板借钱&quot;);
    assistant.addOrder(&quot;找老板聊天&quot;);
    assistant.approve();

    assistant.addOrder(&quot;找老板吃饭&quot;);
    assistant.addOrder(&quot;找老板喝酒&quot;);
    assistant.approve();
}
</code></pre>
<p>输出如下：</p>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20200731094308630.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="7-缓存代理">7 缓存代理</h1>
<p>缓存代理为某一个目标操作的结果提供临时的存储空间，以便多个客户端可以共享这些结果，在这里使用缓存代理模式模拟YouTube对使用集成的第三方库下载进行缓存。</p>
<p>设计如下：</p>
<ul>
<li>模拟第三方库：<code>ThirdPartyYouTubeLib</code>+<code>ThirdPartyYouTubeClass</code></li>
<li>模拟视频文件：<code>Video</code></li>
<li>模拟缓存代理：<code>YouTubeCacheProxy</code></li>
<li>模拟下载器：<code>YouTubeDownloader</code></li>
</ul>
<p>首先是第三方类库，通常情况下是没有源码实现的，其中<code>ThirdPartyYouTubeLib</code>是一个接口，并且<code>ThirdPartyYouTubeClass</code>以及<code>YouTubeCacheProxy</code>实现了它，也就是说：</p>
<ul>
<li><code>ThirdPartyYouTubeLib</code>是抽象主题角色</li>
<li><code>ThirdPartyYouTubeClass</code>是真实主题角色</li>
<li><code>YouTubeCacheProxy</code>是代理主题角色</li>
</ul>
<h2 id="71-抽象主题角色">7.1 抽象主题角色</h2>
<p>首先定义抽象主题角色：</p>
<pre><code class="language-java">interface ThirdPartyYouTubeLib
{
    HashMap&lt;String,Video&gt; popularVideos();
    Video getVideo(String videoId);
}
</code></pre>
<p>一个是获取热门视频的方法，一个是根据id获取具体视频的方法。</p>
<h2 id="72-真实主题角色">7.2 真实主题角色</h2>
<pre><code class="language-java">class ThirdPartyYouTubeClass implements ThirdPartyYouTubeLib
{
    private static final String URL = &quot;https://www.youtube.com&quot;;
    @Override
    public HashMap&lt;String,Video&gt; popularVideos()
    {
        connectToServer(URL);
        return getRandomVideos();
    }

    @Override
    public Video getVideo(String id)
    {
        connectToServer(URL+id);
        return getSomeVideo(id);
    }

    private int random(int min,int max)
    {
        return min+(int)(Math.random()*((max-min)+1));
    }

    private void experienceNetworkLatency()
    {
        int randomLatency = random(5, 10);
        for(int i=0;i&lt;randomLatency;++i)
        {
            try
            {
                Thread.sleep(100);
            } 
            catch(InterruptedException e)
            {
                e.printStackTrace();
            }
        }
    }

    private void connectToServer(String url)
    {
        System.out.println(&quot;连接到 &quot; + url + &quot; ...&quot;);
        experienceNetworkLatency();
        System.out.println(&quot;连接成功!\n&quot;);
    }

    private HashMap&lt;String,Video&gt; getRandomVideos()
    {
        System.out.println(&quot;正在下载热门视频&quot;);
        experienceNetworkLatency();
        HashMap&lt;String,Video&gt; map = new HashMap&lt;&gt;();
        map.put(&quot;1111111&quot;,new Video(&quot;1111&quot;,&quot;1111.mp4&quot;));
        map.put(&quot;2222222&quot;,new Video(&quot;2222&quot;,&quot;2222.avi&quot;));
        map.put(&quot;3333333&quot;,new Video(&quot;3333&quot;,&quot;3333.mov&quot;));
        map.put(&quot;4444444&quot;,new Video(&quot;4444&quot;,&quot;4444.mkv&quot;));
        System.out.println(&quot;下载完成!\n&quot;);
        return map;
    }

    private Video getSomeVideo(String id)
    {
        System.out.println(&quot;正在下载id为&quot;+id+&quot;的视频&quot;);
        experienceNetworkLatency();
        System.out.println(&quot;下载完成!\n&quot;);
        return new Video(id,&quot;title&quot;);
    }
}
</code></pre>
<p>获取热门视频或者某一个视频时，进行了一个模拟连接到服务器的操作，首先输出提示<code>连接到xxx</code>，接着模拟了网络延迟，最后提示下载完成并返回相应的视频。</p>
<h2 id="73-代理主题角色">7.3 代理主题角色</h2>
<pre><code class="language-java">class YouTubeCacheProxy implements ThirdPartyYouTubeLib
{
    private ThirdPartyYouTubeLib youtubeService = new ThirdPartyYouTubeClass();

    private HashMap&lt;String,Video&gt; cachePopular = new HashMap&lt;&gt;();
    private HashMap&lt;String,Video&gt; cacheAll = new HashMap&lt;&gt;();

    @Override
    public HashMap&lt;String,Video&gt; popularVideos()
    {
        if(cachePopular.isEmpty())
        {
            cachePopular = youtubeService.popularVideos();
        }
        else
        {
            System.out.println(&quot;从缓存检索中热门视频&quot;);            
        }
        return cachePopular;
    }

    @Override
    public Video getVideo(String id)
    {
        Video video = cacheAll.get(id);
        if(video == null)
        {
            video = youtubeService.getVideo(id);
            cacheAll.put(id,video);
        }
        else
        {
            System.out.println(&quot;从缓存中检索id为&quot;+id+&quot;的视频&quot;);
        }
        return video;
    }

    public void reset()
    {
        cachePopular.clear();
        cacheAll.clear();
    }
}
</code></pre>
<p>这里的缓存代理角色其实就是在调用真实主题角色的获取视频方法之前，首先判断是否存在缓存，存在的话直接从缓存中获取，不存在的话首先调用获取视频方法并存储在缓存中，下次获取时从缓存中获取。</p>
<h2 id="74-其他">7.4 其他</h2>
<pre><code class="language-java">class Video
{
    private String id;
    private String title;
    private String data;
    public Video(String id,String title)
    {
        this.id = id;
        this.title = title;
    }
    //getter+setter...
}

class YouTubeDownloader
{
    private ThirdPartyYouTubeLib api;

    public YouTubeDownloader(ThirdPartyYouTubeLib api)
    {
        this.api = api;
    }

    public boolean useCacheProxy()
    {
        return api instanceof YouTubeCacheProxy;
    }

    public void renderVideoPage(String id)
    {
        Video video = api.getVideo(id);
        System.out.println(&quot;\n-------------------------------------------&quot;);
        System.out.println(&quot;ID:&quot;+video.getId());
        System.out.println(&quot;标题:&quot;+video.getTitle());
        System.out.println(&quot;数据:&quot;+video.getData());
        System.out.println(&quot;\n-------------------------------------------&quot;);
    }

    public void renderPopularVideos()
    {
        HashMap&lt;String,Video&gt; list = api.popularVideos();
        System.out.println(&quot;\n-------------------------------------------&quot;);
        System.out.println(&quot;热门视频&quot;);
        list.forEach((k,v)-&gt;System.out.println(&quot;ID:&quot;+v.getId()+&quot;\t标题:&quot;+v.getTitle()));
        System.out.println(&quot;\n-------------------------------------------&quot;);
    }
}
</code></pre>
<h2 id="75-测试">7.5 测试</h2>
<pre><code class="language-java">public class Test
{
    public static void main(String[] args) 
    {
        YouTubeDownloader naiveDownloader = new YouTubeDownloader(new ThirdPartyYouTubeClass());
        YouTubeDownloader smartDownloader = new YouTubeDownloader(new YouTubeCacheProxy());

        long navie = test(naiveDownloader);
        long smart = test(smartDownloader);
        System.out.println(&quot;缓存代理节约的时间:&quot;+(navie-smart)+&quot;ms&quot;);
    }

    private static long test(YouTubeDownloader downloader)
    {
        long startTime = System.currentTimeMillis();
        downloader.renderPopularVideos();
        downloader.renderVideoPage(&quot;1111&quot;);
        downloader.renderPopularVideos();
        downloader.renderVideoPage(&quot;2222&quot;);
        downloader.renderVideoPage(&quot;3333&quot;);
        downloader.renderVideoPage(&quot;4444&quot;);
        long estimatedTime = System.currentTimeMillis() - startTime;
        System.out.println(downloader.useCacheProxy() ? &quot;使用缓存运行时间:&quot; : &quot;不使用缓存运行时间:&quot;);
        System.out.println(estimatedTime+&quot;ms\n&quot;);
        return estimatedTime;
    }
}
</code></pre>
<p>模拟了两个下载器，一个使用原生下载，一个使用缓存代理下载，输出如下：</p>
<pre><code class="language-bash">连接到 https://www.youtube.com ...
连接成功!

正在下载热门视频
下载完成!


-------------------------------------------
热门视频
ID:4444 标题:4444.mkv
ID:2222 标题:2222.avi
ID:3333 标题:3333.mov
ID:1111 标题:1111.mp4

-------------------------------------------
连接到 https://www.youtube.com1111 ...
连接成功!

正在下载id为1111的视频
下载完成!


-------------------------------------------
ID:1111
标题:title
数据:null

-------------------------------------------
连接到 https://www.youtube.com ...
连接成功!

正在下载热门视频
下载完成!


-------------------------------------------
热门视频
ID:4444 标题:4444.mkv
ID:2222 标题:2222.avi
ID:3333 标题:3333.mov
ID:1111 标题:1111.mp4

-------------------------------------------
连接到 https://www.youtube.com2222 ...     
连接成功!

正在下载id为2222的视频
下载完成!


-------------------------------------------
ID:2222
标题:title
数据:null

-------------------------------------------
连接到 https://www.youtube.com3333 ...     
连接成功!

正在下载id为3333的视频
下载完成!


-------------------------------------------
ID:3333
标题:title
数据:null

-------------------------------------------
连接到 https://www.youtube.com4444 ...     
连接成功!

正在下载id为4444的视频
下载完成!


-------------------------------------------
ID:4444
标题:title
数据:null

-------------------------------------------
不使用缓存运行时间:
9312ms

连接到 https://www.youtube.com ...
连接成功!

正在下载热门视频
下载完成!


-------------------------------------------
热门视频
ID:4444 标题:4444.mkv
ID:2222 标题:2222.avi
ID:3333 标题:3333.mov
ID:1111 标题:1111.mp4

-------------------------------------------
连接到 https://www.youtube.com1111 ...
连接成功!

正在下载id为1111的视频
下载完成!


-------------------------------------------
ID:1111
标题:title
数据:null

-------------------------------------------
从缓存检索中热门视频

-------------------------------------------
热门视频
ID:4444 标题:4444.mkv
ID:2222 标题:2222.avi
ID:3333 标题:3333.mov
ID:1111 标题:1111.mp4

-------------------------------------------
连接到 https://www.youtube.com2222 ...
连接成功!

正在下载id为2222的视频
下载完成!


-------------------------------------------
ID:2222
标题:title
数据:null

-------------------------------------------
连接到 https://www.youtube.com3333 ...
连接成功!

正在下载id为3333的视频
下载完成!


-------------------------------------------
ID:3333
标题:title
数据:null

-------------------------------------------
连接到 https://www.youtube.com4444 ...
连接成功!

正在下载id为4444的视频
下载完成!


-------------------------------------------
ID:4444
标题:title
数据:null

-------------------------------------------
使用缓存运行时间:
7611ms

缓存代理节约的时间:1701ms
</code></pre>
<p>可以看到缓存代理是能节省时间的，除了第一次获取视频外，随后的获取视频都是从缓存中直接提取。</p>
<h1 id="8-主要优点">8 主要优点</h1>
<ul>
<li>降低耦合度：代理模式能够协调调用者以及被调用者，一定程度上降低了系统的耦合度</li>
<li>灵活可扩展：客户端可以针对抽象主题角色进行编程，增加和更换代理类无须修改源码，符合OCP，系统具有较好的灵活性和可扩展性</li>
<li>提高整体效率（远程代理）：远程代理为位于两个不同的地址空间对象的访问提供了一种实现机制，可以将一些消耗资源较多的对象和操作移至性能更好的计算机上，提高系统整体运行效率</li>
<li>节约开销（虚拟代理）：虚拟代理通过一个消耗资源较少的对象来代表一个消耗资源较多的对象，可以在一定程度上节省系统的运行开销</li>
<li>控制权限（保护代理）：保护代理可以控制一个对象的访问权限，为不同用户提供不同级别的使用权限</li>
</ul>
<h1 id="9-主要缺点">9 主要缺点</h1>
<ul>
<li>速度变慢：由于在客户端以及真实主题之间增加了代理对象，因此可能会造成处理速度变慢，比如保护代理</li>
<li>实现复杂：实现代理模式需要额外的操作，有些代理模式其实很复杂，比如远程代理</li>
</ul>
<h1 id="10-适用场景">10 适用场景</h1>
<ul>
<li>客户端需要访问远程主机中的对象，使用远程代理</li>
<li>需要一个消耗资源较少的对象来代表资源较多的对象时，使用虚拟代理</li>
<li>需要控制访问权限，使用保护代理</li>
<li>需要为一个频繁访问的操作结果提供临时存储空间，使用缓存代理</li>
<li>需要为一个对象的访问（引用）提供额外的操作时，使用智能引用代理</li>
</ul>
<h1 id="11-总结">11 总结</h1>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20200731145441730.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p><strong>如果觉得文章好看，欢迎点赞。</strong></p>
<p><strong>同时欢迎关注微信公众号：氷泠之路。</strong></p>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/20200711111358683.gif" alt="在这里插入图片描述" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第42期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-42-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-42-qi/">
        </link>
        <updated>2020-07-30T15:24:13.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1595863733090.jpg" alt="" loading="lazy"></figure>
<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>我是一条酸菜鱼，又酸又菜，还多余。</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>《吉尼斯世界纪录》这本书持有在公共图书馆内最经常被盗的书这一记录。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>一番荷芰生池沼，槛前风送馨香。<br>
——尹鹗《临江仙·一番荷芰生池沼》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>世间本无公平可言，除非公平掌握在自己手中。</p>
</blockquote>
<h1 id="每日音乐">每日音乐</h1>
<blockquote>
<p><a href="https://music.163.com/#/song?id=174956">坏女孩-徐良/小凌</a></p>
</blockquote>
<blockquote>
<p>I miss you<br>
Now<br>
don't you love me<br>
Sorry I'm so sorry</p>
</blockquote>
<blockquote>
<p>那时我放开了你的手<br>
转过身只剩了保重<br>
你话都没说却哭了很久很久<br>
我喜欢坏坏的女友<br>
我喜欢刺激的感受<br>
你单纯太过多余了那些温柔</p>
</blockquote>
<blockquote>
<p>你消失在无名大街<br>
从此就没有再见面<br>
好长的时间再没有你的来电<br>
在后来酒吧的房间<br>
舞池里跳动着音乐<br>
熟悉的侧脸喂</p>
</blockquote>
<blockquote>
<p>迷人的笑脸吸引视线<br>
慵懒的靠在陌生的肩<br>
黑色的眼线你的指间<br>
有一点轻蔑</p>
</blockquote>
<blockquote>
<p>在谁的怀中会有感觉<br>
被爱的深夜我在想念<br>
明明是为你才会改变<br>
却回不到从前</p>
</blockquote>
<blockquote>
<p>那时我放开了你的手<br>
转过身只剩了保重<br>
你话都没说却哭了很久很久<br>
我喜欢坏坏的女友<br>
我喜欢刺激的感受<br>
你单纯太过多余了那些温柔</p>
</blockquote>
<blockquote>
<p>你消失在无名大街<br>
从此就没有再见面<br>
好长的时间再没有你的来电<br>
在后来酒吧的房间<br>
舞池里跳动着音乐<br>
熟悉的侧脸喂</p>
</blockquote>
<blockquote>
<p>迷人的笑脸吸引视线<br>
慵懒的靠在陌生的肩<br>
黑色的眼线你的指间<br>
有一点轻蔑</p>
</blockquote>
<blockquote>
<p>在谁的怀中会有感觉<br>
被爱的深夜我在想念<br>
明明是为你才会改变<br>
却回不到从前</p>
</blockquote>
<blockquote>
<p>然后我安静的发现<br>
两个人已经没有任何语言<br>
曾经你纯真的永远<br>
让我不顾一切开始怀念<br>
迷人的笑脸吸引视线<br>
慵懒的靠在陌生的肩<br>
黑色的眼线你的指间<br>
有一点轻蔑</p>
</blockquote>
<blockquote>
<p>在谁的怀中会有感觉<br>
被爱的深夜我在想念<br>
明明是为你才会改变<br>
却回不到从前</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第41期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-41-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-41-qi/">
        </link>
        <updated>2020-07-29T15:22:47.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1595863713502.jpg" alt="" loading="lazy"></figure>
<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>为什么你能智障一样活着，而我却不可以。</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>螳螂虾（皮皮虾）挥动爪子的速度极好，甚至可以令周围的水沸腾并制造一道闪光。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>休言女子非英物，夜夜龙泉壁上鸣。<br>
——秋瑾《鹧鸪天·祖国沉沦感不禁》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>我今天就要带她走，我看谁敢拦我！</p>
</blockquote>
<h1 id="每日音乐">每日音乐</h1>
<blockquote>
<p><a href="https://music.163.com/#/song?id=165361">不分手的恋爱-汪苏泷</a></p>
</blockquote>
<blockquote>
<p>不知不觉不问<br>
不痛不痒<br>
多少的时光<br>
不确定的某个<br>
夜晚小巷<br>
泪悄悄流淌<br>
街边天气微凉<br>
淡淡月光<br>
我沿路哼唱<br>
找寻我们一直<br>
找不到的<br>
缘分被捆绑</p>
</blockquote>
<blockquote>
<p>感觉不到你为我坚强<br>
感觉得到你对我说谎<br>
我安静听着肖邦<br>
用维也纳忧伤</p>
</blockquote>
<blockquote>
<p>你的爱被埋葬<br>
恨被收藏<br>
痛应该原谅<br>
我的爱不用讲<br>
恨不用想<br>
思念在发烫<br>
看着你的脸庞<br>
背着行囊<br>
说要去远方<br>
谁还记得那年我拉着你说<br>
爱永远一样</p>
</blockquote>
<blockquote>
<p>我也搞不懂为什么那么多人真心相爱<br>
到最后都会变成两个人分开的无奈<br>
当初我们说过要谈一场永远不分手的恋爱<br>
是否今天这句话竟变成我们之间的阻碍<br>
不想太多 不想太多 也许会明白的更多<br>
不想再说 不想再说 就让我们彼此沉默<br>
现在我们终于明白 结局却也无法更改<br>
这场不分手的恋爱 我想结局注定失败</p>
</blockquote>
<blockquote>
<p>不知不觉不问 不痛不痒<br>
多少的时光<br>
不确定的某个 夜晚小巷<br>
泪悄悄流淌<br>
街边天气微凉 淡淡月光<br>
我沿路哼唱<br>
找寻我们一直 找不到的<br>
缘分被捆绑</p>
</blockquote>
<blockquote>
<p>感觉不到你为我坚强<br>
感觉得到你多我说谎<br>
我安静听着肖邦<br>
用维也纳忧伤</p>
</blockquote>
<blockquote>
<p>你的爱被埋葬<br>
恨被收藏<br>
痛应该原谅<br>
我的爱不用讲<br>
恨不用想<br>
思念在发烫<br>
看着你的脸庞<br>
背着行囊<br>
说要去远方<br>
谁还记得那年我拉着你说<br>
爱永远一样</p>
</blockquote>
<blockquote>
<p>你的爱被埋葬<br>
恨被收藏<br>
痛应该原谅<br>
我的爱不用讲<br>
恨不用想<br>
思念在发烫<br>
看着你的脸庞<br>
背着行囊<br>
说要去远方<br>
谁还记得那年我拉着你说<br>
爱永远一样</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[设计模式学习笔记（六）：抽象工厂模式]]></title>
        <id>https://2293736867.github.io/post/she-ji-mo-shi-xue-xi-bi-ji-liu-chou-xiang-gong-han-mo-shi/</id>
        <link href="https://2293736867.github.io/post/she-ji-mo-shi-xue-xi-bi-ji-liu-chou-xiang-gong-han-mo-shi/">
        </link>
        <updated>2020-07-29T14:38:45.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#1-%E6%A6%82%E8%BF%B0">1 概述</a>
<ul>
<li><a href="#11-%E5%BC%95%E8%A8%80">1.1 引言</a>
<ul>
<li><a href="#111-%E4%BA%A7%E5%93%81%E7%AD%89%E7%BA%A7%E7%BB%93%E6%9E%84">1.1.1 产品等级结构</a></li>
<li><a href="#112-%E4%BA%A7%E5%93%81%E6%97%8F">1.1.2 产品族</a></li>
</ul>
</li>
<li><a href="#12-%E5%AE%9A%E4%B9%89">1.2 定义</a></li>
<li><a href="#13-%E7%BB%93%E6%9E%84%E5%9B%BE">1.3 结构图</a></li>
<li><a href="#14-%E8%A7%92%E8%89%B2">1.4 角色</a></li>
</ul>
</li>
<li><a href="#2-%E5%85%B8%E5%9E%8B%E5%AE%9E%E7%8E%B0">2 典型实现</a>
<ul>
<li><a href="#21-%E6%AD%A5%E9%AA%A4">2.1 步骤</a></li>
<li><a href="#22-%E6%8A%BD%E8%B1%A1%E4%BA%A7%E5%93%81">2.2 抽象产品</a></li>
<li><a href="#23-%E5%85%B7%E4%BD%93%E4%BA%A7%E5%93%81">2.3 具体产品</a></li>
<li><a href="#24-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82">2.4 抽象工厂</a></li>
<li><a href="#25-%E5%85%B7%E4%BD%93%E5%B7%A5%E5%8E%82">2.5 具体工厂</a></li>
<li><a href="#26-%E5%AE%A2%E6%88%B7%E7%AB%AF">2.6 客户端</a></li>
</ul>
</li>
<li><a href="#3-%E5%AE%9E%E4%BE%8B">3 实例</a></li>
<li><a href="#4-%E6%9C%89%E5%85%B3ocp">4 有关OCP</a></li>
<li><a href="#5-%E4%B8%BB%E8%A6%81%E4%BC%98%E7%82%B9">5 主要优点</a></li>
<li><a href="#6-%E4%B8%BB%E8%A6%81%E7%BC%BA%E7%82%B9">6 主要缺点</a></li>
<li><a href="#7-%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF">7 适用场景</a></li>
<li><a href="#8-%E6%80%BB%E7%BB%93">8 总结</a></li>
</ul>
</p>
<h1 id="1-概述">1 概述</h1>
<h2 id="11-引言">1.1 引言</h2>
<p>在了解抽象工厂模式之前，首先来了解一下两个术语：</p>
<ul>
<li>产品等级结构</li>
<li>产品族</li>
</ul>
<h3 id="111-产品等级结构">1.1.1 产品等级结构</h3>
<p>产品等级结构也就是产品的继承结构，例如一个抽象类是电视机，子类有不同品牌的电视机，比如海尔电视机，海信电视机，TCL电视机，而抽象电视机与具体品牌的电视机之间构成了一个产品等级结构，抽象电视机是父类，而具体品牌的电视机是子类。</p>
<h3 id="112-产品族">1.1.2 产品族</h3>
<p>产品族是指由一个同一个工厂产生的位于不同产品等级结构中的一组产品，例如海尔电器工厂生产的海尔电视机，海尔电冰箱。海尔电视机位于电视机产品等级结构中，海尔电冰箱位于电冰箱产品等级结构中，海尔电视机与海尔电冰箱共同构成了一个产品族。</p>
<p>两者示意图如下：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200716202932265.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>抽象工厂模式与工厂方法模式最大的区别在于，工厂方法模式是针对一个产品等级结构，而抽象工厂模式需要面对多个产品等级结构，一个工厂等级结构可以负责多个不同产品等级结构中的产品对象的创建。</p>
<p>每一个具体工厂可以生产属于一个产品族的所有产品，所生产的产品又位于不同的产品等级结构中，在上图的例子中，如果使用工厂方法模式需要12个具体工厂类，而使用抽象工厂模式只需要4个工厂类，大大减少了系统中类的个数。</p>
<h2 id="12-定义">1.2 定义</h2>
<p><strong>抽象工厂模式：提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。</strong></p>
<p>抽象工厂模式又叫Kit模式，是一种对象创建型模式。</p>
<h2 id="13-结构图">1.3 结构图</h2>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200716202048426.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="14-角色">1.4 角色</h2>
<ul>
<li><strong><code>AbstractFactory</code>（抽象工厂）：声明了一组用于创建一族产品的方法，每一个方法对应一种产品</strong></li>
<li><strong><code>ConcreteFactory</code>（具体工厂）：实现了在抽象工厂中声明的创建产品的方法，生成一组具体产品，这些产品构成了一个产品族，每一个产品都位于某个产品的等级结构中</strong></li>
<li><strong><code>AbstractProduct</code>（抽象产品）：为每种产品声明接口，在抽象产品中声明了产品所具有的业务方法</strong></li>
<li><strong><code>ConcreteProduct</code>（具体产品）：定义具体工厂生产的具体对象，实现在抽象层产品接口中声明的业务方法</strong></li>
</ul>
<h1 id="2-典型实现">2 典型实现</h1>
<h2 id="21-步骤">2.1 步骤</h2>
<ul>
<li>确定产品等级结构：也就是定义抽象产品，抽象产品的数量就是产品等级结构的数量，为抽象产品声明产品所具有的业务方法</li>
<li>确定产品族：也就是定义具体产品，对于每个抽象产品，有多少个子类就有多少个产品族，具体产品类实现或继承抽象产品，实现其中的业务方法</li>
<li>定义抽象工厂：定义为接口/抽象类，声明创建一族产品的方法，根据产品等级结构数量确定方法数量</li>
<li>定义具体工厂：实现/继承抽象工厂，实现其中的业务方法</li>
</ul>
<h2 id="22-抽象产品">2.2 抽象产品</h2>
<p>这里简单定义两个抽象产品接口，也就是假设有两个产品等级结构（A与B）：</p>
<pre><code class="language-java">interface ProductA
{
    void methodA();
}

interface ProductB
{
    void methodB();
}
</code></pre>
<h2 id="23-具体产品">2.3 具体产品</h2>
<p>声明四个具体产品，假设每种产品由分别两个工厂生产，也就是假设有两个产品族：</p>
<pre><code class="language-java">class ProductA1 implements ProductA
{
    public void methodA()
    {
        System.out.println(&quot;Product A1&quot;);
    }
}

class ProductA2 implements ProductA
{
    public void methodA()
    {
        System.out.println(&quot;Product A2&quot;);
    }
}

class ProductB1 implements ProductB
{
    public void methodB()
    {
        System.out.println(&quot;Product B1&quot;);
    }
}

class ProductB2 implements ProductB
{
    public void methodB()
    {
        System.out.println(&quot;Product B2&quot;);
    }
}
</code></pre>
<h2 id="24-抽象工厂">2.4 抽象工厂</h2>
<p>由于只有两个产品等级结构（A与B），这里的抽象工厂只需要两个方法，分别表示生产这两种产品：</p>
<pre><code class="language-java">interface Factory
{
    ProductA getProductA();
    ProductB getProductB();
}
</code></pre>
<h2 id="25-具体工厂">2.5 具体工厂</h2>
<p>由于上面已经假设为两个产品族，因此这里需要两个具体工厂：</p>
<pre><code class="language-java">//产品族Factory1
class Factory1 implements Factory
{
    public ProductA getProductA()
    {
        return new ProductA1();
    }

    public ProductB getProductB()
    {
        return new ProductB1();
    }
}

//产品族Factory2
class Factory2 implements Factory
{
    public ProductA getProductA()
    {
        return new ProductA2();
    }

    public ProductB getProductB()
    {
        return new ProductB2();
    }
}
</code></pre>
<h2 id="26-客户端">2.6 客户端</h2>
<pre><code class="language-java">public static void main(String[] args) {
    Factory factory = new Factory1();
    ProductA productA = factory.getProductA();
    ProductB productB = factory.getProductB();
    productA.methodA();
    productB.methodB();

    factory = new Factory2();
    productA = factory.getProductA();
    productB = factory.getProductB();
    productA.methodA();
    productB.methodB();
}
</code></pre>
<p>客户端针对抽象工厂以及抽象产品编程，只需要知道工厂类名即可获取同一工厂（同一产品族）不同产品等级结构的产品。</p>
<h1 id="3-实例">3 实例</h1>
<blockquote>
<p>界面皮肤库设计：开发一套皮肤库，用户可以通过菜单选择皮肤，不同的皮肤提供视觉不同的按钮，文本框等UI元素，使用抽象工厂模式进行设计。</p>
</blockquote>
<p>这里简单起见假设开发两套皮肤：</p>
<ul>
<li>春季皮肤（SpringSkin）</li>
<li>夏季皮肤（SummerSkin）</li>
</ul>
<p>每套皮肤具有以下UI元素：</p>
<ul>
<li>按钮（Button）</li>
<li>文本框（TextField）</li>
<li>组合框（ComboBox）</li>
</ul>
<p>具体设计如下：</p>
<ul>
<li>抽象产品：<code>Button</code>+<code>TextField</code>+<code>ComboBox</code></li>
<li>具体产品：<code>SpringButton</code>+<code>SummerButton</code>+<code>SpringTextField</code>+<code>SummerTextField</code>+<code>SpringComboBox</code>+<code>SummerComboBox</code></li>
<li>抽象工厂：<code>SkinFactory</code></li>
<li>具体工厂：<code>SpringSkinFactory</code>+<code>SummerSkinFactory</code></li>
</ul>
<p>先设计产品类：</p>
<pre><code class="language-java">//抽象产品
interface Button
{
    void display();
}

//具体产品
class SpringButton implements Button
{
    public void display()
    {
        System.out.println(&quot;春季皮肤按钮&quot;);
    }
}

//具体产品
class SummerButton implements Button
{
    public void display()
    {
        System.out.println(&quot;夏季皮肤按钮&quot;);
    }
}

//抽象产品
interface TextField
{
    void display();
}

//具体产品
class SpringTextField implements TextField
{
    public void display()
    {
        System.out.println(&quot;春季皮肤文本框&quot;);
    }
}

//具体产品
class SummerTextField implements TextField
{
    public void display()
    {
        System.out.println(&quot;夏季皮肤文本框&quot;);
    }
}

//抽象产品
interface ComboBox
{
    void display();
}

//具体产品
class SpringComboBox implements ComboBox
{
    public void display()
    {
        System.out.println(&quot;春季皮肤组合框&quot;);
    }
}

//具体产品
class SummerComboBox implements ComboBox
{
    public void display()
    {
        System.out.println(&quot;夏季皮肤组合框&quot;);
    }
}
</code></pre>
<p>接着是工厂类：</p>
<pre><code class="language-java">//抽象工厂
interface SkinFactory
{
    Button createButton();
    TextField createTextField();
    ComboBox createComboBox();
}

//具体工厂
class SpringSkinFactory implements SkinFactory
{
    public Button createButton()
    {
        return new SpringButton();
    }

    public TextField createTextField()
    {
        return new SpringTextField();
    }

    public ComboBox createComboBox()
    {
        return new SpringComboBox();
    }
}

//具体工厂
class SummerSkinFactory implements SkinFactory
{
    public Button createButton()
    {
        return new SummerButton();
    }

    public TextField createTextField()
    {
        return new SummerTextField();
    }

    public ComboBox createComboBox()
    {
        return new SummerComboBox();
    }
}
</code></pre>
<p>测试：</p>
<pre><code class="language-java">public class Test
{
    public static void main(String[] args) {
        SkinFactory factory = new SpringSkinFactory();
        factory.createButton().display();
        factory.createTextField().display();
        factory.createComboBox().display();
        
        factory = new SummerSkinFactory();
        factory.createButton().display();
        factory.createTextField().display();
        factory.createComboBox().display();
    }
}
</code></pre>
<h1 id="4-有关ocp">4 有关OCP</h1>
<p>虽然使用抽象工厂模式增加新的皮肤界面非常方便，但是如果增加一个UI元素，会修改大量的代码，需要修改抽象工厂以及每一个具体工厂类，也就是说，不能够在符合OCP（开放闭合原则）的前提下增加新的组件。</p>
<p>这是抽象工厂模式的最大缺点，<strong>尽管增加新的产品族（这里是皮肤）非常方便，但是增加新的产品等级结构（这里是UI元素）很麻烦。抽象工厂模式的这种性质叫做开闭原则的倾斜性</strong>。因此设计人员在设计之初需要全面考虑，否则新增产品结构会导致大量的代码修改。</p>
<h1 id="5-主要优点">5 主要优点</h1>
<ul>
<li>隔离：抽象工厂模式隔离了具体类的生成，使得客户并不需要知道什么被创建。由于这种隔离更换一个具体工厂类变得很相对容易，所有的具体工厂都实现了在抽象工厂中声明的那些公共接口，因此只需改变具体工厂的实例，就可以在某种程度上改变整个软件系统的行为</li>
<li>同一产品族对象：当一个产品族中的多个对象被设计成一起工作时，它能够保证客户端始终只使用同一个产品族中的对象</li>
<li>增加产品族容易：增加新的产品族容易，无须修改已有系统，符合OCP</li>
</ul>
<h1 id="6-主要缺点">6 主要缺点</h1>
<p>主要缺点是增加新的产品等级结构麻烦，需要对系统进行大量的修改，违背了OCP。</p>
<h1 id="7-适用场景">7 适用场景</h1>
<ul>
<li>一个系统不当应依赖与产品类实例如何被创建，组合和表达细节，这对于所有类型的工厂模式都是很重要的，用户无须关心对象的创建过程，将对象的创建以及使用解耦</li>
<li>系统中有多于一个的产品族，而每次只使用其中某一产品族</li>
<li>属于同一个产品族的产品将在一起使用，这一约束必须在系统的设计中体现出来。同一个产品族中的产品可以是没有任何关系的对象，但是它们都具有一些共同的约束。例如同一皮肤下的按钮以及文本框，按钮与文本框没有直接联系，但是都属于同一皮肤</li>
<li>产品等级结构稳定，设计完成后，不会向系统中增加新的产品等级结构或者删除已有的产品等级结构</li>
</ul>
<h1 id="8-总结">8 总结</h1>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20200728225937668.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p><strong>如果觉得文章好看，欢迎点赞。</strong></p>
<p><strong>同时欢迎关注微信公众号：氷泠之路。</strong></p>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20200711111358683.gif" alt="在这里插入图片描述" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[设计模式学习笔记（五）：工厂方法模式]]></title>
        <id>https://2293736867.github.io/post/she-ji-mo-shi-xue-xi-bi-ji-wu-gong-han-fang-fa-mo-shi/</id>
        <link href="https://2293736867.github.io/post/she-ji-mo-shi-xue-xi-bi-ji-wu-gong-han-fang-fa-mo-shi/">
        </link>
        <updated>2020-07-29T14:37:18.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#1-%E6%A6%82%E8%BF%B0">1 概述</a>
<ul>
<li><a href="#11-%E5%BC%95%E8%A8%80">1.1 引言</a></li>
<li><a href="#12-%E5%AE%9A%E4%B9%89">1.2 定义</a></li>
<li><a href="#13-%E7%BB%93%E6%9E%84%E5%9B%BE">1.3 结构图</a></li>
<li><a href="#14-%E8%A7%92%E8%89%B2">1.4 角色</a></li>
</ul>
</li>
<li><a href="#2-%E5%85%B8%E5%9E%8B%E5%AE%9E%E7%8E%B0">2 典型实现</a>
<ul>
<li><a href="#21-%E6%AD%A5%E9%AA%A4">2.1 步骤</a></li>
<li><a href="#22-%E6%8A%BD%E8%B1%A1%E4%BA%A7%E5%93%81">2.2 抽象产品</a></li>
<li><a href="#23-%E5%85%B7%E4%BD%93%E4%BA%A7%E5%93%81">2.3 具体产品</a></li>
<li><a href="#24-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82">2.4 抽象工厂</a></li>
<li><a href="#25-%E5%85%B7%E4%BD%93%E5%B7%A5%E5%8E%82">2.5 具体工厂</a></li>
<li><a href="#26-%E5%AE%A2%E6%88%B7%E7%AB%AF">2.6 客户端</a></li>
</ul>
</li>
<li><a href="#3-%E5%AE%9E%E4%BE%8B">3 实例</a></li>
<li><a href="#4-%E9%9A%90%E8%97%8F">4 隐藏</a></li>
<li><a href="#5-%E4%B8%BB%E8%A6%81%E4%BC%98%E7%82%B9">5 主要优点</a></li>
<li><a href="#6-%E4%B8%BB%E8%A6%81%E7%BC%BA%E7%82%B9">6 主要缺点</a></li>
<li><a href="#7-%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF">7 适用场景</a></li>
<li><a href="#8-%E6%80%BB%E7%BB%93">8 总结</a></li>
</ul>
</p>
<h1 id="1-概述">1 概述</h1>
<h2 id="11-引言">1.1 引言</h2>
<p>尽管简单工厂模式实现了对象的创建和使用分离，但是仍然存在以下两个问题：</p>
<ul>
<li>工厂类过于庞大，包含了大量的判断代码，导致维护和测试难度增大</li>
<li>系统扩展不灵活，如果增加了新的产品类型，必须修改静态工厂方法的业务逻辑，违反了开闭原则</li>
<li>具体产品与工厂类之间的耦合度高，严重影响了系统的灵活性和扩展性</li>
</ul>
<p>一个更好的办法是使用工厂方法模式。</p>
<h2 id="12-定义">1.2 定义</h2>
<p><strong>工厂方法模式：定义一个用于创建对象的接口，让子类决定将哪一个类实例化。</strong></p>
<p>工厂方法又简称工厂模式或虚拟构造器模式或多态工厂模式，让一个类的实例化延迟到其子类，是一种类创建型模式。</p>
<h2 id="13-结构图">1.3 结构图</h2>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200715162916816.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="14-角色">1.4 角色</h2>
<ul>
<li><strong><code>Product</code>（抽象产品）：定义产品的接口，是工厂方法模式所创建的超类型，也就是产品对象的公共父类</strong></li>
<li><strong><code>ConcreteProduct</code>（具体产品）：实现了抽象产品接口，某种类型的具体产品由专门的具体工厂创建，具体工厂与具体产品一一对应</strong></li>
<li><strong><code>Factory</code>（抽象工厂）：在抽象工厂类中，声明了工厂方法，用于返回一个产品。抽象工厂是工厂方法模式的核心，所有创建对象的工厂类都必须实现该接口</strong></li>
<li><strong><code>ConcreteFactory</code>（具体工厂）：它是抽象工厂类的子类，实现了抽象工厂中定义的工厂方法，并可由客户端调用，返回一个具体产品类的实例</strong></li>
</ul>
<h1 id="2-典型实现">2 典型实现</h1>
<h2 id="21-步骤">2.1 步骤</h2>
<ul>
<li>定义抽象产品：定义为接口/抽象类，是所有具体产品的父类</li>
<li>定义具体产品：实现/继承抽象产品，一个类对应与一个具体产品</li>
<li>定义抽象工厂：定义为接口/抽象类，声明工厂方法，但不需要实现，在运行时确定具体工厂</li>
<li>定义具体工厂：实现/继承抽象工厂，实现其中的工厂方法</li>
</ul>
<h2 id="22-抽象产品">2.2 抽象产品</h2>
<p>这里定义为接口：</p>
<pre><code class="language-java">interface Product
{
    void method();
}
</code></pre>
<h2 id="23-具体产品">2.3 具体产品</h2>
<p>两个示例具体产品：</p>
<pre><code class="language-java">class ConcreteProductA implements Product
{
    public void method()
    {
        System.out.println(&quot;Concrete Product A&quot;);
    }
}

class ConcreteProductB implements Product
{
    public void method()
    {
        System.out.println(&quot;Concrete Product B&quot;);
    }
}
</code></pre>
<h2 id="24-抽象工厂">2.4 抽象工厂</h2>
<p>这里定义为接口：</p>
<pre><code class="language-java">interface Factory
{
    Product get();
}
</code></pre>
<p>抽象工厂中声明了工厂方法但没有实现，交由子类具体工厂负责。</p>
<h2 id="25-具体工厂">2.5 具体工厂</h2>
<pre><code class="language-java">class ConcreteFactoryA implements Factory
{
    public Product get()
    {
        return new ConcreteProductA();
    }
}

class ConcreteFactoryB implements Factory
{
    public Product get()
    {
        return new ConcreteProductB();
    }
}
</code></pre>
<p>一个具体产品对应一个具体工厂，每一个具体工厂返回不同的具体产品。</p>
<h2 id="26-客户端">2.6 客户端</h2>
<p>客户端针对抽象产品以及抽象工厂进行编程，无需知道具体产品的类名，只需要知道具体产品对应的工厂，即可获取具体产品：</p>
<pre><code class="language-java">Factory factory = new ConcreteFactoryA();
Product product = factory.get();
product.method();
factory = new ConcreteFactoryB();
product = factory.get();
product.method();
</code></pre>
<h1 id="3-实例">3 实例</h1>
<blockquote>
<p>日志记录器的设计：该记录器可以通过多种途径保存系统的运行日志，例如文件记录或者数据库记录，使用工厂方法模式进行设计。</p>
</blockquote>
<p>设计如下：</p>
<ul>
<li>抽象产品：<code>Logger</code></li>
<li>具体产品：<code>DatabaseLogger</code>+<code>FileLogger</code></li>
<li>抽象工厂：<code>LoggerFactory</code></li>
<li>具体工厂：<code>DatabaseLoggerFactory</code>+<code>FileLoggerFactory</code></li>
</ul>
<p>代码如下：</p>
<pre><code class="language-java">public class Test
{
    public static void main(String[] args) {
        LoggerFactory factory = new FileLoggerFactory();        
        Logger logger = factory.createLogger();
        logger.log();
    }
}

//抽象产品
interface Logger
{
    void log();
}

//具体产品:DatabaseLogger
class DatabaseLogger implements Logger
{
    public void log()
    {
        System.out.println(&quot;数据库日志记录&quot;);
    }
}

//具体产品:FileLogger
class FileLogger implements Logger
{
    public void log()
    {
        System.out.println(&quot;文件日志记录&quot;);
    }
}

//抽象工厂
interface LoggerFactory
{
    Logger createLogger();
}

//具体工厂:DatabaseLoggerFactory
class DatabaseLoggerFactory implements LoggerFactory
{
    public Logger createLogger()
    {
        return new DatabaseLogger();
    }
}

//具体工厂:FileLoggerFactory
class FileLoggerFactory implements LoggerFactory
{
    public Logger createLogger()
    {
        return new FileLogger();
    }
}
</code></pre>
<h1 id="4-隐藏">4 隐藏</h1>
<p>可以把抽象工厂设置为抽象类，工厂方法直接可以对客户端隐藏，也就是说可以直接通过抽象工厂调用具体产品类的业务方法，客户端无需创建具体产品，直接通过工厂类调用即可，代码修改如下（抽象产品以及具体产品类不用修改）：</p>
<pre><code class="language-java">//抽象工厂
abstract class LoggerFactory
{
    public void log()
    {
        this.createLogger().log();
    }
    public abstract Logger createLogger();
}

//具体工厂:DatabaseLoggerFactory
class DatabaseLoggerFactory extends LoggerFactory
{
    public Logger createLogger()
    {
        return new DatabaseLogger();
    }
}

//具体工厂:FileLoggerFactory
class FileLoggerFactory extends LoggerFactory
{
    public Logger createLogger()
    {
        return new FileLogger();
    }
}

public class Test
{
    public static void main(String[] args) {
        LoggerFactory factory = new FileLoggerFactory();
        factory.log();
    }
}
</code></pre>
<h1 id="5-主要优点">5 主要优点</h1>
<ul>
<li>封装细节：工厂方法用来创建客户所需要的产品，同时还向客户隐藏了哪种具体产品类将被实例化这一细节，用户只需关心所需产品对应的工厂，无需关心创建细节，甚至无须知道具体产品类的类名</li>
<li>多态：工厂方法的多态性能够让工厂可以自主确定创建何种产品对象，而如何创建对象的细节则完全封装在具体工厂内部</li>
<li>扩展性好：加入新产品时无须修改抽象工厂，抽象产品的接口，也无须修改客户端与其他的具体产品和具体工厂，只需要增加一个具体工厂以及具体产品，系统扩展性很好，完全符合开闭原则</li>
</ul>
<h1 id="6-主要缺点">6 主要缺点</h1>
<ul>
<li>类数量多：在添加新产品时，需要编写新的具体产品类，而且还要提供与之对应的具体工厂类，系统中类的个数将成对增加，一定程度上增加了系统的复杂度，有更多的类需要编译和运行，给系统带来额外开销</li>
<li>增加理解难度：基于系统的扩展性需要引入抽象层，在客户端中均使用了抽象层的定义，增加了系统的抽象性以及理解难度</li>
</ul>
<h1 id="7-适用场景">7 适用场景</h1>
<ul>
<li>客户端不知道其所需要的对象的类：在工厂方法模式中，客户端不需要知道具体的产品类名，只需要知道所对应的工厂即可</li>
<li>抽象工厂类通过子类来指定创建哪个对象：工厂方法模式中，抽象工厂类只需要提供一个创建产品的接口，而有其子类来确定具体要创建的对象，利用面向对象的多态性和里氏代换原则，在程序运行时，子类对象将覆盖父类对象，从而使得系统更加容易扩展</li>
</ul>
<h1 id="8-总结">8 总结</h1>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200728202541743.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p><strong>如果觉得文章好看，欢迎点赞。</strong></p>
<p><strong>同时欢迎关注微信公众号：氷泠之路。</strong></p>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20200711111358683.gif" alt="在这里插入图片描述" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第40期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-40-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-40-qi/">
        </link>
        <updated>2020-07-28T15:22:06.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1595863586158.jpeg" alt="" loading="lazy"></figure>
<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>成长就是将你哭声调成静音的过程。</p>
</blockquote>
<h1 id="每日冷知识">每日冷知识</h1>
<blockquote>
<p>希腊火厮守拜占庭人在7世纪研发出的一种燃烧武器，并且不透水。这种武器被用于船舰之间的战斗以及手持式发射管，其操作类似于火焰喷射器。其精确的化学成分是一个只有极少数人知道的秘密，并且已经被淹没在了历史长河中。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>残月出门时，美人和泪醉。<br>
——韦庄《菩萨蛮·红楼别夜惆怅》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>问君能有几多愁？恰似一部新番没看头。</p>
</blockquote>
<h1 id="每日音乐">每日音乐</h1>
<blockquote>
<p><a href="https://music.163.com/#/song?id=28668855">恋人心-魏新雨</a></p>
</blockquote>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1595868393432.jpg" alt="" loading="lazy"></figure>
<blockquote>
<p>化作风<br>
化作雨<br>
化作春<br>
走向你<br>
梦如声<br>
梦如影<br>
梦是遥远的掌印<br>
化作烟<br>
化作泥<br>
化作云<br>
飘向你<br>
思如海<br>
恋如城<br>
思念最遥不可及</p>
</blockquote>
<blockquote>
<p>你问西湖水<br>
偷走她的几分美<br>
时光一去不再<br>
信誓旦旦留给谁<br>
你问长江水<br>
淘尽心酸的滋味<br>
剩半颗恋人心唤不回</p>
</blockquote>
<blockquote>
<p>化作诗<br>
化作笔<br>
化作灯<br>
写着你<br>
默念着<br>
轻叹着<br>
那些深沉的字句<br>
化作路<br>
化作怪<br>
化作情<br>
找寻你<br>
爱一次<br>
梦一场<br>
思念最遥遥无期</p>
</blockquote>
<blockquote>
<p>你问西湖水<br>
偷走她的几分美<br>
时光一去不再<br>
信誓旦旦留给谁<br>
你问长江水<br>
淘尽心酸的滋味<br>
剩半颗<br>
恋人心<br>
唤不回</p>
</blockquote>
<blockquote>
<p>你问西湖水<br>
偷走她的几分美<br>
时光一去不再<br>
信誓旦旦留给谁<br>
你问长江水<br>
淘尽心酸的滋味</p>
</blockquote>
<blockquote>
<p>剩半颗恋人心唤不回<br>
剩半颗恋人心唤不回<br>
剩半颗恋人心唤不回</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[设计模式学习笔记（十四）：享元模式]]></title>
        <id>https://2293736867.github.io/post/she-ji-mo-shi-xue-xi-bi-ji-shi-si-xiang-yuan-mo-shi/</id>
        <link href="https://2293736867.github.io/post/she-ji-mo-shi-xue-xi-bi-ji-shi-si-xiang-yuan-mo-shi/">
        </link>
        <updated>2020-07-27T06:01:16.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#1-%E6%A6%82%E8%BF%B0">1 概述</a>
<ul>
<li><a href="#11-%E5%BC%95%E8%A8%80">1.1 引言</a></li>
<li><a href="#12-%E5%86%85%E9%83%A8%E7%8A%B6%E6%80%81%E4%B8%8E%E5%A4%96%E9%83%A8%E7%8A%B6%E6%80%81">1.2 内部状态与外部状态</a></li>
<li><a href="#13-%E5%AE%9A%E4%B9%89">1.3 定义</a></li>
<li><a href="#14-%E7%BB%93%E6%9E%84%E5%9B%BE">1.4 结构图</a></li>
<li><a href="#15-%E8%A7%92%E8%89%B2">1.5 角色</a></li>
</ul>
</li>
<li><a href="#2-%E5%85%B8%E5%9E%8B%E5%AE%9E%E7%8E%B0">2 典型实现</a>
<ul>
<li><a href="#21-%E6%AD%A5%E9%AA%A4">2.1 步骤</a></li>
<li><a href="#22-%E6%8A%BD%E8%B1%A1%E4%BA%AB%E5%85%83%E7%B1%BB">2.2 抽象享元类</a></li>
<li><a href="#23-%E5%85%B7%E4%BD%93%E4%BA%AB%E5%85%83%E7%B1%BB">2.3 具体享元类</a></li>
<li><a href="#24-%E9%9D%9E%E5%85%B1%E4%BA%AB%E5%85%B7%E4%BD%93%E4%BA%AB%E5%85%83%E7%B1%BB">2.4 非共享具体享元类</a></li>
<li><a href="#25-%E4%BA%AB%E5%85%83%E5%B7%A5%E5%8E%82%E7%B1%BB">2.5 享元工厂类</a></li>
<li><a href="#26-%E5%AE%A2%E6%88%B7%E7%AB%AF">2.6 客户端</a></li>
<li><a href="#27-%E5%8F%8D%E5%B0%84%E7%AE%80%E5%8C%96">2.7 反射简化</a></li>
</ul>
</li>
<li><a href="#3-%E5%AE%9E%E4%BE%8B">3 实例</a></li>
<li><a href="#4-%E5%8A%A0%E5%85%A5%E5%A4%96%E9%83%A8%E7%8A%B6%E6%80%81">4 加入外部状态</a></li>
<li><a href="#5-%E5%8D%95%E7%BA%AF%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%A4%8D%E5%90%88%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F">5 单纯享元模式与复合享元模式</a>
<ul>
<li><a href="#51-%E5%8D%95%E7%BA%AF%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F">5.1 单纯享元模式</a></li>
<li><a href="#52-%E5%A4%8D%E5%90%88%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F">5.2 复合享元模式</a></li>
</ul>
</li>
<li><a href="#6-%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8E">6 补充说明</a></li>
<li><a href="#7-%E4%B8%BB%E8%A6%81%E4%BC%98%E7%82%B9">7 主要优点</a></li>
<li><a href="#8-%E4%B8%BB%E8%A6%81%E7%BC%BA%E7%82%B9">8 主要缺点</a></li>
<li><a href="#9-%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF">9 适用场景</a></li>
<li><a href="#10-%E6%80%BB%E7%BB%93">10 总结</a></li>
</ul>
</p>
<h1 id="1-概述">1 概述</h1>
<h2 id="11-引言">1.1 引言</h2>
<p>当一个系统中运行时的产生的对象太多，会带来性能下降等问题，比如一个文本字符串存在大量重复字符，如果每一个字符都用一个单独的对象表示，将会占用较多内存空间。</p>
<p>那么该如何避免出现大量相同或相似的对象，同时又不影响客户端以面向对象的方式操作呢？</p>
<p>享元模式正为解决这一问题而生，通过共享技术实现相同或相似对象的重用，在逻辑上每一个出现的字符都有一个对象与之对<br>
应，但是物理上却共享一个享元对象。</p>
<p>在享元模式中，<strong>存储共享实例的地方称为享元池</strong>，可以针对每一个不同的字符创建一个享元对象，放置于享元池中，需要时取<br>
出，示意图如下：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200727065325512.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="12-内部状态与外部状态">1.2 内部状态与外部状态</h2>
<p>享元模式以共享的方式高效地支持大量细粒度对象的重用，能做到共享的关键是区分了内部状态以及外部状态。</p>
<ul>
<li><strong>内部状态：存储在享元对象内部并且不会随环境改变而改变，内部状态可以共享，例如字符的内容，字符a永远是字符a，不会变为字符b</strong></li>
<li><strong>外部状态：能够随环境改变而改变，不可以共享的状态，通常由客户端保存，并在享元对象被创建之后，需要使用的时候再传入到享元对象内部。外部状态之间通常是相互独立的，比如字符的颜色，字号，字体等，可以独立变化，没有影响，客户端在使用时将外部状态注入到享元对象中</strong></li>
</ul>
<p>正因为区分了内部状态以及外部状态，可以将具有相同内部状态的对象存储在享元池中，享元池的对象是可以实现共享的，需要的时候从中取出，实现对象的复用。通过向取出的对象注入不同的外部状态，可以得到一系列相似的对象，而这些对象实际上只存储一份。</p>
<h2 id="13-定义">1.3 定义</h2>
<p><strong>享元模式：运用共享技术有效地支持大量细粒度对象的复用。</strong></p>
<p>系统只使用少量的对象，而这些对象都很相似，状态变化很小，可以实现对象的多次复用。由于享元模式要求能够共享的对象必须是细粒度对象，因此又叫轻量级模式，是一种对象结构型模式。</p>
<h2 id="14-结构图">1.4 结构图</h2>
<p>享元模式一般结合工厂模式一起使用，结构图如下：</p>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/2020072707364855.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="15-角色">1.5 角色</h2>
<ul>
<li><strong><code>Flyweights</code>（抽象享元类）：通常是一个接口或者抽象类，在抽象享元类中声明了具体享元类公共的方法，这些方法可以向外界提供享元对象的内部数据（内部状态），同时也可以通过这些方法来设置外部数据（外部状态）</strong></li>
<li><strong><code>ConcreteFlyweight</code>（具体享元类）：实现/继承抽象共享类，实例称为共享对象，在具体享元类中为内部状态提供了存储空间，通常可以结合单例模式来设计具体享元类</strong></li>
<li><strong><code>UnsharedConcreteFlyweight</code>（非共享具体享元类）：并不是所有的抽象享元子类都需要被共享，不能被共享的子类可设计为非共享具体享元类，当需要一个非具体享元对象时可以直接实例化创建</strong></li>
<li><strong><code>FlyweightFactory</code>（享元工厂类）：享元工厂类用于创建并管理享元对象，针对抽象享元类编程，将具体享元对象存储于享元池中。一般使用键值对集合（比如Java中的</strong><code>HashMap</code><strong>）作为享元池，当客户端获取享元对象时，首先判断是否存在，存在则从集合中取出并返回，不存在则创建新具体享元的实例，存储于享元池中并返回新实例</strong></li>
</ul>
<h1 id="2-典型实现">2 典型实现</h1>
<h2 id="21-步骤">2.1 步骤</h2>
<ul>
<li>定义抽象享元类：将抽象享元类定义为接口或者抽象类，声明业务方法</li>
<li>定义具体享元类：继承或实现抽象享元，实现其中的业务方法，同时使用单例模式设计，确保每个具体享元类提供唯一的享元对象</li>
<li>（可选）定义非共享具体享元类：继承或实现抽象享元类，不使用单例模式设计，每次客户端获取都会返回一个新实例</li>
<li>定义享元工厂类：通常使用一个键值对集合作为享元池，根据键值返回对应的具体享元对象或非共享具体享元对象</li>
</ul>
<h2 id="22-抽象享元类">2.2 抽象享元类</h2>
<p>这里使用接口实现，包含一个<code>opeartion</code>业务方法：</p>
<pre><code class="language-java">interface Flyweight
{
    void operation(String extrinsicState);
}
</code></pre>
<h2 id="23-具体享元类">2.3 具体享元类</h2>
<p>简单设计两个枚举单例的具体享元类：</p>
<pre><code class="language-java">enum ConcreteFlyweight1 implements Flyweight
{
    INSTANCE(&quot;INTRINSIC STATE 1&quot;);
    private String intrinsicState;
    private ConcreteFlyweight1(String intrinsicState)
    {
        this.intrinsicState = intrinsicState;
    }

    @Override
    public void operation(String extrinsicState)
    {
        System.out.println(&quot;具体享元操作&quot;);
        System.out.println(&quot;内部状态:&quot;+intrinsicState);
        System.out.println(&quot;外部状态:&quot;+extrinsicState);
    }
}

enum ConcreteFlyweight2 implements Flyweight
{
    INSTANCE(&quot;INTRINSIC STATE 2&quot;);
    private String intrinsicState;
    private ConcreteFlyweight2(String intrinsicState)
    {
        this.intrinsicState = intrinsicState;
    }

    @Override
    public void operation(String extrinsicState)
    {
        System.out.println(&quot;具体享元操作&quot;);
        System.out.println(&quot;内部状态:&quot;+intrinsicState);
        System.out.println(&quot;外部状态:&quot;+extrinsicState);
    }
}
</code></pre>
<h2 id="24-非共享具体享元类">2.4 非共享具体享元类</h2>
<p>两个简单的非共享具体享元类，不是枚举单例类：</p>
<pre><code class="language-java">class UnsharedConcreteFlyweight1 implements Flyweight
{
    @Override
    public void operation(String extrinsicState)
    {
        System.out.println(&quot;非共享具体享元操作&quot;);
        System.out.println(&quot;外部状态:&quot;+extrinsicState);
    }
}

class UnsharedConcreteFlyweight2 implements Flyweight
{
    @Override
    public void operation(String extrinsicState)
    {
        System.out.println(&quot;非共享具体享元操作&quot;);
        System.out.println(&quot;外部状态:&quot;+extrinsicState);
    }
}
</code></pre>
<h2 id="25-享元工厂类">2.5 享元工厂类</h2>
<p>为了方便客户端以及工厂管理具体享元以及非共享具体享元，首先建立两个枚举类作为享元池的键：</p>
<pre><code class="language-java">enum Key { KEY1,KEY2 }
enum UnsharedKey { KEY1,KEY2 }
</code></pre>
<p>这里的工厂类使用了枚举单例：</p>
<pre><code class="language-java">enum Factory
{
    INSTANCE;
    private Map&lt;Key,Flyweight&gt; map = new HashMap&lt;&gt;();
    public Flyweight get(Key key)
    {
        if(map.containsKey(key))
            return map.get(key);
        switch(key)
        {
            case KEY1:    
                map.put(key, ConcreteFlyweight1.INSTANCE);
                return ConcreteFlyweight1.INSTANCE;
            case KEY2:
                map.put(key, ConcreteFlyweight2.INSTANCE);
                return ConcreteFlyweight2.INSTANCE;
            default:
                return null;
        }
    }

    public Flyweight get(UnsharedKey key)
    {
        switch(key)
        {
            case KEY1:
                return new UnsharedConcreteFlyweight1();
            case KEY2:
                return new UnsharedConcreteFlyweight2();
            default:
                return null;
        }
    }
}
</code></pre>
<p>使用<code>HashMap&lt;String,Flyweight&gt;</code>作为享元池：</p>
<ul>
<li>对于具体享元类，根据键值判断享元池中是否存在具体享元对象，如果存在直接返回，如果不存在把具体享元的单例存入享元池，并返回该单例</li>
<li>对于非共享具体享元类，由于是“非共享”，不需要把实例对象存储于享元池中，每次调用直接返回新实例</li>
</ul>
<h2 id="26-客户端">2.6 客户端</h2>
<p>客户端针对抽象享元进行编程，首先获取享元工厂单例，接着利用工厂方法，传入对应的枚举参数获取对应的具体享元或者非共享具体享元：</p>
<pre><code class="language-java">public static void main(String[] args) 
{
    Factory factory = Factory.INSTANCE;
    Flyweight flyweight1 = factory.get(Key.KEY1);
    Flyweight flyweight2 = factory.get(Key.KEY1);
    System.out.println(flyweight1 == flyweight2);

    flyweight1 = factory.get(UnsharedKey.KEY1);
    flyweight2 = factory.get(UnsharedKey.KEY1);
    System.out.println(flyweight1 == flyweight2);
}
</code></pre>
<h2 id="27-反射简化">2.7 反射简化</h2>
<p>如果具体享元对象变多，工厂类的<code>get()</code>中的<code>switch</code>会变得很长，这时候可以将键值类以及工厂类的<code>get()</code>改进以简化代码，例如在上面的基础上又增加了两个具体享元类：</p>
<pre><code class="language-java">enum ConcreteFlyweight3 implements Flyweight {...}
enum ConcreteFlyweight4 implements Flyweight {...}
</code></pre>
<p>这样工厂类的<code>switch</code>需要增加两个<code>Key</code>：</p>
<pre><code class="language-java">switch(key)
{
    case KEY1:    
        map.put(key, ConcreteFlyweight1.INSTANCE);
        return ConcreteFlyweight1.INSTANCE;
    case KEY2:
        map.put(key, ConcreteFlyweight2.INSTANCE);
        return ConcreteFlyweight2.INSTANCE;
    case KEY3:
        map.put(key, ConcreteFlyweight3.INSTANCE);
        return ConcreteFlyweight3.INSTANCE;
    case KEY4:
        map.put(key, ConcreteFlyweight4.INSTANCE);
        return ConcreteFlyweight4.INSTANCE;
    default:
        return null;
}
</code></pre>
<p>可以利用具体享元类的命名方式进行简化，这里使用了顺序编号<code>1,2,3,4...</code>的方式，因此，利用反射获取对应的类后直接获取其中的单例对象：</p>
<pre><code class="language-java">public Flyweight get(Key key)
{
    if(map.containsKey(key))
        return map.get(key);
    try
    {
        Class&lt;?&gt; cls = Class.forName(&quot;ConcreteFlyweight&quot;+key.code());
        Flyweight flyweight = (Flyweight)(cls.getField(&quot;INSTANCE&quot;).get(null));
        map.put(key,flyweight);
        return flyweight;
    }
    catch(Exception e)
    {
        e.printStackTrace();
        return null;
    }
}
</code></pre>
<p>在此之前需要修改一下<code>Key</code>类：</p>
<pre><code class="language-java">enum Key
{
    KEY1(1),KEY2(2),KEY3(3),KEY4(4);
    private int code;
    private Key(int code)
    {
        this.code = code;
    }
    public int code()
    {
        return code;
    }
}
</code></pre>
<p>增加一个<code>code</code>字段，作为区分每一个具体享元的标志。</p>
<p>对于非共享具体享元类似，首先修改<code>UnsharedKey</code>，同理添加<code>code</code>字段：</p>
<pre><code class="language-java">enum UnsharedKey
{
    KEY1(1),KEY2(2),KEY3(3),KEY4(4);
    private int code;
    private UnsharedKey(int code)
    {
        this.code = code;
    }
    public int code()
    {
        return code;
    }
}
</code></pre>
<p>接着修改<code>get</code>方法：</p>
<pre><code class="language-java">public Flyweight get(UnsharedKey key)
{
    try
    {
        Class&lt;?&gt; cls = Class.forName(&quot;UnsharedConcreteFlyweight&quot;+key.code());
        return (Flyweight)(cls.newInstance());
    }
    catch(Exception e)
    {
        e.printStackTrace();
        return null;
    }
}
</code></pre>
<p>由于笔者使用的是OpenJDK11，其中<code>newInstance</code>被标记为过时了：</p>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20200727092339417.png" alt="在这里插入图片描述" loading="lazy"></figure>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20200727092356620.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>因此使用如下方式代替直接使用<code>newInstance()</code>：</p>
<pre><code class="language-java">return (Flyweight)(cls.getDeclaredConstructor().newInstance());
</code></pre>
<p>区别如下：</p>
<ul>
<li><code>newInstance</code>：直接调用无参构造方法</li>
<li><code>getDeclaredConstructor().newInstance()</code>：<code>getDeclaredConstructor()</code>会根据传入的参数搜索该类的构造方法并返回，没有参数就返回该类的无参构造方法，接着调用<code>newInstance</code>进行实例化</li>
</ul>
<h1 id="3-实例">3 实例</h1>
<blockquote>
<p>围棋棋子的设计：一个棋盘中含有大量相同的黑白棋子，只是出现的位置不一样，使用享元模式对棋子进行设计。</p>
</blockquote>
<p>设计如下：</p>
<ul>
<li>抽象享元类：<code>IgoChessman</code>接口（如果想要具体享元类为枚举单例的话必须是接口，使用其他方式实现单例可以为抽象类），包含<code>getColor</code>以及<code>display</code>方法</li>
<li>具体享元类：<code>BlackChessman</code>+<code>WhiteChessman</code>，枚举单例类</li>
<li>非共享具体享元类：无</li>
<li>享元工厂类：<code>Factory</code>，枚举单例类，包含简单的<code>get</code>作为获取具体享元的方法，加上了<code>white</code>以及<code>balck</code>简单封装，在构造方法中初始化享元池</li>
</ul>
<p>代码如下：</p>
<pre><code class="language-java">//抽象享元接口
interface IgoChessman
{
    Color getColor();
    void display();
}

//具体享元枚举单例类
enum BlackChessman implements IgoChessman
{
    INSTANCE;
    
    @Override
    public Color getColor()
    {
        return Color.BLACK;
    }

    @Override
    public void display()
    {
        System.out.println(&quot;棋子颜色&quot;+getColor().color());
    }
}

//具体享元枚举单例类
enum WhiteChessman implements IgoChessman
{
    INSTANCE;
    
    @Override
    public Color getColor()
    {
        return Color.WHITE;
    }

    @Override
    public void display()
    {
        System.out.println(&quot;棋子颜色&quot;+getColor().color());
    }
}

//享元工厂枚举单例类
enum Factory
{
    INSTANCE;
    //HashMap&lt;Color,IgoChessman&gt;作为享元池
    private Map&lt;Color,IgoChessman&gt; map = new HashMap&lt;&gt;();
    private Factory()
    {
    	//构造方法中直接初始化享元池
        map.put(Color.WHITE, WhiteChessman.INSTANCE);
        map.put(Color.BLACK, BlackChessman.INSTANCE);
    }
    public IgoChessman get(Color color)
    {
    	//由于在构造方法中已经初始化，如果不存在可以返回null或者添加新实例到享元池并返回，这里选择了返回null
        if(!map.containsKey(color))
            return null;
        return (IgoChessman)map.get(color);
    }
    //简单封装
    public IgoChessman white()
    {
        return get(Color.WHITE);
    }
    public IgoChessman black()
    {
        return get(Color.BLACK);
    }
}

enum Color
{
    WHITE(&quot;白色&quot;),BLACK(&quot;黑色&quot;);
    private String color;
    private Color(String color)
    {
        this.color = color;
    }
    public String color()
    {
        return color;
    }
}
</code></pre>
<p>在初始化享元池时，如果具体享元类过多可以使用反射简化，不需要手动逐个<code>put</code>：</p>
<pre><code class="language-java">private Factory()
{
	map.put(Color.WHITE, WhiteChessman.INSTANCE);
	map.put(Color.BLACK, BlackChessman.INSTANCE);
}
</code></pre>
<p>根据枚举值数组，结合<code>List</code>与<code>forEach</code>，逐个利用数组中的值获取对应的类，进而获取实例：</p>
<pre><code class="language-java">private Factory()
{
    List.of(Color.values()).forEach(t-&gt;
    {
        String className = t.name().substring(0,1)+t.name().substring(1).toLowerCase()+&quot;Chessman&quot;;
        try
        {
            map.put(t,(IgoChessman)(Class.forName(className).getField(&quot;INSTANCE&quot;).get(null)));
        }
        catch(Exception e)
        {
            e.printStackTrace();
            map.put(t,null);
        }    
    });
}
</code></pre>
<p>测试：</p>
<pre><code class="language-java">public static void main(String[] args) 
{
    Factory factory = Factory.INSTANCE;
    IgoChessman white1 = factory.white();
    IgoChessman white2 = factory.white();
    white1.display();
    white2.display();
    System.out.println(white1 == white2);

    IgoChessman black1 = factory.black();
    IgoChessman black2 = factory.black();
    black1.display();
    black2.display();
    System.out.println(black1 == black2);
}
</code></pre>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/20200727101745913.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="4-加入外部状态">4 加入外部状态</h1>
<p>通过上面的方式已经能够实现黑白棋子的共享了，但是还有一个问题没有解决，就是如何将相同的黑白棋子放置于不同的棋盘位置上？</p>
<p>解决办法也不难，增加一个坐标类<code>Coordinates</code>，调用<code>display</code>时作为要放置的坐标参数传入函数。</p>
<p>首先增加一个坐标类：</p>
<pre><code class="language-java">class Coordinates
{
    private int x;
    private int y;    
    public Coordinates(int x,int y)
    {
        this.x = x;
        this.y = y;
    }
	//setter+getter...
}
</code></pre>
<p>接着需要修改抽象享元接口，在<code>display</code>中加入<code>Coordinates</code>参数：</p>
<pre><code class="language-java">interface IgoChessman
{
    Color getColor();
    void display(Coordinates coordinates);
}
</code></pre>
<p>然后修改具体享元类即可：</p>
<pre><code class="language-java">enum BlackChessman implements IgoChessman
{
    INSTANCE;
    
    @Override
    public Color getColor()
    {
        return Color.BLACK;
    }

    @Override
    public void display(Coordinates coordinates)
    {
        System.out.println(&quot;棋子颜色&quot;+getColor().color());
        System.out.println(&quot;显示坐标:&quot;);
        System.out.println(&quot;横坐标&quot;+coordinates.getX());
        System.out.println(&quot;纵坐标&quot;+coordinates.getY());
    }
}
</code></pre>
<p>对于客户端，创建享元对象的代码无须修改，只需修改调用了<code>display</code>的地方，传入<code>Coordinates</code>参数即可：</p>
<pre><code class="language-java">IgoChessman white1 = factory.white();
IgoChessman white2 = factory.white();
white1.display(new Coordinates(1, 2));
white2.display(new Coordinates(2, 3));
</code></pre>
<h1 id="5-单纯享元模式与复合享元模式">5 单纯享元模式与复合享元模式</h1>
<h2 id="51-单纯享元模式">5.1 单纯享元模式</h2>
<p>标准的享元模式既可以包含具体享元类，也包含非共享具体享元类。</p>
<p><strong>但是在单纯享元模式中，所有的具体享元类都是共享的，也就是不存在非共享具体享元类。</strong></p>
<p>比如上面棋子的例子，黑白棋子作为具体享元类都是共享的，不存在非共享具体享元类。</p>
<h2 id="52-复合享元模式">5.2 复合享元模式</h2>
<p><strong>将一些单纯享元对象进行使用组合模式加以组合还可以形成复合享元对象</strong>，这样的复合享元对象本身不能共享，但是它们可以分解为单纯享元对象，而后者可以共享。</p>
<p><strong>通过复合享元模式可以确保复合享元类所包含的每个单纯享元类都具有相同的外部状态，而这些单纯享元的内部状态可以不一样</strong>，比如，上面棋子的例子中：</p>
<ul>
<li>黑棋子是单纯享元</li>
<li>白棋子也是单纯享元</li>
<li>这两个单纯享元的内部状态不同（颜色不同）</li>
<li>但是可以设置相同的外部状态（比如设置为棋盘上同一位置，但是这样没有什么实际意义，或者设置显示为同一大小）</li>
</ul>
<p>例子如下，首先在抽象享元中添加一个以<code>int</code>为参数的<code>display</code>：</p>
<pre><code class="language-java">interface IgoChessman
{
    Color getColor();
    void display(int size);
}
</code></pre>
<p>在具体享元实现即可：</p>
<pre><code class="language-java">enum BlackChessman implements IgoChessman
{
    INSTANCE;
    
    @Override
    public Color getColor()
    {
        return Color.BLACK;
    }

    @Override
    public void display(int size)
    {
        System.out.println(&quot;棋子颜色&quot;+getColor().color());
        System.out.println(&quot;棋子大小&quot;+size);
    }
}
</code></pre>
<p>接着添加复合享元类，里面包含一个<code>HashMap</code>存储所有具体享元：</p>
<pre><code class="language-java">enum Chessmans implements IgoChessman
{
    INSTANCE;
    private Map&lt;Color,IgoChessman&gt; map = new HashMap&lt;&gt;();

    public void add(IgoChessman chessman)
    {
        map.put(chessman.getColor(),chessman);
    }

    @Override
    public Color getColor()
    {
        return null;
    }

    @Override
    public void display(int size)
    {
        map.forEach((k,v)-&gt;v.display(size));
    }
}
</code></pre>
<p>在<code>display</code>中，实际上是遍历了<code>HashMap</code>，给每一个具体享元的<code>display</code>传入相同的参数。<br>
测试：</p>
<pre><code class="language-java">public static void main(String[] args) {
    Factory factory = Factory.INSTANCE;
    IgoChessman white = factory.white();
    IgoChessman black = factory.black();
    Chessmans chessmans = Chessmans.INSTANCE;
    chessmans.add(white);
    chessmans.add(black);
    chessmans.display(30);
}
</code></pre>
<p>输出：</p>
<figure data-type="image" tabindex="6"><img src="https://img-blog.csdnimg.cn/20200727115118728.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>这样内部状态不同（颜色不同）的两个具体享元类（黑白棋）就被复合享元类（<code>Chessmans</code>）设置为具有相同的外部状态（显示大小30）。</p>
<h1 id="6-补充说明">6 补充说明</h1>
<ul>
<li>与其他模式联用：享元模式通常需要与其他模式联用，比如工厂模式（享元工厂），单例模式（具体享元枚举单例），组合模式（复合享元模式）</li>
<li>JDK中的享元模式：JDK中的<code>String</code>使用了享元模式。大家都知道<code>String</code>是不可变类，对于类似<code>String a = &quot;123&quot;</code>这种声明方式，会创建一个值为<code>&quot;123&quot;</code>的享元对象，下次使用<code>&quot;123&quot;</code>时从享元池获取，在修改享元对象时，比如<code>a += &quot;1&quot;</code>，先将原有对象复制一份，然后在新对象上进行修改，这种机制叫做&quot;Copy On Write&quot;。基本思路是，一开始大家都在共享内容，当某人需要修改时，把内容复制出去形成一个新内容并修改</li>
</ul>
<h1 id="7-主要优点">7 主要优点</h1>
<ul>
<li>降低内存消耗：享元模式可以极大地减少内存中对象的数量，使得相同或相似对象在内存中只保存一份，从而节约系统资源，提供系统性能</li>
<li>外部状态独立：享元模式外部状态相对独立，不会影响到内部状态，从而使得享元对象可以在不同环境中被共享</li>
</ul>
<h1 id="8-主要缺点">8 主要缺点</h1>
<ul>
<li>增加复杂度：享元模式使得系统变复杂，需要分离出内部状态以及外部状态，使得程序逻辑复杂化</li>
<li>运行时间变长：为了使对象可以共享，享元模式需要将享元对象的部分状态外部化，而读取外部状态使得运行时间变长</li>
</ul>
<h1 id="9-适用场景">9 适用场景</h1>
<ul>
<li>一个系统有大量相似或相同对象，造成大量内存浪费</li>
<li>对象的大部分状态都可以外部化，可以将这些外部状态传入对象中</li>
<li>由于需要维护享元池，造成一定的资源开销，因此在需要真正多次重复使用享元对象时才值得使用享元模式</li>
</ul>
<h1 id="10-总结">10 总结</h1>
<figure data-type="image" tabindex="7"><img src="https://img-blog.csdnimg.cn/20200729140109974.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p><strong>如果觉得文章好看，欢迎点赞。</strong></p>
<p><strong>同时欢迎关注微信公众号：氷泠之路。</strong></p>
<figure data-type="image" tabindex="8"><img src="https://img-blog.csdnimg.cn/20200711111358683.gif" alt="在这里插入图片描述" loading="lazy"></figure>
]]></content>
    </entry>
</feed>