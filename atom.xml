<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://2293736867.github.io</id>
    <title>氷泠&apos;s blog</title>
    <updated>2021-06-30T17:05:09.182Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://2293736867.github.io"/>
    <link rel="self" href="https://2293736867.github.io/atom.xml"/>
    <subtitle>几百遍，重复了几百遍
重复的情绪重复的熬过想你的夜</subtitle>
    <logo>https://2293736867.github.io/images/avatar.png</logo>
    <icon>https://2293736867.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 氷泠&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[每日分享 第381期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-381-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-381-qi/">
        </link>
        <updated>2021-06-30T16:33:26.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>对于穷人，生活不累的话，那就不叫生活！</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>烛摧花，鹤惊露，忽三更。<br>
——朱敦儒《水调歌头》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>我只是不想再失去他——哪怕是仅存在一瞬的幻影！</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1625070969908.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<pre><code class="language-java">import java.util.*;

public class Solution {
    public int numWays(int n, int[][] relation, int k) {
        Map&lt;Integer, List&lt;Integer&gt;&gt; map = new HashMap&lt;&gt;();
        for (int i = 0; i &lt; relation.length; i++) {
            int fromPlayer = relation[i][0];
            int toPlayer = relation[i][1];
            if(map.containsKey(fromPlayer)){
                map.get(fromPlayer).add(toPlayer);
            }else{
                List&lt;Integer&gt; list = new ArrayList&lt;&gt;();
                list.add(toPlayer);
                map.put(fromPlayer,list);
            }
        }

        int res = 0;
        Queue&lt;Integer&gt; queue = new LinkedList&lt;&gt;();
        queue.add(0);
        for (int i = 0; i &lt; k; i++) {
            int size = queue.size();
            for (int j = 0; j &lt; size; j++) {
                int current = queue.remove();
                List&lt;Integer&gt; list = map.get(current);
                if(list != null){
                    queue.addAll(list);
                }
            }
        }
        while(!queue.isEmpty()){
            if(queue.remove() == n-1){
                ++res;
            }
        }
        return res;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1625071812210.png" alt="" loading="lazy"></figure>
<p>这效率。。。</p>
<p>稍微优化一下，使用数组代替<code>HashMap</code>，但是也没有提高多少效率：</p>
<pre><code class="language-java">import java.util.*;

public class Solution {
    public int numWays(int n, int[][] relation, int k) {
        int [][] map = new int[n][];
        int [] mapLen = new int[n];
        int [] mapIndex = new int[n];

        for (int i = 0; i &lt; relation.length; i++) {
            ++mapLen[relation[i][0]];
        }

        for (int i = 0; i &lt; relation.length; i++) {
            int fromPlayer = relation[i][0];
            int toPlayer = relation[i][1];
            if(map[fromPlayer] == null){
                map[fromPlayer] = new int[mapLen[fromPlayer]];
                map[fromPlayer][0] = toPlayer;
                mapIndex[fromPlayer] = 1;
            }else{
                map[fromPlayer][mapIndex[fromPlayer]++] = toPlayer;
            }
        }

        int res = 0;
        Queue&lt;Integer&gt; queue = new LinkedList&lt;&gt;();
        queue.add(0);
        for (int i = 0; i &lt; k; i++) {
            int size = queue.size();
            for (int j = 0; j &lt; size; j++) {
                int current = queue.remove();
                int [] value = map[current];
                if(value != null){
                    for (int l = 0; l &lt; value.length; l++) {
                        queue.add(value[l]);
                    }
                }
            }
        }
        while(!queue.isEmpty()){
            if(queue.remove() == n-1){
                ++res;
            }
        }
        return res;
    }
}
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://2293736867.github.io/post-images/1625072240855.png" alt="" loading="lazy"></figure>
<p>再优化一下下：</p>
<pre><code class="language-java">import java.util.*;

public class Solution {
    public int numWays(int n, int[][] relation, int k) {
        int [][] map = new int[n][];
        int [] mapLen = new int[n];
        int [] mapIndex = new int[n];

        for (int i = 0; i &lt; relation.length; i++) {
            ++mapLen[relation[i][0]];
        }

        for (int i = 0; i &lt; relation.length; i++) {
            int fromPlayer = relation[i][0];
            int toPlayer = relation[i][1];
            if(map[fromPlayer] == null){
                map[fromPlayer] = new int[mapLen[fromPlayer]];
                map[fromPlayer][0] = toPlayer;
                mapIndex[fromPlayer] = 1;
            }else{
                map[fromPlayer][mapIndex[fromPlayer]++] = toPlayer;
            }
        }

        int res = 0;
        Queue&lt;Integer&gt; queue = new LinkedList&lt;&gt;();
        queue.add(0);
        for (int i = 0; i &lt; k; i++) {
            int size = queue.size();
            for (int j = 0; j &lt; size; j++) {
                int current = queue.remove();
                int [] value = map[current];
                if(value != null){
                    for (int l = 0; l &lt; value.length; l++) {
                        int v = value[l];
                        if(i == k-1 &amp;&amp; v == n-1){
                            ++res;
                        }
                        queue.add(v);
                    }
                }
            }
        }
        return res;
    }
}
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://2293736867.github.io/post-images/1625072398603.png" alt="" loading="lazy"></figure>
<p>极限了极限了。。。（<s>太菜了太菜了</s>）</p>
<p>看了题解发现原来有三种方法：</p>
<ul>
<li>深搜</li>
<li>广搜</li>
<li>动归</li>
</ul>
<p>动归解法如下：</p>
<pre><code class="language-java">class Solution {
    public int numWays(int n, int[][] relation, int k) {
        int[][] dp = new int[k + 1][n];
        dp[0][0] = 1;
        for (int i = 0; i &lt; k; i++) {
            for (int[] edge : relation) {
                int src = edge[0], dst = edge[1];
                dp[i + 1][dst] += dp[i][src];
            }
        }
        return dp[k][n - 1];
    }
}
</code></pre>
<figure data-type="image" tabindex="5"><img src="https://2293736867.github.io/post-images/1625072669552.png" alt="" loading="lazy"></figure>
<p><s>BFS优化个der</s></p>
<h1 id="100周年">100周年</h1>
<p>建党100周年！</p>
<p>刚过12点就朋友圈刷屏了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第380期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-380-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-380-qi/">
        </link>
        <updated>2021-06-29T16:29:16.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>宁可美的千篇一律，也不要丑的各有千秋。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>月明船笛参差起，风定池莲自在香。<br>
——秦观《纳凉》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>清晨、黄昏、天空和飞鸟，代码、诗歌、活着和爱你。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1625070598099.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>还是广搜题，序列化和反序列化都用的广搜：</p>
<pre><code class="language-java">import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;

public class Codec {
    public String serialize(TreeNode root) {
        if (root == null) {
            return &quot;&quot;;
        }

        StringBuilder builder = new StringBuilder();
        Queue&lt;TreeNode&gt; queue = new LinkedList&lt;&gt;();

        queue.add(root);
        while (!queue.isEmpty()) {
            TreeNode temp = queue.poll();

            if (temp == null) {
                builder.append(&quot;null,&quot;);
            } else {
                builder.append(temp.val).append(&quot;,&quot;);
                queue.add(temp.left);
                queue.add(temp.right);
            }
        }
        return &quot;[&quot; + builder.substring(0, builder.length() - 1) + &quot;]&quot;;
    }

    public TreeNode deserialize(String data) {
        int len = data.length();
        if (len == 0) {
            return null;
        }
        String[] strs = data.substring(1, len - 1).split(&quot;,&quot;);
        int n = strs.length;
        if (strs[0].charAt(0) == 'n') {
            return null;
        }
        TreeNode root = new TreeNode(Integer.parseInt(strs[0]));
        Queue&lt;TreeNode&gt; queue = new LinkedList&lt;&gt;();
        queue.add(root);
        for (int i = 1; i &lt; n; ) {
            TreeNode temp = queue.poll();
            if (temp != null) {
                TreeNode left = (strs[i].charAt(0) == 'n' ? null : new TreeNode(Integer.parseInt(strs[i])));
                TreeNode right = (strs[i + 1].charAt(0) == 'n' ? null : new TreeNode(Integer.parseInt(strs[i + 1])));
                temp.left = left;
                temp.right = right;
                queue.add(left);
                queue.add(right);
                i += 2;
            } else {
                while (queue.peek() == null) {
                    queue.poll();
                }
            }
        }
        return root;
    }
}
</code></pre>
<p>最离谱的第一名居然0ms：</p>
<pre><code class="language-java">public class Codec {
    private TreeNode root;
    public String serialize(TreeNode root) {
        this.root = root;
        return &quot;&quot;;
    }

    public TreeNode deserialize(String data) {
        return this.root;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1625070696173.png" alt="" loading="lazy"></figure>
<p>好家伙。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第379期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-379-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-379-qi/">
        </link>
        <updated>2021-06-28T16:22:09.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>问渠那得清如许，唯有毒汤活水来！</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>藕花珠缀，犹似汗凝妆。<br>
——阎选《临江仙·雨停荷荠逗浓香》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>宣纸泛黄，时间流逝，即使眨眼即过，也要抓住那瞬间的辉煌。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1625070154587.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>简单题，顺便也把类似的171题答案附上（注意1！！）：</p>
<pre><code class="language-java">public class Solution {
    public String convertToTitle(int columnNumber) {
        StringBuilder builder = new StringBuilder();
        while (columnNumber != 0) {
            --columnNumber;
            builder.append((char) (columnNumber % 26 + 'A'));
            columnNumber /= 26;
        }
        return builder.reverse().toString();
    }

    public int titleToNumber(String columnTitle) {
        int sum = 0;
        int base = 1;
        for (int i = columnTitle.length() - 1; i &gt;= 0; --i) {
            sum += (columnTitle.charAt(i) - 'A' + 1) * base;
            base *= 26;
        }
        return sum;
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第378期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-378-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-378-qi/">
        </link>
        <updated>2021-06-28T13:24:20.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>都说姐漂亮，其实都是妆出来的。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>此花此叶常相映，翠减红哀愁杀人。<br>
——李商隐《赠荷花》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>用我一生，换你十年天真无邪。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1624886536347.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>复制的，想了一下好像做不出来。。。（<s>太菜了</s>）</p>
<pre><code class="language-java">class Solution {
    int s, t;
    int[][] rs;
    public int numBusesToDestination(int[][] _rs, int _s, int _t) {
        rs = _rs; s = _s; t = _t;
        if (s == t) return 0;
        int ans = bfs();
        return ans;
    }
    int bfs() {
        // 记录某个车站可以进入的路线
        Map&lt;Integer, Set&lt;Integer&gt;&gt; map = new HashMap&lt;&gt;();
        // 队列存的是经过的路线
        Deque&lt;Integer&gt; d = new ArrayDeque&lt;&gt;();
        // 哈希表记录的进入该路线所使用的距离
        Map&lt;Integer, Integer&gt; m = new HashMap&lt;&gt;();
        int n = rs.length;
        for (int i = 0; i &lt; n; i++) {
            for (int station : rs[i]) {
                // 将从起点可以进入的路线加入队列
                if (station == s) {
                    d.addLast(i);
                    m.put(i, 1);
                }
                Set&lt;Integer&gt; set = map.getOrDefault(station, new HashSet&lt;&gt;());
                set.add(i);
                map.put(station, set);
            }
        }
        while (!d.isEmpty()) {
            // 取出当前所在的路线，与进入该路线所花费的距离
            int poll = d.pollFirst();
            int step = m.get(poll);

            // 遍历该路线所包含的车站
            for (int station : rs[poll]) {
                // 如果包含终点，返回进入该路线花费的距离即可
                if (station == t) return step;

                // 将由该线路的车站发起的路线，加入队列
                Set&lt;Integer&gt; lines = map.get(station);
                if (lines == null) continue;
                for (int nr : lines) {
                    if (!m.containsKey(nr)) {
                        m.put(nr, step + 1);
                        d.add(nr);
                    }
                }
            }
        }
        return -1;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1624886541130.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第377期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-377-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-377-qi/">
        </link>
        <updated>2021-06-27T13:21:31.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>运动一周瘦不下来不要紧，因为运动十周也瘦不下来的。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>荷风送香气，竹露滴清响。<br>
——孟浩然《夏日南亭怀辛大》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>其实你不是真的很有趣，你只是太孤独。这个你，就是我。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1624886887334.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>还还还是广搜：</p>
<pre><code class="language-java">class Solution {
    public int snakesAndLadders(int[][] board) {
        int n = board.length;
        boolean[] vis = new boolean[n * n + 1];
        Queue&lt;int[]&gt; queue = new LinkedList&lt;int[]&gt;();
        queue.offer(new int[]{1, 0});
        while (!queue.isEmpty()) {
            int[] p = queue.poll();
            for (int i = 1; i &lt;= 6; ++i) {
                int nxt = p[0] + i;
                if (nxt &gt; n * n) { // 超出边界
                    break;
                }
                int[] rc = id2rc(nxt, n); // 得到下一步的行列
                if (board[rc[0]][rc[1]] &gt; 0) { // 存在蛇或梯子
                    nxt = board[rc[0]][rc[1]];
                }
                if (nxt == n * n) { // 到达终点
                    return p[1] + 1;
                }
                if (!vis[nxt]) {
                    vis[nxt] = true;
                    queue.offer(new int[]{nxt, p[1] + 1}); // 扩展新状态
                }
            }
        }
        return -1;
    }

    public int[] id2rc(int id, int n) {
        int r = (id - 1) / n, c = (id - 1) % n;
        if (r % 2 == 1) {
            c = n - 1 - c;
        }
        return new int[]{n - 1 - r, c};
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1624886872960.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MySQL 主从复制加密以及binlog的加密实现]]></title>
        <id>https://2293736867.github.io/post/mysql-zhu-cong-fu-zhi-jia-mi-yi-ji-binlog-de-jia-mi-shi-xian/</id>
        <link href="https://2293736867.github.io/post/mysql-zhu-cong-fu-zhi-jia-mi-yi-ji-binlog-de-jia-mi-shi-xian/">
        </link>
        <updated>2021-06-26T08:09:32.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#1-%E6%A6%82%E8%BF%B0">1 概述</a></li>
<li><a href="#2-%E7%8E%AF%E5%A2%83">2 环境</a></li>
<li><a href="#3-%E5%87%86%E5%A4%87%E5%AE%B9%E5%99%A8">3 准备容器</a></li>
<li><a href="#4-ssl%E8%BF%9E%E6%8E%A5%E5%87%86%E5%A4%87">4 <code>SSL</code>连接准备</a>
<ul>
<li><a href="#41-%E7%A1%AE%E4%BF%9Dssl%E5%BC%80%E5%90%AF">4.1 确保<code>SSL</code>开启</a></li>
<li><a href="#42-%E7%94%9F%E6%88%90ca%E5%92%8C%E7%A7%81%E9%92%A5">4.2 生成<code>CA</code>和私钥</a></li>
<li><a href="#43-%E4%BF%AE%E6%94%B9%E6%9D%83%E9%99%90">4.3 修改权限</a></li>
<li><a href="#44-%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">4.4 修改配置文件</a></li>
</ul>
</li>
<li><a href="#5-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E7%9A%84%E5%85%B6%E4%BB%96%E9%85%8D%E7%BD%AE">5 主从复制的其他配置</a></li>
<li><a href="#6-%E5%88%9B%E5%BB%BA%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E7%9A%84%E7%94%A8%E6%88%B7">6 创建主从复制的用户</a></li>
<li><a href="#7-%E4%BF%AE%E6%94%B9%E4%BB%8E%E5%BA%93%E9%85%8D%E7%BD%AE%E6%8C%87%E5%90%91%E4%B8%BB%E5%BA%93">7 修改从库配置指向主库</a></li>
<li><a href="#8-%E5%90%AF%E5%8A%A8%E4%BB%8E%E5%BA%93%E5%B9%B6%E6%B5%8B%E8%AF%95">8 启动从库并测试</a></li>
<li><a href="#9-binlog%E7%9A%84%E5%8A%A0%E5%AF%86">9 <code>binlog</code>的加密</a>
<ul>
<li><a href="#91-%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6">9.1 安装插件</a></li>
<li><a href="#92-%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE">9.2 修改配置</a></li>
</ul>
</li>
<li><a href="#10-%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5">10 参考链接</a></li>
</ul>
</p>
<h1 id="1-概述">1 概述</h1>
<p>本文主要讲述了如何在主从复制的过程中使用<code>SSL</code>进行加密，还有<code>binlog</code>加密（<code>MySQL 8.0.14+</code>）的实现。</p>
<h1 id="2-环境">2 环境</h1>
<ul>
<li><code>MySQL 8.0.25</code></li>
<li><code>Docker</code></li>
<li>一主一从</li>
</ul>
<h1 id="3-准备容器">3 准备容器</h1>
<p>先拉取镜像并启动，主库<code>3306</code>，从库<code>3307</code>，还需要加上<code>--ssl</code>参数，以开启<code>SSL</code>加密连接的功能：</p>
<pre><code class="language-bash">docker pull mysql
docker run -itd -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 --name mysql-master mysql --ssl
docker run -itd -p 3307:3306 -p 33061:33060 -e MYSQL_ROOT_PASSWORD=123456 --name mysql-slave mysql --ssl
</code></pre>
<p>启动容器之后进入容器并安装<code>vim</code>和<code>net-tools</code>：</p>
<pre><code class="language-bash">apt install vim net-tools
</code></pre>
<p>同时进入<code>MySQL</code>准备好数据源：</p>
<pre><code class="language-sql">create database test;
use test;
create table user(
	id int primary key auto_increment,
	name varchar(30) not null,
	age int not null
);
</code></pre>
<h1 id="4-ssl连接准备">4 <code>SSL</code>连接准备</h1>
<h2 id="41-确保ssl开启">4.1 确保<code>SSL</code>开启</h2>
<p>首先可以进入<code>MySQL</code>确保<code>SSL</code>功能开启：</p>
<pre><code class="language-sql">show variables like '%ssl%';
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20210626135041437.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="42-生成ca和私钥">4.2 生成<code>CA</code>和私钥</h2>
<p>默认情况下，在<code>/var/lib/mysql</code>下已经有生成的证书和私钥文件，如果不想用默认的，可以重新生成：</p>
<pre><code class="language-bash">sudo mkdir /mysql
sudo chown mysql:mysql /mysql
mysql_ssl_rsa_setup --datadir=/mysql
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/2021062613540272.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>生成的文件包括：</p>
<ul>
<li><code>ca-key.pem</code>：<code>CA</code>私钥</li>
<li><code>ca.pem</code>：自签名的<code>CA</code>证书</li>
<li><code>client-key.pem</code>：客户端连接时使用的私钥</li>
<li><code>client-cert.pem</code>：客户端连接时使用的证书</li>
<li><code>server-key.pem</code>：服务器端私钥</li>
<li><code>server-cert.pem</code>：服务器端证书</li>
<li><code>public_key.pem</code>/<code>private_key.pem</code>：密钥对的公钥和私钥</li>
</ul>
<p>实际使用只需要用到<code>ca.pem</code>、服务端私钥证书、客户端私钥证书这五个文件。由于主从复制的时候，主库作为服务端，从库作为客户端，因此<code>ca.pem</code>/<code>server-key.pem</code>/<code>server-client.pem</code>只需要在主库中配置，而<code>ca.pem</code>/<code>client-key.pem</code>/<code>client-cert.pem</code>需要通过<code>scp</code>传到从库中。</p>
<h2 id="43-修改权限">4.3 修改权限</h2>
<p>权限错误会导致<code>MySQL</code>无法正常使用<code>SSL</code>的功能：</p>
<pre><code class="language-bash">sudo chown mysql:mysql /mysql/*.pem
sudo chmod 400 /mysql/*.pem
sudo chmod 444 /mysql/ca.pem
</code></pre>
<h2 id="44-修改配置文件">4.4 修改配置文件</h2>
<p>修改主库的配置文件，如下所示：</p>
<pre><code class="language-bash">[mysqld]
ssl_ca=/mysql/ca.pem
ssl_cert=/mysql/server-cert.pem
ssl_key=/mysql/server-key.pem
</code></pre>
<p>而从库配置文件 修改如下：</p>
<pre><code class="language-bash">[client]
ssl-ca=/mysql/ca.pem
ssl-cert=/mysql/client-cert.pem
ssl-key=/mysql/client-key.pem
</code></pre>
<p>此时从库是没办法连接自己的，只能连接主库，如果需要连接自己，需要将主库的<code>server-key.pem</code>/<code>server-cert.pem</code>拷贝到从库中，并配置从库的<code>[mysqld]</code>：</p>
<pre><code class="language-bash">[mysqld]
ssl_ca=/mysql/ca.pem
ssl_cert=/mysql/server-cert.pem
ssl_key=/mysql/server-key.pem
</code></pre>
<h1 id="5-主从复制的其他配置">5 主从复制的其他配置</h1>
<p>下面是一些主从复制的最常规最简单的配置，主库仅配置了<code>id</code>和需要复制的库：</p>
<pre><code class="language-bash">[mysqld]
server-id=1                
binlog-do-db=test         
</code></pre>
<p>从库的配置如下：</p>
<pre><code class="language-bash">[mysqld]
server-id=2            
replicate-do-db=test   
</code></pre>
<p>修改完后重启主库和从库。</p>
<h1 id="6-创建主从复制的用户">6 创建主从复制的用户</h1>
<p>在主库中创建主从复制的用户（具体<code>ip</code>请使用<code>ifconfig</code>查看）：</p>
<pre><code class="language-sql">create user 'repl'@'172.17.0.3' identified with mysql_native_password by '123456' require ssl;
grant replication slave on *.* to 'repl'@'172.17.0.3';
</code></pre>
<h1 id="7-修改从库配置指向主库">7 修改从库配置指向主库</h1>
<p>首先查看主库的状态：</p>
<pre><code class="language-sql">show master status;
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20210626151712328.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>把<code>File</code>和<code>Position</code>记录下来，并在从库中使用<code>change master to</code>/<code>change replication source to</code>（<code>8.0.23+</code>）设置主库信息：</p>
<pre><code class="language-bash">change master to
master_host = '172.17.0.2',
master_user = 'repl',
master_password = '123456',
master_log_file = 'binlog.000005',
master_log_pos = 156,
master_ssl = 1;
</code></pre>
<p>或</p>
<pre><code class="language-bash">change replication source to
source_host = '172.17.0.2',
source_user = 'repl',
source_password = '123456',
source_log_file = 'binlog.000005',
source_log_pos = 156;  
source_ssl = 1;
</code></pre>
<h1 id="8-启动从库并测试">8 启动从库并测试</h1>
<p>可以使用<code>start slave</code>/<code>start replica</code>（<code>8.0.22+</code>）启动从库开启复制功能：</p>
<pre><code class="language-bash">start slave
# 或
start replica
</code></pre>
<p>启动完成后使用</p>
<pre><code class="language-sql">show slave stauts\G
</code></pre>
<p>查看从库状态：</p>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20210626151732145.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>需要显示两个<code>Yes</code>才算成功，如果<code>Slave_IO_Running</code>一直显示<code>Connecting</code>，可能原因是：</p>
<ul>
<li>在从库中配置的主库地址、端口、用户名、密码等错误</li>
<li><code>SSL</code>配置错误，比如使用了错误的<code>client-key.pem</code></li>
<li>防火墙问题</li>
</ul>
<p>请查看日志自行检查，日志位置可通过</p>
<pre><code class="language-sql">show variables like 'log_error'
</code></pre>
<p>查看。</p>
<p>没有问题后，尝试在主库中插入数据：</p>
<pre><code class="language-sql">use test;
insert into user values('111',1);
</code></pre>
<p>在从库中就可以查询到了：</p>
<pre><code class="language-sql">use test;
select * from user;
</code></pre>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/20210626151908748.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="9-binlog的加密">9 <code>binlog</code>的加密</h1>
<p>从<code>8.0.14</code>开始，<code>MySQL</code>提供了对<code>binlog</code>的加密功能，默认情况下，<code>binlog</code>是没有加密的，加密需要使用<code>keyring</code>插件或者组件：</p>
<figure data-type="image" tabindex="6"><img src="https://img-blog.csdnimg.cn/20210626152037772.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>实现步骤如下：</p>
<ul>
<li>安装<code>keyring_file</code>插件</li>
<li>修改配置</li>
<li>测试</li>
</ul>
<h2 id="91-安装插件">9.1 安装插件</h2>
<p><code>MySQL</code>提供了以下插件的安装：</p>
<figure data-type="image" tabindex="7"><img src="https://img-blog.csdnimg.cn/20210626152219275.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>由于使用的是社区版，社区版只支持<code>keyring_file</code>插件，以此为例。</p>
<p>主库和从库修改配置文件如下：</p>
<pre><code class="language-bash">[mysqld]
early-plugin-load=keyring_file.so
keyring_file_data=/mysql/keyring
</code></pre>
<p>重启后，进入<code>MySQL</code>查看：</p>
<pre><code class="language-sql">select plugin_name,plugin_status from information_schema.plugins where plugin_name like 'keyring%';
</code></pre>
<figure data-type="image" tabindex="8"><img src="https://img-blog.csdnimg.cn/20210626152937375.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>需要处于<code>ACTIVE</code>状态，这样就是成功了。</p>
<h2 id="92-修改配置">9.2 修改配置</h2>
<p><code>binlog</code>的加密通过一个系统变量<code>binlog_encryption</code>控制，需要手动开启：</p>
<pre><code class="language-sql">set global binlog_encryption=ON;
set persist binlog_encryption=ON;
</code></pre>
<p>开启后查看日志：</p>
<pre><code class="language-sql">show binary logs;
</code></pre>
<p>可以看到是加密了的<code>binlog</code>：</p>
<figure data-type="image" tabindex="9"><img src="https://img-blog.csdnimg.cn/20210626154936376.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>而之前没有加密的<code>binlog</code>可以手动迁移数据后进行删除。</p>
<p>加密完<code>binlog</code>后并不需要修改主从复制的配置，主从复制依然生效，如下图所示：</p>
<figure data-type="image" tabindex="10"><img src="https://img-blog.csdnimg.cn/2021062615543555.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>主库插入了一个用户从库依然能<code>select</code>到。</p>
<h1 id="10-参考链接">10 参考链接</h1>
<ul>
<li><a href="https://dev.mysql.com/doc/refman/8.0/en/replication-binlog-encryption.html">MySQL-17.3.2 Encrypting Binary Log Files and Relay Log Files</a></li>
<li><a href="https://dev.mysql.com/doc/refman/8.0/en/using-encrypted-connections.html#using-encrypted-connections-client-side-configuration">MySQL-6.3.1 Configuring MySQL to Use Encrypted Connections</a></li>
<li><a href="https://dev.mysql.com/doc/refman/8.0/en/mysql-ssl-rsa-setup.html">MySQL-4.4.3 mysql_ssl_rsa_setup — Create SSL/RSA Files</a></li>
<li><a href="https://dev.mysql.com/doc/refman/8.0/en/keyring-file-plugin.html">MySQL-6.4.4.6 Using the keyring_file File-Based Keyring Plugin</a></li>
<li><a href="https://dev.mysql.com/doc/refman/8.0/en/keyring-plugin-installation.html">MySQL-6.4.4.3 Keyring Plugin Installation</a></li>
<li><a href="https://dev.mysql.com/doc/refman/8.0/en/keyring-component-installation.html">MySQL-6.4.4.2 Keyring Component Installation</a></li>
<li><a href="https://dev.mysql.com/doc/refman/8.0/en/obtaining-plugin-information.html">MySQL-5.6.2 Obtaining Server Plugin Information</a></li>
<li><a href="https://mysqlhighavailability.com/binary-log-encryption-at-rest/">MySQL High Availablity-Binary log encryption at rest</a></li>
<li><a href="https://stackoverflow.com/questions/59036777/mysql-ssl-is-required-but-the-server-doesnt-support-it">StackOverflow-MySQL - SSL is required but the server doesn't support it</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第376期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-376-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-376-qi/">
        </link>
        <updated>2021-06-25T17:58:49.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>你老是这么抠门，门都被你，抠坏了好几扇。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>客从洞庭来，婉娈潇湘深。<br>
——顾况《游子吟》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>原谅他是上帝的事情，我的事情就是送他去见上帝。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1624643946338.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>还是广搜题：</p>
<pre><code class="language-java">import java.util.*;

public class Solution {
    public int slidingPuzzle(int[][] board) {
        final int[][] target = {
                {1,2,3},
                {4,5,0}
        };
        if(Arrays.deepEquals(target,board)){
            return 0;
        }
        Set&lt;Node&gt; set = new HashSet&lt;&gt;();
        Queue&lt;int[][]&gt; queue = new LinkedList&lt;&gt;();
        queue.add(board);
        int res = 0;
        set.add(new Node(board));
        while (!queue.isEmpty()) {
            ++res;
            int size = queue.size();
            for (int i = 0; i &lt; size; ++i) {
                int[][] top = queue.remove();
                for (int[][] s : get(top)) {
                    if (!set.contains(new Node(s))) {
                        if (Arrays.deepEquals(s, target)) {
                            return res;
                        }
                        queue.offer(s);
                        set.add(new Node(s));
                    }
                }
            }
        }

        return -1;
    }

    private static class Node{
        int [][] board;
        public Node(int [][]board){
            this.board = board;
        }

        @Override
        public int hashCode() {
            return Arrays.deepHashCode(board);
        }

        @Override
        public boolean equals(Object obj) {
            if(!(obj instanceof Node)){
                return false;
            }
            Node node = (Node) obj;
            return Arrays.deepEquals(board,node.board);
        }

        @Override
        public String toString() {
            return Arrays.deepToString(board);
        }
    }

    private int[][][] get(int[][] board) {
        int zi = -1;
        int zj = -1;
        for (int i = 0; i &lt; board.length; i++) {
            for (int j = 0; j &lt; board[i].length; j++) {
                if (board[i][j] == 0) {
                    zi = i;
                    zj = j;
                    break;
                }
            }
            if (zi != -1) {
                break;
            }
        }

        int[][] state1 = new int[2][3];
        int[][] state2 = new int[2][3];
        int[][] state3 = new int[2][3];
        int num = 2;
        if (zi == 0 &amp;&amp; zj == 0) {
            state1[0] = new int[]{board[0][1], 0, board[0][2]};
            state1[1] = new int[]{board[1][0], board[1][1], board[1][2]};
            state2[0] = new int[]{board[1][0], board[0][1], board[0][2]};
            state2[1] = new int[]{0, board[1][1], board[1][2]};
        } else if (zi == 0 &amp;&amp; zj == 1) {
            state1[0] = new int[]{0, board[0][0], board[0][2]};
            state1[1] = new int[]{board[1][0], board[1][1], board[1][2]};
            state2[0] = new int[]{board[0][0], board[0][2], 0};
            state2[1] = new int[]{board[1][0], board[1][1], board[1][2]};
            state3[0] = new int[]{board[0][0], board[1][1], board[0][2]};
            state3[1] = new int[]{board[1][0], 0, board[1][2]};
            num = 3;
        } else if (zi == 0 &amp;&amp; zj == 2) {
            state1[0] = new int[]{board[0][0], 0, board[0][1]};
            state1[1] = new int[]{board[1][0], board[1][1], board[1][2]};
            state2[0] = new int[]{board[0][0], board[0][1], board[1][2]};
            state2[1] = new int[]{board[1][0], board[1][1], 0};
        } else if (zi == 1 &amp;&amp; zj == 0) {
            state1[0] = new int[]{0, board[0][1], board[0][2]};
            state1[1] = new int[]{board[0][0], board[1][1], board[1][2]};
            state2[0] = new int[]{board[0][0], board[0][1], board[0][2]};
            state2[1] = new int[]{board[1][1], 0, board[1][2]};
        } else if (zi == 1 &amp;&amp; zj == 1) {
            state1[0] = new int[]{board[0][0], 0, board[0][2]};
            state1[1] = new int[]{board[1][0], board[0][1], board[1][2]};
            state2[0] = new int[]{board[0][0], board[0][1], board[0][2]};
            state2[1] = new int[]{board[1][0], board[1][2], 0};
            state3[0] = new int[]{board[0][0], board[0][1], board[0][2]};
            state3[1] = new int[]{0, board[1][0], board[1][2]};
            num = 3;
        } else {
            state1[0] = new int[]{board[0][0], board[0][1], 0};
            state1[1] = new int[]{board[1][0], board[1][1], board[0][2]};
            state2[0] = new int[]{board[0][0], board[0][1], board[0][2]};
            state2[1] = new int[]{board[1][0], 0, board[1][1]};
        }
        int[][][] res = new int[num][2][3];
        res[0] = state1;
        res[1] = state2;
        if(num == 3){
            res[2] = state3;
        }
        return res;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1624643984398.png" alt="" loading="lazy"></figure>
<p>首先判断传进来的是否与目标相等，如果相等直接返回，否则添加到队列还有集合里面。</p>
<p>注意集合需要使用一个包装类，重写<code>equals</code>以及<code>hashCode</code>，这样才能正确判断数组。</p>
<p>进行循环后，首先将结果加1，并计算队列个数<code>size</code>，取<code>size</code>个队首，获取它们可能到达的位置，然后判断该位置是否已经出现过，如果出现过，直接忽略，如果没有出现过，首先判断数组是否与目标相等，若相等直接返回结果，若不等，添加到队列以及集合中。</p>
<p>然后翻了一下1ms提交的，好家伙，这肯定<code>O(1)</code>啊：</p>
<figure data-type="image" tabindex="3"><img src="https://2293736867.github.io/post-images/1624644163305.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第375期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-375-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-375-qi/">
        </link>
        <updated>2021-06-25T10:55:31.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>同甘共苦你不陪，荣华富贵你是谁？</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>问何人又卸，片帆沙岸，系斜阳缆？<br>
——辛弃疾《水龙吟·过南剑双溪楼》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>风筝的线你随时可以放开，只是别盼望我会回来。</p>
</blockquote>
<h1 id="每日力扣">每日力扣</h1>
<h2 id="题目">题目</h2>
<figure data-type="image" tabindex="1"><img src="https://2293736867.github.io/post-images/1624618691721.png" alt="" loading="lazy"></figure>
<h2 id="解答">解答</h2>
<p>广搜：</p>
<pre><code class="language-java">import java.util.*;

public class Solution {
    private static final String ZERO = &quot;0000&quot;;

    public int openLock(String[] deadends, String target) {
        if(target.equals(ZERO)) {
            return 0;
        }

        final Set&lt;String&gt; dead = new HashSet&lt;&gt;();
        for(String s:deadends){
            dead.add(s);
            if(s.equals(ZERO)){
                return -1;
            }
        }

        int res = 0;
        Queue&lt;String&gt; queue = new LinkedList&lt;&gt;();
        queue.add(ZERO);
        Set&lt;String&gt; visit = new HashSet&lt;&gt;();
        visit.add(ZERO);

        while (!queue.isEmpty()){
            ++res;
            int size = queue.size();
            for (int i = 0; i &lt; size; i++) {
                String str = queue.remove();
                for(String s:get(str)){
                    if(!dead.contains(s) &amp;&amp; !visit.contains(s)){
                        if(s.equals(target)){
                            return res;
                        }
                        queue.offer(s) ;
                        visit.add(s);
                    }
                }
            }
        }
        return -1;
    }

    public char numPrev(char x) {
        return x == '0' ? '9' : (char) (x - 1);
    }

    public char numSucc(char x) {
        return x == '9' ? '0' : (char) (x + 1);
    }

    public List&lt;String&gt; get(String status) {
        List&lt;String&gt; ret = new ArrayList&lt;String&gt;();
        char[] array = status.toCharArray();
        for (int i = 0; i &lt; 4; ++i) {
            char num = array[i];
            array[i] = numPrev(num);
            ret.add(new String(array));
            array[i] = numSucc(num);
            ret.add(new String(array));
            array[i] = num;
        }
        return ret;
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://2293736867.github.io/post-images/1624623354233.png" alt="" loading="lazy"></figure>
<p>就是不是十分服气下面的超时怎么来的，命名单独把样例拿出来跑就不会超时。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Spring Boot demo系列（十二）：ShardingSphere + MyBatisPlus 读写分离 + 主从复制]]></title>
        <id>https://2293736867.github.io/post/spring-boot-demo-xi-lie-shi-er-shardingsphere-mybatisplus-du-xie-fen-chi-zhu-cong-fu-zhi/</id>
        <link href="https://2293736867.github.io/post/spring-boot-demo-xi-lie-shi-er-shardingsphere-mybatisplus-du-xie-fen-chi-zhu-cong-fu-zhi/">
        </link>
        <updated>2021-06-25T10:42:51.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#1-%E6%A6%82%E8%BF%B0">1 概述</a></li>
<li><a href="#2-%E7%8E%AF%E5%A2%83">2 环境</a></li>
<li><a href="#3-%E4%B8%80%E4%BA%9B%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA">3 一些基础理论</a>
<ul>
<li><a href="#31-%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB">3.1 读写分离</a></li>
<li><a href="#32-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6">3.2 主从复制</a></li>
<li><a href="#33-%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%AE%80%E4%BB%8B">3.3 数据库中间件简介</a></li>
</ul>
</li>
<li><a href="#4-mysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87">4 <code>MySQL</code>主从复制环境准备</a>
<ul>
<li><a href="#41-%E4%B8%BB%E5%BA%93%E6%93%8D%E4%BD%9C">4.1 主库操作</a>
<ul>
<li><a href="#411-%E6%8B%89%E5%8F%96%E9%95%9C%E5%83%8F%E5%B9%B6%E5%88%9B%E5%BB%BA%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8C">4.1.1 拉取镜像并创建容器运行</a></li>
<li><a href="#412-%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">4.1.2 修改配置文件</a></li>
<li><a href="#413-%E5%87%86%E5%A4%87%E6%95%B0%E6%8D%AE%E6%BA%90">4.1.3 准备数据源</a></li>
<li><a href="#414-%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%A4%8D%E5%88%B6%E6%93%8D%E4%BD%9C%E7%9A%84%E7%94%A8%E6%88%B7%E5%8F%AF%E9%80%89%E4%BD%86%E6%8E%A8%E8%8D%90">4.1.4 创建一个复制操作的用户（可选但推荐）</a></li>
<li><a href="#415-%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E5%8F%AF%E9%80%89">4.1.5 数据备份（可选）</a></li>
<li><a href="#416-%E6%9F%A5%E7%9C%8B%E4%B8%BB%E5%BA%93%E7%8A%B6%E6%80%81">4.1.6 查看主库状态</a></li>
</ul>
</li>
<li><a href="#42-%E4%BB%8E%E5%BA%93%E6%93%8D%E4%BD%9C">4.2 从库操作</a>
<ul>
<li><a href="#421-%E6%8B%89%E5%8F%96%E9%95%9C%E5%83%8F%E5%B9%B6%E5%88%9B%E5%BB%BA%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8C">4.2.1 拉取镜像并创建容器运行</a></li>
<li><a href="#422-%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">4.2.2 修改配置文件</a></li>
<li><a href="#423-%E6%9F%A5%E7%9C%8Bip%E5%9C%B0%E5%9D%80">4.2.3 查看<code>ip</code>地址</a></li>
<li><a href="#424-%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E5%8F%AF%E9%80%89">4.2.4 导入数据（可选）</a></li>
<li><a href="#425-%E5%87%86%E5%A4%87%E6%95%B0%E6%8D%AE%E6%BA%90">4.2.5 准备数据源</a></li>
<li><a href="#426-%E8%AE%BE%E7%BD%AE%E4%B8%BB%E5%BA%93">4.2.6 设置主库</a></li>
<li><a href="#427-%E5%BC%80%E5%90%AF%E4%BB%8E%E5%BA%93">4.2.7 开启从库</a></li>
</ul>
</li>
<li><a href="#43-%E6%B5%8B%E8%AF%95">4.3 测试</a></li>
</ul>
</li>
<li><a href="#5-%E6%90%AD%E5%BB%BAspring-boot%E7%8E%AF%E5%A2%83">5 搭建<code>Spring Boot</code>环境</a>
<ul>
<li><a href="#51-%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE%E5%B9%B6%E5%BC%95%E5%85%A5%E4%BE%9D%E8%B5%96">5.1 新建项目并引入依赖</a></li>
<li><a href="#52-%E4%BD%BF%E7%94%A8%E7%94%9F%E6%88%90%E5%99%A8">5.2 使用生成器</a></li>
<li><a href="#53-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">5.3 配置文件</a></li>
<li><a href="#54-%E5%87%86%E5%A4%87controller">5.4 准备<code>Controller</code></a></li>
</ul>
</li>
<li><a href="#6-%E6%B5%8B%E8%AF%95">6 测试</a></li>
<li><a href="#7-%E5%8F%82%E8%80%83%E6%BA%90%E7%A0%81">7 参考源码</a></li>
<li><a href="#8-%E5%8F%82%E8%80%83">8 参考</a></li>
</ul>
</p>
<h1 id="1-概述">1 概述</h1>
<p>本文讲述了如何使用<code>MyBatisPlus</code>+<code>ShardingSphere</code>进行读写分离，以及利用<code>MySQL</code>进行一主一从的主从复制。</p>
<p>具体步骤包括：</p>
<ul>
<li><code>MySQL</code>主从复制环境准备（<code>Docker</code>）</li>
<li>搭建<code>ShardingShpere</code>+<code>MyBatisPlus</code>+<code>Druid</code>环境</li>
<li>测试</li>
</ul>
<h1 id="2-环境">2 环境</h1>
<ul>
<li><code>OpenJDK 11.0.11</code></li>
<li><code>Spring Boot 2.5.1</code></li>
<li><code>MyBatis Plus 3.4.3.1</code></li>
<li><code>MyBatis Plus Generator 3.5.0</code></li>
<li><code>Druid 1.2.6</code></li>
<li><code>ShardingSphere 4.1.1</code></li>
<li><code>MySQL 8.0.25</code></li>
</ul>
<h1 id="3-一些基础理论">3 一些基础理论</h1>
<h2 id="31-读写分离">3.1 读写分离</h2>
<p>读写分离，顾名思义就是读和写分开，更具体来说，就是：</p>
<ul>
<li>写操作在主数据库进行</li>
<li>读操作在从数据库进行</li>
</ul>
<p>使用读写分离的根本目的就是为了提高并发性能，如果读写都在同一台<code>MySQL</code>上实现，相信会不如一台<code>MySQL</code>写，另外两台<code>MySQL</code>读这样的配置性能高。另一方面，在很多时候都是读操作的请求要远远高于写操作，这样就显得读写分离非常有必要了。</p>
<h2 id="32-主从复制">3.2 主从复制</h2>
<p>主从复制，顾名思义就是把主库的数据复制到从库中，因为读写分离之后，写操作都在主库进行，但是读操作是在从库进行的，也就是说，主库上的数据如果不能复制到从库中，那么从库就不会读到主库中的数据。严格意义上说，读写分离并不要求主从复制，只需要在主库写从库读即可，但是如果没有了主从复制，读写分离将失去了它的意义。因此读写分离通常与主从复制配合使用。</p>
<p>因为本示例使用的是<code>MySQL</code>，这里就说一下<code>MySQL</code>主从复制的原理，如下图所示：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20210625140216782.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>工作流程如下：</p>
<ul>
<li>主库修改数据后，将修改日志写入<code>binlog</code></li>
<li>从库的<code>I/O</code>线程读取主库的<code>binlog</code>，并拷贝到从库本地的<code>binlog</code>中</li>
<li>从库本地的<code>binlog</code>被<code>SQL</code>线程读取，执行其中的内容并同步到从库中</li>
</ul>
<h2 id="33-数据库中间件简介">3.3 数据库中间件简介</h2>
<p>数据库中间件可以简化对读写分离以及分库分表的操作，并隐藏底层实现细节，可以像操作单库单表那样操作多库多表，主流的设计方案主要有两种：</p>
<ul>
<li>服务端代理：需要独立部署一个代理服务，该代理服务后面管理多个数据库实例，在应用中通过一个数据源与该代理服务器建立连接，由该代理去操作底层数据库，并返回相应结果。优点是支持多语言，对业务透明，缺点是实现复杂，实现难度大，同时代理需要确保自身高可用</li>
<li>客户端代理：在连接池或数据库驱动上进行一层封装，内部与不同的数据库建立连接，并对<code>SQL</code>进行必要的操作，比如读写分离选择走主库还是从库，分库分表<code>select</code>后如何聚合结果。优点是实现简单，天然去中心化，缺点是支持语言较少，版本升级困难</li>
</ul>
<p>一些常见的数据库中间件如下：</p>
<ul>
<li><code>Cobar</code>：阿里开源的关系型数据库分布式服务中间件，已停更</li>
<li><code>DRDS</code>：脱胎于<code>Cobar</code>，全称<code>分布式关系型数据库服务</code></li>
<li><code>MyCat</code>：开源数据库中间件，目前更新了<code>MyCat2</code>版本</li>
<li><code>Atlas</code>：<code>Qihoo 360</code>公司<code>Web</code>平台部基础架构团队开发维护的一个基于<code>MySQL</code>协议的数据中间层项目，同时还有一个<code>NoSQL</code>的版本，叫<code>Pika</code></li>
<li><code>tddl</code>：阿里巴巴自主研发的分布式数据库服务</li>
<li><code>Sharding-JDBC</code>：<code>ShardingShpere</code>的一个子产品，一个轻量级<code>Java</code>框架</li>
</ul>
<h1 id="4-mysql主从复制环境准备">4 <code>MySQL</code>主从复制环境准备</h1>
<p>看完了一些基础理论就可以进行动手了，本小节先准备好<code>MySQL</code>主从复制的环境，基于<code>Docker</code>+<code>MySQL</code>官方文档搭建。</p>
<h2 id="41-主库操作">4.1 主库操作</h2>
<h3 id="411-拉取镜像并创建容器运行">4.1.1 拉取镜像并创建容器运行</h3>
<pre><code class="language-bash">docker pull mysql
docker run -itd -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 --name mysql-master mysql
docker exec -it mysql-master /bin/bash
</code></pre>
<p>在主库中进行更新镜像源，安装<code>vim</code>以及<code>net-tools</code>的操作：</p>
<pre><code class="language-bash">cd /etc/apt
echo deb http://mirrors.aliyun.com/debian/ buster main non-free contrib deb-src http://mirrors.aliyun.com/debian/ buster main non-free contrib deb http://mirrors.aliyun.com/debian-security buster/updates main deb-src http://mirrors.aliyun.com/debian-security buster/updates main deb http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib deb-src http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib deb http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib deb-src http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib &gt; sources.list
apt update &amp;&amp; apt upgrade
apt install vim net-tools
</code></pre>
<h3 id="412-修改配置文件">4.1.2 修改配置文件</h3>
<pre><code class="language-bash">vim /etc/mysql/my.cnf
</code></pre>
<p>添加下面两行数据：</p>
<pre><code class="language-bash">[mysqld]
server-id=1                # 全局唯一，取值[1,2^32-1]，默认为1
binlog-do-db=test          # 表示需要复制的是哪个库
</code></pre>
<p>修改完成后重启。</p>
<h3 id="413-准备数据源">4.1.3 准备数据源</h3>
<pre><code class="language-sql">create database test;
use test;
create table user(
	id int primary key auto_increment,
	name varchar(30) not null,
	age int not null
);
</code></pre>
<h3 id="414-创建一个复制操作的用户可选但推荐">4.1.4 创建一个复制操作的用户（可选但推荐）</h3>
<p>注意创建用户需要加上<code>mysql_native_password</code>，否则会导致从库一直处于连接状态：</p>
<pre><code class="language-sql">create user 'repl'@'172.17.0.3' identified with mysql_native_password by '123456';
grant replication slave on *.* to 'repl'@'172.17.0.3';
</code></pre>
<p>具体的地址请根据从库的地址修改，可以先看后面的从库配置部分。</p>
<h3 id="415-数据备份可选">4.1.5 数据备份（可选）</h3>
<p>如果原来的主库中是有数据的，那么这部分数据需要手动同步到从库中：</p>
<pre><code class="language-sql">flush tables with read lock;
</code></pre>
<p>开启主库的另一个终端，使用<code>mysqldump</code>导出：</p>
<pre><code class="language-bash">mysqldump -u root -p --all-databases --master-data &gt; dbdump.db
</code></pre>
<p>导出完成后，解除读锁：</p>
<pre><code class="language-sql">unlock tables;
</code></pre>
<h3 id="416-查看主库状态">4.1.6 查看主库状态</h3>
<pre><code class="language-sql">show master status;
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20210625161550759.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>需要把<code>File</code>以及<code>Position</code>记录下来，后面从库的配置需要用到。</p>
<h2 id="42-从库操作">4.2 从库操作</h2>
<h3 id="421-拉取镜像并创建容器运行">4.2.1 拉取镜像并创建容器运行</h3>
<pre><code class="language-bash">docker pull mysql
docker run -itd -p 3307:3306 -p 33061:33060 -e MYSQL_ROOT_PASSWORD=123456 --name mysql-slave mysql
docker exec -it mysql-slave /bin/bash
</code></pre>
<p>进入容器后，像主库一样更新源然后安装<code>vim</code>和<code>net-tools</code>：</p>
<pre><code class="language-bash">cd /etc/apt
echo deb http://mirrors.aliyun.com/debian/ buster main non-free contrib deb-src http://mirrors.aliyun.com/debian/ buster main non-free contrib deb http://mirrors.aliyun.com/debian-security buster/updates main deb-src http://mirrors.aliyun.com/debian-security buster/updates main deb http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib deb-src http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib deb http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib deb-src http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib &gt; sources.list
apt update &amp;&amp; apt upgrade
apt install vim net-tools
</code></pre>
<h3 id="422-修改配置文件">4.2.2 修改配置文件</h3>
<pre><code class="language-bash">vim /etc/mysql/my.cnf
</code></pre>
<p>添加如下两行：</p>
<pre><code class="language-bash">[mysqld]
server-id=2            # 全局唯一，不能与主库相同
replicate-do-db=test   # 与主库相同，表示对该库进行复制
</code></pre>
<p>修改完成后重启。</p>
<h3 id="423-查看ip地址">4.2.3 查看<code>ip</code>地址</h3>
<p>查看从库的<code>ip</code>地址，用于给主库设置同步的用户：</p>
<pre><code class="language-bash">ifconfig
</code></pre>
<p>输出：</p>
<pre><code class="language-bash">inet 172.17.0.3  netmask 255.255.0.0  broadcast 172.17.255.255
</code></pre>
<p>那么主库中用于复制的用户就可以是<code>repl@172.17.0.3</code>。</p>
<h3 id="424-导入数据可选">4.2.4 导入数据（可选）</h3>
<p>如果主库有数据可以先导入到从库：</p>
<pre><code class="language-bash">mysqldump -u root -p --all-databases &lt; dbdump.db
</code></pre>
<h3 id="425-准备数据源">4.2.5 准备数据源</h3>
<pre><code class="language-sql">create database test;
use test;
create table user(
	id int primary key auto_increment,
	name varchar(30) not null,
	age int not null
);
</code></pre>
<h3 id="426-设置主库">4.2.6 设置主库</h3>
<p>可以使用<code>change master to</code>/<code>change replication source to</code>（<code>8.0.23+</code>）命令：</p>
<pre><code class="language-sql">change replication source to 
source_host='172.17.0.2',                   # 可以使用ifconfig查看主库ip
source_user='repl',                         # 之前主库创建的用户
source_password='123456',                   # 密码
source_log_file='binlog.000003',            # 之前在主库上使用show master status查看的日志文件
source_log_pos=594;                         # 同样使用show master status查看
</code></pre>
<h3 id="427-开启从库">4.2.7 开启从库</h3>
<pre><code class="language-sql">start slave;
show slave status\G
</code></pre>
<p>新版本（<code>8.0.22+</code>）可使用：</p>
<pre><code class="language-sql">start replica;
show replica status\G
</code></pre>
<p>需要<code>IO</code>和<code>SQL</code>线程显示<code>Yes</code>才算成功：</p>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20210625163911765.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="43-测试">4.3 测试</h2>
<p>主库选择插入一条数据：</p>
<pre><code class="language-sql">insert into user values(1,&quot;name&quot;,3);
</code></pre>
<p>然后从库就能<code>select</code>到了：</p>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20210625165315257.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="5-搭建spring-boot环境">5 搭建<code>Spring Boot</code>环境</h1>
<h2 id="51-新建项目并引入依赖">5.1 新建项目并引入依赖</h2>
<p>新建<code>Spring Boot</code>项目，并引入如下依赖：</p>
<pre><code class="language-bash">implementation 'com.baomidou:mybatis-plus-boot-starter:3.4.3.1'
implementation 'com.baomidou:mybatis-plus-generator:3.5.0'
implementation 'org.apache.velocity:velocity-engine-core:2.3'
implementation 'org.realityforge.org.jetbrains.annotations:org.jetbrains.annotations:1.7.0'
implementation 'com.alibaba:druid:1.2.6' # 注意不能使用druid的starter依赖，会出现模板找不到的问题
implementation 'org.apache.shardingsphere:sharding-jdbc-spring-boot-starter:4.1.1'
</code></pre>
<p><code>Maven</code>版本：</p>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;
    &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;
    &lt;version&gt;3.4.3.1&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;
    &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt;
    &lt;version&gt;3.5.0&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;
    &lt;artifactId&gt;velocity-engine-core&lt;/artifactId&gt;
    &lt;version&gt;2.3&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.realityforge.org.jetbrains.annotations&lt;/groupId&gt;
    &lt;artifactId&gt;org.jetbrains.annotations&lt;/artifactId&gt;
    &lt;version&gt;1.7.0&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;
    &lt;artifactId&gt;druid&lt;/artifactId&gt;
    &lt;version&gt;1.2.6&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.apache.shardingsphere&lt;/groupId&gt;
    &lt;artifactId&gt;sharding-jdbc-spring-boot-starter&lt;/artifactId&gt;
    &lt;version&gt;4.1.1&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<h2 id="52-使用生成器">5.2 使用生成器</h2>
<pre><code class="language-java">import com.baomidou.mybatisplus.generator.AutoGenerator;
import com.baomidou.mybatisplus.generator.config.*;

public class MyBatisPlusGenerator {
    public static void main(String[] args) {
        DataSourceConfig dataSourceConfig = new DataSourceConfig.Builder(&quot;jdbc:mysql://localhost:3306/test&quot;,&quot;root&quot;,&quot;123456&quot;).build();
        String projectPath = System.getProperty(&quot;user.dir&quot;);
        GlobalConfig globalConfig = new GlobalConfig.Builder().outputDir(projectPath+&quot;/src/main/java&quot;).openDir(false).build();
        PackageConfig packageConfig = new PackageConfig.Builder().moduleName(&quot;test&quot;).parent(&quot;com.example.demo&quot;).build();
        AutoGenerator autoGenerator = new AutoGenerator(dataSourceConfig);
        autoGenerator.global(globalConfig).packageInfo(packageConfig);
        autoGenerator.execute();
    }
}
</code></pre>
<p>直接运行<code>main</code>方法即可生成代码，配置请根据个人需要进行更改，更详细的配置可以参考笔者的<a href="https://blog.csdn.net/qq_27525611/article/details/118197154">另一篇文章</a>。</p>
<h2 id="53-配置文件">5.3 配置文件</h2>
<pre><code class="language-yml">spring:
  datasource:
    url: jdbc:mysql://localhost:3306/test
    username: root
    password: 123456
  shardingsphere:
    datasource:
      names: master,slave                                   # 数据源名字
      master:
        type: com.alibaba.druid.pool.DruidDataSource        # 连接池
        url: jdbc:mysql://127.0.0.1:3306/test               # 主库地址
        username: root                                      # 主库用户名
        password: 123456                                    # 主库密码
      slave:
        type: com.alibaba.druid.pool.DruidDataSource        # 连接池
        url: jdbc:mysql://127.0.0.1:3307/test               # 从库地址
        username: root
        password: 123456
    masterslave:
      load-balance-algorithm-type: round_robin              # 负载均衡算法，
      name: ms
      master-data-source-name: master                       # 主库数据源名字
      slave-data-source-names: slave                        # 从库数据源名字
    props:
      sql:
        show: true                                          # 打印SQL
</code></pre>
<p>关于负载均衡算法，目前只支持两种：</p>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/20210625171008182.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="54-准备controller">5.4 准备<code>Controller</code></h2>
<pre><code class="language-java">@RestController
@RequestMapping(&quot;/test/user&quot;)
@AllArgsConstructor(onConstructor = @__(@Autowired))
public class UserController {
    private final UserServiceImpl userService;
    @GetMapping(&quot;/write&quot;)
    public boolean write(){
        return userService.save(User.builder().age(3).name(&quot;234&quot;).build());
    }

    @GetMapping(&quot;/read&quot;)
    public User read(){
        return userService.getById(1);
    }
}
</code></pre>
<h1 id="6-测试">6 测试</h1>
<p>访问<code>http://localhost:8080/test/user/write</code>，可以看到写操作在主库进行：</p>
<figure data-type="image" tabindex="6"><img src="https://img-blog.csdnimg.cn/20210625175333981.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>访问<code>http://localhost:8080/test/user/read</code>，可以看到读操作在从库进行：</p>
<figure data-type="image" tabindex="7"><img src="https://img-blog.csdnimg.cn/20210625175408912.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>这样读写分离就算是可以了。</p>
<h1 id="7-参考源码">7 参考源码</h1>
<p><code>Java</code>版：</p>
<ul>
<li><a href="https://github.com/2293736867/SpringBootDemoJava/tree/main/ShardingSphereMyBaitsPlusMySQLMasterSlave">Github</a></li>
<li><a href="https://gitee.com/u6b7b5fc3/SpringBootDemoJava/tree/main/ShardingSphereMyBaitsPlusMySQLMasterSlave">码云</a></li>
<li><a href="https://codechina.csdn.net/qq_27525611/SpringBootDemoJava/-/tree/main/ShardingSphereMyBaitsPlusMySQLMasterSlave">CODE CHINA</a></li>
</ul>
<p><code>Kotlin</code>版：</p>
<ul>
<li><a href="https://github.com/2293736867/SpringBootDemoKotlin/tree/main/ShardingSphereMyBaitsPlusMySQLMasterSlave">Github</a></li>
<li><a href="https://gitee.com/u6b7b5fc3/SpringBootDemoKotlin/tree/main/ShardingSphereMyBaitsPlusMySQLMasterSlave">码云</a></li>
<li><a href="https://codechina.csdn.net/qq_27525611/SpringBootDemoKotlin/-/tree/main/ShardingSphereMyBaitsPlusMySQLMasterSlave">CODE CHINA</a></li>
</ul>
<h1 id="8-参考">8 参考</h1>
<ul>
<li><a href="https://dev.mysql.com/doc/refman/8.0/en/replication-configuration.html">MySQL 官方文档</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1457281">腾讯云-面试题:你们有没有做 MySQL 读写分离？如何实现 MySQL 的读写分离？</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/87144535">知乎-数据库中间件详解（精品长文）</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Spring Boot demo系列（十一）：MyBatis Plus Generator代码生成]]></title>
        <id>https://2293736867.github.io/post/spring-boot-demo-xi-lie-shi-yi-mybatis-plus-generator-dai-ma-sheng-cheng/</id>
        <link href="https://2293736867.github.io/post/spring-boot-demo-xi-lie-shi-yi-mybatis-plus-generator-dai-ma-sheng-cheng/">
        </link>
        <updated>2021-06-24T16:49:02.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#1-%E5%89%8D%E8%A8%80">1 前言</a></li>
<li><a href="#2-%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8">2 为什么需要代码生成器</a></li>
<li><a href="#3-%E7%8E%AF%E5%A2%83">3 环境</a></li>
<li><a href="#4-%E5%87%86%E5%A4%87%E6%95%B0%E6%8D%AE%E8%A1%A8">4 准备数据表</a></li>
<li><a href="#5-%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E5%B9%B6%E5%AF%BC%E5%85%A5%E4%BE%9D%E8%B5%96">5 创建项目并导入依赖</a></li>
<li><a href="#6-%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%94%9F%E6%88%90%E5%99%A8%E7%B1%BB">6 新建一个生成器类</a></li>
<li><a href="#7-%E6%B5%8B%E8%AF%95%E8%BF%90%E8%A1%8C">7 测试运行</a></li>
<li><a href="#8-%E5%85%B6%E4%BB%96%E9%85%8D%E7%BD%AE">8 其他配置</a></li>
<li><a href="#9-%E6%BA%90%E7%A0%81">9 源码</a></li>
<li><a href="#10-%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5">10 参考链接</a></li>
</ul>
</p>
<h1 id="1-前言">1 前言</h1>
<p><code>MyBatis Plus starter</code>最近更新了<code>3.4.3.1</code>版本，而<code>MyBatis Plug Generator</code>更新到了<code>3.5.0</code>版本，但是官方文档还没有更新生成器的代码，另外在之前的文章里介绍过<code>MyBatis Plus</code>的使用，因此这里补上一篇文章结合<code>Spring Boot</code>介绍代码生成器的使用。</p>
<h1 id="2-为什么需要代码生成器">2 为什么需要代码生成器</h1>
<p>使用代码生成器可以生成一些固定模板的代码，比如：</p>
<ul>
<li><code>Controller</code>层代码</li>
<li><code>Service</code>层代码</li>
<li><code>mapper</code></li>
<li>实体类</li>
</ul>
<p>比如一个<code>User</code>类可以生成如下代码：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20210624215503193.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="3-环境">3 环境</h1>
<p>本次示例使用的环境如下：</p>
<ul>
<li><code>Spring Boot 2.5.1</code></li>
<li><code>MyBaits Plus 3.4.3.1</code></li>
<li><code>MyBatis Plus Generator 3.5.0</code></li>
</ul>
<h1 id="4-准备数据表">4 准备数据表</h1>
<p>这里为了方便使用<code>Workbench</code>创建一个用户表<code>User</code>：</p>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20210624220414906.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="5-创建项目并导入依赖">5 创建项目并导入依赖</h1>
<p>创建一个新的<code>Spring Boot</code>项目，然后导入如下依赖：</p>
<pre><code class="language-bash">implementation 'com.baomidou:mybatis-plus-boot-starter:3.4.3.1' 
implementation 'com.baomidou:mybatis-plus-generator:3.5.0'
implementation 'org.apache.velocity:velocity-engine-core:2.3'
implementation 'org.realityforge.org.jetbrains.annotations:org.jetbrains.annotations:1.7.0'
</code></pre>
<p>除了<code>starter</code>和<code>generator</code>后，还需要一个模板引擎（可选<code>Velocity</code>、<code>Freemarker</code>、<code>Beetl</code>，默认<code>Velocity</code>）和一个注解依赖（<code>jetbrains.annotations</code>）。</p>
<p><code>Maven</code>版本如下：</p>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;
    &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;
    &lt;version&gt;3.4.3.1&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;
    &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt;
    &lt;version&gt;3.5.0&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;
    &lt;artifactId&gt;velocity-engine-core&lt;/artifactId&gt;
    &lt;version&gt;2.3&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.realityforge.org.jetbrains.annotations&lt;/groupId&gt;
    &lt;artifactId&gt;org.jetbrains.annotations&lt;/artifactId&gt;
    &lt;version&gt;1.7.0&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<h1 id="6-新建一个生成器类">6 新建一个生成器类</h1>
<p>该类用于进行代码生成的配置：</p>
<pre><code class="language-java">import com.baomidou.mybatisplus.generator.AutoGenerator;
import com.baomidou.mybatisplus.generator.config.*;

public class MyBatisPlusGenerator {
    public static void main(String[] args) {
        DataSourceConfig dataSourceConfig = new DataSourceConfig.Builder(&quot;jdbc:mysql://localhost:3306/test&quot;,&quot;root&quot;,&quot;123456&quot;).build();
        String projectPath = System.getProperty(&quot;user.dir&quot;);
        GlobalConfig globalConfig = new GlobalConfig.Builder().outputDir(projectPath+&quot;/src/main/java&quot;).openDir(false).build();
        PackageConfig packageConfig = new PackageConfig.Builder().moduleName(&quot;test&quot;).parent(&quot;com.example.test&quot;).build();
        AutoGenerator autoGenerator = new AutoGenerator(dataSourceConfig);
        autoGenerator.global(globalConfig).packageInfo(packageConfig);
        autoGenerator.execute();
    }
}
</code></pre>
<p>代码生成器配置相比起之前的版本，使用了<code>Builder</code>模式代替了原来的<code>setter</code>模式：</p>
<pre><code class="language-java">DataSourceConfig dataSourceConfig = new DataSourceConfig(); // 3.5.0版本中默认构造方法变成私有，无法编译通过
dataSourceConfig.setUrl(&quot;jdbc:mysql://localhost:3306/ant?useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf8&quot;);
dataSourceConfig.setDriverName(&quot;com.mysql.jdbc.Driver&quot;);
dataSourceConfig.setUsername(&quot;root&quot;);
dataSourceConfig.setPassword(&quot;password&quot;);
</code></pre>
<p>上面的代码中设置了数据源、输出的代码路径以及输出的包名，根据需要进行修改即可：</p>
<pre><code class="language-java">DataSourceConfig dataSourceConfig = new DataSourceConfig.Builder(&quot;jdbc:mysql://localhost:3306/test&quot;,&quot;root&quot;,&quot;123456&quot;).build();
String projectPath = System.getProperty(&quot;user.dir&quot;);
GlobalConfig globalConfig = new GlobalConfig.Builder().outputDir(projectPath+&quot;/src/main/java&quot;).openDir(false).build();
PackageConfig packageConfig = new PackageConfig.Builder().moduleName(&quot;test&quot;).parent(&quot;com.example.test&quot;).build();
</code></pre>
<p>准备好以后直接运行<code>main</code>，就会在<code>src/main/java</code>下生成一个<code>test</code>文件夹：</p>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20210624221013305.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="7-测试运行">7 测试运行</h1>
<p>首先修改一下配置文件，添加数据源：</p>
<pre><code class="language-yml">spring:
  datasource:
    url: jdbc:mysql://localhost:3306/test
    username: root
    password: 123456
</code></pre>
<p>修改<code>UserController</code>如下，添加一个测试方法：</p>
<pre><code class="language-java">@RestController
@RequestMapping(&quot;/test/user&quot;)
public class UserController {
    @Resource
    private UserServiceImpl userService;
    @GetMapping(&quot;/&quot;)
    public String test() {
        return userService.getById(1).toString();
    }
}
</code></pre>
<p>此时如果直接尝试运行<code>main</code>方法，会报错如下：</p>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20210624221324562.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>找不到<code>UserMapper</code>这个<code>Bean</code>，解决方法就是在<code>UserMapper</code>加上一个<code>@Mapper</code>即可：</p>
<pre><code class="language-java">@Mapper
public interface UserMapper extends BaseMapper&lt;User&gt; {
}
</code></pre>
<p>或者在<code>main</code>类加上一个<code>@MapperScan</code>，加上<code>mapper</code>所在的全限定路径：</p>
<pre><code class="language-java">@SpringBootApplication
@MapperScan(&quot;com.example.test.test.mapper&quot;)
public class TestApplication {
    public static void main(String[] args) {
        SpringApplication.run(TestApplication.class, args);
    }
}
</code></pre>
<p>这样访问<code>localhost:8080/test/user/</code>就可以访问到<code>id=1</code>的用户了：</p>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/20210624221704290.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="8-其他配置">8 其他配置</h1>
<p>上面只是介绍了最简单的生成器配置，实际上完整的代码生成器配置如下：</p>
<ul>
<li><code>DataSourceConfig</code>：数据源配置，包括数据库类型、驱动、连接<code>URL</code>、用户名、密码等</li>
<li><code>StrategyConfig</code>：数据库表配置（但是这个命名确实看不出来），可以指定对哪些表生成代码或者排除哪些表不生成代码，同时可以设置生成的字段前缀，还可以支持模糊匹配表名（排除或包含）等</li>
<li><code>PackageConfig</code>：包配置，指定代码生成的模块名、包名、<code>mapper</code>命名、<code>service</code>命名、<code>controller</code>命名等</li>
<li><code>TemplateConfig</code>：模板配置，可以自定义生成的模板，包括实体类模板、<code>service</code>模板、<code>controller</code>模板、<code>mapper</code>模板、<code>mapper xml</code>模板等</li>
<li><code>GlobalConfig</code>：全局配置，可以指定输出的代码目录、是否覆盖文件等配置，同时支持<code>Kotlin</code>和<code>Swagger2</code></li>
<li><code>InjectionConfig</code>：注入配置，可以自定义配置<code>Map</code>对象等</li>
</ul>
<p>详细请查看<a href="https://mybatis.plus/config/generator-config.html#%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE">官方文档</a>。</p>
<h1 id="9-源码">9 源码</h1>
<p>参考源码，<code>Java</code>版：</p>
<ul>
<li><a href="https://github.com/2293736867/SpringBootDemoJava/tree/main/MyBatisPlusGenerator">Github</a></li>
<li><a href="https://gitee.com/u6b7b5fc3/SpringBootDemoJava/tree/main/MyBatisPlusGenerator">码云</a></li>
</ul>
<h1 id="10-参考链接">10 参考链接</h1>
<ul>
<li><a href="https://mybatis.plus/guide/generator.html#%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B">MyBatis Plus官方文档</a></li>
</ul>
]]></content>
    </entry>
</feed>