<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://2293736867.github.io</id>
    <title>氷泠&apos;s blog</title>
    <updated>2020-09-29T11:29:52.646Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://2293736867.github.io"/>
    <link rel="self" href="https://2293736867.github.io/atom.xml"/>
    <subtitle>我配不上你，
纵然很努力。</subtitle>
    <logo>https://2293736867.github.io/images/avatar.png</logo>
    <icon>https://2293736867.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 氷泠&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[每日分享 第108期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-108-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-108-qi/">
        </link>
        <updated>2020-10-01T23:25:13.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>一见钟情就是好看，深思熟虑就是没钱。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>晴明风日雨干时，草满花堤水满溪。<br>
——杨万里《桑茶坑道中》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>憧憬，是距离了解最遥远的一种感情。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第107期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-107-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-107-qi/">
        </link>
        <updated>2020-09-30T23:24:29.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>用钱买不到快乐，只是有钱，别人会想办法让你快乐。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>君不见吴中张翰称达生，秋风忽忆江东行。<br>
——李白《行路难·其三》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>征服可能会受挫，但好奇从未停息。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第106期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-106-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-106-qi/">
        </link>
        <updated>2020-09-30T10:37:37.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>要笑着走下去吧，反正来到这个世界上，谁也没打算活着回去。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>三湘五管同民了，万岁千秋与帝龄。<br>
——张孝祥《鹧鸪天·上元启醮》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>昭昭若日月之明，离离如星辰之行。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Spring学习笔记（六）：MyBatis集成]]></title>
        <id>https://2293736867.github.io/post/spring-xue-xi-bi-ji-liu-mybatis-ji-cheng/</id>
        <link href="https://2293736867.github.io/post/spring-xue-xi-bi-ji-liu-mybatis-ji-cheng/">
        </link>
        <updated>2020-09-29T11:29:05.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#1-%E6%A6%82%E8%BF%B0">1 概述</a></li>
<li><a href="#2-mybatis%E7%AE%80%E4%BB%8B">2 <code>MyBatis</code>简介</a></li>
<li><a href="#3-%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86">3 工作原理</a></li>
<li><a href="#4-mybatis%E7%A4%BA%E4%BE%8B">4 <code>MyBatis</code>示例</a>
<ul>
<li><a href="#41-%E4%BE%9D%E8%B5%96">4.1 依赖</a></li>
<li><a href="#42-%E5%AE%9E%E4%BD%93%E7%B1%BB">4.2 实体类</a></li>
<li><a href="#43-%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6">4.3 映射文件</a></li>
<li><a href="#44-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">4.4 配置文件</a></li>
<li><a href="#45-%E6%B5%8B%E8%AF%95">4.5 测试</a></li>
</ul>
</li>
<li><a href="#5-spring%E6%95%B4%E5%90%88%E7%A4%BA%E4%BE%8B">5 <code>Spring</code>整合示例</a>
<ul>
<li><a href="#51-%E4%BE%9D%E8%B5%96">5.1 依赖</a></li>
<li><a href="#52-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">5.2 配置文件</a>
<ul>
<li><a href="#521-mybatis%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6">5.2.1 <code>MyBatis</code>映射文件</a></li>
<li><a href="#522-mybatis%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">5.2.2 <code>MyBatis</code>配置文件</a></li>
<li><a href="#523-spring%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">5.2.3 <code>Spring</code>配置文件</a></li>
</ul>
</li>
<li><a href="#53-%E6%8C%81%E4%B9%85%E5%B1%82">5.3 持久层</a></li>
<li><a href="#54-%E4%B8%9A%E5%8A%A1%E5%B1%82">5.4 业务层</a></li>
</ul>
</li>
<li><a href="#6-%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81">6 自动生成代码</a>
<ul>
<li><a href="#61-%E4%BE%9D%E8%B5%96">6.1 依赖</a></li>
<li><a href="#62-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">6.2 配置文件</a></li>
<li><a href="#63-%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81">6.3 生成代码</a></li>
</ul>
</li>
<li><a href="#7-%E5%8F%82%E8%80%83%E6%BA%90%E7%A0%81">7 参考源码</a></li>
<li><a href="#8-%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5">8 参考链接</a></li>
</ul>
</p>
<h1 id="1-概述">1 概述</h1>
<p><code>MyBaits</code>是一个著名的持久层框架，本文首先介绍了<code>MyBatis</code>的简单使用，接着与<code>Spring</code>进行整合，最后简单地使用了<code>Generator</code>去自动生成代码。</p>
<h1 id="2-mybatis简介">2 <code>MyBatis</code>简介</h1>
<p><code>MyBatis</code>本来是<code>Apache</code>的一个开源项目——<code>iBatis</code>，2010年由<code>Apaceh Software Foundation</code>迁移到了<code>Google Code</code>，并改名为<code>MyBatis</code>。</p>
<p><code>MyBatis</code>是一个基于<code>Java</code>的持久层框架，提供的持久层框架包括<code>SQL Maps</code>和<code>Data Access Objects</code>，使用简单的<code>XML</code>或者注解用于配置映射，将接口和<code>POJO</code>映射成数据库中的记录，是一个小巧、方便、高效、简单、直接、半自动化的持久层框架。</p>
<h1 id="3-工作原理">3 工作原理</h1>
<p>上图：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200929080425358.png" alt="在这里插入图片描述" loading="lazy"></figure>
<ul>
<li>读取配置文件：<code>mybatis-config.xml</code>是全局<code>MyBatis</code>配置文件，配置了<code>MyBatis</code>运行环境信息</li>
<li>加载映射文件：也就是<code>SQL</code>映射文件，配置了操作数据库的<code>SQL</code>语句</li>
<li>构造会话工厂：通过配置文件构造会话工厂<code>SqlSessionFactory</code></li>
<li>创建会话对象：由上一步的会话工厂创建会话对象<code>SqlSession</code></li>
<li>获取<code>MapperStatement</code>：通过用户调用的<code>api</code>的<code>Statement ID</code>获取<code>MapperStatement</code>对象</li>
<li>输入参数映射：通过<code>Executor</code>对<code>MapperStatement</code>进行解析，将各种<code>Java</code>基本类型转化为<code>SQL</code>操作语句中的类型</li>
<li>输出结果映射：<code>JDBC</code>执行<code>SQL</code>后，借助<code>MapperStatement</code>的映射关系将返回结果转化为<code>Java</code>基本类型并返回</li>
</ul>
<h1 id="4-mybatis示例">4 <code>MyBatis</code>示例</h1>
<p>首先先来看一下纯<code>MyBaits</code>的示例，没有整合<code>Spring</code>，一个简单的<code>Maven</code>工程，项目结构如下：</p>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200928184105917.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="41-依赖">4.1 依赖</h2>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
    &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
    &lt;version&gt;3.5.5&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
    &lt;artifactId&gt;lombok&lt;/artifactId&gt;
    &lt;version&gt;1.18.12&lt;/version&gt;
&lt;/dependency&gt;

&lt;!--驱动用的是MySQL，版本请自行修改--&gt;
&lt;dependency&gt;
    &lt;groupId&gt;mysql&lt;/groupId&gt;
    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
    &lt;version&gt;8.0.21&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<p><code>Gradle</code>：</p>
<pre><code class="language-bash">compile group: 'org.mybatis', name: 'mybatis', version: '3.5.5'
compile group: 'mysql', name: 'mysql-connector-java', version: '8.0.21'
</code></pre>
<h2 id="42-实体类">4.2 实体类</h2>
<pre><code class="language-java">@Setter
@Getter
@Builder
public class User {
    private Integer id;
    private String name;

    @Override
    public String toString() {
        return &quot;id:&quot;+id+&quot;\tname:&quot;+name;
    }
}
</code></pre>
<h2 id="43-映射文件">4.3 映射文件</h2>
<p>新建一个叫<code>UserMapper.xml</code>的映射文件：</p>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;UserMapper&quot;&gt;
    &lt;select id=&quot;selectById&quot; parameterType=&quot;Integer&quot; resultType=&quot;pers.entity.User&quot;&gt;
        select * from user where id=#{id}
    &lt;/select&gt;
    &lt;select id=&quot;selectAll&quot; resultType=&quot;pers.entity.User&quot;&gt;
        select * from user
    &lt;/select&gt;

    &lt;insert id=&quot;insert&quot; parameterType=&quot;pers.entity.User&quot;&gt;
        INSERT INTO `user` (`id`,`name`)
        VALUES (#{id},#{name})
    &lt;/insert&gt;

    &lt;update id=&quot;update&quot; parameterType=&quot;pers.entity.User&quot;&gt;
        UPDATE `user` set `name`=#{name} where id=#{id}
    &lt;/update&gt;

    &lt;delete id=&quot;delete&quot; parameterType=&quot;Integer&quot;&gt;
        DELETE FROM `user` WHERE `id` = #{id}
    &lt;/delete&gt;
&lt;/mapper&gt;
</code></pre>
<p>映射文件是一个<code>XML</code>文件，根元素为<code>&lt;mapper&gt;</code>，需要注意其中的<code>namespace</code>属性，调用的时候通过该<code>namespace</code>调用。其中的子元素表示<code>SQL</code>语句：</p>
<ul>
<li><code>&lt;select&gt;</code>：查询，<code>id</code>指定了这条语句的<code>id</code>号，调用时通过<code>namespace.id</code>的方式调用，比如该条<code>select</code>需要通过<code>UserMapper.selectById</code>调用，<code>parameterType</code>指定参数类型，这里是一个<code>Integer</code>的参数，<code>resultType</code>指定返回类型，实体类</li>
<li><code>&lt;insert&gt;</code>/<code>&lt;update&gt;</code>/<code>&lt;delete&gt;</code>：对应的插入/修改/删除语句</li>
<li>关于占位符：<code>#{}</code>表示是占位符，相当于传统<code>JDBC</code>中的<code>?</code>，<code>#{id}</code>表示该占位符等待接收的参数名称为<code>id</code></li>
</ul>
<h2 id="44-配置文件">4.4 配置文件</h2>
<p><code>MyBatis</code>的配置文件，叫<code>mybatis-config.xml</code>：</p>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;environments default=&quot;development&quot;&gt;
        &lt;environment id=&quot;development&quot;&gt;
            &lt;transactionManager type=&quot;JDBC&quot; /&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;
                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/test&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;test&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;test&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;

    &lt;mappers&gt;
        &lt;mapper resource=&quot;mapper/UserMapper.xml&quot; /&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<p>指定了数据库的一些连接属性还有<code>mapper</code>的位置。</p>
<h2 id="45-测试">4.5 测试</h2>
<pre><code class="language-java">public class Main {
    public static void main(String[] args) {
        try
        {
            InputStream inputStream = Resources.getResourceAsStream(&quot;config/mybatis-config.xml&quot;);
            SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(inputStream);
            SqlSession session = factory.openSession();
            User user = session.selectOne(&quot;UserMapper.selectById&quot;,1);
            System.out.println(user);
            User user1 = User.builder().name(&quot;test&quot;).build();
            session.insert(&quot;UserMapper.insert&quot;,user1);
            user1.setName(&quot;222&quot;);
            session.update(&quot;UserMapper.update&quot;,user1);
            List&lt;User&gt; list = session.selectList(&quot;UserMapper.selectAll&quot;);
            list.forEach(System.out::println);
            session.delete(&quot;UserMapper.delete&quot;,1);
            session.commit();
            session.close();
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    }
}
</code></pre>
<p>主要流程如下：</p>
<ul>
<li>读取配置文件：根据<code>org.apache.ibatis.io.Resources</code>读取配置文件<code>mybatis-config.xml</code>，请注意配置文件的位置正确，这里的配置文件都放在<code>resources</code>下，<code>mybatis-config.xml</code>放在其中的<code>config</code>下</li>
<li>构建<code>Session</code>：根据配置文件构建<code>SqlSessionFactory</code>后，通过<code>openSession</code>创建<code>Session</code></li>
<li>业务操作：通过<code>session</code>的<code>selectOne/insert/update</code>等进行业务操作，这类操作带两个参数，第一个参数是<code>String</code>，表示配置文件中的<code>SQL</code>语句，采用<code>namespace.id</code>的形式，比如这里的<code>UserMapper.xml</code>中声明<code>namespace</code>为<code>UserMapper</code>，其中带有一条<code>id</code>为<code>selectById</code>的<code>select</code>语句，因此调用时使用<code>UserMapper.selectById</code>的形式，第二个参数是一个<code>Object</code>，表示要传递的参数，也就是绑定到配置文件中对应占位符的值</li>
<li>提交与关闭：业务操作完成后提交事务并关闭<code>session</code></li>
</ul>
<p>示例测试结果：</p>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20200928183501487.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="5-spring整合示例">5 <code>Spring</code>整合示例</h1>
<p>上面的例子只是为了演示<code>MyBatis</code>的基本使用，没有整合<code>Spring</code>，这里的例子是把<code>Spring</code>整合进来，流程也大概差不多，项目结构如下：</p>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20200929070913641.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="51-依赖">5.1 依赖</h2>
<p>分为5类<code>JAR</code>：</p>
<ul>
<li><code>MyBatis</code>需要的<code>JAR</code></li>
<li><code>Spring</code>需要的<code>JAR</code></li>
<li><code>MyBatis</code>与<code>Spring</code>整合的中间<code>JAR</code></li>
<li>数据库驱动<code>JAR</code></li>
<li>数据源<code>JAR</code></li>
</ul>
<p>完整依赖如下：</p>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework&lt;/groupId&gt;
    &lt;artifactId&gt;spring-context&lt;/artifactId&gt;
    &lt;version&gt;5.2.9.RELEASE&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
    &lt;groupId&gt;org.springframework&lt;/groupId&gt;
    &lt;artifactId&gt;spring-core&lt;/artifactId&gt;
    &lt;version&gt;5.2.9.RELEASE&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
    &lt;groupId&gt;org.springframework&lt;/groupId&gt;
    &lt;artifactId&gt;spring-beans&lt;/artifactId&gt;
    &lt;version&gt;5.2.9.RELEASE&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
    &lt;groupId&gt;org.springframework&lt;/groupId&gt;
    &lt;artifactId&gt;spring-web&lt;/artifactId&gt;
    &lt;version&gt;5.2.9.RELEASE&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
    &lt;artifactId&gt;lombok&lt;/artifactId&gt;
    &lt;version&gt;1.18.12&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
    &lt;groupId&gt;org.springframework&lt;/groupId&gt;
    &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;
    &lt;version&gt;5.2.9.RELEASE&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
    &lt;groupId&gt;mysql&lt;/groupId&gt;
    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
    &lt;version&gt;8.0.21&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
    &lt;groupId&gt;org.springframework&lt;/groupId&gt;
    &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;
    &lt;version&gt;5.2.9.RELEASE&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
    &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
    &lt;version&gt;3.5.5&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
    &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;
    &lt;version&gt;2.0.5&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
    &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;
    &lt;artifactId&gt;commons-dbcp2&lt;/artifactId&gt;
    &lt;version&gt;2.8.0&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<p><code>Gradle</code>：</p>
<pre><code class="language-bash">compile group: 'org.springframework', name: 'spring-beans', version: '5.2.9.RELEASE'
compile group: 'org.springframework', name: 'spring-context', version: '5.2.9.RELEASE'
compile group: 'org.springframework', name: 'spring-core', version: '5.2.9.RELEASE'
compile group: 'org.springframework', name: 'spring-tx', version: '5.2.9.RELEASE'
compile group: 'org.springframework', name: 'spring-jdbc', version: '5.2.9.RELEASE'
compile group: 'mysql', name: 'mysql-connector-java', version: '8.0.21'
compile group: 'org.apache.commons', name: 'commons-dbcp2', version: '2.8.0'
compile group: 'org.mybatis', name: 'mybatis', version: '3.5.5'
compile group: 'org.mybatis', name: 'mybatis-spring', version: '2.0.5'
</code></pre>
<h2 id="52-配置文件">5.2 配置文件</h2>
<p>配置文件分为三类：</p>
<ul>
<li><code>MyBatis</code>映射文件：编写<code>mapper</code>的地方，也就是业务需要的<code>SQL</code>语句</li>
<li><code>MyBatis</code>全局配置文件：由于整合了<code>Spring</code>，数据源的配置放在了<code>Spring</code>的配置文件中，而只需要保留<code>mapper</code>的查找位置</li>
<li><code>Spring</code>配置文件：配置数据源+事务管理+<code>MyBaits</code>的<code>sqlSssionFactory</code>+组件扫描</li>
</ul>
<h3 id="521-mybatis映射文件">5.2.1 <code>MyBatis</code>映射文件</h3>
<p>与上面的例子差不多，只是修改了<code>namespace</code>为<code>包名.类名</code>的形式：</p>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;pers.dao.UserDao&quot;&gt;
    &lt;select id=&quot;selectById&quot; parameterType=&quot;Integer&quot; resultType=&quot;pers.entity.User&quot;&gt;
        select * from user where id=#{id}
    &lt;/select&gt;
    &lt;select id=&quot;selectAll&quot; resultType=&quot;pers.entity.User&quot;&gt;
        select * from user
    &lt;/select&gt;

    &lt;insert id=&quot;insert&quot; parameterType=&quot;pers.entity.User&quot;&gt;
        INSERT INTO `user` (`id`,`name`)
        VALUES (#{id},#{name})
    &lt;/insert&gt;

    &lt;update id=&quot;update&quot; parameterType=&quot;pers.entity.User&quot;&gt;
        UPDATE `user` set `name`=#{name} where id=#{id}
    &lt;/update&gt;

    &lt;delete id=&quot;delete&quot; parameterType=&quot;Integer&quot;&gt;
        DELETE FROM `user` WHERE `id` = #{id}
    &lt;/delete&gt;
&lt;/mapper&gt;
</code></pre>
<p><code>namespace</code>需要与对应包名的带有<code>@Mapper</code>的类配置一致。</p>
<h3 id="522-mybatis配置文件">5.2.2 <code>MyBatis</code>配置文件</h3>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;mapper/UserMapper.xml&quot; /&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<h3 id="523-spring配置文件">5.2.3 <code>Spring</code>配置文件</h3>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
       xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd&quot;
       &gt;

    &lt;context:component-scan base-package=&quot;pers.dao&quot;/&gt;
    &lt;context:component-scan base-package=&quot;pers.service&quot;/&gt;
    &lt;!--数据源--&gt;
    &lt;bean id=&quot;dataSource&quot; class=&quot;org.apache.commons.dbcp2.BasicDataSource&quot;&gt;
        &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;/&gt;
        &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/test&quot;/&gt;
        &lt;property name=&quot;username&quot; value=&quot;test&quot;/&gt;
        &lt;property name=&quot;password&quot; value=&quot;test&quot;/&gt;
        &lt;!--最大连接数+最大空闲数+初始连接数--&gt;
        &lt;property name=&quot;maxTotal&quot; value=&quot;30&quot;/&gt;
        &lt;property name=&quot;maxIdle&quot; value=&quot;10&quot;/&gt;
        &lt;property name=&quot;initialSize&quot; value=&quot;5&quot;/&gt;
    &lt;/bean&gt;
    
    &lt;!--事务管理--&gt;
    &lt;bean id=&quot;txManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;
        &lt;property name=&quot;dataSource&quot;  ref=&quot;dataSource&quot;/&gt;
    &lt;/bean&gt;

	&lt;!--开启事务注解--&gt;
    &lt;tx:annotation-driven transaction-manager=&quot;txManager&quot; /&gt;

	&lt;!--创建SqlSessionFactory Bean--&gt;
    &lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;
        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;
        &lt;property name=&quot;configLocation&quot; value=&quot;classpath:config/mybatis-config.xml&quot;/&gt;
    &lt;/bean&gt;

	&lt;!--注解扫描，主要用于@Mapper，会扫描basePackge下的@Mapper注解的接口并自动装配为MyBatis的映射接口--&gt;
    &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;
        &lt;property name=&quot;basePackage&quot; value=&quot;pers.dao&quot;/&gt;
        &lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sqlSessionFactory&quot;/&gt;
    &lt;/bean&gt;
&lt;/beans&gt;
</code></pre>
<h2 id="53-持久层">5.3 持久层</h2>
<p>需要加上<code>@Mapper</code>注解，表示自动装配为<code>MyBatis</code>的映射接口，注意：</p>
<ul>
<li>映射文件中的<code>namespace</code>需要与<code>包名.类名</code>对应，比如这里的包为<code>pers.dao</code>，类名为<code>UserDao</code>，那么映射文件中的<code>namespace</code>为<code>pers.dao.UserDao</code></li>
<li><code>id</code>需要与方法名对应，比如映射文件中的有一条<code>select</code>语句的<code>id</code>为<code>selectById</code>，那么方法就需要命名为<code>selectById</code>，且参数类型需要对应一致</li>
</ul>
<pre><code class="language-java">@Repository
@Mapper
public interface UserDao {
    User selectById(Integer id);
    List&lt;User&gt; selectAll();
    int insert(User user);
    int update(User user);
    int delete(Integer id);
}
</code></pre>
<h2 id="54-业务层">5.4 业务层</h2>
<pre><code class="language-java">@Service
@Transactional
@RequiredArgsConstructor(onConstructor = @__(@Autowired))
public class MyBatisService {
    private final UserDao dao;

    public void test(){
        User user = dao.selectById(13);
        System.out.println(user);
        dao.insert(User.builder().name(&quot;333&quot;).build());
        dao.update(User.builder().name(&quot;88888&quot;).id(13).build());
        dao.selectAll().forEach(System.out::println);
        dao.delete(12);
        dao.selectAll().forEach(System.out::println);
    }
}
</code></pre>
<p>注入<code>UserDao</code>后进行简单的测试，结果如下：</p>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/20200929070332272.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="6-自动生成代码">6 自动生成代码</h1>
<p>相信很多程序员也讨厌写又长又麻烦的<code>XML</code>配置文件，因此，<code>MyBatis</code>也提供了一个生成器插件，可以直接从表中生成实体类、<code>dao</code>接口以及映射文件，可以省去很多操作。</p>
<p>步骤如下：</p>
<ul>
<li>导入依赖</li>
<li>编写<code>Generator</code>配置文件</li>
<li>生成代码</li>
</ul>
<h2 id="61-依赖">6.1 依赖</h2>
<p>其实就是加入一个插件：</p>
<pre><code class="language-xml">&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;
            &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;1.4.0&lt;/version&gt;
            &lt;configuration&gt;
                &lt;!-- 在控制台打印执行日志 --&gt;
                &lt;verbose&gt;true&lt;/verbose&gt;
                &lt;!-- 重复生成时会覆盖之前的文件--&gt;
                &lt;overwrite&gt;true&lt;/overwrite&gt;
                &lt;configurationFile&gt;src/main/resources/generatorConfig.xml&lt;/configurationFile&gt;
            &lt;/configuration&gt;
            &lt;dependencies&gt;
                &lt;dependency&gt;
                    &lt;groupId&gt;mysql&lt;/groupId&gt;
                    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
                    &lt;version&gt;8.0.21&lt;/version&gt;
                &lt;/dependency&gt;
            &lt;/dependencies&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
</code></pre>
<p>数据库驱动请对应修改。</p>
<p>至于<code>Gradle</code>版请看<code>Kotlin</code>版源码。</p>
<h2 id="62-配置文件">6.2 配置文件</h2>
<p>这里是参考别人的配置文件，修改数据库连接、表名、包名即可：</p>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE generatorConfiguration
        PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;
&lt;generatorConfiguration&gt;
    &lt;!-- context 是逆向工程的主要配置信息 --&gt;
    &lt;!-- id：起个名字 --&gt;
    &lt;!-- targetRuntime：设置生成的文件适用于那个 mybatis 版本 --&gt;
    &lt;context id=&quot;default&quot; targetRuntime=&quot;MyBatis3&quot;&gt;
        &lt;!--optional,指在创建class时，对注释进行控制--&gt;
        &lt;commentGenerator&gt;
            &lt;property name=&quot;suppressDate&quot; value=&quot;true&quot;/&gt;
            &lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;
            &lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot;/&gt;
        &lt;/commentGenerator&gt;
        &lt;!--jdbc的数据库连接 wg_insert 为数据库名字--&gt;
        &lt;jdbcConnection driverClass=&quot;com.mysql.cj.jdbc.Driver&quot; connectionURL=&quot;jdbc:mysql://localhost:3306/test&quot; userId=&quot;test&quot; password=&quot;test&quot; /&gt;
        &lt;!--非必须，类型处理器，在数据库类型和java类型之间的转换控制--&gt;
        &lt;javaTypeResolver&gt;
            &lt;!-- 默认情况下数据库中的 decimal，bigInt 在 Java 对应是 sql 下的 BigDecimal 类 --&gt;
            &lt;!-- 不是 double 和 long 类型 --&gt;
            &lt;!-- 使用常用的基本类型代替 sql 包下的引用类型 --&gt;
            &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot;/&gt;
        &lt;/javaTypeResolver&gt;
        &lt;!-- targetPackage：生成的实体类所在的包 --&gt;
        &lt;!-- targetProject：生成的实体类所在的硬盘位置 --&gt;
        &lt;javaModelGenerator targetPackage=&quot;pers.entity&quot;
                            targetProject=&quot;src/main/java&quot;&gt;
            &lt;!-- 是否允许子包 --&gt;
            &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot;/&gt;
            &lt;!-- 是否对modal添加构造函数 --&gt;
            &lt;property name=&quot;constructorBased&quot; value=&quot;true&quot;/&gt;
            &lt;!-- 是否清理从数据库中查询出的字符串左右两边的空白字符 --&gt;
            &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot;/&gt;
            &lt;!-- 建立modal对象是否不可改变 即生成的modal对象不会有setter方法，只有构造方法 --&gt;
            &lt;property name=&quot;immutable&quot; value=&quot;false&quot;/&gt;
        &lt;/javaModelGenerator&gt;
        &lt;!-- targetPackage 和 targetProject：生成的 mapper 文件的包和位置 --&gt;
        &lt;sqlMapGenerator targetPackage=&quot;mapper&quot;
                         targetProject=&quot;src/main/resources&quot;&gt;
            &lt;!-- 针对数据库的一个配置，是否把 schema 作为字包名 --&gt;
            &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot;/&gt;
        &lt;/sqlMapGenerator&gt;
        &lt;!-- targetPackage 和 targetProject：生成的 interface 文件的包和位置 --&gt;
        &lt;javaClientGenerator type=&quot;XMLMAPPER&quot;
                             targetPackage=&quot;pers.dao&quot; targetProject=&quot;src/main/java&quot;&gt;
        &lt;/javaClientGenerator&gt;
        &lt;!-- tableName是数据库中的表名，domainObjectName是生成的JAVA模型名，后面的参数不用改，要生成更多的表就在下面继续加table标签 --&gt;
        &lt;table tableName=&quot;user&quot; domainObjectName=&quot;User&quot;
               enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot;
               enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot;
               selectByExampleQueryId=&quot;false&quot; /&gt;
    &lt;/context&gt;
&lt;/generatorConfiguration&gt;
</code></pre>
<h2 id="63-生成代码">6.3 生成代码</h2>
<figure data-type="image" tabindex="6"><img src="https://img-blog.csdnimg.cn/20200929073850261.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>双击生成即可：</p>
<figure data-type="image" tabindex="7"><img src="https://img-blog.csdnimg.cn/20200929074012121.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>生成了实体类、<code>dao</code>接口以及<code>mapper</code>文件。</p>
<h1 id="7-参考源码">7 参考源码</h1>
<p><code>Java</code>版：</p>
<ul>
<li><a href="https://github.com/2293736867/CSBookNotes/tree/master/Spring/Chapter6/JavaDemo">Github</a></li>
<li><a href="https://gitee.com/u6b7b5fc3/CSBookNotes/tree/master/Spring/Chapter6/JavaDemo">码云</a></li>
<li><a href="https://codechina.csdn.net/qq_27525611/CSBookNotes/-/tree/master/Spring/Chapter6/JavaDemo">CODE.CHINA</a></li>
</ul>
<p><code>Kotlin</code>版：</p>
<ul>
<li><a href="https://github.com/2293736867/CSBookNotes/tree/master/Spring/Chapter6/KotlinDemo">Github</a></li>
<li><a href="https://gitee.com/u6b7b5fc3/CSBookNotes/tree/master/Spring/Chapter6/KotlinDemo">码云</a></li>
<li><a href="https://codechina.csdn.net/qq_27525611/CSBookNotes/-/tree/master/Spring/Chapter6/KotlinDemo">CODE.CHINA</a></li>
</ul>
<h1 id="8-参考链接">8 参考链接</h1>
<ul>
<li><a href="https://www.jianshu.com/p/b519e9ef605f">简书-IDEA使用mybatis-generator</a></li>
<li><a href="https://github.com/Hinsteny/mybatis-generator-plugin">Github-mybatis-generator-plugin</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第105期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-105-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-105-qi/">
        </link>
        <updated>2020-09-29T10:36:58.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>只要努力的时间足够长，搞不好，你还可以失败的更彻底。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>不见年年辽海上，文章何处苦秋风？<br>
——李贺《南园十三首》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>瞬光斩黯黮，昭明破晦夜。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第104期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-104-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-104-qi/">
        </link>
        <updated>2020-09-28T10:36:33.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>没对象怕什么，我有对象，我下棋也没赢过啊。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>秋光照不极，鸟色去无边。<br>
——张籍《水》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>即便我弱了，也并不代表你强了。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第103期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-103-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-103-qi/">
        </link>
        <updated>2020-09-27T10:35:58.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>如果再见不用红着脸，是否还能借点钱。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>树树皆秋色，山山唯落晖。<br>
——王绩《野望》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>怎么样，士道君，四系乃很酷吧，四系乃很酷吧。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Spring学习笔记（五）：JDBCTemplate+事务管理]]></title>
        <id>https://2293736867.github.io/post/spring-xue-xi-bi-ji-wu-jdbctemplateshi-wu-guan-li/</id>
        <link href="https://2293736867.github.io/post/spring-xue-xi-bi-ji-wu-jdbctemplateshi-wu-guan-li/">
        </link>
        <updated>2020-09-27T10:28:21.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-概述">1 概述</h1>
<p><code>Spring</code>为开发者提供了<code>JDBCTemplate</code>，可以简化很多数据库操作相关的代码，本文主要介绍<code>JDBCTemplate</code>的使用以及事务管理功能。</p>
<h1 id="2-jdbc-template">2 <code>JDBC Template</code></h1>
<h2 id="21-配置">2.1 配置</h2>
<p>配置的话主要配置以下几项：</p>
<ul>
<li>数据源：<code>org.springframework.jdbc.datasource.DriverManager.DataSource</code></li>
<li>数据库驱动：<code>com.cj.mysql.jdbc.Driver</code>，这里采用的是<code>MySQL 8</code>，注意<code>MySQL 5.7</code>以下的驱动名字不同，另外若是其他数据库请对应修改</li>
<li>数据库<code>URL</code>：<code>jdbc:mysql://localhost:3306/test</code>，<code>MySQL</code>默认的<code>3306</code>端口，数据库<code>test</code></li>
<li>数据库用户名</li>
<li>数据库密码</li>
<li><code>JDBC</code>模板：<code>org.springframework.jdbc.core.jdbcTemplate</code></li>
</ul>
<p>参考配置如下：</p>
<pre><code class="language-xml">&lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;
    &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;/&gt;
    &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/test&quot;/&gt;
    &lt;property name=&quot;username&quot; value=&quot;test&quot;/&gt; 
    &lt;property name=&quot;password&quot; value=&quot;test&quot;/&gt;
&lt;/bean&gt;
&lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;
&lt;/bean&gt;
&lt;context:component-scan base-package=&quot;pers.dao&quot;/&gt;
</code></pre>
<h2 id="22-常用方法">2.2 常用方法</h2>
<ul>
<li><code>int update(String sql,Object args[])</code>：增/删/改操作，使用<code>args</code>设置其中的参数，返回更新的行数</li>
<li><code>List&lt;T&gt; query(String sql,RowMapper&lt;T&gt; rowMapper,Object []args)</code>：查询操作，<code>rowMapper</code>将结果集映射到用户自定义的类中</li>
</ul>
<h2 id="23-示例">2.3 示例</h2>
<h3 id="231-依赖">2.3.1 依赖</h3>
<p>首先导入依赖：</p>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework&lt;/groupId&gt;
    &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;
    &lt;version&gt;5.2.9.RELEASE&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
    &lt;groupId&gt;mysql&lt;/groupId&gt;
    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
    &lt;version&gt;8.0.21&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<p><code>MySQL</code>的版本请根据个人需要更改，或使用其他数据库的驱动。</p>
<h3 id="232-配置文件">2.3.2 配置文件</h3>
<p>完整配置文件如下：</p>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd 
       http://www.springframework.org/schema/context 
       https://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;

    &lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;
        &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;/&gt;
        &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/test&quot;/&gt;
        &lt;property name=&quot;username&quot; value=&quot;test&quot;/&gt;
        &lt;property name=&quot;password&quot; value=&quot;test&quot;/&gt;
    &lt;/bean&gt;
    &lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;
        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;
    &lt;/bean&gt;
    &lt;context:component-scan base-package=&quot;pers.dao&quot;/&gt;
&lt;/beans&gt;
</code></pre>
<h3 id="233-实体类">2.3.3 实体类</h3>
<pre><code class="language-java">public class MyUser {
    private Integer id;
    private String uname;
    private String usex;
}
</code></pre>
<h3 id="234-数据访问层">2.3.4 数据访问层</h3>
<p>添加<code>@Repository</code>以及<code>@RequiredArgsConstructor</code>：</p>
<pre><code class="language-java">@Repository
@RequiredArgsConstructor(onConstructor = @__(@Autowired))
public class TestDao {
    private final JdbcTemplate template;

    public int update(String sql,Object[] args)
    {
        return template.update(sql,args);
    }

    public List&lt;MyUser&gt; query(String sql, Object[] args)
    {
        RowMapper&lt;MyUser&gt; mapper = new BeanPropertyRowMapper&lt;&gt;(MyUser.class);
        return template.query(sql,mapper,args);
    }
}
</code></pre>
<p>因为直接使用<code>@Autowired</code>的话会提示不推荐：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200926223252663.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>所以利用了<code>Lombok</code>的注解<code>@RequiredArgsConstructor</code>，效果相当如下构造方法，只不过是简化了一点：</p>
<pre><code class="language-java">@Autowired
public TestDao(JdbcTemplate template)
{
    this.template = template;
}
</code></pre>
<h3 id="235-测试">2.3.5 测试</h3>
<p>测试之前先建表：</p>
<pre><code class="language-sql">create table MyUser(
    id INT AUTO_INCREMENT PRIMARY KEY ,
    uname varchar(20),
    usex varchar(20)
)
</code></pre>
<p>测试类：</p>
<pre><code class="language-java">public class Main {
    public static void main(String[] args) {
        ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);
        TestDao dao = (TestDao)context.getBean(&quot;testDao&quot;);
        String insertSql = &quot;insert into MyUser(uname,usex) values(?,?)&quot;;
        String[] param1 = {&quot;chenhengfa1&quot;,&quot;男&quot;};
        String[] param2 = {&quot;chenhengfa2&quot;,&quot;男&quot;};
        String[] param3 = {&quot;chenhengfa3&quot;,&quot;男&quot;};
        String[] param4 = {&quot;chenhengfa4&quot;,&quot;男&quot;};

        dao.update(insertSql,param1);
        dao.update(insertSql,param2);
        dao.update(insertSql,param3);
        dao.update(insertSql,param4);

        String selectSql = &quot;select * from MyUser&quot;;
        List&lt;MyUser&gt; list = dao.query(selectSql,null);
        for(MyUser mu:list)
        {
            System.out.println(mu);
        }
    }
}
</code></pre>
<p>输出：</p>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200926225137360.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>如果出现异常或插入不成功等其他情况，请检查<code>SQL</code>语句是否编写正确，包括表名以及字段名。</p>
<h1 id="3-事务管理">3 事务管理</h1>
<p><code>Spring</code>中的事务管理有两种方法：</p>
<ul>
<li>编程式事务管理：代码中显式调用<code>beginTransaction</code>、<code>commit</code>、<code>rollback</code>等就是编程式事务管理</li>
<li>声明式事务管理：通过<code>AOP</code>实现，不需要通过编程方式管理事务，因此不需要再业务逻辑代码中掺杂事务处理的代码，开发更加简单，便于后期维护</li>
</ul>
<p>下面先来看一下编程式事务管理的实现。</p>
<h2 id="31-编程式事务管理">3.1 编程式事务管理</h2>
<p>编程式事务管理的配置又有两种方法：</p>
<ul>
<li>基于底层<code>API</code></li>
<li>基于<code>TransactionTemplate</code></li>
</ul>
<p>需要的依赖如下：</p>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework&lt;/groupId&gt;
    &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;
    &lt;version&gt;5.2.9.RELEASE&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
    &lt;groupId&gt;org.springframework&lt;/groupId&gt;
    &lt;artifactId&gt;spring-expression&lt;/artifactId&gt;
    &lt;version&gt;5.2.9.RELEASE&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
    &lt;groupId&gt;org.springframework&lt;/groupId&gt;
    &lt;artifactId&gt;spring-aop&lt;/artifactId&gt;
    &lt;version&gt;5.2.9.RELEASE&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
    &lt;groupId&gt;org.aspectj&lt;/groupId&gt;
    &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;
    &lt;version&gt;1.9.6&lt;/version&gt;
    &lt;scope&gt;runtime&lt;/scope&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
    &lt;groupId&gt;org.springframework&lt;/groupId&gt;
    &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt;
    &lt;version&gt;5.2.9.RELEASE&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<h3 id="311-底层api实现">3.1.1 底层<code>API</code>实现</h3>
<p>根据<code>PlatformTransactionManager</code>、<code>TransactionDefinition</code>、<code>TransactionStatus</code>几个核心接口，通过编程方式进行事务管理，首先配置事务管理器：</p>
<pre><code class="language-xml">&lt;bean id=&quot;txManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;
&lt;/bean&gt;
</code></pre>
<p>接着修改数据库访问类：</p>
<pre><code class="language-java">@Repository
@RequiredArgsConstructor(onConstructor = @__(@Autowired))
public class TestDao {
    private final JdbcTemplate template;
    private final DataSourceTransactionManager manager;

    public int update(String sql,Object[] args)
    {
        return template.update(sql,args);
    }

    public List&lt;MyUser&gt; query(String sql,Object[] args)
    {
        RowMapper&lt;MyUser&gt; mapper = new BeanPropertyRowMapper&lt;&gt;(MyUser.class);
        return template.query(sql,mapper,args);
    }

    public void testTransaction()
    {
        TransactionDefinition definition = new DefaultTransactionDefinition();
        TransactionStatus status = manager.getTransaction(definition);
        String message = &quot;执行成功，没有事务回滚&quot;;

        try
        {
            String sql1 = &quot;delete from MyUser&quot;;
            String sql2 = &quot;insert into MyUser(id,uname,usex) values(?,?,?)&quot;;
            Object [] param2 = {1,&quot;张三&quot;,&quot;男&quot;};
            template.update(sql1);
            template.update(sql2,param2);
            template.update(sql2,param2);
            manager.commit(status);
        }
        catch (Exception e)
        {
            e.printStackTrace();
            manager.rollback(status);
            message = &quot;主键重复，事务回滚&quot;;
        }
        System.out.println(message);
    }
}
</code></pre>
<h4 id="3111-事务定义">3.1.1.1 事务定义</h4>
<p><code>TransactionDefinition</code>是事务定义，是一个接口：</p>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20200927075442740.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>主要定义了：</p>
<ul>
<li>事务隔离级别</li>
<li>事务传播行为</li>
<li>事务超时时间</li>
<li>是否为只读事务</li>
</ul>
<p>而<code>DefaultTransactionDefinition</code>就是上面属性的一些默认配置，比如：</p>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20200927075731236.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>也就是定义了：</p>
<ul>
<li>传播行为为<code>0</code>：也就是常量<code>PROPAGATION_REQUIREDE</code>，表示如果当前存在一个事务，则加入当前事务，如果不存在任何事务，就创建一个新事务</li>
<li>隔离级别为<code>-1</code>：这个也是<code>TransactionDefinition</code>的默认参数，表示使用数据库的默认隔离级别，通常情况下为<code>Read Committed</code></li>
<li>超时为<code>-1</code>：默认设置不超时，如需要设置超时请调用<code>setTimeout</code>方法，比如如果设置为了<code>60</code>，那么相当于如果操作时间超过了<code>60s</code>，而且后面还涉及到<code>CRUD</code>操作，那么会抛出超时异常并回滚，如果超时操作的后面没有涉及到<code>CRUD</code>操作，那么不会回滚</li>
<li>只读事务为<code>false</code>：默认为<code>false</code>，但是该变量不是表明“不能”进行修改等操作，而是一种暗示，如果不包含修改操作，那么<code>JDBC</code>驱动和数据库就有可能针对该事务进行一些特定的优化</li>
</ul>
<h4 id="3112-具体执行流程">3.1.1.2 具体执行流程</h4>
<p>具体执行流程如下：</p>
<ul>
<li>定义事务：实例类为<code>DefaultTransactionDefinition</code></li>
<li>开启事务：通过<code>getTransaction(TransactionDefinition)</code>开启</li>
<li>执行业务方法</li>
<li>根据业务方法是否出现异常手动调用<code>DataSourceTransaction</code>的<code>commit(TransactionStatus)</code>进行提交</li>
<li>出现异常调用<code>rollback(TransactionStatus)</code>进行回滚</li>
</ul>
<p>测试如下：</p>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/20200926230605773.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h3 id="312-基于transactiontemplate">3.1.2 基于<code>TransactionTemplate</code></h3>
<p>步骤：</p>
<ul>
<li>通过调用<code>TransactionTemplate</code>的<code>execute</code>实现</li>
<li><code>execute</code>接受一个<code>TransactionCallback</code>接口参数</li>
<li><code>TransactionCallback</code>定义了一个<code>doInTransaction</code>方法</li>
<li>通常以匿名内部类的方式实现<code>TransactionCallback</code>接口，在其中的<code>doInTransaction</code>编写业务逻辑代码</li>
<li><code>doInTransaction</code>有一个<code>TransactionStatus</code>的参数，可以调用<code>setRollbackOnly</code>进行回滚</li>
</ul>
<p>默认的回滚规则如下：</p>
<ul>
<li>如果抛出未检查异常或者手动调用<code>setRollbackOnly</code>，则回滚</li>
<li>如果执行完成或抛出检查异常，则提交事务</li>
</ul>
<p>示例如下，首先编写配置文件对<code>Bean</code>进行注入：</p>
<pre><code class="language-xml">&lt;!--事务管理器--&gt;
&lt;bean id=&quot;txManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;
        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;
&lt;/bean&gt;
&lt;!--事务模板--&gt;
&lt;bean id=&quot;transactionTemplate&quot; class=&quot;org.springframework.transaction.support.TransactionTemplate&quot;&gt;
    &lt;property name=&quot;transactionManager&quot; ref=&quot;txManager&quot;/&gt;
&lt;/bean&gt;
</code></pre>
<p>其次修改数据访问类，添加一个测试方法：</p>
<pre><code class="language-java">public void testTransactionTemplate()
{
    System.out.println(transactionTemplate.execute((TransactionCallback&lt;Object&gt;) transactionStatus -&gt; {
        String deleteSql = &quot;delete from MyUser&quot;;
        String insertSql = &quot;insert into MyUser(id,uname,usex) values(?,?,?)&quot;;
        Object[] parm = {1, &quot;张三&quot;, &quot;男&quot;};
        try {
            template.update(deleteSql);
            template.update(insertSql, parm);
            template.update(insertSql, parm);
        } catch (Exception e) {
            message = &quot;主键重复，事务回滚&quot;;
            e.printStackTrace();
        }
        return message;
    }));
}
</code></pre>
<p>大部分代码与第一个例子类似就不解释了，结果也是因为主键重复出现异常，造成事务回滚：</p>
<figure data-type="image" tabindex="6"><img src="https://img-blog.csdnimg.cn/20200926231620192.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="32-声明式事务管理">3.2 声明式事务管理</h2>
<p><code>Spring</code>声明式事务管理通过<code>AOP</code>实现，本质是在方法前后进行拦截，在目标方法开始之前创建或加入一个事务，执行目标方法完成之后根据执行情况提交或回滚事务。相比起编程式事务管理，声明式最大的优点就是不需要通过编程的方式管理事务，业务逻辑代码无需混杂事务代码，但是唯一不足的地方就是最细粒度只能作用到方法上，而不能做到代码块级别。</p>
<p>实现方式有如下两种：</p>
<ul>
<li>基于<code>XML</code>实现</li>
<li>基于<code>@Transactional</code>实现</li>
</ul>
<h3 id="321-基于xml">3.2.1 基于<code>XML</code></h3>
<p><code>Spring</code>提供了<code>tx</code>命令空间来配置事务：</p>
<ul>
<li><code>&lt;tx:advice&gt;</code>：配置事务通知，一般需要指定<code>id</code>以及<code>transaction-manager</code></li>
<li><code>&lt;tx:attributes&gt;</code>：配置多个<code>&lt;tx:method&gt;</code>指定执行事务的细节</li>
</ul>
<h4 id="3211-配置文件">3.2.1.1 配置文件</h4>
<p>完整配置文件如下：</p>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
       xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;
       xmlns:cache=&quot;http://www.springframework.org/schema/cache&quot;
       xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/cache
       http://www.springframework.org/schema/cache/spring-cache.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd&quot;
&gt;

    &lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;
        &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;/&gt;
        &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/test&quot;/&gt;
        &lt;property name=&quot;username&quot; value=&quot;test&quot;/&gt;
        &lt;property name=&quot;password&quot; value=&quot;test&quot;/&gt;
    &lt;/bean&gt;
    &lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;
        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;
    &lt;/bean&gt;
    &lt;context:component-scan base-package=&quot;pers.dao&quot;/&gt;
    &lt;!--事务管理器--&gt;
    &lt;bean id=&quot;txManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;
        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;
    &lt;/bean&gt;

    &lt;bean id=&quot;transactionTemplate&quot; class=&quot;org.springframework.transaction.support.TransactionTemplate&quot;&gt;
        &lt;property name=&quot;transactionManager&quot; ref=&quot;txManager&quot;/&gt;
    &lt;/bean&gt;

	&lt;!--声明式事务--&gt;
    &lt;tx:advice id=&quot;myAdvice&quot; transaction-manager=&quot;txManager&quot;&gt;
        &lt;tx:attributes&gt;
        	&lt;!--任意方法--&gt;
            &lt;tx:method name=&quot;*&quot; /&gt;
        &lt;/tx:attributes&gt;
    &lt;/tx:advice&gt;
    &lt;!--aop配置，具体可以看笔者之前的文章--&gt;
    &lt;aop:config&gt;
    	&lt;!--定义切点，执行testXMLTranscation()时进行增强--&gt;
        &lt;aop:pointcut id=&quot;txPointCut&quot; expression=&quot;execution(* pers.dao.TestDao.testXMLTransaction())&quot;/&gt;
        &lt;!--切面--&gt;
        &lt;aop:advisor advice-ref=&quot;myAdvice&quot; pointcut-ref=&quot;txPointCut&quot;/&gt;
    &lt;/aop:config&gt;
&lt;/beans&gt;
</code></pre>
<h4 id="3212-测试">3.2.1.2 测试</h4>
<p>测试方法如下：</p>
<pre><code class="language-java">public void testXMLTransaction()
{
    String deleteSql = &quot;delete from MyUser&quot;;
    String saveSql = &quot;insert into MyUser(id,uname,usex) values(?,?,?)&quot;;
    Object [] parm = {1,&quot;张三&quot;,&quot;男&quot;};
    template.update(deleteSql);
    template.update(saveSql,parm);
    template.update(saveSql,parm);
}
</code></pre>
<p>运行结果：</p>
<figure data-type="image" tabindex="7"><img src="https://img-blog.csdnimg.cn/20200927071730346.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p>可以看到提示主键重复了。</p>
<h3 id="322-基于transactional">3.2.2 基于<code>@Transactional</code></h3>
<p><code>@Transactional</code>一般作用于类上，使得该类所有<code>public</code>方法都具有该类型的事务属性。下面创建一个示例。</p>
<h4 id="3221-配置文件">3.2.2.1 配置文件</h4>
<p>将上一个例子中的<code>&lt;aop:config&gt;</code>以及<code>&lt;tx:advice&gt;</code>注释掉，同时添加：</p>
<pre><code class="language-xml">&lt;!--事务管理的注解驱动器--&gt;
&lt;tx:annotation-driven transaction-manager=&quot;txManager&quot;/&gt;
</code></pre>
<figure data-type="image" tabindex="8"><img src="https://img-blog.csdnimg.cn/20200927071953724.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h4 id="3222-测试">3.2.2.2 测试</h4>
<p>测试方法与上一个例子一致，结果也是如此：</p>
<figure data-type="image" tabindex="9"><img src="https://img-blog.csdnimg.cn/2020092707204691.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="4-参考源码">4 参考源码</h1>
<p><code>Java</code>版：</p>
<ul>
<li><a href="https://github.com/2293736867/CSBookNotes/tree/master/Spring/Chapter5/JavaSpringInit">Github</a></li>
<li><a href="https://gitee.com/u6b7b5fc3/CSBookNotes/tree/master/Spring/Chapter5/JavaSpringInit">码云</a></li>
<li><a href="https://codechina.csdn.net/qq_27525611/CSBookNotes/-/tree/master/Spring/Chapter5/JavaSpringInit">CODE.CHINA</a></li>
</ul>
<p><code>Kotlin</code>版：</p>
<ul>
<li><a href="https://github.com/2293736867/CSBookNotes/tree/master/Spring/Chapter5/KotlinSpringInit">Github</a></li>
<li><a href="https://gitee.com/u6b7b5fc3/CSBookNotes/tree/master/Spring/Chapter5/KotlinSpringInit">码云</a></li>
<li><a href="https://codechina.csdn.net/qq_27525611/CSBookNotes/-/tree/master/Spring/Chapter5/KotlinSpringInit">CODE.CHINA</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日分享 第102期]]></title>
        <id>https://2293736867.github.io/post/mei-ri-fen-xiang-di-102-qi/</id>
        <link href="https://2293736867.github.io/post/mei-ri-fen-xiang-di-102-qi/">
        </link>
        <updated>2020-09-26T10:35:15.000Z</updated>
        <content type="html"><![CDATA[<h1 id="每日鸡汤">每日鸡汤</h1>
<blockquote>
<p>风水轮流转确实不假，但你在轴心上，这就很尴尬了。</p>
</blockquote>
<h1 id="每日诗词">每日诗词</h1>
<blockquote>
<p>居高声自远，非是籍秋风。<br>
——虞世南《蝉》</p>
</blockquote>
<h1 id="每日一句">每日一句</h1>
<blockquote>
<p>光，火交错，诞生了夕阳。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[为Github的README.md生成目录的小工具]]></title>
        <id>https://2293736867.github.io/post/wei-github-de-readmemd-sheng-cheng-mu-lu-de-xiao-gong-ju/</id>
        <link href="https://2293736867.github.io/post/wei-github-de-readmemd-sheng-cheng-mu-lu-de-xiao-gong-ju/">
        </link>
        <updated>2020-09-26T06:03:35.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-概述">1 概述</h1>
<p>因为<code>Github</code>的<code>README.md</code>文件<code>[TOC]</code>不生效，因此封装了一个别人已<a href="https://github.com/houbb/markdown-toc">封装好的<code>JAR</code>包</a>供大家使用。</p>
<h1 id="2-使用方法">2 使用方法</h1>
<p>用<code>Java</code>做的，只需要<code>JDK11</code>以上的环境：</p>
<pre><code class="language-bash">java -jar toc.jar 1.md  # 为1.md文件生成目录
java -jar toc.jar 1     # 为文件夹1内的.md生成目录
</code></pre>
<h1 id="3-jar包下载">3 <code>JAR</code>包下载</h1>
<ul>
<li><a href="https://github.com/2293736867/MarkdownTOCJava">Github</a></li>
<li><a href="https://gitee.com/u6b7b5fc3/MarkdownTOCJava">码云</a></li>
<li><a href="https://codechina.csdn.net/qq_27525611/MarkdownTOCJava">CODE.CHINA</a></li>
</ul>
<h1 id="4-其他">4 其他</h1>
<p>其实生成的方法不只一种，下面提供几个供参考：</p>
<ul>
<li><a href="https://github.com/ekalinin/github-markdown-toc">Go生成的，2.2k star</a></li>
<li><a href="https://github.com/jonschlinkert/markdown-toc">JS生成的，1.1k star</a></li>
<li><a href="https://www.jianshu.com/p/5294e0b3f9c0">通过脚本生成的</a></li>
</ul>
]]></content>
    </entry>
</feed>